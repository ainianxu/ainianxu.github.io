<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-12T14:42:16.289Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？</title>
    <link href="http://example.com/2022/04/12/%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E5%BD%93%E4%BD%A0%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5%E5%9C%B0%E5%9D%80%E5%B9%B6%E5%9B%9E%E8%BD%A6%E7%9A%84%E4%B8%80%E7%9E%AC%E9%97%B4%E5%88%B0%E9%A1%B5%E9%9D%A2%E8%83%BD%E5%A4%9F%E5%B1%95%E7%A4%BA%E5%9B%9E%E6%9D%A5%EF%BC%8C%E7%BB%8F%E5%8E%86%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>http://example.com/2022/04/12/%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E5%BD%93%E4%BD%A0%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5%E5%9C%B0%E5%9D%80%E5%B9%B6%E5%9B%9E%E8%BD%A6%E7%9A%84%E4%B8%80%E7%9E%AC%E9%97%B4%E5%88%B0%E9%A1%B5%E9%9D%A2%E8%83%BD%E5%A4%9F%E5%B1%95%E7%A4%BA%E5%9B%9E%E6%9D%A5%EF%BC%8C%E7%BB%8F%E5%8E%86%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/</id>
    <published>2022-04-12T02:42:02.000Z</published>
    <updated>2022-04-12T14:42:16.289Z</updated>
    
    <content type="html"><![CDATA[<p>（1）浏览器本身是一个客户端，当你输入URL的时候，首先浏览器会去请求DNS服务器，通过DNS获取相应的域名对应的IP<br>（2）然后通过IP地址找到IP对应的服务器后，要求建立TCP连接<br>（3）浏览器发送完HTTP Request（请求）包后，服务器接收到请求包之后才开始处理请求包<br>（4）在服务器收到请求之后，服务器调用自身服务，返回HTTP Response（响应）包<br>（5）客户端收到来自服务器的响应后开始渲染这个Response包里的主体（body），等收到全部的内容随后断开与该服务器之间的TCP连接。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;（1）浏览器本身是一个客户端，当你输入URL的时候，首先浏览器会去请求DNS服务器，通过DNS获取相应的域名对应的IP&lt;br&gt;（2）然后通过IP地址找到IP对应的服务器后，要求建立TCP连接&lt;br&gt;（3）浏览器发送完HTTP Request（请求）包后，服务器接收到请求包之</summary>
      
    
    
    
    
    <category term="面试题" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>请你谈谈网站是如何进行访问的</title>
    <link href="http://example.com/2022/04/12/%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E8%AF%B7%E4%BD%A0%E8%B0%88%E8%B0%88%E7%BD%91%E7%AB%99%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%AE%BF%E9%97%AE%E7%9A%84/"/>
    <id>http://example.com/2022/04/12/%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E8%AF%B7%E4%BD%A0%E8%B0%88%E8%B0%88%E7%BD%91%E7%AB%99%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%AE%BF%E9%97%AE%E7%9A%84/</id>
    <published>2022-04-12T02:38:04.000Z</published>
    <updated>2022-04-12T14:42:25.545Z</updated>
    
    <content type="html"><![CDATA[<ol><li>输入一个域名；回车 </li><li>检查本机的 C:\Windows\System32\drivers\etc\hosts配置文件下有没有这个域名映射；</li></ol><ul><li>有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问</li><li>没有：去DNS服务器找，找到的话就返回，找不到就返回找不到；</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/12/YtJjzAHWIaFg1iL.png"                      alt="image-20220412104107515.png"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;输入一个域名；回车 &lt;/li&gt;
&lt;li&gt;检查本机的 C:\Windows\System32\drivers\etc\hosts配置文件下有没有这个域名映射；&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程</summary>
      
    
    
    
    
    <category term="面试题" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud + Vue 前后端分离</title>
    <link href="http://example.com/2022/01/07/Spring%20Cloud%20+%20Vue%20%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    <id>http://example.com/2022/01/07/Spring%20Cloud%20+%20Vue%20%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/</id>
    <published>2022-01-07T02:50:36.000Z</published>
    <updated>2022-04-14T01:28:52.230Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1章-配置环境"><a href="#第1章-配置环境" class="headerlink" title="第1章 配置环境"></a>第1章 配置环境</h1><ul><li><p>在Spring官网中点进这个Initializr，配置你想要的。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/01/6wagXDIZQGcebUt.png"                      alt="image-20211023162707337"                ></p><ul><li>然后安装nodejs，在IDEA中的Local输入npm get registry；如果不是淘宝镜像，那么就输入这个npm set registry <a class="link"   href="http://registry.npm.taobao.org;再重新输入npm/" >http://registry.npm.taobao.org；再重新输入npm<i class="fas fa-external-link-alt"></i></a> get registry查看，等待他安装完配置即可。</li><li>再下载一个git</li></ul></li></ul><h1 id="第2章-使用Maven搭建SpringCloud项目"><a href="#第2章-使用Maven搭建SpringCloud项目" class="headerlink" title="第2章 使用Maven搭建SpringCloud项目"></a>第2章 使用Maven搭建SpringCloud项目</h1><h2 id="2-1-使用Eureka搭建注册中心"><a href="#2-1-使用Eureka搭建注册中心" class="headerlink" title="2-1 使用Eureka搭建注册中心"></a><strong>2-1 使用Eureka搭建注册中心</strong></h2><ul><li>Maven两大核心功能：依赖管理（Jar包管理）+构建项目（项目打包）</li><li>SpringCloud是管理多个SpringBoot应用的微服务框架</li><li>项目初始化，要把代码管理优先做好，不管是学习还是工作，养成阶段性提交代码的习惯，代码管理工具选择git。</li><li>一个项目里不是所有文件都需要提交到git中，.gitignore会帮我们自动排除。</li><li>SpringBoot之所以流行就是因为只需要一个类，只有一个main函数就可以启动Java项目。</li><li>Maven父子模块结构，父框架只需要一个pom.xml，子模块是正常的maven项目</li><li>SpringBoot默认继承Tomcat</li></ul><h2 id="2-2-搭建业务模块-system"><a href="#2-2-搭建业务模块-system" class="headerlink" title="2-2 搭建业务模块-system"></a><strong>2-2 搭建业务模块-system</strong></h2><hr><p>本章将介绍使用Maven搭建SpringCloud微服务项目，学习微服务核心组件：注册中心Eureka和路由Gateway。</p><hr><p>解决注册中心无法启动的问题：</p><ul><li><p>在resources文件下建立application.properties默认配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=eureka <span class="comment">//应用名字</span></span><br><span class="line">server.port=<span class="number">8761</span><span class="comment">//运行端口</span></span><br><span class="line">    <span class="comment">/*因为本身就是注册中心，所以下面必须是false*/</span></span><br><span class="line">eureka.client.fetch-registry=<span class="literal">false</span></span><br><span class="line">eureka.client.refresh-with-eureka=<span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>接下来需要在启动文件加注解：@EnableEurekaServer</p></li><li><p>version control窗口可以看到未提交的修改记录，也可以用看到整个项目包括其他人提交记录</p></li><li><p>springboot默认集成slf4框架，它定义了一些日志接口，规范日志输出，真正的实现是logback或者log4j，我们代码中写的都是slf4j的代码</p></li><li><p>一定要看好依赖项是否正确<a class="link"   href="https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies" >https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies<i class="fas fa-external-link-alt"></i></a></p></li><li><p>一般不用配置版本，用自带的好一些</p></li></ul><p>新建一个Maven子项目system</p><ul><li><p>2020版本idea version control 不见了 解决办法：可以进入Settings&#x2F;Preferences&#x2F;Version Control&#x2F;Commit将Use non-modal commit interface取消勾选</p></li><li><p>maven父子模块的配置：在子模块中使用parent标签指向父模块，在父模块中使用module标签引入子模块</p></li><li><p>只需添加两个依赖：添加依赖项发现他不主动下载了，因此我们就使用自己添加的阿里云镜像吧。在C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.3\plugins\maven\lib\maven3\conf的setting.xml中添加下面代码（注意是添加不是替换奥）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">&lt;id&gt;nexus-aliyun&lt;/id&gt;</span><br><span class="line">&lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">&lt;name&gt;Nexus aliyun&lt;/name&gt;</span><br><span class="line">&lt;url&gt;http:<span class="comment">//maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span></span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><ul><li>由于注册中心都是接口开放出去的，所以我们注解用的RestController（返回的json格式的数据），如果返回的是页面就用Controller</li></ul><p>将system注册到注册中心：（只需要改三个地方）</p><ul><li><p>第一个就是之前增加的那个client依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li><li><p>第二个就是在配置文件中增加配置，指向注册中心的地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=system</span><br><span class="line">server.port=<span class="number">9001</span></span><br><span class="line">eureka.client.service-url.defaultZone=http:<span class="comment">//localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>第三个就是在启动类里添加@EnableEurekaClient注解</p></li></ul><h2 id="2-3-搭建路由模块-gateway"><a href="#2-3-搭建路由模块-gateway" class="headerlink" title="2-3 搭建路由模块-gateway"></a><strong>2-3 搭建路由模块-gateway</strong></h2><ul><li>SpringCloud的网关组件这里我们使用gateway。</li><li>网关的主要功能：限流（流量控制）；重试（请求失败时重试，慎用）；跨域（前后端不在同一个域）；路由（转发请求）；鉴权（登陆校验，签名校验）等</li></ul><p>首先新建一个Maven子项目gateway：</p><ul><li><p>也是需要放入依赖的，然后修改相应配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li></ul><p>路由转发：将外部请求转发到实际的业务，模块进行处理。在application.properties添加如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=gateway</span><br><span class="line">server.port=<span class="number">9000</span></span><br><span class="line">eureka.client.service-url.defaultZone=http:<span class="comment">//localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line">spring.cloud.gateway.routes[<span class="number">0</span>].id=system </span><br><span class="line">spring.cloud.gateway.routes[<span class="number">0</span>].uri=http:<span class="comment">//192.168.0.105:9001</span></span><br><span class="line">spring.cloud.gateway.routes[<span class="number">0</span>].predicates[<span class="number">0</span>].name=Path</span><br><span class="line">spring.cloud.gateway.routes[<span class="number">0</span>].predicates[<span class="number">0</span>].args[<span class="number">0</span>]=/system<span class="comment">/**</span></span><br></pre></td></tr></table></figure><ul><li><p>目的就是将9001地址对外隐藏，暴露9000地址，访问的时：localhost:9000&#x2F;system&#x2F;*<em>，实际处理是localhost:9001&#x2F;system&#x2F;</em> * *</p></li><li><p>我们想要在之前test前面加一个&#x2F;system，可以在system模块下的application.properties中添加：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.servlet.context-path=/system <span class="comment">//这样/system就算是根目录，以后所有添加下的文件夹都在它下面</span></span><br></pre></td></tr></table></figure><p>这时<a class="link"   href="http://192.168.0.64:9001/system/test" >192.168.0.64:9001&#x2F;system&#x2F;test<i class="fas fa-external-link-alt"></i></a>和<a class="link"   href="http://192.168.0.64:9001/system/test" >192.168.0.64:9000&#x2F;system&#x2F;test<i class="fas fa-external-link-alt"></i></a>都可以进行访问</p><h1 id="第3章-SpringBoot项目技术整合"><a href="#第3章-SpringBoot项目技术整合" class="headerlink" title="第3章 SpringBoot项目技术整合"></a>第3章 SpringBoot项目技术整合</h1><hr><p>本章将介绍单个SpringBoot的纯后端应用的搭建，集成Mybatis框架及代码生成器，并集成热部署DevTools，学习单个应用的环境搭建及提高开发效率的准备。</p><hr><h2 id="3-1-集成持久层框架Mybatis"><a href="#3-1-集成持久层框架Mybatis" class="headerlink" title="3-1 集成持久层框架Mybatis"></a>3-1 集成持久层框架Mybatis</h2><hr><p>持久层：负责数据持久化，即将数据存储到数据库或硬盘等，断电也不会丢失数据。Mybatis是半自动ORM，Mybatis可以操作的花样更多，是首选的持久层框架。</p><hr><p>System模块集成Mybatis框架：</p><ul><li><p>数据库的准备工作1：创建一个本项目独用的数据库courseimooc</p></li><li><p>数据库的准备工作2：创建courseimooc数据库专用用户，创建用户时，主机填写：localhost表示创建的用户，只能本机登陆数据库，远程不能登陆；填写%，表示允许本地和远程登陆数据库。然后对用户添加权限</p></li><li><p>数据库的准备工作3：创建一张表</p></li><li><p>引入Mybatis架包：Maven父子模块增加jar包依赖：先在父pom.xml中增加jar包依赖，再在子pom.xml中增加jar包依赖，子pom.xml不带版本号。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 集成mybatis --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;<span class="number">1.3</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;<span class="number">8.0</span><span class="number">.23</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>还得另外配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/courseimooc?characterEncoding=UTF8&amp;autoReconnect=true</span></span><br><span class="line">spring.datasource.username=courseimooc</span><br><span class="line">spring.datasource.password=ainianfzx521</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver <span class="comment">//增加mysql驱动</span></span><br><span class="line">mybatis.mapper-locations=classpath:/mapper<span class="comment">/*.xml</span></span><br></pre></td></tr></table></figure></li></ul><p>mybatis使用实例：增加TestMapper.xml，放在resources&#x2F;mapper目录下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.course.system.mapper.TestMapper&quot;</span>&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;list&quot;</span> resultType=<span class="string">&quot;com.course.system.domain.Test&quot;</span>&gt;</span><br><span class="line">        select `id` ,`name` from `test`;<span class="comment">//真傻逼奥，记得加分号</span></span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>一个项目一般会有controller，service，mapper三层，其中controller是请求的入口，service负责逻辑，mapper负责持久层</p><h2 id="3-2-项目优化"><a href="#3-2-项目优化" class="headerlink" title="3-2 项目优化"></a>3-2 项目优化</h2><ul><li>记住你的mysql版本号一定要对。</li><li>改时区法一：手动在 URL 上设置<code>jdbc:mysql://localhost:3306/数据库名?serverTimezone</code></li><li>法二：</li><li><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/01/Ub2K4BpOfnsTL1q.png"                      alt="在这里插入图片描述"                ></li><li>又他妈碰到了个问题，xml文件无法识别数据库的表名和字段，无法点击表名链接到数据源。在此我首先修改了<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/01/iLqs67rPvKkJ5Mo.png"                      alt="image-20211027202858490"                ></li></ul><p>其次改了这才好：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/01/fyIkR32SCBomFKj.png"                      alt="image-20211027203133551"                ></p><ul><li>查看差异：ctrl+alt+shift+D</li></ul><p>集成热部署DevTools:哪个包需要增加就在哪个包pom.xml下添加依赖。</p><ul><li><p>增加devtools依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 热部署DevTools --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>设置idea，ctrl+alt+s打开设置窗口，找到Compiler，自动构建就是代码编写时，自动编译。<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/01/49GfABl6Ls3EVNc.png"                      alt="image-20211028171821556"                ></p></li><li><p>要在运行时自动编译<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/01/oQZiAwaDeJnjqBE.png"                      alt="image-20211028173953487"                ></p></li><li><p>随着项目的增加热部署的优势就更能体现了</p></li></ul><p>优化mybatis日志：在system的application.properties中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.level.com.course.system.mapper=trace</span><br></pre></td></tr></table></figure><h2 id="3-3-搭建服务模块-server"><a href="#3-3-搭建服务模块-server" class="headerlink" title="3-3 搭建服务模块-server"></a>3-3 搭建服务模块-server</h2><hr><p>为什么要构建公共模块？业务拓展后，需要对表加一个字段，这时，如果要保持实体类和表结构一致，则所有模块的实体都要改，费时费力，如果哪个模块用到新的字段，就改哪实体类，时间一长，所有的实体类和表都对应不上，并且这种策略不能用mybatis代码生成器。</p><hr><ul><li><p>新建公共模块-server：</p><ol><li>就是把system的com.course.system全部复制到server中，然后将system中的pom.xml中的依赖复制到server中，删除第一个配置client。</li></ol></li><li><p>system集成server模块：</p><ol><li><p>在course中引入架包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;com.course&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;server&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;<span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="2"><li><p>迁移完后记得在systemapplication中添加@ComponentScan(“com.course”)，如果类中用了@Controller，@Repository，@Service,@Component四大注解标识之一了，那么如果不加上@ComponentScan，Spring就不会自动扫描类上的四大注解中的任何一个，那么四大注解下的类就不会被Spring扫描到，更不会装入Spring容器中，因此你配置的四大注解就失去了作用。</p></li><li><p>ctrl+shift+f代表查看代码在哪有</p></li></ol><ul><li>集中配置<ol><li>如果直接将system中的application.properties复制到server中，那么server作为jar包被依赖，它的resources下的配置文件会和system下的配置文件冲突，生效的还是system的。那么我们应该怎么做呢？我们要做的就是在resources下新建一个config文件夹，将其移动到该文件夹中，spring默认会读config下的配置文件。<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/01/d8EMgiFlxkytILr.png"                      alt="image-20211029160302143"                ></li></ol></li></ul><h2 id="3-4-集成mybatis-generator"><a href="#3-4-集成mybatis-generator" class="headerlink" title="3-4 集成mybatis generator"></a>3-4 集成mybatis generator</h2><ul><li><p>idea集成mybatis-generator生成mybatis代码</p><ol><li><p>父pom.xml里增加mybatic-generator插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- mybatis generator 自动生成代码插件 --&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">   &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;<span class="number">1.3</span><span class="number">.7</span>&lt;/version&gt;</span><br><span class="line">   &lt;configuration&gt;</span><br><span class="line">      &lt;configurationFile&gt;src/main/resources/generator/generatorConfig.xml&lt;/configurationFile&gt;</span><br><span class="line">      &lt;overwrite&gt;<span class="literal">true</span>&lt;/overwrite&gt;</span><br><span class="line">      &lt;verbose&gt;<span class="literal">true</span>&lt;/verbose&gt;</span><br><span class="line">   &lt;/configuration&gt;</span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;<span class="number">8.0</span><span class="number">.23</span>&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></li><li><p>添加配置文件generatorConfig.xml：加上反引号&#96;&#96;后，一些mysql的关键字就可以当作表明或者字段名来使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line">    &lt;context id=<span class="string">&quot;Mysql&quot;</span> targetRuntime=<span class="string">&quot;MyBatis3&quot;</span> defaultModelType=<span class="string">&quot;flat&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=<span class="string">&quot;autoDelimitKeywords&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;beginningDelimiter&quot;</span> value=<span class="string">&quot;`&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;endingDelimiter&quot;</span> value=<span class="string">&quot;`&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--覆盖生成XML文件--&gt;</span><br><span class="line">        &lt;plugin type=<span class="string">&quot;org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin&quot;</span> /&gt;</span><br><span class="line">        &lt;!-- 生成的实体类添加toString()方法 --&gt;</span><br><span class="line">        &lt;plugin type=<span class="string">&quot;org.mybatis.generator.plugins.ToStringPlugin&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 不生成注释 --&gt;</span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;suppressAllComments&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">        &lt;/commentGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;jdbcConnection driverClass=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span><br><span class="line">                        connectionURL=<span class="string">&quot;jdbc:mysql://localhost:3306/courseimooc&quot;</span></span><br><span class="line">                        userId=<span class="string">&quot;courseimooc&quot;</span></span><br><span class="line">                        password=<span class="string">&quot;ainianfzx521&quot;</span>&gt;</span><br><span class="line">        &lt;/jdbcConnection&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- domain类的位置 --&gt;</span><br><span class="line">        &lt;javaModelGenerator targetProject=<span class="string">&quot;src\main\java&quot;</span></span><br><span class="line">                            targetPackage=<span class="string">&quot;com.course.server.domain&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- mapper xml的位置 --&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetProject=<span class="string">&quot;src\main\resources&quot;</span></span><br><span class="line">                         targetPackage=<span class="string">&quot;mapper&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- mapper类的位置 --&gt;</span><br><span class="line">        &lt;javaClientGenerator targetProject=<span class="string">&quot;src\main\java&quot;</span></span><br><span class="line">                             targetPackage=<span class="string">&quot;com.course.server.mapper&quot;</span></span><br><span class="line">                             type=<span class="string">&quot;XMLMAPPER&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--        &lt;table tableName=<span class="string">&quot;test&quot;</span> domainObjectName=<span class="string">&quot;Test&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;table tableName=<span class="string">&quot;chapter&quot;</span> domainObjectName=<span class="string">&quot;Chapter&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;table tableName=<span class="string">&quot;section&quot;</span> domainObjectName=<span class="string">&quot;Section&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;table tableName=<span class="string">&quot;course&quot;</span> domainObjectName=<span class="string">&quot;Course&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;table tableName=<span class="string">&quot;course_content&quot;</span> domainObjectName=<span class="string">&quot;CourseContent&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;table tableName=<span class="string">&quot;course_content_file&quot;</span> domainObjectName=<span class="string">&quot;CourseContentFile&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;table tableName=<span class="string">&quot;teacher&quot;</span> domainObjectName=<span class="string">&quot;Teacher&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;table tableName=<span class="string">&quot;file&quot;</span> domainObjectName=<span class="string">&quot;File&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;table tableName=<span class="string">&quot;user&quot;</span> domainObjectName=<span class="string">&quot;User&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;table tableName=<span class="string">&quot;resource&quot;</span> domainObjectName=<span class="string">&quot;Resource&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;table tableName=<span class="string">&quot;role&quot;</span> domainObjectName=<span class="string">&quot;Role&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;table tableName=<span class="string">&quot;role_resource&quot;</span> domainObjectName=<span class="string">&quot;RoleResource&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;table tableName=<span class="string">&quot;role_user&quot;</span> domainObjectName=<span class="string">&quot;RoleUser&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;table tableName=<span class="string">&quot;member&quot;</span> domainObjectName=<span class="string">&quot;Member&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;table tableName=<span class="string">&quot;sms&quot;</span> domainObjectName=<span class="string">&quot;Sms&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;table tableName=<span class="string">&quot;test&quot;</span> domainObjectName=<span class="string">&quot;Test&quot;</span>/&gt;--&gt;</span><br><span class="line">        &lt;table tableName=<span class="string">&quot;chapter&quot;</span> domainObjectName=<span class="string">&quot;chapter&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建一个maven启动命令mybatis-generator:generate  -e</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/01/9TC2ZJKRAFqal75.png"                      alt="image-20211029163400461"                ></p><p>generatorConfig.xml是放在server模块下，所以这里选择server目录。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/01/1bKJph4X7RTq26v.png"                      alt="image-20211029163942572"                ></p></li><li><p>解决mapper.xml重复生成代码问题：业务扩展，表结构发生变动时，需要重新生成持久层代码。这对编码有一个要求：生成器生成的四个文件绝对不可以手动修改。</p></li><li><p>generatorConfig.xml里增加这个，原来的xml会被覆盖，所以绝对不要在生成的xml手动修改代码，因为下次再生成时，手动修改的代码会被覆盖掉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--覆盖生成XML文件--&gt;</span><br><span class="line">&lt;plugin type=<span class="string">&quot;org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></li><li><p>通过Example，可以帮助我们写入where、order by，distinct等，需要熟练掌握，可以极大提高单表开发效率。</p></li><li><p>小技巧：ctrl+alt+v，快速生成一个变量</p></li><li><p>要按多个条件查询数据库，在java中表达式后面继续.andXXX；？是jdbc占位符，可用于防注入攻击，mybatis底层也是jdbc实现的</p></li></ul><h1 id="第4章-使用Vue-cli-4搭建管理控台"><a href="#第4章-使用Vue-cli-4搭建管理控台" class="headerlink" title="第4章 使用Vue cli 4搭建管理控台"></a>第4章 使用Vue cli 4搭建管理控台</h1><hr><p>本章将介绍Vue cli和bootstrap的使用。Vue是MVVM框架，其代码结构类似于Angular、微信小程序。Bootstrap是一个响应式框架，一套代码可适应PC，手机屏幕。本章使用Vue cli 4 + Bootstrap 3搭建控台管理应用，学习单页面应用搭建及响应式设计</p><hr><h2 id="4-1-使用vue-cli创建admin项目"><a href="#4-1-使用vue-cli创建admin项目" class="headerlink" title="4-1 使用vue cli创建admin项目"></a>4-1 使用vue cli创建admin项目</h2><ul><li>vue用法一：直接引入vue.js，适用于现成的jsp项目，thymeleaf项目等。这种用法不算前后端分离，发布时依然是前后端一起部署的。</li><li>vue用法二：使用vuecli新建项目，前后端分离开发，分离部署</li><li>idea默认使用windows自带的命令行，可以通过设置改为git bash<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/01/M5hdT9NGqlz6ELA.png"                      alt="image-20211030102237979"                ></li><li>vuecli安装按照这个来<a class="link"   href="https://cli.vuejs.org/zh/guide/installation.html" >https://cli.vuejs.org/zh/guide/installation.html<i class="fas fa-external-link-alt"></i></a></li><li>vuecli初始安装带了babel和eslint插件，babel：JavaScript编译器；eslint：代码规范检查</li><li>main.js是vue入口文件，用来初始化vue实例并集成所需要的插件</li></ul><h2 id="4-2-集成bootstrap后台管理模板ace"><a href="#4-2-集成bootstrap后台管理模板ace" class="headerlink" title="4-2 集成bootstrap后台管理模板ace"></a>4-2 集成bootstrap后台管理模板ace</h2><hr><p>Bootstrap来自推特，是目前最受欢迎的响应式框架。它基于html，css，JavaScript，简单易扩展，因此有很多第三方模板，栅格系统是bootstrap的布局核心。</p><hr><ul><li>ace admin模板介绍：<a class="link"   href="http://ace.jeka.by/" >http://ace.jeka.by/<i class="fas fa-external-link-alt"></i></a></li><li>admin增加ace模板：<ol><li>批量替换小技巧：找到要批量替换的公共点，可以包含特殊字符，”&#x3D;等，替换的时候，也加上这些特殊字符。ctrl+r替换</li><li>建议把下面两个勾选，方便快速定位<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/01/udvR7gNbxGrLBPe.png"                      alt="image-20211030152932223"                ></li><li>eslintrc.js,用于检测代码规范。是一把双刃剑，一些检测没必要，可以通过修改配置禁用掉</li></ol></li></ul><h2 id="4-3-集成路由vue-route"><a href="#4-3-集成路由vue-route" class="headerlink" title="4-3 集成路由vue-route"></a>4-3 集成路由vue-route</h2><ul><li><p>这里使用vue-route的版本是v3.5.3   npm install <a class="link"   href="mailto:&#x76;&#117;&#101;&#45;&#x72;&#111;&#117;&#116;&#x65;&#114;&#64;&#51;&#46;&#53;&#x2e;&#51;" >&#x76;&#117;&#101;&#45;&#x72;&#111;&#117;&#116;&#x65;&#114;&#64;&#51;&#46;&#53;&#x2e;&#51;<i class="fas fa-external-link-alt"></i></a></p></li><li><p>在命令行cd admin 然后npm install –save vue-router。</p></li><li><p>router-view是路由嵌套标签，一般配合父子路由使用</p></li><li><p>ctrl+alt+l：格式化代码</p></li><li><pre><code class="java">&lt;template&gt;下只能由一个div标签，所以需要用一个div把多个div标签括起来<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ctrl+f：搜索页面</span><br><span class="line"></span><br><span class="line">- 在&lt;script&gt;标签里写的js代码是全局的，会影响其他页面</span><br><span class="line"></span><br><span class="line">## 4-4 控台欢迎页面开发</span><br><span class="line"></span><br><span class="line">mouted的使用：解决两个页面样式冲突问题</span><br><span class="line"></span><br><span class="line">- created执行更早，在界面渲染之前执行，常用于加载初始化数据。mounted在界面渲染之后执行，常用于对界面元素的初始化操作</span><br><span class="line">- 组件每次加载，mounted都会再次执行</span><br><span class="line"></span><br><span class="line">使用router-view增加welcome子组件：</span><br><span class="line"></span><br><span class="line">- router-view一般配合子路由使用；子路由配置不要以“/”开头</span><br><span class="line">- 在哪使用welcome就在哪加入&lt;router-view/&gt;</span><br><span class="line"></span><br><span class="line">控台页面元素修改：</span><br><span class="line"></span><br><span class="line">- 响应式设计的一个体现：根据屏幕分辨率不同，弹窗显示在不同位置</span><br><span class="line">- 在git中提交记录选择checkout菜单，可以让本地代码回到过去某一个提交点</span><br><span class="line">- ctrl+y：删除当前选中的行，只要某一行有部分被选中，这一行就会全部删除</span><br><span class="line">- data-toggle：用于按钮和模态框（弹出层）的事件绑定</span><br><span class="line">- active open：当前菜单是激活样式，并且把当前菜单的子菜单展开</span><br><span class="line"></span><br><span class="line"># 第5章 单表管理功能前后端开发</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">本章将演示控台单表增删改查的前后端开发，重点学习前后端数据交互，Vue ajax库axios的使用，使用Vue自定义组件制作分页组件，Mybatis分页插件pagehelper的使用等功能。介绍常用的公共组件的使用，包括前端确认框、提示框、等待框，后端复制工具类、统一日志AOP等。</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">## 5-1 大章列表查询功能开发1 </span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">完成单表的增删改查：</span><br><span class="line"></span><br><span class="line">- 控台单表增删改查的前后端开发，重点学习前后端数据交互，vue ajax库axios的使用</span><br><span class="line"></span><br><span class="line">通用组件的开发：分页、确认框、提示框、等待框等：</span><br><span class="line"></span><br><span class="line">- 常用的公共组件：确认框、提示框、等待框，统一日志拦截器等。使用vue自定义组件制作分页组件，mybatis分页插件pagehelper的使用</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">增加maven子项目business：</span><br><span class="line"></span><br><span class="line">- shift+F6重命名。重命名就是重构，会将所有引用到的地方都一起改名，甚至是注释掉的代码也会一起修改。</span><br><span class="line">- 将system中一堆文件复制过去</span><br><span class="line"></span><br><span class="line">大章表设计及持久层代码生成：</span><br><span class="line"></span><br><span class="line">- DTO：数据传输对象，用于数据传输。</span><br><span class="line">- domain内的实体，是mybatis-generator自动生成的，不允许手动修改，一旦修改，再次生成实体类时，所做的修改会被覆盖。</span><br><span class="line">- domain作用于service和mapper；dto作用于controller和service。</span><br><span class="line">- ctrl+alt+v为表达式生成一个变量</span><br><span class="line">- BeanUtils是Spring提供的一个工具类，用于实体间的复制。后续会对BeanUtils做封闭，简化使用，提高开发效率。</span><br><span class="line"></span><br><span class="line">## 5-2 大章列表查询功能开发2</span><br><span class="line"></span><br><span class="line">新增chapter子页面并添加子路由，并使用假数据制作表格：</span><br><span class="line"></span><br><span class="line">- shift+tab，反向缩进</span><br><span class="line"></span><br><span class="line">点击sidebar实现菜单页面跳转：</span><br><span class="line"></span><br><span class="line">- 二级菜单要显示出激活模式，只需要添加active样式</span><br><span class="line">- silbings,jquery的方法，获取所有兄弟节点</span><br><span class="line">- &lt;router-link to=&quot;&quot;&gt;类似于&lt;a href=&quot;&quot;&gt;，用于链接跳转</span><br><span class="line">- 约定id的命名要和路由相关</span><br><span class="line"></span><br><span class="line">通用的sidebar点击激活样式方法：</span><br><span class="line"></span><br><span class="line">- vue内置的watch，用来监测vue实例上的数据变动，$route也是一个变量。</span><br><span class="line">- 在router.js添加name，是为了通过name属性值，得到菜单id的值。约定优于配置</span><br><span class="line">- 在admin.vue添加watch，此时如果从login页面登陆跳转到welcome页面，welcome并不会有激活样式，这里的watch，只在admin下面的子组件互相跳转时有用。为了解决这个问题，需要在初始化也执行一句激活代码。</span><br><span class="line">- 还有一点需要注意，我们要把this变成本地变量，js中有this关键字，代表当前执行方法的对象。养成习惯，在方法开头，声明本地变量_this代替this。</span><br><span class="line"></span><br><span class="line">## 5-3 大章列表查询功能开发3</span><br><span class="line"></span><br><span class="line">集成axios完成前后端交互</span><br><span class="line"></span><br><span class="line">- --save：在pacjage.json添加依赖。（不加--save的话，只是去下载插件，项目中并没有依赖插件） npm install axios --save</span><br><span class="line"></span><br><span class="line">- 以vue属性的方式使用axios：修改main.js</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  import axios from &quot;axios&quot;;</span><br><span class="line">  </span><br><span class="line">  Vue.prototype.$ajax = axios;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>Vue.prototype.xxx，可以理解为Vue组件的全局变量。可以在任意Vue组件中，使用this.xxx来获取这个值。$是代表Vue全局 在chapter.vue中使用$ajax</p></li><li><pre><code class="java">list()&#123;  let _this=this;  _this.$ajax.get(&#39;http://192.168.0.105:9002/business/chapter/list&#39;).then((respond)=&gt;&#123;    console.log(&quot;查询大章列表结果:&quot;,respond);  &#125;)&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- CORS，跨站点资源分享，属于跨域问题，同个IP的不同端口间的访问也属于跨域，前后端分离必然有跨域问题。解决跨域问题：增加CorsConfiguration.java在server中</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  package com.course.server.config;</span><br><span class="line">  </span><br><span class="line">  import org.springframework.context.annotation.Configuration;</span><br><span class="line">  import org.springframework.web.cors.CorsConfiguration;</span><br><span class="line">  import org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line">  import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line">  </span><br><span class="line">  @Configuration</span><br><span class="line">  public class CorsConfig implements WebMvcConfigurer &#123;</span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      public void addCorsMappings(CorsRegistry registry) &#123;</span><br><span class="line">          registry.addMapping(&quot;/**&quot;)</span><br><span class="line">                  .allowedOrigins(&quot;*&quot;)</span><br><span class="line">                  .allowedHeaders(CorsConfiguration.ALL)</span><br><span class="line">                  .allowedMethods(CorsConfiguration.ALL)</span><br><span class="line">                  .allowCredentials(true)</span><br><span class="line">                  .maxAge(3600); // 1小时内不需要再预检（发OPTIONS请求）</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></code></pre></li><li><p>ctrl+shift++：展开所有层级；+-：收缩所有层级</p></li><li><p>使用data定义组件内的变量，可以用于做双向数据绑定。</p></li><li><p>显示真实数据就是使用data定义变量，定义一个数组，在methods中将查询到的结果返回，再在特定的行里面引用样式的数据。</p></li><li><p>没用了CorsResponseHeaderFilter.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.course.server.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.NettyWriteResponseFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跨域请求头重复处理过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsResponseHeaderFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 指定此过滤器位于NettyWriteResponseFilter之后</span></span><br><span class="line">        <span class="comment">// 即待处理完响应体后接着处理响应头</span></span><br><span class="line">        <span class="keyword">return</span> NettyWriteResponseFilter.WRITE_RESPONSE_FILTER_ORDER + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange).then(Mono.defer(() -&gt; &#123;</span><br><span class="line">            exchange.getResponse().getHeaders().entrySet().stream()</span><br><span class="line">                    .filter(kv -&gt; (kv.getValue() != <span class="literal">null</span> &amp;&amp; kv.getValue().size() &gt; <span class="number">1</span>))</span><br><span class="line">                    .filter(kv -&gt; (kv.getKey().equals(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN)</span><br><span class="line">                            || kv.getKey().equals(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS)))</span><br><span class="line">                    .forEach(kv -&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        kv.setValue(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;() &#123;&#123;</span><br><span class="line">                            add(kv.getValue().get(<span class="number">0</span>));</span><br><span class="line">                        &#125;&#125;);</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>使用gateway路由转发：使用gateway路由转发，vue页面只访问gateway</p><ul><li><p>单个SpringBoot应用使用CorsConfig解决跨域问题。使用SpringCloud Gateway的，使用CorsWebFilter解决跨域问题。</p></li><li><p>现在统一在gateway中使用跨域配置，在GatewayApplication.java中添加配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.course.gateway;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.reactive.CorsWebFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.util.pattern.PathPatternParser;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(GatewayApplication.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">SpringApplication</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(GatewayApplication.class);</span><br><span class="line"><span class="type">Environment</span> <span class="variable">env</span> <span class="operator">=</span> app.run(args).getEnvironment();</span><br><span class="line">LOG.info(<span class="string">&quot;启动成功！！&quot;</span>);</span><br><span class="line">LOG.info(<span class="string">&quot;Gateway地址: \thttp://127.0.0.1:&#123;&#125;&quot;</span>, env.getProperty(<span class="string">&quot;server.port&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置跨域</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CorsWebFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line"></span><br><span class="line">config.setAllowCredentials(Boolean.TRUE);</span><br><span class="line">config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">config.setMaxAge(<span class="number">3600L</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>(<span class="keyword">new</span> <span class="title class_">PathPatternParser</span>());</span><br><span class="line">source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsWebFilter</span>(source);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>如果配置的是ip端口，那么发布到生产时就可能会访问不到，就算配置了maven多环境，也需要提前知道上线后的IP和端口，因此就需要lb:&#x2F;&#x2F;(负载均衡)loadbalance：使用lb:&#x2F;&#x2F;+注册中心名字作为路由转发</p></li><li><pre><code class="java">spring.cloud.gateway.routes[1].uri=http://192.168.0.105:9002//替换spring.cloud.gateway.routes[1].uri=lb://business<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 5-4 分页功能开发</span><br><span class="line"></span><br><span class="line">集成分页插件pagehelper:</span><br><span class="line"></span><br><span class="line">- mybatis-generator生成的代码是不带分页功能的，使用pagehelper插件来拓展分页功能。</span><br><span class="line"></span><br><span class="line">- 首先在course的pom.xml添加插件依赖，其次server中也添加，不过没有版本号</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  &lt;!-- mybatis分页插件pagehelper --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.2.10&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>使用就是在ChapterService中添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PageHelper.startPage(<span class="number">1</span>,<span class="number">1</span>);<span class="comment">//查询第一条语句</span></span><br></pre></td></tr></table></figure></li><li><p>分页功能的关键字：limit。从日志看出该sql执行的是limit 1，相当于limit 0 1，即从第0行开始，查1条。</p></li><li><p>插件分页语句规则：调用startPage方法之后，执行的第一个select语句会进行分页。</p></li><li><p>分页查询功能需要两条sql，一条是查总记录数（通过每页条数计算出总共有多少页），一条是查当前页的记录。</p></li></ul><p>分页参数前后端交互：分页参数前后端交互，axios的post请求默认是以流的形式传递参数，所以controller里的参数要加@RequestBody注解</p><ul><li><p>使用泛型的地方都可以用Object代替，但是泛型可以在编译期就发现问题，并且避免了代码中写强制类型转换。</p></li><li><p>接口请求参数传递，尽量使用post。使用get请求在url里拼参数的话，会使url变得很长，有些浏览器或服务器会对url长度做限制，导致请求失败。</p></li><li><p>日志输出时，变量使用点位符，比如LOG.info(“输出：id&#x3D;{},姓名&#x3D;{},id,name”)，而不是LOG.info(“输出：id&#x3D;”+id+”,姓名&#x3D;”+name)</p></li><li><p>&#96;&#96;&#96;java<br>@RequestBody&#x2F;&#x2F;在controller中使用流的形式和$ajax的post相对应</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##   5-5前端分页组件的使用 </span><br><span class="line"></span><br><span class="line">增加一个刷新按钮：</span><br><span class="line"></span><br><span class="line">- fa样式是fontawesome图标，可以百度搜“fontawesome”查看所有图标的样式</span><br><span class="line">- v-bind:list=&quot;list&quot;，前面的list，是分页组件暴露出来的一个回调方法，后面的list，是chapter组件的list方法。</span><br><span class="line">- props，定义父组件向子组件传递的参数，可以是一个函数或数据。本组件中暴漏了两个参数list和itemCount给外部。</span><br><span class="line"></span><br><span class="line">```vue</span><br><span class="line">&lt;p&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;list()&quot; class=&quot;btn btn-white btn-default btn-round&quot;&gt;</span><br><span class="line">    &lt;i class=&quot;ace-icon fa fa-refresh red2&quot;&gt;&lt;/i&gt;</span><br><span class="line">    刷新</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure></li></ul><p>前端分页组件的使用：</p><ul><li><p>首先在admin软件包中的components添加pagination.vue</p></li><li><p>&#96;&#96;&#96;java</p><template>  <div class="pagination" role="group" aria-label="分页">    <button type="button" class="btn btn-default btn-white btn-round"             v-bind:disabled="page === 1"            v-on:click="selectPage(1)">      1    </button>    <button type="button" class="btn btn-default btn-white btn-round"             v-bind:disabled="page === 1"            v-on:click="selectPage(page - 1)">      上一页    </button>    <button v-for="p in pages" v-bind:id="'page-' + p"             type="button" class="btn btn-default btn-white btn-round"            v-bind:class="{'btn-primary active':page == p}"             v-on:click="selectPage(p)">          </button>    <button type="button" class="btn btn-default btn-white btn-round"             v-bind:disabled="page === pageTotal"            v-on:click="selectPage(page + 1)">      下一页    </button>    <button type="button" class="btn btn-default btn-white btn-round"            v-bind:disabled="page === pageTotal"            v-on:click="selectPage(pageTotal)">    这是两个大括号里面是 分页总数||1    </button>    &nbsp;    <span class="m--padding-10">        每页        <select v-model="size">            <option value="1">1</option>            <option value="5">5</option>            <option value="10">10</option>            <option value="20">20</option>            <option value="50">50</option>            <option value="100">100</option>        </select>        条，共【】条    </span>  </div></template><script>  export default {    name: 'pagination',    props: {      list: {        type: Function,        default: null      },      itemCount: Number // 显示的页码数，比如总共有100页，只显示10页，其它用省略号表示    },    data: function () {      return {        total: 0, // 总行数        size: 10, // 每页条数        page: 0, // 当前页码        pageTotal: 0, // 总页数        pages: [], // 显示的页码数组      }    },    methods: {      /**       * 渲染分页组件       * @param page       * @param total       */      render(page, total) {        let _this = this;        _this.page = page;        _this.total = total;        _this.pageTotal = Math.ceil(total / _this.size);        _this.pages = _this.getPageItems(_this.pageTotal, page, _this.itemCount || 5);      },      /**       * 查询某一页       * @param page       */      selectPage(page) {        let _this = this;        if (page < 1) {          page = 1;        }        if (page > _this.pageTotal) {          page = _this.pageTotal;        }        if (this.page !== page) {          _this.page = page;          if (_this.list) {            _this.list(page);          }        }      },      /**       * 当前要显示在页面上的页码       * @param total       * @param current       * @param length       * @returns {Array}       */      getPageItems(total, current, length) {        let items = [];        if (length >= total) {          for (let i = 1; i <= total; i++) {            items.push(i);          }        } else {          let base = 0;          // 前移          if (current - 0 > Math.floor((length - 1) / 2)) {            // 后移            base = Math.min(total, current - 0 + Math.ceil((length - 1) / 2)) - length;          }          for (let i = 1; i <= length; i++) {            items.push(base + i);          }        }        return items;      }    }  }</script><style scoped>  .pagination {    vertical-align: middle !important;    font-size: 16px;    margin-top: 0;    margin-bottom: 10px;  }  .pagination button {    margin-right: 5px;  }  .btn-primary.active {    background-color: #2f7bba !important;    border-color: #27689d !important;    color: white !important;    font-weight: 600;  }  /*.pagination select {*/  /*vertical-align: middle !important;*/  /*font-size: 16px;*/  /*margin-top: 0;*/  /*}*/</style><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 其次在chapter.vue中：</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;script&gt;import Pagination from &quot;../../components/pagination&quot;;&lt;/script&gt;</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">  &lt;pagination ref=&quot;pagination&quot; v-bind:list=&quot;list&quot; v-bind:itemCount=&quot;8&quot;&gt;&lt;/pagination&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">      components: &#123;Pagination&#125;,&#125;</span><br><span class="line">  list(page) &#123;</span><br><span class="line">          let _this = this;</span><br><span class="line">          Loading.show();</span><br><span class="line">          _this.$ajax.post(process.env.VUE_APP_SERVER + &#x27;/business/admin/chapter/list&#x27;, &#123;</span><br><span class="line">            page: page,</span><br><span class="line">            size: _this.$refs.pagination.size,</span><br><span class="line">          &#125;).then((response)=&gt;&#123;</span><br><span class="line">    let resp = response.data;</span><br><span class="line">            _this.chapters = resp.list;</span><br><span class="line">            _this.$refs.pagination.render(page, resp.total);</span><br><span class="line">  </span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-6-增加新增大章功能"><a href="#5-6-增加新增大章功能" class="headerlink" title="5-6 增加新增大章功能"></a>5-6 增加新增大章功能</h2><p>页面设计与前端代码开发：</p><ul><li>$(“.modal”)里的modal是css的选择器，模态框代码里有class&#x3D;”modal”样式，.modal()是内置的方法用于弹出或关闭模态框</li><li>可以使用$(“.modal”).modal({backdrop:’static’})；禁止点空白的地方关闭，某些场景需求会用到这个功能。</li><li><label for="id">有个场景会经常用到：点击复选框checkbox时选中，使用label for后，点击label的文字，也能选中复制框</li><li>模态框弹出和关闭，可以用js代码，也可以用button属性：data-dismiss&#x3D;”cdd选择器”关闭；data-toggle&#x3D;”css选择器”打开。</li></ul><p>短ID设计与后端代码开发：</p><ul><li><p>面试：为什么不用自增ID？自增ID至少有三个问题：1.ID是连续，容易被探测；2.需要+1次查询才能得到id的值；3.分布式存储中，id会出现重复。</p></li><li><p>uuid是根据机器、时间等多个维度生成的32位16进制数，有生之年不会重复。</p></li><li><p>短ID是根据将32位ID，转为62进制8位ID，减少存储空间。原理是将uuid转为10进制，再对62取余。也可以再添加两个符号，转为64进制。</p></li><li><p>在server中添加一个UuidUtil</p></li><li><pre><code class="java">package com.course.server.util;import java.util.UUID;public class UuidUtil &#123;    public static String[] chars = new String[] &#123; &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;,            &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;,            &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;, &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;,            &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;,            &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;O&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;, &quot;S&quot;, &quot;T&quot;, &quot;U&quot;, &quot;V&quot;,            &quot;W&quot;, &quot;X&quot;, &quot;Y&quot;, &quot;Z&quot; &#125;;    /**     * 获取短UUID     * @return     */    public static String getShortUuid() &#123;        StringBuffer shortBuffer = new StringBuffer();        String uuid = UuidUtil.getUuid();        for (int i = 0; i &lt; 8; i++) &#123;            String str = uuid.substring(i * 4, i * 4 + 4);            int x = Integer.parseInt(str, 16);            shortBuffer.append(chars[x % 0x3E]); // 对62取余        &#125;        return shortBuffer.toString();    &#125;    /**     * 获得32位UUID     */    public static String getUuid()&#123;        String uuid = UUID.randomUUID().toString();        //去掉“-”符号        return uuid.replaceAll(&quot;-&quot;, &quot;&quot;);    &#125;    public static void main(String[] args) &#123;        System.out.println(getShortUuid());    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在ChapterService中添加</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  public void save(ChapterDto chapterDto)&#123;</span><br><span class="line">      chapterDto.setId(UuidUtil.getShortUuid());</span><br><span class="line">      Chapter chapter = new Chapter();</span><br><span class="line">      BeanUtils.copyProperties(chapterDto,chapter);</span><br><span class="line">      chapterMapper.insert(chapter);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>在ChapterController中添加</p></li><li><p>&#96;&#96;&#96;java<br>@RequestMapping(“&#x2F;save”)<br>public ChapterDto list(@RequestBody ChapterDto chapterDto){<br>chapterService.save(chapterDto);<br>return chapterDto;<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在chapter.vue中添加方法</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  save(page)&#123;</span><br><span class="line">    let _this=this;</span><br><span class="line">    _this.$ajax.post(&#x27;http://192.168.0.105:9000/business/admin/chapter/save&#x27;,_this.chapter).then((respond)=&gt;&#123;</span><br><span class="line">      console.log(&quot;保存大章列表结果:&quot;,respond);</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>增加复制工具类CopyUtil:</p><ul><li><p>server中增加代码</p></li><li><pre><code class="java">package com.course.server.util;import org.springframework.beans.BeanUtils;import org.springframework.util.CollectionUtils;import java.util.ArrayList;import java.util.List;public class CopyUtil &#123;    public static &lt;T&gt; List&lt;T&gt; copyList(List source, Class&lt;T&gt; clazz) &#123;        List&lt;T&gt; target = new ArrayList&lt;&gt;();        if (!CollectionUtils.isEmpty(source))&#123;            if (!CollectionUtils.isEmpty(source))&#123;                for (Object c: source) &#123;                    T obj = copy(c, clazz);                    target.add(obj);                &#125;            &#125;        &#125;        return target;    &#125;    public static &lt;T&gt; T copy(Object source, Class&lt;T&gt; clazz) &#123;        if (source == null) &#123;            return null;        &#125;        T obj = null;        try &#123;            obj = clazz.newInstance();        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;        BeanUtils.copyProperties(source, obj);        return obj;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">统一返回参数ResponseDto：</span><br><span class="line"></span><br><span class="line">- 纯接口应用，一般会规范固定的请求参数，如版本号、请求流水等；再规范固定的返回参数，如返回码、返回描述等。方便调用方统一处理。</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.course.server.dto;</span><br><span class="line">  </span><br><span class="line">  public class ResponseDto&lt;T&gt; &#123;</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 业务上的成功或失败</span><br><span class="line">       */</span><br><span class="line">      private boolean success = true;</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 返回码</span><br><span class="line">       */</span><br><span class="line">      private String code;</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 返回信息</span><br><span class="line">       */</span><br><span class="line">      private String message;</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 返回泛型数据，自定义类型</span><br><span class="line">       */</span><br><span class="line">      private T content;</span><br><span class="line">  </span><br><span class="line">      public String getCode() &#123;</span><br><span class="line">          return code;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void setCode(String code) &#123;</span><br><span class="line">          this.code = code;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public boolean getSuccess() &#123;</span><br><span class="line">          return success;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void setSuccess(boolean success) &#123;</span><br><span class="line">          this.success = success;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public String getMessage() &#123;</span><br><span class="line">          return message;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void setMessage(String message) &#123;</span><br><span class="line">          this.message = message;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public T getContent() &#123;</span><br><span class="line">          return content;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void setContent(T content) &#123;</span><br><span class="line">          this.content = content;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      public String toString() &#123;</span><br><span class="line">          final StringBuffer sb = new StringBuffer(&quot;ResponseDto&#123;&quot;);</span><br><span class="line">          sb.append(&quot;success=&quot;).append(success);</span><br><span class="line">          sb.append(&quot;, code=&#x27;&quot;).append(code).append(&#x27;\&#x27;&#x27;);</span><br><span class="line">          sb.append(&quot;, message=&#x27;&quot;).append(message).append(&#x27;\&#x27;&#x27;);</span><br><span class="line">          sb.append(&quot;, content=&quot;).append(content);</span><br><span class="line">          sb.append(&#x27;&#125;&#x27;);</span><br><span class="line">          return sb.toString();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>列表查询业务上一般都是成功的（查不到数据也是成功的），所以不需要判断success。保存有可能失败，所以<br>需要判断success。</p></li><li><p>问题：同一个页面有多个modal时，用class选择时，会出现重复，所以需要给每个modal增加id属性。</p></li></ul><h2 id="5-7修改删除大章功能"><a href="#5-7修改删除大章功能" class="headerlink" title="5-7修改删除大章功能"></a>5-7修改删除大章功能</h2><p>增加大章修改功能：增加修改大章功能，新增和修改用同一个保存功能，通过传入的参数id有没有值来判断</p><ul><li>新增和编辑功能弹出来的模态框是同一个。vue，controller，service调用的都是同一个方法，只是到service层再根据id是否有值来判断是新增还是删除。</li><li>hidden-md：中等屏幕隐藏，其它可见：hidden-lg：大屏幕隐藏，其它可见。相反的有visible-xx.</li><li>数据显示：将表格行数据显示到表单。反过来，数据修改：修改表单影响表格行数据。解决这个问题可以使用$.extend({},chapter)</li><li>发现问题：对文本编辑后，点击新增弹出文本框，会带出上一次编辑过的值，只需要在add里添加_this.chapter&#x3D;{};即可</li></ul><p>增加大章删除功能：</p><ul><li>restful是一种请求风格。简单理解：通过看url就能知道这个请求时要对什么资源做什么操作。</li><li>1.在前端chapter.vue中删除样式按钮上添加；2.添加del方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//1.</span><br><span class="line">v-on:click=&quot;del(chapter.id)&quot;</span><br><span class="line">//2.</span><br><span class="line">    del(id) &#123;</span><br><span class="line">      let _this = this;</span><br><span class="line">      _this.$ajax.delete(&#x27;http://192.168.0.105:9000/business/admin/chapter/delete/&#x27; + id).then((respond) =&gt; &#123;</span><br><span class="line">        console.log(&quot;删除大章列表结果:&quot;, respond);</span><br><span class="line">        let resp = respond.data;</span><br><span class="line">        if (resp.success) &#123;</span><br><span class="line">          _this.list(1);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在chaptercontroller中添加del</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span> (<span class="string">&quot;/delete/&#123;id&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseDto <span class="title function_">del</span><span class="params">(<span class="meta">@PathVariable</span>  String id)</span>&#123;</span><br><span class="line">    <span class="type">ResponseDto</span> <span class="variable">responseDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseDto</span>();</span><br><span class="line">    chapterService.delete(id);</span><br><span class="line">    <span class="keyword">return</span> responseDto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在chapterservice添加delete</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String id)</span>&#123;</span><br><span class="line">    chapterMapper.deleteByPrimaryKey(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-8集成前端通用组件"><a href="#5-8集成前端通用组件" class="headerlink" title="5-8集成前端通用组件"></a>5-8集成前端通用组件</h2><p>集成sweetalert2(<a class="link"   href="https://sweetalert2.github.io/#download)%E7%94%A8%E4%BA%8E%E7%95%8C%E9%9D%A2%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4%E6%A1%86%EF%BC%9A%E5%9B%A0%E4%B8%BA%E5%88%A0%E9%99%A4%E6%98%AF%E4%B8%80%E4%B8%AA%E6%9C%89%E9%A3%8E%E9%99%A9%E7%9A%84%E6%93%8D%E4%BD%9C" >https://sweetalert2.github.io/#download)用于界面消息确认框：因为删除是一个有风险的操作<i class="fas fa-external-link-alt"></i></a> ，需要有确认的动作</p><ul><li><p>首先在前端index.html中添加<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script></p></li><li><p>其次在chapter.vue中的del方法添加</p></li><li><pre><code class="java">del(id) &#123;  let _this = this;  Swal.fire(&#123;    title: &#39;确认删除?&#39;,    text: &quot;删除后不可恢复!&quot;,    icon: &#39;warning&#39;,    showCancelButton: true,    confirmButtonColor: &#39;#3085d6&#39;,    cancelButtonColor: &#39;#d33&#39;,    confirmButtonText: &#39;确认!&#39;  &#125;).then((result) =&gt; &#123;    if (result.isConfirmed) &#123;      _this.$ajax.delete(&#39;http://192.168.0.105:9000/business/admin/chapter/delete/&#39; + id).then((respond) =&gt; &#123;        console.log(&quot;删除大章列表结果:&quot;, respond);        let resp = respond.data;        if (resp.success) &#123;          _this.list(1);          Swal.fire(              &#39;删除成功!&#39;,              &#39;你的文件已经删除&#39;,              &#39;success&#39;          )        &#125;      &#125;)    &#125;  &#125;)&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">制作消息提示框：制作toast组件，内部用sweetalert2实现</span><br><span class="line"></span><br><span class="line">- 通过修改timer可以设置弹出的时长，设置icon可以设置成成功、错误、警告等</span><br><span class="line"></span><br><span class="line">- 如果组件包括html代码，可以用vue组件；如果组件只有js代码，可以用原生的js</span><br><span class="line"></span><br><span class="line">- 首先在index.html中引入</span><br><span class="line"></span><br><span class="line">- ```html</span><br><span class="line">  &lt;!--确认框和提示框--&gt;</span><br><span class="line">  &lt;script src=&quot;//cdn.jsdelivr.net/npm/sweetalert2@11&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;&lt;%= BASE_URL %&gt;static/js/toast.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;!--必须是这样的，顺序不能颠倒--&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>其次因为toast是通用的，所以将其单独放在static&#x2F;js&#x2F;toast.js中，代码：</p></li><li><pre><code class="js">const Toast = Swal.mixin(&#123;    toast: true,    position: &#39;top-end&#39;,    showConfirmButton: false,    timer: 3000,    timerProgressBar: true,    didOpen: (toast) =&gt; &#123;        toast.addEventListener(&#39;mouseenter&#39;, Swal.stopTimer)        toast.addEventListener(&#39;mouseleave&#39;, Swal.resumeTimer)    &#125;&#125;);toast = &#123;    success:function (message)&#123;        Toast.fire(&#123;            icon: &#39;success&#39;,            title: message        &#125;);    &#125;,    error:function (message)&#123;        Toast.fire(&#123;            icon: &#39;error&#39;,            title: message        &#125;);    &#125;,    waning:function (message)&#123;        Toast.fire(&#123;            icon: &#39;waning&#39;,            title:message        &#125;);    &#125;&#125;;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在chapter.vue引用直接  ：toast.success(&quot;保存成功&quot;);即可</span><br><span class="line"></span><br><span class="line">集成blockUI用于界面等待框：制作Loading组件，内部用jquery blockui插件</span><br><span class="line"></span><br><span class="line">- 等待框的作用：1.让用户知道，后端正在处理，耐心等待；2.防止用户恶意重复点击</span><br><span class="line"></span><br><span class="line">- 首先在index引用</span><br><span class="line"></span><br><span class="line">- ```html</span><br><span class="line">  &lt;!--  loading等待框--&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/jquery.blockUI/2.70.0-2014.11.23/jquery.blockUI.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;&lt;%= BASE_URL %&gt;static/js/loading.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>loading.js写代码</p></li><li><pre><code class="js">Loading =&#123;    show:function ()&#123;        $.blockUI(&#123;            message: &#39;&lt;img src=&quot;/static/image/loading.gif&quot;/&gt;&#39;,            css: &#123;                padding: &quot;10px&quot;,                left: &quot;50%&quot;,                width: &quot;80px&quot;,                marginLeft: &quot;-40px&quot;,            &#125;        &#125;);    &#125;,    hide:function ()&#123;        //故意做的延迟，实际不用        setTimeout(function ()&#123;            $.unblockUI();        &#125;,500)    &#125;&#125;;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在chapter调用：就是Loading.show();Loading.hide();</span><br><span class="line"></span><br><span class="line">给提示框换个样式：</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">Toast = &#123;</span><br><span class="line">    success:function (message)&#123;</span><br><span class="line">        Swal.fire(&#123;</span><br><span class="line">            position: &#x27;top-end&#x27;,</span><br><span class="line">            icon: &#x27;success&#x27;,</span><br><span class="line">            title:message,</span><br><span class="line">            showConfirmButton: false,</span><br><span class="line">            timer: 3000</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    error:function (message)&#123;</span><br><span class="line">        Swal.fire(&#123;</span><br><span class="line">            position: &#x27;top-end&#x27;,</span><br><span class="line">            icon: &#x27;error&#x27;,</span><br><span class="line">            title: message,</span><br><span class="line">            showConfirmButton: false,</span><br><span class="line">            timer: 3000</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    warning:function (message)&#123;</span><br><span class="line">        Swal.fire(&#123;</span><br><span class="line">            position: &#x27;top-end&#x27;,</span><br><span class="line">            icon: &#x27;warning&#x27;,</span><br><span class="line">            title: message,</span><br><span class="line">            showConfirmButton: false,</span><br><span class="line">            timer: 3000</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>组件化的好处，只需要修改组件代码，就可以改变组件的样式，使用的地方完全不用动</p></li></ul><p>制作Confirm组件：</p><ul><li>创建confirm.js文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Confirm</span> = &#123;</span><br><span class="line">    <span class="attr">show</span>: <span class="keyword">function</span> (<span class="params">message, callback</span>) &#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;确认删除?&#x27;</span>,</span><br><span class="line">            <span class="attr">text</span>: <span class="string">&quot;删除后不可恢复!&quot;</span>,</span><br><span class="line">            <span class="attr">icon</span>: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">            <span class="attr">showCancelButton</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">confirmButtonColor</span>: <span class="string">&#x27;#3085d6&#x27;</span>,</span><br><span class="line">            <span class="attr">cancelButtonColor</span>: <span class="string">&#x27;#d33&#x27;</span>,</span><br><span class="line">            <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确认!&#x27;</span></span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (result.<span class="property">isConfirmed</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(callback)&#123;<span class="comment">//回调函数</span></span><br><span class="line">                    <span class="title function_">callback</span>();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在chapter.vue的del中使用</p></li><li><pre><code class="vue">Confirm.show(&quot;删除后不可恢复!&quot;,function ()&#123;  Loading.show();  _this.$ajax.delete(&#39;http://192.168.0.105:9000/business/admin/chapter/delete/&#39; + id).then((respond) =&gt; &#123;    Loading.hide();    console.log(&quot;删除大章列表结果:&quot;, respond);    let resp = respond.data;    if (resp.success) &#123;      _this.list(1);      Toast.success(&quot;删除成功&quot;);    &#125;  &#125;)&#125;);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 5-9代码优化</span><br><span class="line"></span><br><span class="line">前端代码校验:1.增加工具类tool.js和校验类validator.js2.大章保存非空和长度增加校验</span><br><span class="line"></span><br><span class="line">- 首先在index引用</span><br><span class="line"></span><br><span class="line">- ```html</span><br><span class="line">  &lt;!--  通用工具类  --&gt;</span><br><span class="line">  &lt;script src=&quot;&lt;%= BASE_URL %&gt;static/js/tool.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;!--  校验类  --&gt;</span><br><span class="line">  &lt;script src=&quot;&lt;%= BASE_URL %&gt;static/js/validator.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>其次增加两个js</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Tool</span> = &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 空校验 null或&quot;&quot;都返回true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">isEmpty</span>: <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">typeof</span> obj == <span class="string">&#x27;string&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> !obj || obj.<span class="title function_">replace</span>(<span class="regexp">/\s+/g</span>, <span class="string">&quot;&quot;</span>) == <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (!obj || <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj) === <span class="string">&quot;&#123;&#125;&quot;</span> || obj.<span class="property">length</span> === <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 非空校验</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">isNotEmpty</span>: <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>(obj);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 长度校验</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">isLength</span>: <span class="keyword">function</span> (<span class="params">str, min, max</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> $.<span class="title function_">trim</span>(str).<span class="property">length</span> &gt;= min &amp;&amp; $.<span class="title function_">trim</span>(str).<span class="property">length</span> &lt;= max;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Validator</span> = &#123;</span><br><span class="line">    <span class="attr">require</span>: <span class="keyword">function</span> (<span class="params">value, text</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Tool</span>.<span class="title function_">isEmpty</span>(value)) &#123;</span><br><span class="line">            <span class="title class_">Toast</span>.<span class="title function_">warning</span>(text + <span class="string">&quot;不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">length</span>: <span class="keyword">function</span> (<span class="params">value, text, min, max</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title class_">Tool</span>.<span class="title function_">isLength</span>(value, min, max)) &#123;</span><br><span class="line">            <span class="title class_">Toast</span>.<span class="title function_">warning</span>(text + <span class="string">&quot;长度&quot;</span> + min + <span class="string">&quot;~&quot;</span> + max + <span class="string">&quot;位&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>最后在chapter中save方法中调用：</p></li><li><pre><code class="vue">// 保存校验if (!Validator.require(_this.chapter.name, &quot;名称&quot;)    || !Validator.length(_this.chapter.courseId, &quot;课程ID&quot;, 1, 8)) &#123;  return;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">后端代码校验：是为了防止被绕过前端界面，利用第三方工具如postman，直接访问后端接口</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">1.增加了后端校验工具类ValidatorUtil</span><br><span class="line">2.增加了统一异常处理ControllerExceptionHandler，关键字@ControllerAdvice</span><br></pre></td></tr></table></figure></code></pre></li><li><p>自定义异常可以继承RuntimeException或Exception。一般项目内部的业务异常，可以用RuntimeException，不需要trycatch。如果是开发一些框架或工具类，明确告诉外部需要做异常处理的，可以用Exception。另外还需要考虑事务中的异常处理。在server中建立ValidatorException.java</p></li><li><pre><code class="java">package com.course.server.exception;public class ValidatorException extends RuntimeException&#123;    public ValidatorException(String message)&#123;super(message);&#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 其次在util中建立ValidatorUtil文件</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.course.server.util;</span><br><span class="line">  </span><br><span class="line">  import com.course.server.exception.ValidatorException;</span><br><span class="line">  import org.springframework.util.StringUtils;</span><br><span class="line">  </span><br><span class="line">  public class ValidatorUtil &#123;</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 空校验（null or &quot;&quot;）</span><br><span class="line">       */</span><br><span class="line">      public static void require(Object str, String fieldName) &#123;</span><br><span class="line">          if (StringUtils.isEmpty(str)) &#123;</span><br><span class="line">              throw new ValidatorException(fieldName + &quot;不能为空&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 长度校验</span><br><span class="line">       */</span><br><span class="line">      public static void length(String str, String fieldName, int min, int max) &#123;</span><br><span class="line">          if (StringUtils.isEmpty(str)) &#123;</span><br><span class="line">              return;</span><br><span class="line">          &#125;</span><br><span class="line">          int length = 0;</span><br><span class="line">          if (!StringUtils.isEmpty(str)) &#123;</span><br><span class="line">              length = str.length();</span><br><span class="line">          &#125;</span><br><span class="line">          if (length &lt; min || length &gt; max) &#123;</span><br><span class="line">              throw new ValidatorException(fieldName + &quot;长度&quot; + min + &quot;~&quot; + max + &quot;位&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>如果直接在chaptercontroller中使用保存校验会出现问题：直接进行后端代码校验会出现问题：现象：后端出异常，导致前后收不到结果，vue中的.then方法没有执行，等待框没有关闭导致不能继续任何操作，只能刷新页面。</p></li><li><pre><code class="java">// 保存校验ValidatorUtil.require(chapterDto.getName(), &quot;名称&quot;);ValidatorUtil.require(chapterDto.getCourseId(), &quot;课程ID&quot;);ValidatorUtil.length(chapterDto.getCourseId(), &quot;课程ID&quot;, 1, 8);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 解决这个问题，写一个统一处理方法就在controller软件包下建一个ControllerExceptionHandler.java</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.course.business.controller;</span><br><span class="line">  </span><br><span class="line">  import com.course.server.dto.ResponseDto;</span><br><span class="line">  import com.course.server.exception.ValidatorException;</span><br><span class="line">  import org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line">  import org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line">  import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">  @ControllerAdvice//@ControllerAdvice是Controller增强器，可以对Controller做统一的处理，如异常处理、数据处理等</span><br><span class="line">  public class ControllerExceptionHandler &#123;</span><br><span class="line">      @ExceptionHandler(value = ValidatorException.class)</span><br><span class="line">      @ResponseBody//以JISON方式返回</span><br><span class="line">      public ResponseDto validatorExceptionHandler(ValidatorException e)&#123;</span><br><span class="line">      ResponseDto responseDto = new ResponseDto();</span><br><span class="line">      responseDto.setSuccess(false);</span><br><span class="line">      responseDto.setMessage(e.getMessage());</span><br><span class="line">      return responseDto;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>有时候我们的接口原本是不对外的，或者只跟特定的第三方应用做对接，这时为了内部安全，不应该把参数的校验规则暴露出去，所以需要模糊返回信息。类似登录接门应该返回“用户名或密码错”，而不是“用户名不存在，或“密码错误”（容易被探测）。<strong>所以我们将返回统一信息如下，并设置一个日志返回真正信息。</strong></p></li><li><pre><code class="java">LOG.warn(e.getMessage());responseDto.setMessage(&quot;请求参数异常!&quot;);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 如果开发过程中提示“请求参数异常“说明后端有校验拦截，前端没有，此时应该把前端校验加上</span><br><span class="line"></span><br><span class="line">使用AOP制作一个统一日志输出</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">1.增加了日志AOP，统一日志输出</span><br><span class="line">2.logback增加了打印日志跟踪号</span><br></pre></td></tr></table></figure></code></pre></li><li><p>统一日志处理可以用AOP也可以用Spring拦截器</p></li><li><p>约定优于配置。又一个约定：查询类接口以list或query开头，保存用save开头，删除用delete开头</p></li><li><p>首先在chaptercontroller中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(ChapterController.class);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BUSINESS_NAME</span> <span class="operator">=</span> <span class="string">&quot;大章&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>logback进行一行修改</p></li><li><pre><code class="xml">    &lt;encoder&gt;        &lt;Pattern&gt;%d&#123;ss.SSS&#125; %highlight(%-5level) %blue(%-30logger&#123;30&#125;:%-4line) %green(%-8X&#123;UUID&#125;) %msg%n&lt;/Pattern&gt;    &lt;/encoder&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在server中的config加入LogAspect.java</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.course.server.config;</span><br><span class="line">  </span><br><span class="line">  import com.alibaba.fastjson.JSONObject;</span><br><span class="line">  import com.alibaba.fastjson.support.spring.PropertyPreFilters;</span><br><span class="line">  import com.course.server.util.UuidUtil;</span><br><span class="line">  import org.aspectj.lang.JoinPoint;</span><br><span class="line">  import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">  import org.aspectj.lang.Signature;</span><br><span class="line">  import org.aspectj.lang.annotation.Around;</span><br><span class="line">  import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">  import org.aspectj.lang.annotation.Before;</span><br><span class="line">  import org.aspectj.lang.annotation.Pointcut;</span><br><span class="line">  import org.slf4j.Logger;</span><br><span class="line">  import org.slf4j.LoggerFactory;</span><br><span class="line">  import org.slf4j.MDC;</span><br><span class="line">  import org.springframework.stereotype.Component;</span><br><span class="line">  import org.springframework.util.StringUtils;</span><br><span class="line">  import org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line">  import org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line">  import org.springframework.web.multipart.MultipartFile;</span><br><span class="line">  </span><br><span class="line">  import javax.servlet.ServletRequest;</span><br><span class="line">  import javax.servlet.ServletResponse;</span><br><span class="line">  import javax.servlet.http.HttpServletRequest;</span><br><span class="line">  import java.lang.reflect.Field;</span><br><span class="line">  </span><br><span class="line">  @Aspect</span><br><span class="line">  @Component</span><br><span class="line">  public class LogAspect &#123;</span><br><span class="line">  </span><br><span class="line">      private final static Logger LOG = LoggerFactory.getLogger(LogAspect.class);</span><br><span class="line">  </span><br><span class="line">      /** 定义一个切点 */</span><br><span class="line">      @Pointcut(&quot;execution(public * com.course.*.controller..*Controller.*(..))&quot;)</span><br><span class="line">      public void controllerPointcut() &#123;&#125;</span><br><span class="line">  </span><br><span class="line">      @Before(&quot;controllerPointcut()&quot;)</span><br><span class="line">      public void doBefore(JoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line">          // 日志编号</span><br><span class="line">          MDC.put(&quot;UUID&quot;, UuidUtil.getShortUuid());</span><br><span class="line">  </span><br><span class="line">          // 开始打印请求日志</span><br><span class="line">          ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">          HttpServletRequest request = attributes.getRequest();</span><br><span class="line">          Signature signature = joinPoint.getSignature();</span><br><span class="line">          String name = signature.getName();</span><br><span class="line">  </span><br><span class="line">          // 打印业务操作</span><br><span class="line">          String nameCn = &quot;&quot;;</span><br><span class="line">          if (name.contains(&quot;list&quot;) || name.contains(&quot;query&quot;)) &#123;</span><br><span class="line">              nameCn = &quot;查询&quot;;</span><br><span class="line">          &#125; else if (name.contains(&quot;save&quot;)) &#123;</span><br><span class="line">              nameCn = &quot;保存&quot;;</span><br><span class="line">          &#125; else if (name.contains(&quot;delete&quot;)) &#123;</span><br><span class="line">              nameCn = &quot;删除&quot;;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">              nameCn = &quot;操作&quot;;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          // 使用反射，获取业务名称</span><br><span class="line">          Class clazz = signature.getDeclaringType();</span><br><span class="line">          Field field;</span><br><span class="line">          String businessName = &quot;&quot;;</span><br><span class="line">          try &#123;</span><br><span class="line">              field = clazz.getField(&quot;BUSINESS_NAME&quot;);</span><br><span class="line">              if (!StringUtils.isEmpty(field)) &#123;</span><br><span class="line">                  businessName = (String) field.get(clazz);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; catch (NoSuchFieldException e) &#123;</span><br><span class="line">              LOG.error(&quot;未获取到业务名称&quot;);</span><br><span class="line">          &#125; catch (SecurityException e) &#123;</span><br><span class="line">              LOG.error(&quot;获取业务名称失败&quot;, e);</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          // 打印请求信息</span><br><span class="line">          LOG.info(&quot;------------- 【&#123;&#125;】&#123;&#125;开始 -------------&quot;, businessName, nameCn);</span><br><span class="line">          LOG.info(&quot;请求地址: &#123;&#125; &#123;&#125;&quot;, request.getRequestURL().toString(), request.getMethod());</span><br><span class="line">          LOG.info(&quot;类名方法: &#123;&#125;.&#123;&#125;&quot;, signature.getDeclaringTypeName(), name);</span><br><span class="line">          LOG.info(&quot;远程地址: &#123;&#125;&quot;, request.getRemoteAddr());</span><br><span class="line">  </span><br><span class="line">          // 打印请求参数</span><br><span class="line">          Object[] args = joinPoint.getArgs();</span><br><span class="line">          Object[] arguments  = new Object[args.length];</span><br><span class="line">          for (int i = 0; i &lt; args.length; i++) &#123;</span><br><span class="line">              if (args[i] instanceof ServletRequest</span><br><span class="line">                      || args[i] instanceof ServletResponse</span><br><span class="line">                      || args[i] instanceof MultipartFile) &#123;</span><br><span class="line">                  continue;</span><br><span class="line">              &#125;</span><br><span class="line">              arguments[i] = args[i];</span><br><span class="line">          &#125;</span><br><span class="line">          // 排除字段，敏感字段或太长的字段不显示</span><br><span class="line">          String[] excludeProperties = &#123;&quot;shard&quot;&#125;;</span><br><span class="line">          PropertyPreFilters filters = new PropertyPreFilters();</span><br><span class="line">          PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();</span><br><span class="line">          excludefilter.addExcludes(excludeProperties);</span><br><span class="line">          LOG.info(&quot;请求参数: &#123;&#125;&quot;, JSONObject.toJSONString(arguments, excludefilter)); // 为空的会不打印，但是像图片等长字段也会打印</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      @Around(&quot;controllerPointcut()&quot;)</span><br><span class="line">      public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable &#123;</span><br><span class="line">          long startTime = System.currentTimeMillis();</span><br><span class="line">          Object result = proceedingJoinPoint.proceed();</span><br><span class="line">          // 排除字段，敏感字段或太长的字段不显示</span><br><span class="line">          String[] excludeProperties = &#123;&quot;password&quot;, &quot;shard&quot;&#125;;</span><br><span class="line">          PropertyPreFilters filters = new PropertyPreFilters();</span><br><span class="line">          PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();</span><br><span class="line">          excludefilter.addExcludes(excludeProperties);</span><br><span class="line">          LOG.info(&quot;返回结果: &#123;&#125;&quot;, JSONObject.toJSONString(result, excludefilter));</span><br><span class="line">          LOG.info(&quot;------------- 结束 耗时：&#123;&#125; ms -------------&quot;, System.currentTimeMillis() - startTime);</span><br><span class="line">          return result;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>当然需要添加依赖：根目录和server依赖</p></li><li><p>&#96;&#96;&#96;xml</p><dependency>    <groupId>com.alibaba</groupId>    <artifactId>fastjson</artifactId>    <version>1.2.60</version></dependency><!-- AOP --><dependency>    <groupId>org.springframework.boot</groupId>    <artifactId>spring-boot-starter-aop</artifactId></dependency><dependency>    <groupId>com.alibaba</groupId>    <artifactId>fastjson</artifactId></dependency><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">前端增加统一日志输出：在main.js</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">/**</span><br><span class="line"> * axias拦截器</span><br><span class="line"> */</span><br><span class="line">axios.interceptors.request.use(function (config)&#123;</span><br><span class="line">  console.log(&quot;请求:&quot;,config);</span><br><span class="line">  return config;</span><br><span class="line">&#125;,error =&gt; &#123;&#125;);</span><br><span class="line">axios.interceptors.request.use(function (response)&#123;</span><br><span class="line">  console.log(&quot;返回结果:&quot;,response);</span><br><span class="line">  return response;</span><br><span class="line">&#125;,error =&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure></li></ul><h1 id="第6章-通用代码生成器开发"><a href="#第6章-通用代码生成器开发" class="headerlink" title="第6章 通用代码生成器开发"></a>第6章 通用代码生成器开发</h1><p>本章将演示代码生成器的制作，学习模板引擎freemarker的使用。通过代码生成器可以快速生成dto、service、controller和vue界面代码，再配合上mybatis generator，可以快速完成单表的增删改查管理功能，极大的提高开发效率。另外，本章的知识也可应用于静态页面生成、导出复杂excel等涉及文件生成的场景。…</p><h2 id="6-1-代码生成器原理介绍"><a href="#6-1-代码生成器原理介绍" class="headerlink" title="6-1 代码生成器原理介绍"></a>6-1 代码生成器原理介绍</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.增加generator模块，用于代码生成</span><br><span class="line">2.集成freemarker</span><br></pre></td></tr></table></figure><ul><li><p>freemarker和thymeleaf代码风格：前一个的逻辑主要写在自定义标签中；后一个的逻辑主要写在标签的属性中，web开发时可读性好一点。</p></li><li><p>步骤1：在父pom.xml中添加freemarker.jar依赖</p></li><li><pre><code class="xml">&lt;!-- 模板引擎freemarker --&gt;&lt;dependency&gt;   &lt;groupId&gt;org.freemarker&lt;/groupId&gt;   &lt;artifactId&gt;freemarker&lt;/artifactId&gt;   &lt;version&gt;2.3.29&lt;/version&gt;&lt;/dependency&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 步骤2：增加generator子模块，代码生成器专用，并添加freemarker.jar依赖</span><br><span class="line"></span><br><span class="line">- ```xml</span><br><span class="line">  &lt;!-- 模板引擎freemarker --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.freemarker&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;freemarker&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>步骤3：添加模板文件test.ftl和启动文件TestUtil.java</p></li><li><pre><code class="ftl">package com.course.generator.test;public class Test &#123;/*** ID111*/private String id;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.course.generator.test;</span><br><span class="line">  </span><br><span class="line">  import freemarker.template.Configuration;</span><br><span class="line">  import freemarker.template.DefaultObjectWrapper;</span><br><span class="line">  import freemarker.template.Template;</span><br><span class="line">  import freemarker.template.TemplateException;</span><br><span class="line">  </span><br><span class="line">  import java.io.BufferedWriter;</span><br><span class="line">  import java.io.File;</span><br><span class="line">  import java.io.FileWriter;</span><br><span class="line">  import java.io.IOException;</span><br><span class="line">  </span><br><span class="line">  public class TestUtil &#123;</span><br><span class="line">  </span><br><span class="line">          static String ftlPath = &quot;generator\\src\\main\\java\\com\\course\\generator\\test\\&quot;;</span><br><span class="line">          static String toPath = &quot;generator\\src\\main\\java\\com\\course\\generator\\test\\&quot;;</span><br><span class="line">  </span><br><span class="line">          public static void main(String[] args) throws IOException, TemplateException &#123;</span><br><span class="line">                  Configuration cfg = new Configuration(Configuration.VERSION_2_3_29);</span><br><span class="line">                  cfg.setDirectoryForTemplateLoading(new File(ftlPath));</span><br><span class="line">                  cfg.setObjectWrapper(new DefaultObjectWrapper(Configuration.VERSION_2_3_29));</span><br><span class="line">                  Template temp = cfg.getTemplate(&quot;test.ftl&quot;);</span><br><span class="line">  </span><br><span class="line">                  FileWriter fw = new FileWriter(toPath + &quot;Test.java&quot;);</span><br><span class="line">                  BufferedWriter bw = new BufferedWriter(fw);</span><br><span class="line">                  temp.process(null, bw);</span><br><span class="line">                  bw.flush();</span><br><span class="line">                  fw.close();</span><br><span class="line">          &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>.ftl是freemarker约定的模板后缀名，也可以改成任意其他后缀；ftlPath：模板文件所在的路径；toPath：要生成的文件的路径</p></li></ul><h2 id="6-2-controller层和service层代码生成"><a href="#6-2-controller层和service层代码生成" class="headerlink" title="6-2 controller层和service层代码生成"></a>6-2 controller层和service层代码生成</h2><p>小节表持久层代码生成：</p><ul><li><p>创建一个all.sql</p></li><li><p>&#96;&#96;&#96;sql</p><h1 id="小节"><a href="#小节" class="headerlink" title="小节"></a>小节</h1><p>DROP TABLE IF EXISTS <code>Section</code>;<br>create table <code>Section</code><br>(<br><code>id</code>         CHAR(8)     NOT NULL DEFAULT ‘’ COMMENT ‘ID’,<br><code>title</code>      VARCHAR(50) NOT NULL COMMENT ‘标题’,<br><code>course_id</code>  CHAR(8) COMMENT ‘课程|course.id’,<br><code>chapter_id</code> CHAR(8) COMMENT ‘大章|chapter.id’,<br><code>video</code>      VARCHAR(200) COMMENT ‘视频’,<br><code>time</code>       INT COMMENT ‘时长|单位秒’,<br><code>charge</code>     CHAR(1) COMMENT ‘收费|C 收费;F 免费’,<br><code>sort</code>       INT COMMENT ‘顺序’,<br><code>created_at</code> DATETIME(3) COMMENT ‘创建时间’,<br><code>updated_at</code> DATETIME(3) COMMENT ‘修改时间’,<br>PRIMARY KEY (<code>id</code>)<br>)engine &#x3D;innodb default charset&#x3D;utf8mb4 comment&#x3D;’小节’;</p><p>INSERT INTO <code>section</code>(id,title,course_id,chapter_id,video,time,charge,sort,created_at,updated_at)<br>VALUES(‘00000001’,’测试小节01’,’00000001’,’00000000’,’’,500,’F’,1,now(),now());</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 再在generatorconfig中添加代码&lt;table tableName=&quot;section&quot; domainObjectName=&quot;Section&quot;/&gt;，运用mybatis-generator代码生成器。</span><br><span class="line"></span><br><span class="line">service层代码生成：</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.制作freemarkerUtil，简化生成器的使用<br>2.新增ServerGenerator，用于生成后端代码;controller,service,dto</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ftlPath是统一放模板的地方，这个属性值一般不会变，所以可以直接放在工具类里</span><br><span class="line"></span><br><span class="line">- 首先建立FreemarkerUtil</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.course.generator.server;</span><br><span class="line">  </span><br><span class="line">  import com.course.generator.util.DbUtil;</span><br><span class="line">  import com.course.generator.util.Field;</span><br><span class="line">  import com.course.generator.util.FreemarkerUtil;</span><br><span class="line">  import org.dom4j.Document;</span><br><span class="line">  import org.dom4j.Element;</span><br><span class="line">  import org.dom4j.io.SAXReader;</span><br><span class="line">  </span><br><span class="line">  import java.io.File;</span><br><span class="line">  import java.util.*;</span><br><span class="line">  </span><br><span class="line">  public class ServerGenerator &#123;</span><br><span class="line">      static String MODULE = &quot;business&quot;;</span><br><span class="line">      static String toDtoPath = &quot;server\\src\\main\\java\\com\\course\\server\\dto\\&quot;;</span><br><span class="line">      static String toServicePath = &quot;server\\src\\main\\java\\com\\course\\server\\service\\&quot;;</span><br><span class="line">      static String toControllerPath = MODULE + &quot;\\src\\main\\java\\com\\course\\&quot; + MODULE + &quot;\\controller\\admin\\&quot;;</span><br><span class="line">      static String generatorConfigPath = &quot;server\\src\\main\\resources\\generator\\generatorConfig.xml&quot;;</span><br><span class="line">  </span><br><span class="line">      public static void main(String[] args) throws Exception &#123;</span><br><span class="line">          String module = MODULE;</span><br><span class="line">  </span><br><span class="line">          // 只生成配置文件中的第一个table节点</span><br><span class="line">          File file = new File(generatorConfigPath);</span><br><span class="line">          SAXReader reader=new SAXReader();</span><br><span class="line">          //读取xml文件到Document中</span><br><span class="line">          Document doc=reader.read(file);</span><br><span class="line">          //获取xml文件的根节点</span><br><span class="line">          Element rootElement=doc.getRootElement();</span><br><span class="line">          //读取context节点</span><br><span class="line">          Element contextElement = rootElement.element(&quot;context&quot;);</span><br><span class="line">          //定义一个Element用于遍历</span><br><span class="line">          Element tableElement;</span><br><span class="line">          //取第一个“table”的节点</span><br><span class="line">          tableElement=contextElement.elementIterator(&quot;table&quot;).next();</span><br><span class="line">          String Domain = tableElement.attributeValue(&quot;domainObjectName&quot;);</span><br><span class="line">          String tableName = tableElement.attributeValue(&quot;tableName&quot;);</span><br><span class="line">          String tableNameCn = DbUtil.getTableComment(tableName);</span><br><span class="line">          String domain = Domain.substring(0, 1).toLowerCase() + Domain.substring(1);</span><br><span class="line">          System.out.println(&quot;表：&quot;+tableElement.attributeValue(&quot;tableName&quot;));</span><br><span class="line">          System.out.println(&quot;Domain：&quot;+tableElement.attributeValue(&quot;domainObjectName&quot;));</span><br><span class="line">  </span><br><span class="line">          List&lt;Field&gt; fieldList = DbUtil.getColumnByTableName(tableName);</span><br><span class="line">          Set&lt;String&gt; typeSet = getJavaTypes(fieldList);</span><br><span class="line">          Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">          map.put(&quot;Domain&quot;, Domain);</span><br><span class="line">          map.put(&quot;domain&quot;, domain);</span><br><span class="line">          map.put(&quot;tableNameCn&quot;, tableNameCn);</span><br><span class="line">          map.put(&quot;module&quot;, module);</span><br><span class="line">          map.put(&quot;fieldList&quot;, fieldList);</span><br><span class="line">          map.put(&quot;typeSet&quot;, typeSet);</span><br><span class="line">  </span><br><span class="line">          // 生成dto</span><br><span class="line">          FreemarkerUtil.initConfig(&quot;dto.ftl&quot;);</span><br><span class="line">          FreemarkerUtil.generator(toDtoPath + Domain + &quot;Dto.java&quot;, map);</span><br><span class="line">  </span><br><span class="line">          // 生成service</span><br><span class="line">          FreemarkerUtil.initConfig(&quot;service.ftl&quot;);</span><br><span class="line">          FreemarkerUtil.generator(toServicePath + Domain + &quot;Service.java&quot;, map);</span><br><span class="line">  </span><br><span class="line">          // 生成controller</span><br><span class="line">          FreemarkerUtil.initConfig(&quot;controller.ftl&quot;);</span><br><span class="line">          FreemarkerUtil.generator(toControllerPath + Domain + &quot;Controller.java&quot;, map);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 获取所有的Java类型，使用Set去重</span><br><span class="line">       */</span><br><span class="line">      private static Set&lt;String&gt; getJavaTypes(List&lt;Field&gt; fieldList) &#123;</span><br><span class="line">          Set&lt;String&gt; set = new HashSet&lt;&gt;();</span><br><span class="line">          for (int i = 0; i &lt; fieldList.size(); i++) &#123;</span><br><span class="line">              Field field = fieldList.get(i);</span><br><span class="line">              set.add(field.getJavaType());</span><br><span class="line">          &#125;</span><br><span class="line">          return set;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p>其次建立启动类ServerGenerator</p></li><li><p>&#96;&#96;&#96;java<br>package com.course.generator.server;</p><p>import com.course.generator.util.FreemarkerUtil;<br>import freemarker.template.TemplateException;</p><p>import java.io.IOException;</p><p>public class ServerGenerator {<br>static String toPath &#x3D; “generator\src\main\java\com\course\generator\test\“;<br>public static void main(String[] args) throws IOException, TemplateException {<br>    FreemarkerUtil.initConfig(“test.ftl”);<br>    FreemarkerUtil.generator(toPath+”Test.java”);<br>}<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.生成器开发，增加生成service层的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 首先创建service.ftl，就是把chapterservice复制一份，把Chapter改成$&#123;Domain&#125;，chapter改成$&#123;domain&#125;</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.course.server.service;</span><br><span class="line">  </span><br><span class="line">  import com.course.server.domain.$&#123;Domain&#125;;</span><br><span class="line">  import com.course.server.domain.$&#123;Domain&#125;Example;</span><br><span class="line">  import com.course.server.dto.$&#123;Domain&#125;Dto;</span><br><span class="line">  import com.course.server.dto.PageDto;</span><br><span class="line">  import com.course.server.mapper.$&#123;Domain&#125;Mapper;</span><br><span class="line">  import com.course.server.util.CopyUtil;</span><br><span class="line">  import com.course.server.util.UuidUtil;</span><br><span class="line">  import com.github.pagehelper.PageHelper;</span><br><span class="line">  import com.github.pagehelper.PageInfo;</span><br><span class="line">  import org.springframework.beans.BeanUtils;</span><br><span class="line">  import org.springframework.stereotype.Service;</span><br><span class="line">  import org.springframework.util.StringUtils;</span><br><span class="line">  </span><br><span class="line">  import javax.annotation.Resource;</span><br><span class="line">  import java.util.ArrayList;</span><br><span class="line">  import java.util.List;</span><br><span class="line">  </span><br><span class="line">  @Service</span><br><span class="line">  public class $&#123;Domain&#125;Service &#123;</span><br><span class="line">      @Resource</span><br><span class="line">      private $&#123;Domain&#125;Mapper $&#123;domain&#125;Mapper;</span><br><span class="line">      /**</span><br><span class="line">       * 列表查询</span><br><span class="line">       */</span><br><span class="line">      public void list(PageDto pageDto)&#123;</span><br><span class="line">          PageHelper.startPage(pageDto.getPage(),pageDto.getSize());</span><br><span class="line">          $&#123;Domain&#125;Example $&#123;domain&#125;Example = new $&#123;Domain&#125;Example();</span><br><span class="line">  </span><br><span class="line">          List&lt;$&#123;Domain&#125;&gt; $&#123;domain&#125;List = $&#123;domain&#125;Mapper.selectByExample($&#123;domain&#125;Example);</span><br><span class="line">          PageInfo&lt;$&#123;Domain&#125;&gt; pageInfo =new PageInfo&lt;&gt;($&#123;domain&#125;List);</span><br><span class="line">          pageDto.setTotal(pageInfo.getTotal());</span><br><span class="line">          ArrayList&lt;$&#123;Domain&#125;Dto&gt; $&#123;domain&#125;DtoArrayList = new ArrayList&lt;$&#123;Domain&#125;Dto&gt;();</span><br><span class="line">          for (int i = 0, l=$&#123;domain&#125;List.size(); i &lt;l ; i++) &#123;</span><br><span class="line">              $&#123;Domain&#125; $&#123;domain&#125; = $&#123;domain&#125;List.get(i);</span><br><span class="line">              $&#123;Domain&#125;Dto $&#123;domain&#125;Dto = new $&#123;Domain&#125;Dto();</span><br><span class="line">              BeanUtils.copyProperties($&#123;domain&#125;,$&#123;domain&#125;Dto);</span><br><span class="line">              $&#123;domain&#125;DtoArrayList.add($&#123;domain&#125;Dto);</span><br><span class="line">          &#125;</span><br><span class="line">          pageDto.setList($&#123;domain&#125;DtoArrayList);</span><br><span class="line">      &#125;</span><br><span class="line">      /**</span><br><span class="line">       * 保存，id有值时更新，无值时新增</span><br><span class="line">       */</span><br><span class="line">      public void save($&#123;Domain&#125;Dto $&#123;domain&#125;Dto)&#123;</span><br><span class="line">          $&#123;Domain&#125; $&#123;domain&#125; = CopyUtil.copy($&#123;domain&#125;Dto, $&#123;Domain&#125;.class);</span><br><span class="line">          if(StringUtils.isEmpty($&#123;domain&#125;Dto.getId()))&#123;</span><br><span class="line">              this.insert($&#123;domain&#125;);</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">              this.update($&#123;domain&#125;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      /**</span><br><span class="line">       * 插入</span><br><span class="line">       */</span><br><span class="line">      private void insert($&#123;Domain&#125; $&#123;domain&#125;)&#123;</span><br><span class="line">          $&#123;domain&#125;.setId(UuidUtil.getShortUuid());</span><br><span class="line">          $&#123;domain&#125;Mapper.insert($&#123;domain&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      /**</span><br><span class="line">       * 更新</span><br><span class="line">       */</span><br><span class="line">      private void update($&#123;Domain&#125; $&#123;domain&#125;)&#123;</span><br><span class="line">          $&#123;domain&#125;Mapper.updateByPrimaryKey($&#123;domain&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      /**</span><br><span class="line">       * 删除</span><br><span class="line">       */</span><br><span class="line">      public void delete(String id)&#123;</span><br><span class="line">          $&#123;domain&#125;Mapper.deleteByPrimaryKey(id);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p>其次修改ServerGenerator代码，添加代码变量Domain</p></li><li><p>&#96;&#96;&#96;java<br>package com.course.generator.server;</p><p>import com.course.generator.util.FreemarkerUtil;<br>import freemarker.template.TemplateException;</p><p>import java.io.IOException;<br>import java.util.HashMap;<br>import java.util.Map;</p><p>public class ServerGenerator {<br>static String toServicePath &#x3D; “server\src\main\java\com\course\server\service\“;<br>public static void main(String[] args) throws IOException, TemplateException {<br>    String Domain &#x3D; “Section”;<br>    String domain &#x3D; “section”;<br>    Map&lt;String,Object&gt; map &#x3D;new HashMap&lt;&gt;();<br>    map.put(“Domain”,Domain);<br>    map.put(“domain”,domain);<br><br>    FreemarkerUtil.initConfig(“service.ftl”);<br>    FreemarkerUtil.generator(toServicePath+Domain+”Service.java”,map);<br>}<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 最后改FreemarkerUtil代码，添加参数Map&lt;String,Object&gt; map和修改temp.process(map, bw);</span><br><span class="line"></span><br><span class="line">生成controller层代码，跟生成service一样</span><br><span class="line"></span><br><span class="line">## 6-3 dto层代码生成</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.生成器开发：解决controller模板中的中文业务名称和模块名称问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line">static String MODULE = &quot;business&quot;;</span><br><span class="line">static String toControllerPath = MODULE+&quot;\\src\\main\\java\\com\\course\\&quot;+MODULE+&quot;\\controller\\admin\\&quot;;</span><br><span class="line">String tableNameCn = &quot;小节&quot;;</span><br><span class="line">String module = MODULE;</span><br><span class="line">map.put(&quot;tableNameCn&quot;,tableNameCn);</span><br><span class="line">map.put(&quot;module&quot;,module);</span><br></pre></td></tr></table></figure><ul><li>就是添加了两个变量，再将模板ftl中的值换成变量的值</li></ul><p>dto层代码的生成：</p><ul><li><p>dto层的生成，需要知道表的所有字段，每个字段的类型需要映射成java类型，并且要把字段的变成小驼峰和大驼峰，比如course_id变成CourseId</p></li><li><p>Field类，用于存储每个字段的信息。流程：根据表名获取所有的字段信息，再将字段信息填充到Field类中，得到Field列表,之后将Field列表变量传入模板</p></li><li><pre><code class="java">package com.course.generator.util;public class Field &#123;    private String name; // 字段名：course_id    private String nameHump; // 字段名小驼峰：courseId    private String nameBigHump; // 字段名大驼峰：CourseId    private String nameCn; // 中文名：课程    private String type; // 字段类型：char(8)    private String javaType; // java类型：String    private String comment; // 注释：课程|ID    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    public String getNameHump() &#123;        return nameHump;    &#125;    public void setNameHump(String nameHump) &#123;        this.nameHump = nameHump;    &#125;    public String getNameBigHump() &#123;        return nameBigHump;    &#125;    public void setNameBigHump(String nameBigHump) &#123;        this.nameBigHump = nameBigHump;    &#125;    public String getNameCn() &#123;        return nameCn;    &#125;    public void setNameCn(String nameCn) &#123;        this.nameCn = nameCn;    &#125;    public String getType() &#123;        return type;    &#125;    public void setType(String type) &#123;        this.type = type;    &#125;    public String getComment() &#123;        return comment;    &#125;    public void setComment(String comment) &#123;        this.comment = comment;    &#125;    public String getJavaType() &#123;        return javaType;    &#125;    public void setJavaType(String javaType) &#123;        this.javaType = javaType;    &#125;    @Override    public String toString() &#123;        final StringBuffer sb = new StringBuffer(&quot;Field&#123;&quot;);        sb.append(&quot;name=&#39;&quot;).append(name).append(&#39;\&#39;&#39;);        sb.append(&quot;, nameHump=&#39;&quot;).append(nameHump).append(&#39;\&#39;&#39;);        sb.append(&quot;, nameBigHump=&#39;&quot;).append(nameBigHump).append(&#39;\&#39;&#39;);        sb.append(&quot;, nameCn=&#39;&quot;).append(nameCn).append(&#39;\&#39;&#39;);        sb.append(&quot;, type=&#39;&quot;).append(type).append(&#39;\&#39;&#39;);        sb.append(&quot;, javaType=&#39;&quot;).append(javaType).append(&#39;\&#39;&#39;);        sb.append(&quot;, comment=&#39;&quot;).append(comment).append(&#39;\&#39;&#39;);        sb.append(&#39;&#125;&#39;);        return sb.toString();    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- typeSet作用：整理出所有用到的Java类型，生成import语一种类型只需import一次，所以用set去重</span><br><span class="line"></span><br><span class="line">- JsonFormat注解：将后端日期类型格式化，再返回给前端</span><br><span class="line">  </span><br><span class="line">- 增加DbUtil.java</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.course.generator.util;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  import java.sql.*;</span><br><span class="line">  import java.util.ArrayList;</span><br><span class="line">  import java.util.List;</span><br><span class="line">  import java.util.regex.Matcher;</span><br><span class="line">  import java.util.regex.Pattern;</span><br><span class="line">  </span><br><span class="line">  public class DbUtil &#123;</span><br><span class="line">  </span><br><span class="line">      public static Connection getConnection() &#123;</span><br><span class="line">          Connection conn = null;</span><br><span class="line">          try &#123;</span><br><span class="line">              Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">              String url = &quot;jdbc:mysql://localhost:3306/courseimooc&quot;;</span><br><span class="line">              String user = &quot;courseimooc&quot;;</span><br><span class="line">              String pass = &quot;666666&quot;;</span><br><span class="line">              conn = DriverManager.getConnection(url, user, pass);</span><br><span class="line">          &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125; catch (SQLException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">          return conn;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 获得表注释</span><br><span class="line">       * @param tableName</span><br><span class="line">       * @return</span><br><span class="line">       * @throws Exception</span><br><span class="line">       */</span><br><span class="line">      public static String getTableComment(String tableName) throws Exception &#123;</span><br><span class="line">          Connection conn = getConnection();</span><br><span class="line">          Statement stmt = conn.createStatement();</span><br><span class="line">          ResultSet rs = stmt.executeQuery(&quot;select table_comment from information_schema.tables Where table_name = &#x27;&quot; + tableName + &quot;&#x27;&quot;);</span><br><span class="line">          String tableNameCH = &quot;&quot;;</span><br><span class="line">          if (rs != null) &#123;</span><br><span class="line">              while(rs.next()) &#123;</span><br><span class="line">                  tableNameCH = rs.getString(&quot;table_comment&quot;);</span><br><span class="line">                  break;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          rs.close();</span><br><span class="line">          stmt.close();</span><br><span class="line">          conn.close();</span><br><span class="line">          System.out.println(&quot;表名：&quot; + tableNameCH);</span><br><span class="line">          return tableNameCH;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 获得所有列信息</span><br><span class="line">       * @param tableName</span><br><span class="line">       * @return</span><br><span class="line">       * @throws Exception</span><br><span class="line">       */</span><br><span class="line">      public static List&lt;Field&gt; getColumnByTableName(String tableName) throws Exception &#123;</span><br><span class="line">          List&lt;Field&gt; fieldList = new ArrayList&lt;&gt;();</span><br><span class="line">          Connection conn = getConnection();</span><br><span class="line">          Statement stmt = conn.createStatement();</span><br><span class="line">          ResultSet rs = stmt.executeQuery(&quot;show full columns from `&quot; + tableName + &quot;`&quot;);</span><br><span class="line">          if (rs != null) &#123;</span><br><span class="line">              while(rs.next()) &#123;</span><br><span class="line">                  String columnName = rs.getString(&quot;Field&quot;);</span><br><span class="line">                  String type = rs.getString(&quot;Type&quot;);</span><br><span class="line">                  String comment = rs.getString(&quot;Comment&quot;);</span><br><span class="line">                  String nullAble = rs.getString(&quot;Null&quot;); //YES NO</span><br><span class="line">                  Field field = new Field();</span><br><span class="line">                  field.setName(columnName);</span><br><span class="line">                  field.setNameHump(lineToHump(columnName));</span><br><span class="line">                  field.setNameBigHump(lineToBigHump(columnName));</span><br><span class="line">                  field.setType(type);</span><br><span class="line">                  field.setJavaType(DbUtil.sqlTypeToJavaType(rs.getString(&quot;Type&quot;)));</span><br><span class="line">                  field.setComment(comment);</span><br><span class="line">                  if (comment.contains(&quot;|&quot;)) &#123;</span><br><span class="line">                      field.setNameCn(comment.substring(0, comment.indexOf(&quot;|&quot;)));</span><br><span class="line">                  &#125; else &#123;</span><br><span class="line">                      field.setNameCn(comment);</span><br><span class="line">                  &#125;</span><br><span class="line">  </span><br><span class="line">                  fieldList.add(field);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          rs.close();</span><br><span class="line">          stmt.close();</span><br><span class="line">          conn.close();</span><br><span class="line">          System.out.println(&quot;列信息：&quot; + fieldList);</span><br><span class="line">          return fieldList;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 下划线转小驼峰</span><br><span class="line">       */</span><br><span class="line">      public static String lineToHump(String str)&#123;</span><br><span class="line">          Pattern linePattern = Pattern.compile(&quot;_(\\w)&quot;);</span><br><span class="line">          str = str.toLowerCase();</span><br><span class="line">          Matcher matcher = linePattern.matcher(str);</span><br><span class="line">          StringBuffer sb = new StringBuffer();</span><br><span class="line">          while(matcher.find())&#123;</span><br><span class="line">              matcher.appendReplacement(sb, matcher.group(1).toUpperCase());</span><br><span class="line">          &#125;</span><br><span class="line">          matcher.appendTail(sb);</span><br><span class="line">          return sb.toString();</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 下划线转大驼峰</span><br><span class="line">       */</span><br><span class="line">      public static String lineToBigHump(String str)&#123;</span><br><span class="line">          String s = lineToHump(str);</span><br><span class="line">          return s.substring(0, 1).toUpperCase() + s.substring(1);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 数据库类型转为Java类型</span><br><span class="line">       */</span><br><span class="line">      public static String sqlTypeToJavaType(String sqlType) &#123;</span><br><span class="line">          if (sqlType.toUpperCase().contains(&quot;varchar&quot;.toUpperCase())</span><br><span class="line">                  || sqlType.toUpperCase().contains(&quot;char&quot;.toUpperCase())</span><br><span class="line">                  || sqlType.toUpperCase().contains(&quot;text&quot;.toUpperCase())) &#123;</span><br><span class="line">              return &quot;String&quot;;</span><br><span class="line">          &#125; else if (sqlType.toUpperCase().contains(&quot;datetime&quot;.toUpperCase())) &#123;</span><br><span class="line">              return &quot;Date&quot;;</span><br><span class="line">          &#125; else if (sqlType.toUpperCase().contains(&quot;int&quot;.toUpperCase())) &#123;</span><br><span class="line">              return &quot;Integer&quot;;</span><br><span class="line">          &#125; else if (sqlType.toUpperCase().contains(&quot;long&quot;.toUpperCase())) &#123;</span><br><span class="line">              return &quot;Long&quot;;</span><br><span class="line">          &#125; else if (sqlType.toUpperCase().contains(&quot;decimal&quot;.toUpperCase())) &#123;</span><br><span class="line">              return &quot;BigDecimal&quot;;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">              return &quot;String&quot;;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>记得导入数据库连接的依赖，然后使用在启动类</p></li><li><pre><code class="java">List&lt;Field&gt; fieldList = null;try &#123;    fieldList = DbUtil.getColumnByTableName(domain);&#125; catch (Exception e) &#123;    e.printStackTrace();&#125;Set&lt;String&gt; typeSet = getJavaTypes(fieldList);map.put(&quot;fieldList&quot;,fieldList);map.put(&quot;typeSet&quot;,typeSet);//生成dtoFreemarkerUtil.initConfig(&quot;dto.ftl&quot;);FreemarkerUtil.generator(toDtoPath+Domain+&quot;Dto.java&quot;,map);    private static Set&lt;String&gt; getJavaTypes(List&lt;Field&gt; fieldList) &#123;        Set&lt;String&gt; set = new HashSet&lt;&gt;();        for (int i = 0; i &lt; fieldList.size(); i++) &#123;            Field field = fieldList.get(i);            set.add(field.getJavaType());        &#125;        return set;    &#125;  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">通用代码生成器和mybatis generator整合：</span><br><span class="line"></span><br><span class="line">- 首先增加依赖（根目录和generator）</span><br><span class="line"></span><br><span class="line">- ```xml</span><br><span class="line">  &lt;!-- 读xml --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.dom4j&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;dom4j&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;2.1.1&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>在启动类增加代码</p></li><li><pre><code class="java">static String generatorConfigPath = &quot;server\\src\\main\\resources\\generator\\generatorConfig.xml&quot;;    // 只生成配置文件中的第一个table节点    File file = new File(generatorConfigPath);    SAXReader reader=new SAXReader();    //读取xml文件到Document中    Document doc= null;    try &#123;        doc = reader.read(file);    &#125; catch (DocumentException e) &#123;        e.printStackTrace();    &#125;    //获取xml文件的根节点    Element rootElement=doc.getRootElement();    //读取context节点    Element contextElement = rootElement.element(&quot;context&quot;);    //定义一个Element用于遍历    Element tableElement;    //取第一个“table”的节点    tableElement=contextElement.elementIterator(&quot;table&quot;).next();    String Domain = tableElement.attributeValue(&quot;domainObjectName&quot;);    String tableName = tableElement.attributeValue(&quot;tableName&quot;);    String tableNameCn = null;    try &#123;        tableNameCn = DbUtil.getTableComment(tableName);    &#125; catch (Exception e) &#123;        e.printStackTrace();    &#125;    String domain = Domain.substring(0, 1).toLowerCase() + Domain.substring(1);    System.out.println(&quot;表：&quot;+tableElement.attributeValue(&quot;tableName&quot;));    System.out.println(&quot;Domain：&quot;+tableElement.attributeValue(&quot;domainObjectName&quot;));    List&lt;Field&gt; fieldList  = null;    try &#123;        fieldList = DbUtil.getColumnByTableName(tableName);    &#125; catch (Exception e) &#123;        e.printStackTrace();    &#125;    Set&lt;String&gt; typeSet = getJavaTypes(fieldList);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 6-4 前端vue界面代码生成</span><br><span class="line"></span><br><span class="line">vue cli多环境处理：自定义多环境变量必须以VUE_APP开头；NODE_ENV用来表示生产的环境</span><br><span class="line"></span><br><span class="line">- 在admin下增加两个文件分别是.env.dev和.env.prod</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  NODE_ENV=development</span><br><span class="line">  VUE_APP_SERVER=http://192.168.0.105:9000</span><br><span class="line">  ////////////////////////////////////////////</span><br><span class="line">  NODE_ENV=development</span><br><span class="line">  VUE_APP_SERVER=http://server.imooc.com</span><br></pre></td></tr></table></figure></code></pre></li><li><p>最后将地址改为变量VUE_APP_SERVER</p></li></ul><p>新建VueGenerator用于生成vue页面代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.生成器开发：增加生成vue界面代码。</span><br><span class="line">2.小节管理增删改查功能测试成功</span><br></pre></td></tr></table></figure><ul><li>新建vue.ftl，代码从chapter.vue复制过来。注意：这里的粘贴应该右键-选择不带格式化的粘贴。一样改变量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">      &lt;button v-on:click=&quot;add()&quot; class=&quot;btn btn-white btn-default btn-round&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;ace-icon fa fa-edit red2&quot;&gt;&lt;/i&gt;</span><br><span class="line">        新增</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &amp;nbsp;</span><br><span class="line">      &lt;button v-on:click=&quot;list()&quot; class=&quot;btn btn-white btn-default btn-round&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;ace-icon fa fa-refresh red2&quot;&gt;&lt;/i&gt;</span><br><span class="line">        刷新</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;pagination ref=&quot;pagination&quot; v-bind:list=&quot;list&quot; v-bind:itemCount=&quot;8&quot;&gt;&lt;/pagination&gt;</span><br><span class="line">      &lt;table id=&quot;simple-table&quot; class=&quot;table  table-bordered table-hover&quot;&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;&lt;#list fieldList as field&gt;</span><br><span class="line">            &lt;th&gt;$&#123;field.nameCn&#125;&lt;/th&gt;&lt;/#list&gt;</span><br><span class="line">            &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line"></span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">        &lt;tr v-for=&quot;$&#123;domain&#125; in $&#123;domain&#125;s&quot;&gt;</span><br><span class="line">          &lt;#list fieldList as field&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;$&#123;domain&#125;.$&#123;field.nameHump&#125;&#125;&#125;&lt;/td&gt;</span><br><span class="line">          &lt;/#list&gt;</span><br><span class="line"></span><br><span class="line">          &lt;td&gt;</span><br><span class="line">            &lt;div class=&quot;hidden-sm hidden-xs btn-group&quot;&gt;</span><br><span class="line"></span><br><span class="line">              &lt;button v-on:click=&quot;edit($&#123;domain&#125;)&quot; class=&quot;btn btn-xs btn-info&quot;&gt;</span><br><span class="line">                &lt;i class=&quot;ace-icon fa fa-pencil bigger-120&quot;&gt;&lt;/i&gt;</span><br><span class="line">              &lt;/button&gt;</span><br><span class="line"></span><br><span class="line">              &lt;button v-on:click=&quot;del($&#123;domain&#125;.id)&quot; class=&quot;btn btn-xs btn-danger&quot;&gt;</span><br><span class="line">                &lt;i class=&quot;ace-icon fa fa-trash-o bigger-120&quot;&gt;&lt;/i&gt;</span><br><span class="line">              &lt;/button&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=&quot;hidden-md hidden-lg&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;inline pos-rel&quot;&gt;</span><br><span class="line">                &lt;button class=&quot;btn btn-minier btn-primary dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; data-position=&quot;auto&quot;&gt;</span><br><span class="line">                  &lt;i class=&quot;ace-icon fa fa-cog icon-only bigger-110&quot;&gt;&lt;/i&gt;</span><br><span class="line">                &lt;/button&gt;</span><br><span class="line"></span><br><span class="line">                &lt;ul class=&quot;dropdown-menu dropdown-only-icon dropdown-yellow dropdown-menu-right dropdown-caret dropdown-close&quot;&gt;</span><br><span class="line">                  &lt;li&gt;</span><br><span class="line">                    &lt;a href=&quot;#&quot; class=&quot;tooltip-info&quot; data-rel=&quot;tooltip&quot; title=&quot;View&quot;&gt;</span><br><span class="line">                                                         &lt;span class=&quot;blue&quot;&gt;</span><br><span class="line">                                                            &lt;i class=&quot;ace-icon fa fa-search-plus bigger-120&quot;&gt;&lt;/i&gt;</span><br><span class="line">                                                         &lt;/span&gt;</span><br><span class="line">                    &lt;/a&gt;</span><br><span class="line">                  &lt;/li&gt;</span><br><span class="line"></span><br><span class="line">                  &lt;li&gt;</span><br><span class="line">                    &lt;a href=&quot;#&quot; class=&quot;tooltip-success&quot; data-rel=&quot;tooltip&quot; title=&quot;Edit&quot;&gt;</span><br><span class="line">                                                         &lt;span class=&quot;green&quot;&gt;</span><br><span class="line">                                                            &lt;i class=&quot;ace-icon fa fa-pencil-square-o bigger-120&quot;&gt;&lt;/i&gt;</span><br><span class="line">                                                         &lt;/span&gt;</span><br><span class="line">                    &lt;/a&gt;</span><br><span class="line">                  &lt;/li&gt;</span><br><span class="line"></span><br><span class="line">                  &lt;li&gt;</span><br><span class="line">                    &lt;a href=&quot;#&quot; class=&quot;tooltip-error&quot; data-rel=&quot;tooltip&quot; title=&quot;Delete&quot;&gt;</span><br><span class="line">                                                         &lt;span class=&quot;red&quot;&gt;</span><br><span class="line">                                                            &lt;i class=&quot;ace-icon fa fa-trash-o bigger-120&quot;&gt;&lt;/i&gt;</span><br><span class="line">                                                         &lt;/span&gt;</span><br><span class="line">                    &lt;/a&gt;</span><br><span class="line">                  &lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">      &lt;/table&gt;</span><br><span class="line">    &lt;div id=&quot;form-modal&quot; class=&quot;modal fade&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;modal-dialog&quot; role=&quot;document&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;modal-content&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;modal-header&quot;&gt;</span><br><span class="line">            &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;&lt;/button&gt;</span><br><span class="line">            &lt;h4 class=&quot;modal-title&quot;&gt;表单&lt;/h4&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;modal-body&quot;&gt;</span><br><span class="line">            &lt;form class=&quot;form-horizontal&quot;&gt;</span><br><span class="line">              &lt;#list fieldList as field&gt;</span><br><span class="line">                &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                  &lt;label  class=&quot;col-sm-2 control-label&quot;&gt;$&#123;field.nameCn&#125;&lt;/label&gt;</span><br><span class="line">                  &lt;div class=&quot;col-sm-10&quot;&gt;</span><br><span class="line">                    &lt;input v-model=&quot;$&#123;domain&#125;.$&#123;field.nameHump&#125;&quot; class=&quot;form-control&quot;  &gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/#list&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;modal-footer&quot;&gt;</span><br><span class="line">            &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; data-dismiss=&quot;modal&quot;&gt;取消&lt;/button&gt;</span><br><span class="line">            &lt;button v-on:click=&quot;save()&quot; type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;保存&lt;/button&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;&lt;!-- /.modal-content --&gt;</span><br><span class="line">      &lt;/div&gt;&lt;!-- /.modal-dialog --&gt;</span><br><span class="line">    &lt;/div&gt;&lt;!-- /.modal --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Pagination from &quot;../../components/pagination&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;Pagination&#125;,</span><br><span class="line">  name: &#x27;$&#123;domain&#125;&#x27;,</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      $&#123;domain&#125;: &#123;&#125;,</span><br><span class="line">      $&#123;domain&#125;s: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted: function () &#123;</span><br><span class="line">    let _this = this;</span><br><span class="line">    _this.$refs.pagination.size = 5;</span><br><span class="line">    _this.list(1);</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    add() &#123;</span><br><span class="line">      let _this = this;</span><br><span class="line">      _this.$&#123;domain&#125; = &#123;&#125;;</span><br><span class="line">      $(&quot;#form-modal&quot;).modal(&quot;show&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">    edit($&#123;domain&#125;) &#123;</span><br><span class="line">      let _this = this;</span><br><span class="line">      _this.$&#123;domain&#125; = $.extend(&#123;&#125;, $&#123;domain&#125;);</span><br><span class="line">      $(&quot;#form-modal&quot;).modal(&quot;show&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">     * 列表查询</span><br><span class="line">     */</span><br><span class="line">    list(page) &#123;</span><br><span class="line">      let _this = this;</span><br><span class="line">      Loading.show();</span><br><span class="line">      _this.$ajax.post(process.env.VUE_APP_SERVER +&#x27;/$&#123;module&#125;/admin/$&#123;domain&#125;/list&#x27;, &#123;</span><br><span class="line">        page: page,</span><br><span class="line">        size: _this.$refs.pagination.size,</span><br><span class="line">      &#125;).then((respond) =&gt; &#123;</span><br><span class="line">        Loading.hide();</span><br><span class="line">        let resp = respond.data;</span><br><span class="line">        _this.$&#123;domain&#125;s = resp.content.list;</span><br><span class="line">        _this.$refs.pagination.render(page, resp.content.total);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">     * 点击保存</span><br><span class="line">     */</span><br><span class="line">    save(page) &#123;</span><br><span class="line">      let _this = this;</span><br><span class="line"></span><br><span class="line">      // 保存校验</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      Loading.show();</span><br><span class="line">      _this.$ajax.post(process.env.VUE_APP_SERVER +&#x27;/$&#123;module&#125;/admin/$&#123;domain&#125;/save&#x27;, _this.$&#123;domain&#125;).then((respond) =&gt; &#123;</span><br><span class="line">        Loading.hide();</span><br><span class="line">        let resp = respond.data;</span><br><span class="line">        if (resp.success) &#123;</span><br><span class="line">          $(&quot;#form-modal&quot;).modal(&quot;hide&quot;);</span><br><span class="line">          _this.list(1);</span><br><span class="line">          Toast.success(&quot;保存成功&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          Toast.warning(resp.message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">     * 点击删除</span><br><span class="line">     */</span><br><span class="line">    del(id) &#123;</span><br><span class="line">      let _this = this;</span><br><span class="line">      Confirm.show(&quot;删除$&#123;tableNameCn&#125;后不可恢复!&quot;,function ()&#123;</span><br><span class="line">        Loading.show();</span><br><span class="line">        _this.$ajax.delete(process.env.VUE_APP_SERVER +&#x27;/$&#123;module&#125;/admin/$&#123;domain&#125;/delete/&#x27; + id).then((respond) =&gt; &#123;</span><br><span class="line">          Loading.hide();</span><br><span class="line">          let resp = respond.data;</span><br><span class="line">          if (resp.success) &#123;</span><br><span class="line">            _this.list(1);</span><br><span class="line">            Toast.success(&quot;删除成功&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>其次创建VueGenerator启动类</p></li><li><pre><code class="java">package com.course.generator.vue;import com.course.generator.util.DbUtil;import com.course.generator.util.Field;import com.course.generator.util.FreemarkerUtil;import freemarker.template.TemplateException;import org.dom4j.Document;import org.dom4j.DocumentException;import org.dom4j.Element;import org.dom4j.io.SAXReader;import java.io.File;import java.io.IOException;import java.util.*;public class VueGenerator &#123;    static String MODULE = &quot;business&quot;;    static String toVuePath = &quot;admin\\src\\views\\admin\\&quot;;    static String generatorConfigPath = &quot;server\\src\\main\\resources\\generator\\generatorConfig.xml&quot;;    public static void main(String[] args) throws IOException, TemplateException &#123;        String module = MODULE;        // 只生成配置文件中的第一个table节点        File file = new File(generatorConfigPath);        SAXReader reader=new SAXReader();        //读取xml文件到Document中        Document doc= null;        try &#123;            doc = reader.read(file);        &#125; catch (DocumentException e) &#123;            e.printStackTrace();        &#125;        //获取xml文件的根节点        Element rootElement=doc.getRootElement();        //读取context节点        Element contextElement = rootElement.element(&quot;context&quot;);        //定义一个Element用于遍历        Element tableElement;        //取第一个“table”的节点        tableElement=contextElement.elementIterator(&quot;table&quot;).next();        String Domain = tableElement.attributeValue(&quot;domainObjectName&quot;);        String tableName = tableElement.attributeValue(&quot;tableName&quot;);        String tableNameCn = null;        try &#123;            tableNameCn = DbUtil.getTableComment(tableName);        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;        String domain = Domain.substring(0, 1).toLowerCase() + Domain.substring(1);        System.out.println(&quot;表：&quot;+tableElement.attributeValue(&quot;tableName&quot;));        System.out.println(&quot;Domain：&quot;+tableElement.attributeValue(&quot;domainObjectName&quot;));        List&lt;Field&gt; fieldList  = null;        try &#123;            fieldList = DbUtil.getColumnByTableName(tableName);        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;        Set&lt;String&gt; typeSet = getJavaTypes(fieldList);        Map&lt;String,Object&gt; map =new HashMap&lt;&gt;();        map.put(&quot;Domain&quot;,Domain);        map.put(&quot;domain&quot;,domain);        map.put(&quot;tableNameCn&quot;,tableNameCn);        map.put(&quot;module&quot;,module);        map.put(&quot;fieldList&quot;,fieldList);        map.put(&quot;typeSet&quot;,typeSet);        //生成dto        FreemarkerUtil.initConfig(&quot;vue.ftl&quot;);        FreemarkerUtil.generator(toVuePath+domain+&quot;.vue&quot;,map);       &#125;    /**     * 获取所有的Java类型，使用Set去重     */    private static Set&lt;String&gt; getJavaTypes(List&lt;Field&gt; fieldList) &#123;        Set&lt;String&gt; set = new HashSet&lt;&gt;();        for (int i = 0; i &lt; fieldList.size(); i++) &#123;            Field field = fieldList.get(i);            set.add(field.getJavaType());        &#125;        return set;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后在admin.vue增加</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;li class=&quot;active&quot; id=&quot;business-section-sidebar&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/business/section&quot;&gt;</span><br><span class="line">      &lt;i class=&quot;menu-icon fa fa-caret-right&quot;&gt;&lt;/i&gt;</span><br><span class="line">      小节管理</span><br><span class="line">    &lt;/router-link&gt;</span><br><span class="line">    &lt;b class=&quot;arrow&quot;&gt;&lt;/b&gt;</span><br><span class="line">  &lt;/li&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>添加路由</p></li><li><p>&#96;&#96;&#96;js<br>,{<br>path: “business&#x2F;section”,<br>name:”business&#x2F;section”,<br>component: Section,<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 6-5 字段校验和通用字段的处理</span><br><span class="line"></span><br><span class="line">前后端模板增加字段校验</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.生成器开发，前后端模板增加字段校验</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在Field添加两个变量</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  private Boolean nullAble;//是否可为空</span><br><span class="line">  private Integer length;//字符串长度</span><br><span class="line">  /////////////////////////////////</span><br><span class="line">  public Boolean getNullAble() &#123;</span><br><span class="line">      return nullAble;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public void setNullAble(Boolean nullAble) &#123;</span><br><span class="line">      this.nullAble = nullAble;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public Integer getLength() &#123;</span><br><span class="line">      return length;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public void setLength(Integer length) &#123;</span><br><span class="line">      this.length = length;</span><br><span class="line">  &#125;</span><br><span class="line">  ////////////////////////////////////////////////////</span><br><span class="line">  sb.append(&quot;, nullAble=&quot;).append(nullAble);</span><br><span class="line">  sb.append(&quot;, length=&quot;).append(length);</span><br></pre></td></tr></table></figure><ul><li><p>其次在DbUtil中增加：</p></li><li><p>约定：当length&gt;0时，表示需要对lenth做校验，当length&#x3D;0时，表示不需要校验</p></li><li><p>疑问：char类型为什么不需要效验长度？</p></li><li><p>解答：char类型一般用于固定长度的字段，常见的有id字段和枚举字段，id字段不需要校验，枚举字段界面一般会有下拉框，不是手输的，不需要校验。</p></li><li><pre><code class="java">String nullAble = rs.getString(&quot;Null&quot;); //YES NOfield.setNullAble(&quot;YES&quot;.equals(nullAble));if(type.toUpperCase().contains(&quot;varchar&quot;.toUpperCase()))&#123;    String lengthStr = type.substring(type.indexOf(&quot;(&quot;)+1,type.length()-1);    field.setLength(Integer.valueOf(lengthStr));&#125;else&#123;    field.setLength(0);&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 增加controller.ftl的保存校验</span><br><span class="line"></span><br><span class="line">- ```ftl</span><br><span class="line">  &lt;#list fieldList as field&gt;</span><br><span class="line">  &lt;#if !field.nullAble&gt;</span><br><span class="line">      ValidatorUtil.require($&#123;domain&#125;Dto.get$&#123;field.nameBigHump&#125;(), &quot;$&#123;field.nameCn&#125;&quot;);</span><br><span class="line">  &lt;/#if&gt;</span><br><span class="line">  &lt;#if (field.length &gt; 0)&gt;</span><br><span class="line">      ValidatorUtil.length($&#123;domain&#125;Dto.get$&#123;field.nameBigHump&#125;(), &quot;$&#123;field.nameCn&#125;&quot;, 1, $&#123;field.length&#125;);</span><br><span class="line">  &lt;/#if&gt;</span><br><span class="line">  &lt;/#list&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>增加前端vue.ftl校验</p></li><li><pre><code class="ftl">// 保存校验if (1 != 1 //是为了第一个请求或者长度没有||&lt;#list fieldList as field&gt;&lt;#if !field.nullAble&gt;|| !Validator.require(_this.$&#123;domain&#125;.$&#123;field.nameHump&#125;, &quot;$&#123;field.nameCn&#125;&quot;)&lt;/#if&gt;&lt;#if (field.length &gt; 0)&gt;|| !Validator.length(_this.$&#123;domain&#125;.$&#123;field.nameHump&#125;, &quot;$&#123;field.nameCn&#125;&quot;, 1, $&#123;field.length&#125;)&lt;/#if&gt;&lt;/#list&gt;) &#123;  return;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 对ValidatorUtil的js和后端的java分别增加</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  if(Tool.isEmpty(value))&#123;</span><br><span class="line">      return true;</span><br><span class="line">  &#125;</span><br><span class="line">  //////////////////////////////////</span><br><span class="line">  if(StringUtils.isEmpty(str))&#123;</span><br><span class="line">              return;</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure>cdn.bootcss.com偶尔会出现404，导致jquery.blockUI.min.js没下载下来。原因可能是cdn不稳定，也可能是本地网络不稳定.将jquery.blockUI.min.js复制到本地，不使用cdn</code></pre></li><li><pre><code class="js">/** jQuery BlockUI; v20141123* http://jquery.malsup.com/block/* Copyright (c) 2014 M. Alsup; Dual licensed: MIT/GPL*/(function()&#123;&quot;use strict&quot;;function e(e)&#123;function o(o,i)&#123;var s,h,k=o==window,v=i&amp;&amp;void 0!==i.message?i.message:void 0;if(i=e.extend(&#123;&#125;,e.blockUI.defaults,i||&#123;&#125;),!i.ignoreIfBlocked||!e(o).data(&quot;blockUI.isBlocked&quot;))&#123;if(i.overlayCSS=e.extend(&#123;&#125;,e.blockUI.defaults.overlayCSS,i.overlayCSS||&#123;&#125;),s=e.extend(&#123;&#125;,e.blockUI.defaults.css,i.css||&#123;&#125;),i.onOverlayClick&amp;&amp;(i.overlayCSS.cursor=&quot;pointer&quot;),h=e.extend(&#123;&#125;,e.blockUI.defaults.themedCSS,i.themedCSS||&#123;&#125;),v=void 0===v?i.message:v,k&amp;&amp;b&amp;&amp;t(window,&#123;fadeOut:0&#125;),v&amp;&amp;&quot;string&quot;!=typeof v&amp;&amp;(v.parentNode||v.jquery))&#123;var y=v.jquery?v[0]:v,m=&#123;&#125;;e(o).data(&quot;blockUI.history&quot;,m),m.el=y,m.parent=y.parentNode,m.display=y.style.display,m.position=y.style.position,m.parent&amp;&amp;m.parent.removeChild(y)&#125;e(o).data(&quot;blockUI.onUnblock&quot;,i.onUnblock);var g,I,w,U,x=i.baseZ;g=r||i.forceIframe?e(&#39;&lt;iframe class=&quot;blockUI&quot; style=&quot;z-index:&#39;+x++ +&#39;;display:none;border:none;margin:0;padding:0;position:absolute;width:100%;height:100%;top:0;left:0&quot; src=&quot;&#39;+i.iframeSrc+&#39;&quot;&gt;&lt;/iframe&gt;&#39;):e(&#39;&lt;div class=&quot;blockUI&quot; style=&quot;display:none&quot;&gt;&lt;/div&gt;&#39;),I=i.theme?e(&#39;&lt;div class=&quot;blockUI blockOverlay ui-widget-overlay&quot; style=&quot;z-index:&#39;+x++ +&#39;;display:none&quot;&gt;&lt;/div&gt;&#39;):e(&#39;&lt;div class=&quot;blockUI blockOverlay&quot; style=&quot;z-index:&#39;+x++ +&#39;;display:none;border:none;margin:0;padding:0;width:100%;height:100%;top:0;left:0&quot;&gt;&lt;/div&gt;&#39;),i.theme&amp;&amp;k?(U=&#39;&lt;div class=&quot;blockUI &#39;+i.blockMsgClass+&#39; blockPage ui-dialog ui-widget ui-corner-all&quot; style=&quot;z-index:&#39;+(x+10)+&#39;;display:none;position:fixed&quot;&gt;&#39;,i.title&amp;&amp;(U+=&#39;&lt;div class=&quot;ui-widget-header ui-dialog-titlebar ui-corner-all blockTitle&quot;&gt;&#39;+(i.title||&quot;&amp;nbsp;&quot;)+&quot;&lt;/div&gt;&quot;),U+=&#39;&lt;div class=&quot;ui-widget-content ui-dialog-content&quot;&gt;&lt;/div&gt;&#39;,U+=&quot;&lt;/div&gt;&quot;):i.theme?(U=&#39;&lt;div class=&quot;blockUI &#39;+i.blockMsgClass+&#39; blockElement ui-dialog ui-widget ui-corner-all&quot; style=&quot;z-index:&#39;+(x+10)+&#39;;display:none;position:absolute&quot;&gt;&#39;,i.title&amp;&amp;(U+=&#39;&lt;div class=&quot;ui-widget-header ui-dialog-titlebar ui-corner-all blockTitle&quot;&gt;&#39;+(i.title||&quot;&amp;nbsp;&quot;)+&quot;&lt;/div&gt;&quot;),U+=&#39;&lt;div class=&quot;ui-widget-content ui-dialog-content&quot;&gt;&lt;/div&gt;&#39;,U+=&quot;&lt;/div&gt;&quot;):U=k?&#39;&lt;div class=&quot;blockUI &#39;+i.blockMsgClass+&#39; blockPage&quot; style=&quot;z-index:&#39;+(x+10)+&#39;;display:none;position:fixed&quot;&gt;&lt;/div&gt;&#39;:&#39;&lt;div class=&quot;blockUI &#39;+i.blockMsgClass+&#39; blockElement&quot; style=&quot;z-index:&#39;+(x+10)+&#39;;display:none;position:absolute&quot;&gt;&lt;/div&gt;&#39;,w=e(U),v&amp;&amp;(i.theme?(w.css(h),w.addClass(&quot;ui-widget-content&quot;)):w.css(s)),i.theme||I.css(i.overlayCSS),I.css(&quot;position&quot;,k?&quot;fixed&quot;:&quot;absolute&quot;),(r||i.forceIframe)&amp;&amp;g.css(&quot;opacity&quot;,0);var C=[g,I,w],S=k?e(&quot;body&quot;):e(o);e.each(C,function()&#123;this.appendTo(S)&#125;),i.theme&amp;&amp;i.draggable&amp;&amp;e.fn.draggable&amp;&amp;w.draggable(&#123;handle:&quot;.ui-dialog-titlebar&quot;,cancel:&quot;li&quot;&#125;);var O=f&amp;&amp;(!e.support.boxModel||e(&quot;object,embed&quot;,k?null:o).length&gt;0);if(u||O)&#123;if(k&amp;&amp;i.allowBodyStretch&amp;&amp;e.support.boxModel&amp;&amp;e(&quot;html,body&quot;).css(&quot;height&quot;,&quot;100%&quot;),(u||!e.support.boxModel)&amp;&amp;!k)var E=d(o,&quot;borderTopWidth&quot;),T=d(o,&quot;borderLeftWidth&quot;),M=E?&quot;(0 - &quot;+E+&quot;)&quot;:0,B=T?&quot;(0 - &quot;+T+&quot;)&quot;:0;e.each(C,function(e,o)&#123;var t=o[0].style;if(t.position=&quot;absolute&quot;,2&gt;e)k?t.setExpression(&quot;height&quot;,&quot;Math.max(document.body.scrollHeight, document.body.offsetHeight) - (jQuery.support.boxModel?0:&quot;+i.quirksmodeOffsetHack+&#39;) + &quot;px&quot;&#39;):t.setExpression(&quot;height&quot;,&#39;this.parentNode.offsetHeight + &quot;px&quot;&#39;),k?t.setExpression(&quot;width&quot;,&#39;jQuery.support.boxModel &amp;&amp; document.documentElement.clientWidth || document.body.clientWidth + &quot;px&quot;&#39;):t.setExpression(&quot;width&quot;,&#39;this.parentNode.offsetWidth + &quot;px&quot;&#39;),B&amp;&amp;t.setExpression(&quot;left&quot;,B),M&amp;&amp;t.setExpression(&quot;top&quot;,M);else if(i.centerY)k&amp;&amp;t.setExpression(&quot;top&quot;,&#39;(document.documentElement.clientHeight || document.body.clientHeight) / 2 - (this.offsetHeight / 2) + (blah = document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + &quot;px&quot;&#39;),t.marginTop=0;else if(!i.centerY&amp;&amp;k)&#123;var n=i.css&amp;&amp;i.css.top?parseInt(i.css.top,10):0,s=&quot;((document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + &quot;+n+&#39;) + &quot;px&quot;&#39;;t.setExpression(&quot;top&quot;,s)&#125;&#125;)&#125;if(v&amp;&amp;(i.theme?w.find(&quot;.ui-widget-content&quot;).append(v):w.append(v),(v.jquery||v.nodeType)&amp;&amp;e(v).show()),(r||i.forceIframe)&amp;&amp;i.showOverlay&amp;&amp;g.show(),i.fadeIn)&#123;var j=i.onBlock?i.onBlock:c,H=i.showOverlay&amp;&amp;!v?j:c,z=v?j:c;i.showOverlay&amp;&amp;I._fadeIn(i.fadeIn,H),v&amp;&amp;w._fadeIn(i.fadeIn,z)&#125;else i.showOverlay&amp;&amp;I.show(),v&amp;&amp;w.show(),i.onBlock&amp;&amp;i.onBlock.bind(w)();if(n(1,o,i),k?(b=w[0],p=e(i.focusableElements,b),i.focusInput&amp;&amp;setTimeout(l,20)):a(w[0],i.centerX,i.centerY),i.timeout)&#123;var W=setTimeout(function()&#123;k?e.unblockUI(i):e(o).unblock(i)&#125;,i.timeout);e(o).data(&quot;blockUI.timeout&quot;,W)&#125;&#125;&#125;function t(o,t)&#123;var s,l=o==window,a=e(o),d=a.data(&quot;blockUI.history&quot;),c=a.data(&quot;blockUI.timeout&quot;);c&amp;&amp;(clearTimeout(c),a.removeData(&quot;blockUI.timeout&quot;)),t=e.extend(&#123;&#125;,e.blockUI.defaults,t||&#123;&#125;),n(0,o,t),null===t.onUnblock&amp;&amp;(t.onUnblock=a.data(&quot;blockUI.onUnblock&quot;),a.removeData(&quot;blockUI.onUnblock&quot;));var r;r=l?e(&quot;body&quot;).children().filter(&quot;.blockUI&quot;).add(&quot;body &gt; .blockUI&quot;):a.find(&quot;&gt;.blockUI&quot;),t.cursorReset&amp;&amp;(r.length&gt;1&amp;&amp;(r[1].style.cursor=t.cursorReset),r.length&gt;2&amp;&amp;(r[2].style.cursor=t.cursorReset)),l&amp;&amp;(b=p=null),t.fadeOut?(s=r.length,r.stop().fadeOut(t.fadeOut,function()&#123;0===--s&amp;&amp;i(r,d,t,o)&#125;)):i(r,d,t,o)&#125;function i(o,t,i,n)&#123;var s=e(n);if(!s.data(&quot;blockUI.isBlocked&quot;))&#123;o.each(function()&#123;this.parentNode&amp;&amp;this.parentNode.removeChild(this)&#125;),t&amp;&amp;t.el&amp;&amp;(t.el.style.display=t.display,t.el.style.position=t.position,t.el.style.cursor=&quot;default&quot;,t.parent&amp;&amp;t.parent.appendChild(t.el),s.removeData(&quot;blockUI.history&quot;)),s.data(&quot;blockUI.static&quot;)&amp;&amp;s.css(&quot;position&quot;,&quot;static&quot;),&quot;function&quot;==typeof i.onUnblock&amp;&amp;i.onUnblock(n,i);var l=e(document.body),a=l.width(),d=l[0].style.width;l.width(a-1).width(a),l[0].style.width=d&#125;&#125;function n(o,t,i)&#123;var n=t==window,l=e(t);if((o||(!n||b)&amp;&amp;(n||l.data(&quot;blockUI.isBlocked&quot;)))&amp;&amp;(l.data(&quot;blockUI.isBlocked&quot;,o),n&amp;&amp;i.bindEvents&amp;&amp;(!o||i.showOverlay)))&#123;var a=&quot;mousedown mouseup keydown keypress keyup touchstart touchend touchmove&quot;;o?e(document).bind(a,i,s):e(document).unbind(a,s)&#125;&#125;function s(o)&#123;if(&quot;keydown&quot;===o.type&amp;&amp;o.keyCode&amp;&amp;9==o.keyCode&amp;&amp;b&amp;&amp;o.data.constrainTabKey)&#123;var t=p,i=!o.shiftKey&amp;&amp;o.target===t[t.length-1],n=o.shiftKey&amp;&amp;o.target===t[0];if(i||n)return setTimeout(function()&#123;l(n)&#125;,10),!1&#125;var s=o.data,a=e(o.target);return a.hasClass(&quot;blockOverlay&quot;)&amp;&amp;s.onOverlayClick&amp;&amp;s.onOverlayClick(o),a.parents(&quot;div.&quot;+s.blockMsgClass).length&gt;0?!0:0===a.parents().children().filter(&quot;div.blockUI&quot;).length&#125;function l(e)&#123;if(p)&#123;var o=p[e===!0?p.length-1:0];o&amp;&amp;o.focus()&#125;&#125;function a(e,o,t)&#123;var i=e.parentNode,n=e.style,s=(i.offsetWidth-e.offsetWidth)/2-d(i,&quot;borderLeftWidth&quot;),l=(i.offsetHeight-e.offsetHeight)/2-d(i,&quot;borderTopWidth&quot;);o&amp;&amp;(n.left=s&gt;0?s+&quot;px&quot;:&quot;0&quot;),t&amp;&amp;(n.top=l&gt;0?l+&quot;px&quot;:&quot;0&quot;)&#125;function d(o,t)&#123;return parseInt(e.css(o,t),10)||0&#125;e.fn._fadeIn=e.fn.fadeIn;var c=e.noop||function()&#123;&#125;,r=/MSIE/.test(navigator.userAgent),u=/MSIE 6.0/.test(navigator.userAgent)&amp;&amp;!/MSIE 8.0/.test(navigator.userAgent);document.documentMode||0;var f=e.isFunction(document.createElement(&quot;div&quot;).style.setExpression);e.blockUI=function(e)&#123;o(window,e)&#125;,e.unblockUI=function(e)&#123;t(window,e)&#125;,e.growlUI=function(o,t,i,n)&#123;var s=e(&#39;&lt;div class=&quot;growlUI&quot;&gt;&lt;/div&gt;&#39;);o&amp;&amp;s.append(&quot;&lt;h1&gt;&quot;+o+&quot;&lt;/h1&gt;&quot;),t&amp;&amp;s.append(&quot;&lt;h2&gt;&quot;+t+&quot;&lt;/h2&gt;&quot;),void 0===i&amp;&amp;(i=3e3);var l=function(o)&#123;o=o||&#123;&#125;,e.blockUI(&#123;message:s,fadeIn:o.fadeIn!==void 0?o.fadeIn:700,fadeOut:o.fadeOut!==void 0?o.fadeOut:1e3,timeout:o.timeout!==void 0?o.timeout:i,centerY:!1,showOverlay:!1,onUnblock:n,css:e.blockUI.defaults.growlCSS&#125;)&#125;;l(),s.css(&quot;opacity&quot;),s.mouseover(function()&#123;l(&#123;fadeIn:0,timeout:3e4&#125;);var o=e(&quot;.blockMsg&quot;);o.stop(),o.fadeTo(300,1)&#125;).mouseout(function()&#123;e(&quot;.blockMsg&quot;).fadeOut(1e3)&#125;)&#125;,e.fn.block=function(t)&#123;if(this[0]===window)return e.blockUI(t),this;var i=e.extend(&#123;&#125;,e.blockUI.defaults,t||&#123;&#125;);return this.each(function()&#123;var o=e(this);i.ignoreIfBlocked&amp;&amp;o.data(&quot;blockUI.isBlocked&quot;)||o.unblock(&#123;fadeOut:0&#125;)&#125;),this.each(function()&#123;&quot;static&quot;==e.css(this,&quot;position&quot;)&amp;&amp;(this.style.position=&quot;relative&quot;,e(this).data(&quot;blockUI.static&quot;,!0)),this.style.zoom=1,o(this,t)&#125;)&#125;,e.fn.unblock=function(o)&#123;return this[0]===window?(e.unblockUI(o),this):this.each(function()&#123;t(this,o)&#125;)&#125;,e.blockUI.version=2.7,e.blockUI.defaults=&#123;message:&quot;&lt;h1&gt;Please wait...&lt;/h1&gt;&quot;,title:null,draggable:!0,theme:!1,css:&#123;padding:0,margin:0,width:&quot;30%&quot;,top:&quot;40%&quot;,left:&quot;35%&quot;,textAlign:&quot;center&quot;,color:&quot;#000&quot;,border:&quot;3px solid #aaa&quot;,backgroundColor:&quot;#fff&quot;,cursor:&quot;wait&quot;&#125;,themedCSS:&#123;width:&quot;30%&quot;,top:&quot;40%&quot;,left:&quot;35%&quot;&#125;,overlayCSS:&#123;backgroundColor:&quot;#000&quot;,opacity:.6,cursor:&quot;wait&quot;&#125;,cursorReset:&quot;default&quot;,growlCSS:&#123;width:&quot;350px&quot;,top:&quot;10px&quot;,left:&quot;&quot;,right:&quot;10px&quot;,border:&quot;none&quot;,padding:&quot;5px&quot;,opacity:.6,cursor:&quot;default&quot;,color:&quot;#fff&quot;,backgroundColor:&quot;#000&quot;,&quot;-webkit-border-radius&quot;:&quot;10px&quot;,&quot;-moz-border-radius&quot;:&quot;10px&quot;,&quot;border-radius&quot;:&quot;10px&quot;&#125;,iframeSrc:/^https/i.test(window.location.href||&quot;&quot;)?&quot;javascript:false&quot;:&quot;about:blank&quot;,forceIframe:!1,baseZ:1e3,centerX:!0,centerY:!0,allowBodyStretch:!0,bindEvents:!0,constrainTabKey:!0,fadeIn:200,fadeOut:400,timeout:0,showOverlay:!0,focusInput:!0,focusableElements:&quot;:input:enabled:visible&quot;,onBlock:null,onUnblock:null,onOverlayClick:null,quirksmodeOffsetHack:4,blockMsgClass:&quot;blockMsg&quot;,ignoreIfBlocked:!1&#125;;var b=null,p=[]&#125;&quot;function&quot;==typeof define&amp;&amp;define.amd&amp;&amp;define.amd.jQuery?define([&quot;jquery&quot;],e):e(jQuery)&#125;)();<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">通用字段处理：1.生成器开发，通用字段处理，id，createdAt，updateAt，sort</span><br><span class="line"></span><br><span class="line">- 对controller.ftl保存校验做修改，并不是所有字段都需要做校验</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  //保存校验</span><br><span class="line">  &lt;#list fieldList as field&gt;</span><br><span class="line">  &lt;#if field.name!=&quot;id&quot; &amp;&amp; field.nameHump!=&quot;createdAt&quot;&amp;&amp; field.nameHump!=&quot;updatedAt&quot; &amp;&amp; field.nameHump!=&quot;sort&quot;&gt;</span><br><span class="line">  &lt;#if !field.nullAble&gt;</span><br><span class="line">      ValidatorUtil.require($&#123;domain&#125;Dto.get$&#123;field.nameBigHump&#125;(), &quot;$&#123;field.nameCn&#125;&quot;);</span><br><span class="line">  &lt;/#if&gt;</span><br><span class="line">  &lt;#if (field.length &gt; 0)&gt;</span><br><span class="line">      ValidatorUtil.length($&#123;domain&#125;Dto.get$&#123;field.nameBigHump&#125;(), &quot;$&#123;field.nameCn&#125;&quot;, 1, $&#123;field.length&#125;);</span><br><span class="line">  &lt;/#if&gt; </span><br><span class="line">  &lt;/#if&gt;</span><br><span class="line">  &lt;/#list&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>对service.ftl进行修改</p></li><li><pre><code class="ftl">//导入部分&lt;#list typeSet as type&gt;    &lt;#if type==&#39;Date&#39;&gt;        import java.util.Date;    &lt;/#if&gt;&lt;/#list&gt;//列表查询&lt;#list fieldList as field&gt;    &lt;#if field.nameHump==&#39;sort&#39;&gt;    $&#123;domain&#125;Example.setOrderByClause(&quot;sort asc&quot;);    &lt;/#if&gt;&lt;/#list&gt;//插入 &lt;#list typeSet as type&gt;            &lt;#if type==&#39;Date&#39;&gt;        Date now = new Date();            &lt;/#if&gt;        &lt;/#list&gt;&lt;#list fieldList as field&gt;    &lt;#if field.nameHump==&#39;createdAt&#39;&gt;            $&#123;domain&#125;.setCreatedAt(now);    &lt;/#if&gt;    &lt;#if field.nameHump==&#39;updatedAt&#39;&gt;            $&#123;domain&#125;.setUpdatedAt(now);    &lt;/#if&gt;&lt;/#list&gt;//更新 &lt;#list fieldList as field&gt;     &lt;#if field.nameHump==&#39;updatedAt&#39;&gt;            $&#123;domain&#125;.setUpdatedAt(new Date());     &lt;/#if&gt; &lt;/#list&gt;        <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- vue.ftl进行修改：去除创建时间和更新时间的显示</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  &lt;tr&gt;&lt;#list fieldList as field&gt;</span><br><span class="line">      &lt;#if field.nameHump!=&quot;createdAt&quot; &amp;&amp; field.nameHump!=&quot;updatedAt&quot;&gt;//就增加这一行</span><br><span class="line">      &lt;th&gt;$&#123;field.nameCn&#125;&lt;/th&gt;&lt;/#if&gt;&lt;/#list&gt;</span><br><span class="line">      &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  //表单</span><br><span class="line">   &lt;#list fieldList as field&gt;</span><br><span class="line">         &lt;#if field.name!=&quot;id&quot; &amp;&amp; field.nameHump!=&quot;createdAt&quot; &amp;&amp; field.nameHump!=&quot;updatedAt&quot;&gt;//就增加这一行</span><br><span class="line">                  &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                    &lt;label  class=&quot;col-sm-2 control-label&quot;&gt;$&#123;field.nameCn&#125;&lt;/label&gt;</span><br><span class="line">                    &lt;div class=&quot;col-sm-10&quot;&gt;</span><br><span class="line">                      &lt;input v-model=&quot;$&#123;domain&#125;.$&#123;field.nameHump&#125;&quot; class=&quot;form-control&quot;  &gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">         &lt;/#if&gt;</span><br><span class="line">     &lt;/#list&gt;</span><br><span class="line">   // 保存校验跟后端一样</span><br><span class="line">        if (1 != 1</span><br><span class="line">        &lt;#list fieldList as field&gt;</span><br><span class="line">            &lt;#if field.name!=&quot;id&quot; &amp;&amp; field.nameHump!=&quot;createdAt&quot; &amp;&amp; field.nameHump!=&quot;updatedAt&quot; &amp;&amp; field.nameHump!=&quot;sort&quot;&gt;</span><br><span class="line">            &lt;#if !field.nullAble&gt;</span><br><span class="line">        || !Validator.require(_this.$&#123;domain&#125;.$&#123;field.nameHump&#125;, &quot;$&#123;field.nameCn&#125;&quot;)</span><br><span class="line">        &lt;/#if&gt;</span><br><span class="line">        &lt;#if (field.length &gt; 0)&gt;</span><br><span class="line">        || !Validator.length(_this.$&#123;domain&#125;.$&#123;field.nameHump&#125;, &quot;$&#123;field.nameCn&#125;&quot;, 1, $&#123;field.length&#125;)</span><br><span class="line">        &lt;/#if&gt;</span><br><span class="line">        &lt;/#if&gt;</span><br><span class="line">        &lt;/#list&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>实际开发中，是先写好SectionService的代码，再根据代码修改模板，测试生成的代码和手写的代码一致。</p></li><li><p>controller.fi模板改动了，但SectionController之前已经手动把id的校验删除并提交了，所以本次生成的代码没有变动</p></li></ul><h2 id="6-6-前端枚举代码的生成"><a href="#6-6-前端枚举代码的生成" class="headerlink" title="6-6 前端枚举代码的生成"></a>6-6 前端枚举代码的生成</h2><p>前端下拉框和列表枚举的设计：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.枚举字段，表格显示中文，表单显示下拉菜单</span><br><span class="line">2.vue增加过滤器</span><br></pre></td></tr></table></figure><ul><li><p>给收费增加一个下拉框，将收费的输入改成这个</p></li><li><pre><code>&lt;select v-model=&quot;section.charge&quot; class=&quot;form-control&quot;  &gt;  &lt;option v-for=&quot;o in CHARGE&quot; v-bind:value=&quot;o.key&quot;&gt;&#123;&#123;o.value&#125;&#125;&lt;/option&gt;&lt;/select&gt;CHARGE:[&#123;key:&quot;C&quot;,value:&quot;收费&quot;&#125;,&#123;key:&quot;F&quot;,value:&quot;免费&quot;&#125;],//在data里面写死的<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 修改下页面收费显示文字的问题：![image-20220301100046630](https://s2.loli.net/2022/03/01/bQPd9aOo3lHzNZu.png)</span><br><span class="line"></span><br><span class="line">- 首先增加一个过滤器，在admin下src创建filter目录创建filter.js</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  /**</span><br><span class="line">   * 数组过滤器 例如：&#123;&#123;SECTION_CHARGE | option..KV(section.charge)&#125;&#125;</span><br><span class="line">   * @param list 例如：&#123;&#123;key:&quot;C&quot;, value:&quot;收费&quot;&#125;,&#123;key:&quot;F&quot;, value:&quot;免费&quot;&#125;&#125;</span><br><span class="line">   * @param key 例如：C</span><br><span class="line">   * @returns &#123;string&#125; 例如：收费</span><br><span class="line">   */</span><br><span class="line">  let option..KV = (list, key) =&gt;  &#123;</span><br><span class="line">      if (!list || !key) &#123;</span><br><span class="line">          return &quot;&quot;;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          let result = &quot;&quot;;</span><br><span class="line">          for(let i = 0;i&lt;list.length;i++)&#123;</span><br><span class="line">              if (key === list[i][&quot;key&quot;]) &#123;</span><br><span class="line">                  result = list[i][&quot;value&quot;];</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          return result;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  export default &#123;</span><br><span class="line">      option..KV,</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后再main.js增加，这样就把filter变成vue的过滤器了</p></li><li><p>&#96;&#96;&#96;<br>import filter from ‘.&#x2F;filter&#x2F;filter’<br>&#x2F;&#x2F;全局过滤器<br>Object.keys(filter).forEach(key &#x3D;&gt;{<br>  Vue.filter(key,filter[key])<br>});</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 过滤器有了，使用再section.vue</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">   &lt;td&gt;&#123;&#123;section.charge&#125;&#125;&lt;/td&gt;</span><br><span class="line">   //将这行改成</span><br><span class="line">   &lt;td&gt;这里是两个大括号将他们括起来CHARGE|option..KV(section.charge)&lt;/td&gt;</span><br></pre></td></tr></table></figure></li></ul><p>对于下拉框的列表值，一般会提取成全局的变量，方便多个页面使用：</p><ul><li>&#96;&#96;&#96;<br>&#x2F;&#x2F;首先再js创建enums.js<br>CHARGE &#x3D; [{key:”C”,value:”收费”},{key:”F”,value:”免费”}];<br>&#x2F;&#x2F;其次再index引用<!--  枚举类  --><script src="<%= BASE_URL %>static/js/enums.js"></script>&#x2F;&#x2F;最后再vue使用<br> CHARGE: CHARGE,<td>这是两个大括号包的CHARGE|option..KV(section.charge)</td><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">新增EnumGenerator用于生成前端枚举：</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.增加了枚举生成器<br>2.option..KV过滤器从list改成object</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 问题：前端的枚举缺少枚举类型的信息，后续我们会碰到直接再前端用枚举值，我们的写法是直接SECTION_CHARGE.CHARGE.key，而不是写“C”。我们进行下列修改,注意表单的下拉框也要改成SECTION_CHARGE</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  &#x2F;&#x2F;首先修改enums.js<br>  SECTION_CHARGE &#x3D; {CHARGE:{key:”C”,value:”收费”},FREE:{key:”F”,value:”免费”}};<br>  &#x2F;&#x2F;其次对filter.js<br>  &#x2F;**</p><ul><li>数组过滤器 例如：两个大括号包住SECTION_CHARGE | option..KV(section.charge)</li><li>@param object 例如：{CHARGE:{key:”C”, value:”收费”},FREE:{key:”F”, value:”免费”}}</li><li>@param key 例如：C</li><li>@returns {string} 例如：收费</li></ul><p>   *&#x2F;<br>  let option..KV &#x3D; (object, key) &#x3D;&gt;  {<br>      if (!object || !key) {<br>          return “”;<br>      } else {<br>          let result &#x3D; “”;<br>          for(let enums in object){<br>              if (key &#x3D;&#x3D;&#x3D; object[enums][“key”]) {<br>                  result &#x3D; object[enums][“value”];<br>              }<br>          }<br>          return result;<br>      }<br>  };</p><p>  export default {<br>      option..KV,<br>  }<br>  &#x2F;&#x2F;最后再vue使用<br>  SECTION_CHARGE: SECTION_CHARGE,<br>  <td>两个大括号包住SECTION_CHARGE|option..KV(section.charge)</td><br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 通过后端的枚举，来生成枚举代码生成器，首先再server下建立软件包enums，然后放入两个文件，分别是SectionChargeEnum和YesNoEnum</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  package com.course.server.enums;</span><br><span class="line">  </span><br><span class="line">  public enum SectionChargeEnum &#123;</span><br><span class="line">  </span><br><span class="line">      CHARGE(&quot;C&quot;, &quot;收费&quot;),</span><br><span class="line">      FREE(&quot;F&quot;, &quot;免费&quot;);</span><br><span class="line">  </span><br><span class="line">      private String code;</span><br><span class="line">  </span><br><span class="line">      private String desc;</span><br><span class="line">  </span><br><span class="line">      SectionChargeEnum(String code, String desc) &#123;</span><br><span class="line">          this.code = code;</span><br><span class="line">          this.desc = desc;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public String getCode() &#123;</span><br><span class="line">          return code;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void setCode(String code) &#123;</span><br><span class="line">          this.code = code;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void setDesc(String desc) &#123;</span><br><span class="line">          this.desc = desc;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public String getDesc() &#123;</span><br><span class="line">          return desc;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.course.server.enums;</span><br><span class="line"></span><br><span class="line">public enum YesNoEnum &#123;</span><br><span class="line"></span><br><span class="line">    YES(&quot;1&quot;, &quot;是&quot;),</span><br><span class="line">    NO(&quot;0&quot;, &quot;否&quot;);</span><br><span class="line"></span><br><span class="line">    private String code;</span><br><span class="line"></span><br><span class="line">    private String desc;</span><br><span class="line"></span><br><span class="line">    YesNoEnum(String code, String desc) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCode() &#123;</span><br><span class="line">        return code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCode(String code) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDesc(String desc) &#123;</span><br><span class="line">        this.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDesc() &#123;</span><br><span class="line">        return desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>记得再sectionservice中增加</p></li><li><pre><code>/** * 插入 */private void insert(Section section)&#123;            Date now = new Date();            section.setCreatedAt(now);            section.setUpdatedAt(now);    section.setId(UuidUtil.getShortUuid());    section.setCharge(SectionChargeEnum.CHARGE.getCode());//这一行    sectionMapper.insert(section);&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 最后写枚举生成器EnumGenerator</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  package com.course.generator.enums;</span><br><span class="line">  import java.io.FileOutputStream;</span><br><span class="line">  import java.io.OutputStreamWriter;</span><br><span class="line">  import java.lang.reflect.Method;</span><br><span class="line">  import java.util.regex.Matcher;</span><br><span class="line">  import java.util.regex.Pattern;</span><br><span class="line">  </span><br><span class="line">  public class EnumGenerator &#123;</span><br><span class="line">      static String path = &quot;admin\\public\\static\\js\\enums.js&quot;;</span><br><span class="line">  </span><br><span class="line">      public static void main(String[] args) &#123;</span><br><span class="line">          StringBuffer bufferObject = new StringBuffer();</span><br><span class="line">          StringBuffer bufferArray = new StringBuffer();</span><br><span class="line">          long begin = System.currentTimeMillis();</span><br><span class="line">          try &#123;</span><br><span class="line">              toJson(SectionChargeEnum.class, bufferObject, bufferArray);</span><br><span class="line">              toJson(YesNoEnum.class, bufferObject, bufferArray);</span><br><span class="line">  </span><br><span class="line">              StringBuffer buffer = bufferObject.append(&quot;\r\n&quot;).append(bufferArray);</span><br><span class="line">              writeJs(buffer);</span><br><span class="line">          &#125; catch (Exception e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">          long end = System.currentTimeMillis();</span><br><span class="line">          System.out.println(&quot;执行耗时:&quot; + (end - begin) + &quot; 毫秒&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      private static void toJson(Class clazz, StringBuffer bufferObject, StringBuffer bufferArray) throws Exception &#123;</span><br><span class="line">          String key = toUnderline(clazz.getSimpleName());</span><br><span class="line">          toJson(clazz, key, bufferObject, bufferArray);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      private static void toJson(Class clazz, String key, StringBuffer bufferObject, StringBuffer bufferArray) throws Exception &#123;</span><br><span class="line">          Object[] objects = clazz.getEnumConstants();</span><br><span class="line">          Method name = clazz.getMethod(&quot;name&quot;);</span><br><span class="line">          Method getDesc = clazz.getMethod(&quot;getDesc&quot;);</span><br><span class="line">          Method getCode = clazz.getMethod(&quot;getCode&quot;);</span><br><span class="line">  </span><br><span class="line">          // 生成对象</span><br><span class="line">          bufferObject.append(key).append(&quot;=&#123;&quot;);</span><br><span class="line">          for (int i = 0; i &lt; objects.length; i++) &#123;</span><br><span class="line">              Object obj = objects[i];</span><br><span class="line">              if (getCode == null) &#123;</span><br><span class="line">                  bufferObject.append(name.invoke(obj)).append(&quot;:&#123;key:\&quot;&quot;).append(name.invoke(obj)).append(&quot;\&quot;, value:\&quot;&quot;).append(getDesc.invoke(obj)).append(&quot;\&quot;&#125;&quot;);</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                  bufferObject.append(name.invoke(obj)).append(&quot;:&#123;key:\&quot;&quot;).append(getCode.invoke(obj)).append(&quot;\&quot;, value:\&quot;&quot;).append(getDesc.invoke(obj)).append(&quot;\&quot;&#125;&quot;);</span><br><span class="line">              &#125;</span><br><span class="line">              if (i &lt; objects.length - 1) &#123;</span><br><span class="line">                  bufferObject.append(&quot;,&quot;);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          bufferObject.append(&quot;&#125;;\r\n&quot;);</span><br><span class="line">  </span><br><span class="line">          // 生成数组</span><br><span class="line">          bufferArray.append(key).append(&quot;_ARRAY=[&quot;);</span><br><span class="line">          for (int i = 0; i &lt; objects.length; i++) &#123;</span><br><span class="line">              Object obj = objects[i];</span><br><span class="line">              if (getCode == null) &#123;</span><br><span class="line">                  bufferArray.append(&quot;&#123;key:\&quot;&quot;).append(name.invoke(obj)).append(&quot;\&quot;, value:\&quot;&quot;).append(getDesc.invoke(obj)).append(&quot;\&quot;&#125;&quot;);</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                  bufferArray.append(&quot;&#123;key:\&quot;&quot;).append(getCode.invoke(obj)).append(&quot;\&quot;, value:\&quot;&quot;).append(getDesc.invoke(obj)).append(&quot;\&quot;&#125;&quot;);</span><br><span class="line">              &#125;</span><br><span class="line">              if (i &lt; objects.length - 1) &#123;</span><br><span class="line">                  bufferArray.append(&quot;,&quot;);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          bufferArray.append(&quot;];\r\n&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 写文件</span><br><span class="line">       * @param stringBuffer</span><br><span class="line">       */</span><br><span class="line">      public static void writeJs(StringBuffer stringBuffer) &#123;</span><br><span class="line">          FileOutputStream out = null;</span><br><span class="line">          try &#123;</span><br><span class="line">              out = new FileOutputStream(path);</span><br><span class="line">              OutputStreamWriter osw = new OutputStreamWriter(out, &quot;UTF-8&quot;);</span><br><span class="line">              System.out.println(path);</span><br><span class="line">              osw.write(stringBuffer.toString());</span><br><span class="line">              osw.close();</span><br><span class="line">          &#125; catch (Exception e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">          finally &#123;</span><br><span class="line">              try &#123;</span><br><span class="line">                  out.close();</span><br><span class="line">              &#125; catch (Exception e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">              &#125;</span><br><span class="line">  </span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 功能：驼峰转大写下划线，并去掉_ENUM</span><br><span class="line">       * 如：SectionChargeEnum 变成 SECTION_CHARGE</span><br><span class="line">       * @param str</span><br><span class="line">       * @return</span><br><span class="line">       */</span><br><span class="line">      public static String toUnderline(String str) &#123;</span><br><span class="line">          String result = underline(str).toString();</span><br><span class="line">          return result.substring(1, result.length()).toUpperCase().replace(&quot;_ENUM&quot;, &quot;&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 驼峰转下划线，第一位是下划线</span><br><span class="line">       * 如：SectionChargeEnum 变成 _section_charge_enum</span><br><span class="line">       * @param str</span><br><span class="line">       * @return</span><br><span class="line">       */</span><br><span class="line">      private static StringBuffer underline(String str) &#123;</span><br><span class="line">          Pattern pattern = Pattern.compile(&quot;[A-Z]&quot;);</span><br><span class="line">          Matcher matcher = pattern.matcher(str);</span><br><span class="line">          StringBuffer sb = new StringBuffer(str);</span><br><span class="line">          if(matcher.find()) &#123;</span><br><span class="line">              sb = new StringBuffer();</span><br><span class="line">              matcher.appendReplacement(sb,&quot;_&quot;+matcher.group(0).toLowerCase());</span><br><span class="line">              matcher.appendTail(sb);</span><br><span class="line">          &#125;else &#123;</span><br><span class="line">              return sb;</span><br><span class="line">          &#125;</span><br><span class="line">          return underline(sb.toString());</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>原理：通过反射，得到枚举类的枚举类型、code、desc，然后通过字符串拼接的方式，得到最终完整的json字符串，再通过写文件的方式直接写入enums.js。</p></li><li><p>记得添加依赖，才能引入包</p></li><li><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;com.course&lt;/groupId&gt;    &lt;artifactId&gt;server&lt;/artifactId&gt;&lt;/dependency&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">      解决这个问题 [Vue warn]: Do not use built-in or reserved HTML elements as component id: section</span><br><span class="line">      将export default &#123;</span><br><span class="line">      components: &#123;Pagination&#125;,</span><br><span class="line">      name: &#x27;business-section&#x27;,//将section变成了business-section</span><br><span class="line"></span><br><span class="line">## 6-7 生成器综合示例</span><br><span class="line"></span><br><span class="line">课程管理功能开发：</span><br><span class="line"></span><br><span class="line">- 日期字段都是用datetime(3)，精确到毫秒。界面显示可以只到秒，但是落库要精确</span><br><span class="line"></span><br><span class="line">- 首先生成数据库，all.sql</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  # 课程</span><br><span class="line">  DROP TABLE IF EXISTS `course`;</span><br><span class="line">  create table `course`</span><br><span class="line">  (</span><br><span class="line">      `id`         CHAR(8)     NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;ID&#x27;,</span><br><span class="line">      `name`      VARCHAR(50) NOT NULL COMMENT &#x27;名称&#x27;,</span><br><span class="line">      `summary`  VARCHAR(2000) COMMENT &#x27;概述&#x27;,</span><br><span class="line">      `time`       INT default 0 COMMENT &#x27;时长|单位秒&#x27;,</span><br><span class="line">      `price`     decimal(8,2)  default 0.00 comment &#x27;价格(元)&#x27;,</span><br><span class="line">      `image`  VARCHAR(100) COMMENT &#x27;封面&#x27;,</span><br><span class="line">      `level`     CHAR(1)  COMMENT &#x27;级别|ONE(&quot;1&quot;,&quot;初级&quot;),ONE(&quot;2&quot;,&quot;中级&quot;),ONE(&quot;3&quot;,&quot;高级&quot;)&#x27;,</span><br><span class="line">      `charge`     CHAR(1) COMMENT &#x27;收费|CHARGE(&quot;C&quot;,&quot;收费&quot;),FREE(&quot;F&quot;,&quot;免费&quot;)&#x27;,</span><br><span class="line">      `status`     CHAR(1) COMMENT &#x27;状态|PUBLISH(&quot;P&quot;,&quot;发布&quot;),DRAFT(&quot;D&quot;,&quot;草稿&quot;)&#x27;,</span><br><span class="line">      `enroll`    integer default 0 comment &#x27;报名数&#x27;,</span><br><span class="line">      `sort`       INT COMMENT &#x27;顺序&#x27;,</span><br><span class="line">      `created_at` DATETIME(3) COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">      `updated_at` DATETIME(3) COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">      PRIMARY KEY (`id`)</span><br><span class="line">     )engine =innodb default charset=utf8mb4 comment=&#x27;课程&#x27;;</span><br><span class="line">  INSERT INTO `course`(id,name,summary,time,price,image,level,charge,status,enroll,sort,created_at,updated_at)</span><br><span class="line">  VALUES(&#x27;00000001&#x27;,&#x27;测试课程01&#x27;,&#x27;这时一门测试课程&#x27;,7200,19.9,&#x27;&#x27;,0,&#x27;C&#x27;,&#x27;D&#x27;,100,0,now(),now());</span><br></pre></td></tr></table></figure></code></pre></li><li><p>其次在generatorConfiguration</p></li><li><pre><code class="xml">&lt;table tableName=&quot;course&quot; domainObjectName=&quot;Course&quot;/&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后mybatis-generator，后端，前端代码生成器</span><br><span class="line"></span><br><span class="line">- 其次在admin增加管理</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  &lt;li class=&quot;active&quot; id=&quot;business-course-sidebar&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/business/course&quot;&gt;</span><br><span class="line">      &lt;i class=&quot;menu-icon fa fa-caret-right&quot;&gt;&lt;/i&gt;</span><br><span class="line">      课程管理</span><br><span class="line">    &lt;/router-link&gt;</span><br><span class="line">    &lt;b class=&quot;arrow&quot;&gt;&lt;/b&gt;</span><br><span class="line">  &lt;/li&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>在路由router.js</p></li><li><pre><code class="js">&#123;    path: &quot;business/course&quot;,    name:&quot;business/course&quot;,    component: Course,&#125;,<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在vue.ftl和controller。ftl都在长度后加?c这样会将数字2.000变为2000</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  || !Validator.length(_this.$&#123;domain&#125;.$&#123;field.nameHump&#125;, &quot;$&#123;field.nameCn&#125;&quot;, 1, $&#123;field.length?c&#125;)</span><br></pre></td></tr></table></figure></code></pre></li><li><p>为其生成三个枚举分别是CourseChargeEnum，CourseLevelEnum，CourseStatusEnum</p></li><li><p>&#96;&#96;&#96;java<br>package com.course.server.enums;</p><p>public enum CourseChargeEnum {</p><pre><code>CHARGE(&quot;C&quot;, &quot;收费&quot;),FREE(&quot;F&quot;, &quot;免费&quot;);private String code;private String desc;CourseChargeEnum(String code, String desc) &#123;    this.code = code;    this.desc = desc;&#125;public String getCode() &#123;    return code;&#125;public void setCode(String code) &#123;    this.code = code;&#125;public void setDesc(String desc) &#123;    this.desc = desc;&#125;public String getDesc() &#123;    return desc;&#125;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line">package com.course.server.enums;</span><br><span class="line"></span><br><span class="line">public enum CourseLevelEnum &#123;</span><br><span class="line"></span><br><span class="line">    ONE(&quot;1&quot;, &quot;初级&quot;),</span><br><span class="line">    TWO(&quot;2&quot;, &quot;中级&quot;),</span><br><span class="line">    THREE(&quot;3&quot;, &quot;高级&quot;);</span><br><span class="line"></span><br><span class="line">    private String code;</span><br><span class="line"></span><br><span class="line">    private String desc;</span><br><span class="line"></span><br><span class="line">    CourseLevelEnum(String code, String desc) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCode() &#123;</span><br><span class="line">        return code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCode(String code) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDesc(String desc) &#123;</span><br><span class="line">        this.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDesc() &#123;</span><br><span class="line">        return desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.course.server.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">CourseStatusEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    PUBLISH(<span class="string">&quot;P&quot;</span>, <span class="string">&quot;发布&quot;</span>),</span><br><span class="line">    DRAFT(<span class="string">&quot;D&quot;</span>, <span class="string">&quot;草稿&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    CourseStatusEnum(String code, String desc) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDesc</span><span class="params">(String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>然后再EnumGenerator增加</p></li><li><p>&#96;&#96;&#96;JAVA<br>toJson(CourseLevelEnum.class, bufferObject, bufferArray);<br>toJson(CourseChargeEnum.class, bufferObject, bufferArray);<br>toJson(CourseStatusEnum.class, bufferObject, bufferArray);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后再course.vue增加</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      course: &#123;&#125;,</span><br><span class="line">      courses: [],</span><br><span class="line">      COURSE_LEVEL:COURSE_LEVEL,</span><br><span class="line">      COURSE_CHARGE:COURSE_CHARGE,</span><br><span class="line">      COURSE_STATUS:COURSE_STATUS,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  ////////////////////////////////////////////////////////</span><br><span class="line">     &lt;td&gt;&#123;&#123;COURSE_LEVEL|option..KV(course.level)&#125;&#125;&lt;/td&gt;</span><br><span class="line">     &lt;td&gt;&#123;&#123;COURSE_CHARGE|option..KV(course.charge)&#125;&#125;&lt;/td&gt;</span><br><span class="line">     &lt;td&gt;&#123;&#123;COURSE_STATUS|option..KV(course.status)&#125;&#125;&lt;/td&gt;</span><br><span class="line">  /////////////////////////////////////////////////////////</span><br><span class="line">  &lt;select v-model=&quot;course.level&quot; class=&quot;form-control&quot;  &gt;</span><br><span class="line">      &lt;option v-for=&quot;o in COURSE_LEVEL&quot; v-bind:value=&quot;o.key&quot;&gt;&#123;&#123;o.value&#125;&#125;&lt;/option&gt;</span><br><span class="line">     &lt;/select&gt;</span><br><span class="line">  &lt;select v-model=&quot;course.charge&quot; class=&quot;form-control&quot;  &gt;</span><br><span class="line">     &lt;option v-for=&quot;o in COURSE_CHARGE&quot; v-bind:value=&quot;o.key&quot;&gt;&#123;&#123;o.value&#125;&#125;&lt;/option&gt;</span><br><span class="line">     &lt;/select&gt;</span><br><span class="line">  &lt;select v-model=&quot;course.status&quot; class=&quot;form-control&quot;  &gt;</span><br><span class="line">     &lt;option v-for=&quot;o in COURSE_STATUS&quot; v-bind:value=&quot;o.key&quot;&gt;&#123;&#123;o.value&#125;&#125;&lt;/option&gt;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="6-8-生成器升级作业"><a href="#6-8-生成器升级作业" class="headerlink" title="6-8 生成器升级作业"></a>6-8 生成器升级作业</h2><p>生成器升级作业：将枚举类型的字段加入到代码生成器里面</p><ul><li><p>首先再all.sql进行修改，约定：枚举类型字段，增加“枚举”中文，并且将对应的枚举类写在[]中</p></li><li><pre><code class="sql">`level`     CHAR(1)  COMMENT &#39;级别|枚举[CourseLevelEnum]:ONE(&quot;1&quot;,&quot;初级&quot;),ONE(&quot;2&quot;,&quot;中级&quot;),ONE(&quot;3&quot;,&quot;高级&quot;)&#39;,`charge`     CHAR(1) COMMENT &#39;收费|枚举[CourseChargeEnum]:CHARGE(&quot;C&quot;,&quot;收费&quot;),FREE(&quot;F&quot;,&quot;免费&quot;)&#39;,`status`     CHAR(1) COMMENT &#39;状态|枚举[CourseStatusEnum]:PUBLISH(&quot;P&quot;,&quot;发布&quot;),DRAFT(&quot;D&quot;,&quot;草稿&quot;)&#39;,<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 其次再field.java增加两个字段</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  package com.course.generator.util;</span><br><span class="line">  </span><br><span class="line">  public class Field &#123;</span><br><span class="line">      private Boolean enums; // 是否是枚举</span><br><span class="line">      private String enumsConst; // 枚举常量 COURSE_LEVEL</span><br><span class="line">      </span><br><span class="line">      public Boolean getEnums() &#123;</span><br><span class="line">          return enums;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void setEnums(Boolean enums) &#123;</span><br><span class="line">          this.enums = enums;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public String getEnumsConst() &#123;</span><br><span class="line">          return enumsConst;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void setEnumsConst(String enumsConst) &#123;</span><br><span class="line">          this.enumsConst = enumsConst;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      public String toString() &#123;</span><br><span class="line">          sb.append(&quot;, enums=&quot;).append(enums);</span><br><span class="line">          sb.append(&quot;, enumsConst=&#x27;&quot;).append(enumsConst).append(&#x27;\&#x27;&#x27;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后再DbUtil.java增加</p></li><li><p>&#96;&#96;&#96;java<br>if (comment.contains(“枚举”)) {<br>field.setEnums(true);<br><br>&#x2F;&#x2F; 以课程等级为例：从注释中的“枚举[CourseLevelEnum]”，得到COURSE_LEVEL<br>int start &#x3D; comment.indexOf(“[“);<br>int end &#x3D; comment.indexOf(“]”);<br>String enumsName &#x3D; comment.substring(start + 1, end);<br>String enumsConst &#x3D; EnumGenerator.toUnderline(enumsName);<br>field.setEnumsConst(enumsConst);<br>} else {<br>field.setEnums(false);<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 最后对vue.ftl增加枚举判断</span><br><span class="line"></span><br><span class="line">- ```ftl</span><br><span class="line">  &lt;#list fieldList as field&gt;</span><br><span class="line">    &lt;#if field.nameHump!=&quot;createdAt&quot;&amp;&amp; field.nameHump!=&quot;updatedAt&quot; &gt;</span><br><span class="line">      &lt;#if field.enums&gt;</span><br><span class="line">      &lt;td&gt;&#123;&#123;$&#123;field.enumsConst&#125;|option..KV($&#123;domain&#125;.$&#123;field.nameHump&#125;)&#125;&#125;&lt;/td&gt;</span><br><span class="line">      &lt;#else&gt;</span><br><span class="line">    &lt;td&gt;&#123;&#123;$&#123;domain&#125;.$&#123;field.nameHump&#125;&#125;&#125;&lt;/td&gt;</span><br><span class="line">    &lt;/#if&gt;</span><br><span class="line">  &lt;/#if&gt;</span><br><span class="line">  </span><br><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//表单也得改，进行判断</span><br><span class="line">&lt;#list fieldList as field&gt;</span><br><span class="line">  &lt;#if field.name!=&quot;id&quot; &amp;&amp; field.nameHump!=&quot;createdAt&quot; &amp;&amp; field.nameHump!=&quot;updatedAt&quot;&gt;</span><br><span class="line">    &lt;#if field.enums&gt;</span><br><span class="line">&lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">  &lt;label class=&quot;col-sm-2 control-label&quot;&gt;$&#123;field.nameCn&#125;&lt;/label&gt;</span><br><span class="line">  &lt;div class=&quot;col-sm-10&quot;&gt;</span><br><span class="line">    &lt;select v-model=&quot;$&#123;domain&#125;.$&#123;field.nameHump&#125;&quot; class=&quot;form-control&quot;&gt;</span><br><span class="line">      &lt;option v-for=&quot;o in $&#123;field.enumsConst&#125;&quot; v-bind:value=&quot;o.key&quot;&gt;&#123;&#123;o.value&#125;&#125;&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">    &lt;#else&gt;</span><br><span class="line">&lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">  &lt;label class=&quot;col-sm-2 control-label&quot;&gt;$&#123;field.nameCn&#125;&lt;/label&gt;</span><br><span class="line">  &lt;div class=&quot;col-sm-10&quot;&gt;</span><br><span class="line">    &lt;input v-model=&quot;$&#123;domain&#125;.$&#123;field.nameHump&#125;&quot; class=&quot;form-control&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">    &lt;/#if&gt;</span><br><span class="line">  &lt;/#if&gt;</span><br><span class="line">&lt;/#list&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//data这也得增加</span></span><br><span class="line">data: function () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    $&#123;domain&#125;: &#123;&#125;,</span><br><span class="line">    $&#123;domain&#125;s: [],</span><br><span class="line">    &lt;#list fieldList as field&gt;</span><br><span class="line">     &lt;#<span class="keyword">if</span> field.enums&gt;</span><br><span class="line">    $&#123;field.enumsConst&#125;: $&#123;field.enumsConst&#125;,</span><br><span class="line">     &lt;/#<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;/#list&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="第7章-核心业务功能开发"><a href="#第7章-核心业务功能开发" class="headerlink" title="第7章 核心业务功能开发"></a>第7章 核心业务功能开发</h1><h2 id="7-1-课程管理功能开发-课程大章小节关联"><a href="#7-1-课程管理功能开发-课程大章小节关联" class="headerlink" title="7-1 课程管理功能开发-课程大章小节关联"></a>7-1 课程管理功能开发-课程大章小节关联</h2><p>本章将演示核心业务功能开发，包括课程、章、节、分类的管理功能，学习前端页面跳转及参数传递，Vue过滤器，前端树形展示插件zTree，富文本框的使用，Spring事务，通用排序功能解决方案等。</p><hr><p>课程管理页面美化：1.课程管理页面美化</p><ul><li><p>scoped：style下的样式只应用于当前组件，防止互相污染</p></li><li><p>只是修改前端，然后将table标签注释</p></li><li><pre><code class="vue">&lt;div class=&quot;row&quot;&gt;  &lt;div v-for=&quot;course in courses&quot; class=&quot;col-md-4&quot;&gt;    &lt;div class=&quot;thumbnail search-thumbnail&quot;&gt;      &lt;img v-show=&quot;!course.image&quot; class=&quot;media-object&quot; src=&quot;/static/image/demo-course.jpg&quot; /&gt;      &lt;img v-show=&quot;course.image&quot; class=&quot;media-object&quot; v-bind:src=&quot;course.image&quot; /&gt;      &lt;div class=&quot;caption&quot;&gt;        &lt;div class=&quot;clearfix&quot;&gt;          &lt;span class=&quot;pull-right label label-primary info-label&quot;&gt;&#123;&#123;COURSE_LEVEL|option..KV(course.level)&#125;&#125;&lt;/span&gt;          &lt;span class=&quot;pull-right label label-primary info-label&quot;&gt;&#123;&#123;COURSE_CHARGE|option..KV(course.charge)&#125;&#125;&lt;/span&gt;          &lt;span class=&quot;pull-right label label-primary info-label&quot;&gt;&#123;&#123;COURSE_STATUS|option..KV(course.status)&#125;&#125;&lt;/span&gt;        &lt;/div&gt;        &lt;h3 class=&quot;search-title&quot;&gt;          &lt;a href=&quot;#&quot; class=&quot;blue&quot;&gt;&#123;&#123; course.name&#125;&#125;&lt;/a&gt;        &lt;/h3&gt;        &lt;p&gt;          &lt;span class=&quot;blue bolder bigger-150&quot;&gt;&#123;&#123;course.price&#125;&#125;&amp;nbsp;&lt;i class=&quot;fa fa-rmb&quot;&gt;&lt;/i&gt;&lt;/span&gt;&amp;nbsp;        &lt;/p&gt;        &lt;p&gt;&#123;&#123; course.summary&#125;&#125;&lt;/p&gt;        &lt;p&gt;          &lt;span class=&quot;badge badge-info&quot;&gt;&#123;&#123;course.id&#125;&#125;&lt;/span&gt;          &lt;span class=&quot;badge badge-info&quot;&gt;排序：&#123;&#123;course.sort&#125;&#125;&lt;/span&gt;          &lt;span class=&quot;badge badge-info&quot;&gt;时长：&#123;&#123;course.time&#125;&#125;&lt;/span&gt;        &lt;/p&gt;        &lt;p&gt;          &lt;button v-on:click=&quot;edit(course)&quot; class=&quot;btn btn-white btn-xs btn-info btn-round&quot;&gt;            编辑          &lt;/button&gt;&amp;nbsp;          &lt;button v-on:click=&quot;del(course.id)&quot; class=&quot;btn btn-white btn-xs btn-warning btn-round&quot;&gt;            删除          &lt;/button&gt;        &lt;/p&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;  &lt;/div&gt;&lt;style scoped&gt;  .caption h3&#123;    font-size: 20px;  &#125;&lt;/style&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">课程管理和大章管理互相跳转</span><br><span class="line"></span><br><span class="line">- 完成功能：在课程列表中增加“大章”按钮，点击会跳转到大章页面，并且筛选出当前课程下所有的大章。大章页面增加显示课程名称，并且有可以返回课程管理页面。</span><br><span class="line"></span><br><span class="line">- sessionStorage是会话缓存，浏览器窗口关闭，缓存就没了。localStorage是本地缓存，浏览器关闭后，下次再打开还能读到。sessionStorage和localStorage只能操作字符串，但是我们经常要放对象数据，所以封装一下。</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  SessionStorage = &#123;</span><br><span class="line">      get: function (key) &#123;</span><br><span class="line">          let v = sessionStorage.getItem(key);</span><br><span class="line">          if (v &amp;&amp; typeof(v) !== &quot;undefined&quot; &amp;&amp; v !== &quot;undefined&quot;) &#123;</span><br><span class="line">              return JSON.parse(v);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      set: function (key, data) &#123;</span><br><span class="line">          sessionStorage.setItem(key, JSON.stringify(data));</span><br><span class="line">      &#125;,</span><br><span class="line">      remove: function (key) &#123;</span><br><span class="line">          sessionStorage.removeItem(key);</span><br><span class="line">      &#125;,</span><br><span class="line">      clearAll: function () &#123;</span><br><span class="line">          sessionStorage.clear();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="js">LocalStorage = &#123;    get: function (key) &#123;        let v = localStorage.getItem(key);        if (v &amp;&amp; typeof(v) !== &quot;undefined&quot; &amp;&amp; v !== &quot;undefined&quot;) &#123;            return JSON.parse(v);        &#125;    &#125;,    set: function (key, data) &#123;        localStorage.setItem(key, JSON.stringify(data));    &#125;,    remove: function (key) &#123;        localStorage.removeItem(key);    &#125;,    clearAll: function () &#123;        localStorage.clear();    &#125;&#125;;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 首先再index.html增加引用</span><br><span class="line"></span><br><span class="line">- ```html</span><br><span class="line">  &lt;!--  h5缓存  --&gt;</span><br><span class="line">  &lt;script src=&quot;&lt;%= BASE_URL %&gt;static/js/session-storage.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;&lt;%= BASE_URL %&gt;static/js/local-storage.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后再course.vue增加一个大章按钮进行跳转</p></li><li><pre><code class="vue">&lt;button v-on:click=&quot;toChapter(course)&quot; class=&quot;btn btn-white btn-xs btn-info btn-round&quot;&gt;        大章&lt;/button&gt;&amp;nbsp;//增加toChapter方法toChapter(course) &#123;      let _this = this;      SessionStorage.set(&quot;course&quot;,course);      _this.$router.push(&quot;/business/chapter&quot;);   &#125;,    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 组件（页面）间传输数据可以用h5原生的localStorage或sessionStorage；也可以用js全局变量，也可以用vuex store。但是后两者会在页面刷新时丢失数据，所以推荐使用h5原生的。</span><br><span class="line"></span><br><span class="line">- 接下来再chapter.vue的mounted里将SessionStorage的缓存取出来</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">   data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        chapter: &#123;&#125;,</span><br><span class="line">        chapters: [],</span><br><span class="line">        course:&#123;&#125;,//一定要加</span><br><span class="line">      &#125;</span><br><span class="line">  mounted: function () &#123;</span><br><span class="line">    let _this = this;</span><br><span class="line">    _this.$refs.pagination.size = 5;</span><br><span class="line">    let course = SessionStorage.get(&quot;course&quot;)||&#123;&#125;;</span><br><span class="line">    if (Tool.isEmpty(course))&#123;</span><br><span class="line">      _this.$router.push(&quot;/welcome&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    _this.course =course;</span><br><span class="line">    _this.list(1);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></code></pre></li><li><p>简单的跳转可以用router-link，如过有其他操作，可以写个click方法。比如前面完成的，从课程跳到大章，需要先缓存课程信息，所以写click方法</p></li><li><pre><code class="vue">&lt;h3&gt;&#123;&#123;course.name&#125;&#125;&lt;/h3&gt;/////////////////////////////////////////////////////////  &lt;router-link to=&quot;/business/course&quot; class=&quot;btn btn-white btn-default btn-round&quot;&gt;    &lt;i class=&quot;ace-icon fa fa-arrow-left red2&quot;&gt;&lt;/i&gt;    返回课程  &lt;/router-link&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">大章管理保存和查询功能关联courseId</span><br><span class="line"></span><br><span class="line">- 改下chapter，将表单的courseID改成这个</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                  &lt;label  class=&quot;col-sm-2 control-label&quot;&gt;课程&lt;/label&gt;</span><br><span class="line">                  &lt;div class=&quot;col-sm-10&quot;&gt;</span><br><span class="line">                    &lt;P class=&quot;form-control-static&quot;&gt;&#123;&#123;course.name&#125;&#125;&lt;/P&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">  //////////////////////////</span><br><span class="line">  // save的保存校验</span><br><span class="line">        if (!Validator.require(_this.chapter.name, &quot;名称&quot;)</span><br><span class="line">            || !Validator.length(_this.chapter.courseId, &quot;课程ID&quot;, 1, 8)) &#123;</span><br><span class="line">          return;</span><br><span class="line">        &#125;</span><br><span class="line">        _this.chapter.courseId =_this.course.id;</span><br><span class="line">  ////////////////////////////////////////////////</span><br><span class="line">  list(page) &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        Loading.show();</span><br><span class="line">        _this.$ajax.post(process.env.VUE_APP_SERVER +&#x27;/business/admin/chapter/list&#x27;, &#123;</span><br><span class="line">          page: page,</span><br><span class="line">          size: _this.$refs.pagination.size,</span><br><span class="line">          courseId:_this.course.id//根据传进来的课程ID来筛选所有的章</span><br></pre></td></tr></table></figure></code></pre></li><li><p>首先再server的dto增加ChapterPageDto</p></li><li><pre><code class="java">package com.course.server.dto;public class ChapterPageDto extends PageDto&#123;    private String courseId;    public String getCourseId() &#123;        return courseId;    &#125;    public void setCourseId(String courseId) &#123;        this.courseId = courseId;    &#125;    @Override    public String toString() &#123;        final StringBuffer sb = new StringBuffer(&quot;ChapterPageDto&#123;&quot;);        sb.append(&quot;courseId=&#39;&quot;).append(courseId).append(&#39;\&#39;&#39;);        sb.append(&quot;, page=&quot;).append(page);        sb.append(&quot;, size=&quot;).append(size);        sb.append(&quot;, total=&quot;).append(total);        sb.append(&quot;, list=&quot;).append(list);        sb.append(&#39;&#125;&#39;);        return sb.toString();    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 接着转到chaptercontroller</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  /**</span><br><span class="line">   * 列表查询</span><br><span class="line">   */</span><br><span class="line">  @PostMapping(&quot;/list&quot;)</span><br><span class="line">  public ResponseDto list(@RequestBody ChapterPageDto chapterPageDto)&#123;</span><br><span class="line">      ResponseDto responseDto = new ResponseDto();</span><br><span class="line">      ValidatorUtil.require(chapterPageDto.getCourseId(), &quot;课程ID&quot;);</span><br><span class="line">      chapterService.list(chapterPageDto);</span><br><span class="line">      responseDto.setContent(chapterPageDto);</span><br><span class="line">      return responseDto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后ChapterService</p></li><li><pre><code class="java">/** * 列表查询 */public void list(ChapterPageDto chapterPageDto) &#123;    PageHelper.startPage(chapterPageDto.getPage(), chapterPageDto.getSize());    ChapterExample chapterExample = new ChapterExample();    ChapterExample.Criteria criteria = chapterExample.createCriteria();    if (!StringUtils.isEmpty(chapterPageDto.getCourseId())) &#123;        criteria.andCourseIdEqualTo(chapterPageDto.getCourseId());    &#125;    List&lt;Chapter&gt; chapterList = chapterMapper.selectByExample(chapterExample);    PageInfo&lt;Chapter&gt; pageInfo = new PageInfo&lt;&gt;(chapterList);    chapterPageDto.setTotal(pageInfo.getTotal());    List&lt;ChapterDto&gt; chapterDtoList = CopyUtil.copyList(chapterList, ChapterDto.class);    chapterPageDto.setList(chapterDtoList);&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 经验分享：service层的查询条件写的松一点，灵活一点。service层可能被多个controller调用，也可能被其他service调用，每个调用的查询条件可能不一样</span><br><span class="line"></span><br><span class="line">大章管理和小节管理互相跳转：小节管理保存和查询功能关联courseId，chapterId</span><br><span class="line"></span><br><span class="line">- 对chapter做修改</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;h4 class=&quot;lighter&quot;&gt;</span><br><span class="line">    &lt;i class=&quot;ace-icon fa fa-hand-o-right icon-animated-hand-pointer blue&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;router-link to=&quot;/business/course&quot; class=&quot;pink&quot;&gt; &#123;&#123;course.name&#125;&#125; &lt;/router-link&gt;</span><br><span class="line">  &lt;/h4&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  ////////////////////////////////////////</span><br><span class="line">  &lt;div class=&quot;hidden-sm hidden-xs btn-group&quot;&gt;</span><br><span class="line">      &lt;button v-on:click=&quot;toSection(chapter)&quot; class=&quot;btn btn-white btn-xs btn-info btn-round&quot;&gt;</span><br><span class="line">          小节</span><br><span class="line">      &lt;/button&gt;&amp;nbsp;</span><br><span class="line">      &lt;button v-on:click=&quot;edit(chapter)&quot; class=&quot;btn btn-white btn-xs btn-info btn-round&quot;&gt;</span><br><span class="line">          编辑</span><br><span class="line">      &lt;/button&gt;&amp;nbsp;</span><br><span class="line">      &lt;button v-on:click=&quot;del(chapter.id)&quot; class=&quot;btn btn-white btn-xs btn-warning btn-round&quot;&gt;</span><br><span class="line">          删除</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  /////////////////////////////////////////////</span><br><span class="line">  toSection(chapter) &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        SessionStorage.set(&quot;chapter&quot;, chapter);</span><br><span class="line">        _this.$router.push(&quot;/business/section&quot;);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后对section</p></li><li><pre><code class="vue">&lt;h4 class=&quot;lighter&quot;&gt;  &lt;i class=&quot;ace-icon fa fa-hand-o-right icon-animated-hand-pointer blue&quot;&gt;&lt;/i&gt;  &lt;router-link to=&quot;/business/course&quot; class=&quot;pink&quot;&gt; &#123;&#123;course.name&#125;&#125; &lt;/router-link&gt;：  &lt;i class=&quot;ace-icon fa fa-hand-o-right icon-animated-hand-pointer blue&quot;&gt;&lt;/i&gt;  &lt;router-link to=&quot;/business/chapter&quot; class=&quot;pink&quot;&gt; &#123;&#123;chapter.name&#125;&#125; &lt;/router-link&gt;&lt;/h4&gt;&lt;hr&gt;///////////////////////////////////表单&lt;div class=&quot;form-group&quot;&gt;    &lt;label  class=&quot;col-sm-2 control-label&quot;&gt;课程&lt;/label&gt;    &lt;div class=&quot;col-sm-10&quot;&gt;        &lt;p class=&quot;form-control-static&quot;&gt;&#123;&#123;course.name&#125;&#125;&lt;/p&gt;    &lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;form-group&quot;&gt;    &lt;label  class=&quot;col-sm-2 control-label&quot;&gt;大章&lt;/label&gt;    &lt;div class=&quot;col-sm-10&quot;&gt;        &lt;p class=&quot;form-control-static&quot;&gt;&#123;&#123;chapter.name&#125;&#125;&lt;/p&gt;    &lt;/div&gt;&lt;/div&gt;//////////////////////////////////////////// data: function () &#123;    return &#123;      section: &#123;&#125;,      sections: [],      SECTION_CHARGE: SECTION_CHARGE,      course:&#123;&#125;,//这      chapter:&#123;&#125;,//这    &#125;  &#125;,  mounted: function () &#123;    let _this = this;    _this.$refs.pagination.size = 5;    let course = SessionStorage.get(&quot;course&quot;) || &#123;&#125;;    let chapter = SessionStorage.get(&quot;chapter&quot;) || &#123;&#125;;       if (Tool.isEmpty(course) || Tool.isEmpty(chapter)) &#123;      _this.$router.push(&quot;/welcome&quot;);    &#125;    _this.course = course;    _this.chapter = chapter;    _this.list(1);  &#125;,//////////////////////////////////////////////////列表查询两个参数courseId: _this.course.id,chapterId: _this.chapter.id////////////////////////////////////////////////////保存给两个赋值_this.section.courseId = _this.course.id;_this.section.chapterId = _this.chapter.id;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 增加SectionPageDto</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.course.server.dto;</span><br><span class="line">  </span><br><span class="line">  public class SectionPageDto extends PageDto &#123;</span><br><span class="line">  </span><br><span class="line">      private String courseId;</span><br><span class="line">  </span><br><span class="line">      private String chapterId;</span><br><span class="line">  </span><br><span class="line">      public String getCourseId() &#123;</span><br><span class="line">          return courseId;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void setCourseId(String courseId) &#123;</span><br><span class="line">          this.courseId = courseId;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public String getChapterId() &#123;</span><br><span class="line">          return chapterId;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void setChapterId(String chapterId) &#123;</span><br><span class="line">          this.chapterId = chapterId;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      public String toString() &#123;</span><br><span class="line">          final StringBuffer sb = new StringBuffer(&quot;SectionPageDto&#123;&quot;);</span><br><span class="line">          sb.append(&quot;courseId=&#x27;&quot;).append(courseId).append(&#x27;\&#x27;&#x27;);</span><br><span class="line">          sb.append(&quot;, chapterId=&#x27;&quot;).append(chapterId).append(&#x27;\&#x27;&#x27;);</span><br><span class="line">          sb.append(&quot;, page=&quot;).append(page);</span><br><span class="line">          sb.append(&quot;, size=&quot;).append(size);</span><br><span class="line">          sb.append(&quot;, total=&quot;).append(total);</span><br><span class="line">          sb.append(&quot;, list=&quot;).append(list);</span><br><span class="line">          sb.append(&#x27;&#125;&#x27;);</span><br><span class="line">          return sb.toString();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后对SectionController修改</p></li><li><p>&#96;&#96;&#96;java<br>&#x2F;**</p><ul><li>列表查询</li></ul><p>*&#x2F;<br>@PostMapping(“&#x2F;list”)<br>public ResponseDto list(@RequestBody SectionPageDto sectionPageDto){<br>    ResponseDto responseDto &#x3D; new ResponseDto();<br>    ValidatorUtil.require(sectionPageDto.getCourseId(), “课程ID”);<br>    ValidatorUtil.require(sectionPageDto.getChapterId(), “大章ID”);<br>    sectionService.list(sectionPageDto);<br>    responseDto.setContent(sectionPageDto);<br>    return responseDto;<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 最后对SectionService，criteria相当于写where语句</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  /**</span><br><span class="line">   * 列表查询</span><br><span class="line">   */</span><br><span class="line">  public void list(SectionPageDto sectionPageDto)&#123;</span><br><span class="line">      PageHelper.startPage(sectionPageDto.getPage(),sectionPageDto.getSize());</span><br><span class="line">      SectionExample sectionExample = new SectionExample();</span><br><span class="line">      SectionExample.Criteria criteria = sectionExample.createCriteria();</span><br><span class="line">      if (!StringUtils.isEmpty(sectionPageDto.getCourseId())) &#123;</span><br><span class="line">          criteria.andCourseIdEqualTo(sectionPageDto.getCourseId());</span><br><span class="line">      &#125;</span><br><span class="line">      if (!StringUtils.isEmpty(sectionPageDto.getChapterId())) &#123;</span><br><span class="line">          criteria.andChapterIdEqualTo(sectionPageDto.getChapterId());</span><br><span class="line">      &#125;</span><br><span class="line">      sectionExample.setOrderByClause(&quot;sort asc&quot;);</span><br><span class="line">      List&lt;Section&gt; sectionList = sectionMapper.selectByExample(sectionExample);</span><br><span class="line">      PageInfo&lt;Section&gt; pageInfo =new PageInfo&lt;&gt;(sectionList);</span><br><span class="line">      sectionPageDto.setTotal(pageInfo.getTotal());</span><br><span class="line">      ArrayList&lt;SectionDto&gt; sectionDtoArrayList = new ArrayList&lt;SectionDto&gt;();</span><br><span class="line">      for (int i = 0, l=sectionList.size(); i &lt;l ; i++) &#123;</span><br><span class="line">          Section section = sectionList.get(i);</span><br><span class="line">          SectionDto sectionDto = new SectionDto();</span><br><span class="line">          BeanUtils.copyProperties(section,sectionDto);</span><br><span class="line">          sectionDtoArrayList.add(sectionDto);</span><br><span class="line">      &#125;</span><br><span class="line">      sectionPageDto.setList(sectionDtoArrayList);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="7-2-课程时长的保存和显示"><a href="#7-2-课程时长的保存和显示" class="headerlink" title="7-2 课程时长的保存和显示"></a>7-2 课程时长的保存和显示</h2><p>保存节时，更新课程总时长</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.保存节时，更新课程总时长</span><br><span class="line">2.增加自定义mapper</span><br></pre></td></tr></table></figure><ul><li><p>自定义的xml要和自动生成的xml分开，所以再server的mapper中都增加两个文件夹my一个存入MyCourseMapper.java，一个MyCourseMapper.xml</p></li><li><pre><code class="java">package com.course.server.mapper.my;import org.apache.ibatis.annotations.Param;public interface MyCourseMapper &#123;    int updateTime(@Param(&quot;courseId&quot;) String courseId);&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```xml</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.course.server.mapper.my.MyCourseMapper&quot; &gt;</span><br><span class="line">    &lt;update id=&quot;updateTime&quot;&gt;</span><br><span class="line">        update course c set `time` = (select sum(`time`) from `section` where course_id = #&#123;courseId&#125;)</span><br><span class="line">        where c.id = #&#123;courseId&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>代码规范提示SectionService不要直接调用course的mapper，而是调用平级的CourseService。这时就需要将MyCourseMapper在CourseService封装一下</p></li><li><pre><code>private static final Logger LOG = LoggerFactory.getLogger(CourseService.class);@Resourceprivate MyCourseMapper myCourseMapper;/*** 更新课程时长* @param courseId* @return*/public void updateTime(String courseId) &#123;    LOG.info(&quot;更新课程时长：&#123;&#125;&quot;, courseId);    myCourseMapper.updateTime(courseId);&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在SectionService使用</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  @Resource</span><br><span class="line">  private CourseService courseService;</span><br><span class="line">  在保存中添加</span><br><span class="line">  courseService.updateTime(sectionDto.getCourseId());</span><br></pre></td></tr></table></figure></code></pre></li><li><p>因为我们在mapper下新增个文件夹所以application.properties也要改</p></li><li><pre><code>mybatis.mapper-locations=classpath:/mapper/**/*.xml<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">增加事务处理：</span><br><span class="line"></span><br><span class="line">- 一次操作会更新或修改多张表，一般为了保证数据一致，需要增加事务处理</span><br><span class="line"></span><br><span class="line">- 在server的config增加TransactionManagementConfig</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.course.server.config;</span><br><span class="line">  </span><br><span class="line">  import org.springframework.context.annotation.Configuration;</span><br><span class="line">  import org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line">  </span><br><span class="line">  @EnableTransactionManagement</span><br><span class="line">  @Configuration</span><br><span class="line">  public class TransactionManagementConfig &#123;</span><br><span class="line">     </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>使用时只需要在你想使用的方法上加@Transactional</p></li><li><p>数据保存进数据库了，说明事务没有回滚，事务不起作用</p></li><li><p>自定义异常一般可以选择继承RuntimeException。</p></li><li><p>同一个类的内部方法互相调用，methodA调用methodB，methodB事务不起作用。Spring的事务处理是利用AOP生成动态代理类，内部方法调用时不经过代理类，所以事务不生效</p></li></ul><p>增加时长格式化filter：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.增加时长格式化filter format..Second</span><br></pre></td></tr></table></figure><ul><li><p>在filter增加</p></li><li><p>&#96;&#96;&#96;js<br>&#x2F;**</p><ul><li>时长格式化</li><li>@param value 例如：36000</li><li>@returns {string} 例如：10:00:00</li></ul><p> *&#x2F;<br>let format..Second &#x3D; (value) &#x3D;&gt; {<br>    value &#x3D; value || 0;<br>    let second &#x3D; parseInt(value, 10); &#x2F;&#x2F; 秒<br>    let minute &#x3D; 0; &#x2F;&#x2F; 分<br>    let hour &#x3D; 0; &#x2F;&#x2F; 小时<br>    if (second &gt;&#x3D; 60) {<br>        &#x2F;&#x2F; 当大于60秒时，才需要做转换<br>        minute &#x3D; Math.floor(second &#x2F; 60);<br>        second &#x3D; Math.floor(second % 60);<br>        if (minute &gt;&#x3D; 60) {<br>            hour &#x3D; Math.floor(minute &#x2F; 60);<br>            minute &#x3D; Math.floor(minute % 60);<br>        }<br>    } else {<br>        &#x2F;&#x2F; 小于60秒时，直接显示，不需要处理<br>    }<br>    let result &#x3D; “” + PrefixInteger(second, 2) + “”;<br>    &#x2F;&#x2F; 拼上分钟<br>    result &#x3D; “” + PrefixInteger(minute, 2) + “:” + result;<br>    &#x2F;&#x2F; 拼上小时<br>    result &#x3D; “” + PrefixInteger(hour, 2) + “:” + result;<br>    return result;<br>};</p><p>&#x2F;**</p><ul><li>格式化指定长度，前面补0</li></ul><p> *&#x2F;<br>function PrefixInteger(num, length) {<br>    return (Array(length).join(‘0’) + num).slice(-length);<br>}<br>export default {<br>    option..KV,<br>    format..Second<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 使用的时候直接在时间后加过滤器</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;td&gt;两个大括号包住section.time | format..Second&lt;/td&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="7-3-分类管理功能的开发"><a href="#7-3-分类管理功能的开发" class="headerlink" title="7-3 分类管理功能的开发"></a>7-3 分类管理功能的开发</h2><p>分类表设计和基本代码生成：</p><ul><li><p>首先设计数据库</p></li><li><pre><code class="sql"># 分类DROP TABLE IF EXISTS `category`;create table `category`(    `id`         CHAR(8)     NOT NULL DEFAULT &#39;&#39; COMMENT &#39;id&#39;,    `parent`         CHAR(8)     NOT NULL DEFAULT &#39;&#39; COMMENT &#39;父id&#39;,    `name`      VARCHAR(50) NOT NULL COMMENT &#39;名称&#39;,    `sort`       INT COMMENT &#39;顺序&#39;,    PRIMARY KEY (`id`)   )engine =innodb default charset=utf8mb4 comment=&#39;分类&#39;;insert into `category` (id,parent,name,sort) values (&#39;00000100&#39;,&#39;00000000&#39;,&#39;前端技术&#39;,100);insert into `category` (id,parent,name,sort) values (&#39;00000101&#39;,&#39;00000100&#39;,&#39;html/css&#39;,101);insert into `category` (id,parent,name,sort) values (&#39;00000102&#39;,&#39;00000100&#39;,&#39;javascript&#39;,102);insert into `category` (id,parent,name,sort) values (&#39;00000103&#39;,&#39;00000100&#39;,&#39;vue.js&#39;,103);insert into `category` (id,parent,name,sort) values (&#39;00000104&#39;,&#39;00000100&#39;,&#39;react.js&#39;,104);insert into `category` (id,parent,name,sort) values (&#39;00000105&#39;,&#39;00000100&#39;,&#39;angular&#39;,105);insert into `category` (id,parent,name,sort) values (&#39;00000106&#39;,&#39;00000100&#39;,&#39;node.js&#39;,106);insert into `category` (id,parent,name,sort) values (&#39;00000107&#39;,&#39;00000100&#39;,&#39;jquery&#39;,107);insert into `category` (id,parent,name,sort) values (&#39;00000108&#39;,&#39;00000100&#39;,&#39;小程序&#39;,108);insert into `category` (id,parent,name,sort) values (&#39;00000200&#39;,&#39;00000000&#39;,&#39;后端技术&#39;,200);insert into `category` (id,parent,name,sort) values (&#39;00000201&#39;,&#39;00000200&#39;,&#39;java&#39;,201);insert into `category` (id,parent,name,sort) values (&#39;00000202&#39;,&#39;00000200&#39;,&#39;springboot&#39;,202);insert into `category` (id,parent,name,sort) values (&#39;00000203&#39;,&#39;00000200&#39;,&#39;spring cloud&#39;,203);insert into `category` (id,parent,name,sort) values (&#39;00000204&#39;,&#39;00000200&#39;,&#39;ssm&#39;,204);insert into `category` (id,parent,name,sort) values (&#39;00000205&#39;,&#39;00000200&#39;,&#39;python&#39;,205);insert into `category` (id,parent,name,sort) values (&#39;00000206&#39;,&#39;00000200&#39;,&#39;爬虫&#39;,206);insert into `category` (id,parent,name,sort) values (&#39;00000300&#39;,&#39;00000000&#39;,&#39;移动开发&#39;,300);insert into `category` (id,parent,name,sort) values (&#39;00000301&#39;,&#39;00000000&#39;,&#39;android&#39;,301);insert into `category` (id,parent,name,sort) values (&#39;00000302&#39;,&#39;00000000&#39;,&#39;ios&#39;,302);insert into `category` (id,parent,name,sort) values (&#39;00000303&#39;,&#39;00000000&#39;,&#39;react native&#39;,303);insert into `category` (id,parent,name,sort) values (&#39;00000304&#39;,&#39;00000000&#39;,&#39;ionic&#39;,304);insert into `category` (id,parent,name,sort) values (&#39;00000400&#39;,&#39;00000000&#39;,&#39;前沿技术&#39;,400);insert into `category` (id,parent,name,sort) values (&#39;00000401&#39;,&#39;00000000&#39;,&#39;微服务&#39;,401);insert into `category` (id,parent,name,sort) values (&#39;00000402&#39;,&#39;00000000&#39;,&#39;区块链&#39;,402);insert into `category` (id,parent,name,sort) values (&#39;00000403&#39;,&#39;00000000&#39;,&#39;机器学习&#39;,403);insert into `category` (id,parent,name,sort) values (&#39;00000404&#39;,&#39;00000000&#39;,&#39;深度学习&#39;,404);insert into `category` (id,parent,name,sort) values (&#39;00000405&#39;,&#39;00000000&#39;,&#39;数据分析&amp;挖掘&#39;,405);insert into `category` (id,parent,name,sort) values (&#39;00000500&#39;,&#39;00000000&#39;,&#39;云计算&amp;大数据&#39;,500);insert into `category` (id,parent,name,sort) values (&#39;00000501&#39;,&#39;00000000&#39;,&#39;大数据&#39;,501);insert into `category` (id,parent,name,sort) values (&#39;00000502&#39;,&#39;00000000&#39;,&#39;hadoop&#39;,502);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 接下来mybatis-generator、前端后端生成器生成下，然后改下admin增加分类管理，然后路由增加下。</span><br><span class="line"></span><br><span class="line">分类的二级列表查询与显示：</span><br><span class="line"></span><br><span class="line">- 做成两个表格，左边一个表格是一级分类，右边是二级分类。点击一级分类时显示二级分类。</span><br><span class="line"></span><br><span class="line">- 首先在CategoryService中添加</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  /**</span><br><span class="line">  * 列表查询</span><br><span class="line">  */</span><br><span class="line">      public List&lt;CategoryDto&gt; all( ) &#123;</span><br><span class="line">          CategoryExample categoryExample = new CategoryExample();</span><br><span class="line">          categoryExample.setOrderByClause(&quot;sort asc&quot;);</span><br><span class="line">          List&lt;Category&gt; categoryList = categoryMapper.selectByExample(categoryExample);</span><br><span class="line">          List&lt;CategoryDto&gt; categoryDtoList = CopyUtil.copyList(categoryList, CategoryDto.class);</span><br><span class="line">          return categoryDtoList;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>接着在CategoryController增加</p></li><li><pre><code class="java">/*** 列表查询*/@PostMapping(&quot;/all&quot;)public ResponseDto all()&#123;    ResponseDto responseDto = new ResponseDto();    List&lt;CategoryDto&gt; categoryDtoList = categoryService.all();    responseDto.setContent(categoryDtoList);    return responseDto;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后再category.vue将分页全都删了，增加</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;business-category&#x27;,</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        category: &#123;&#125;,</span><br><span class="line">        categorys: [],</span><br><span class="line">        level1: [],</span><br><span class="line">        level2: [],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted: function () &#123;</span><br><span class="line">      let _this = this;</span><br><span class="line">      _this.all();</span><br><span class="line">    &#125;,</span><br><span class="line">    /////////////////////////////////////////////修改list</span><br><span class="line">     /**</span><br><span class="line">       * 列表查询</span><br><span class="line">       */</span><br><span class="line">      all() &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        Loading.show();</span><br><span class="line">        _this.$ajax.post(process.env.VUE_APP_SERVER +&#x27;/business/admin/category/all&#x27;).then((respond) =&gt; &#123;</span><br><span class="line">          Loading.hide();</span><br><span class="line">          let resp = respond.data;</span><br><span class="line">          _this.categorys = resp.content;</span><br><span class="line">          //将所有记录格式化成树形结构</span><br><span class="line">          for (let i = 0; i &lt; _this.categorys.length; i++) &#123;</span><br><span class="line">            let c =_this.categorys[i];</span><br><span class="line">            if(c.parent === &#x27;00000000&#x27;)&#123;</span><br><span class="line">              _this.level1.push(c);</span><br><span class="line">              for (let j = 0; j &lt; _this.categorys.length; j++) &#123;</span><br><span class="line">                let child =_this.categorys[j];</span><br><span class="line">                if(child.parent === c.id)&#123;</span><br><span class="line">                  if(Tool.isEmpty(c.children))&#123;</span><br><span class="line">                    c.children = [];</span><br><span class="line">                  &#125;</span><br><span class="line">                  c.children.push(child);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure></code></pre></li><li><p>level1的数据增加childern属性，用于存放它所有的二级分类</p></li><li><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/04/8G7p5sV4nTYwcyS.png"                      alt="image-20220304160059706"                ></p></li><li><p>左边一个表格是一级分类，右边是二级分类：简单来说就是再 <div class="col-md-6">中加了两个table。</p></li><li><pre><code class="vue">&lt;div class=&quot;row&quot;&gt;  &lt;div class=&quot;col-md-6&quot;&gt;    &lt;p&gt;      &lt;button v-on:click=&quot;add()&quot; class=&quot;btn btn-white btn-default btn-round&quot;&gt;        &lt;i class=&quot;ace-icon fa fa-edit red2&quot;&gt;&lt;/i&gt;        新增      &lt;/button&gt;      &amp;nbsp;      &lt;button v-on:click=&quot;all()&quot; class=&quot;btn btn-white btn-default btn-round&quot;&gt;        &lt;i class=&quot;ace-icon fa fa-refresh red2&quot;&gt;&lt;/i&gt;        刷新      &lt;/button&gt;    &lt;/p&gt;    &lt;table id=&quot;level1-table&quot; class=&quot;table  table-bordered table-hover&quot;&gt;      &lt;thead&gt;      &lt;tr&gt;        &lt;th&gt;id&lt;/th&gt;        &lt;th&gt;名称&lt;/th&gt;        &lt;th&gt;顺序&lt;/th&gt;        &lt;th&gt;操作&lt;/th&gt;      &lt;/tr&gt;      &lt;/thead&gt;      &lt;tbody&gt;      &lt;tr v-for=&quot;category in level1&quot; v-on:click=&quot;onClickLevel1(category)&quot;&gt;        &lt;td&gt;&#123;&#123;category.id&#125;&#125;&lt;/td&gt;        &lt;td&gt;&#123;&#123;category.name&#125;&#125;&lt;/td&gt;        &lt;td&gt;&#123;&#123;category.sort&#125;&#125;&lt;/td&gt;        &lt;td&gt;          &lt;div class=&quot;hidden-sm hidden-xs btn-group&quot;&gt;            &lt;button v-on:click=&quot;edit(category)&quot; class=&quot;btn btn-xs btn-info&quot;&gt;              &lt;i class=&quot;ace-icon fa fa-pencil bigger-120&quot;&gt;&lt;/i&gt;            &lt;/button&gt;            &lt;button v-on:click=&quot;del(category.id)&quot; class=&quot;btn btn-xs btn-danger&quot;&gt;              &lt;i class=&quot;ace-icon fa fa-trash-o bigger-120&quot;&gt;&lt;/i&gt;            &lt;/button&gt;          &lt;/div&gt;          &lt;div class=&quot;hidden-md hidden-lg&quot;&gt;            &lt;div class=&quot;inline pos-rel&quot;&gt;              &lt;button class=&quot;btn btn-minier btn-primary dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; data-position=&quot;auto&quot;&gt;                &lt;i class=&quot;ace-icon fa fa-cog icon-only bigger-110&quot;&gt;&lt;/i&gt;              &lt;/button&gt;              &lt;ul class=&quot;dropdown-menu dropdown-only-icon dropdown-yellow dropdown-menu-right dropdown-caret dropdown-close&quot;&gt;                &lt;li&gt;                  &lt;a href=&quot;#&quot; class=&quot;tooltip-info&quot; data-rel=&quot;tooltip&quot; title=&quot;View&quot;&gt;               &lt;span class=&quot;blue&quot;&gt;                &lt;i class=&quot;ace-icon fa fa-search-plus bigger-120&quot;&gt;&lt;/i&gt;               &lt;/span&gt;                  &lt;/a&gt;                &lt;/li&gt;                &lt;li&gt;                  &lt;a href=&quot;#&quot; class=&quot;tooltip-success&quot; data-rel=&quot;tooltip&quot; title=&quot;Edit&quot;&gt;               &lt;span class=&quot;green&quot;&gt;                &lt;i class=&quot;ace-icon fa fa-pencil-square-o bigger-120&quot;&gt;&lt;/i&gt;               &lt;/span&gt;                  &lt;/a&gt;                &lt;/li&gt;                &lt;li&gt;                  &lt;a href=&quot;#&quot; class=&quot;tooltip-error&quot; data-rel=&quot;tooltip&quot; title=&quot;Delete&quot;&gt;               &lt;span class=&quot;red&quot;&gt;                &lt;i class=&quot;ace-icon fa fa-trash-o bigger-120&quot;&gt;&lt;/i&gt;               &lt;/span&gt;                  &lt;/a&gt;                &lt;/li&gt;              &lt;/ul&gt;            &lt;/div&gt;          &lt;/div&gt;        &lt;/td&gt;      &lt;/tr&gt;      &lt;/tbody&gt;    &lt;/table&gt;  &lt;/div&gt;  &lt;div class=&quot;col-md-6&quot;&gt;    &lt;p&gt;      &lt;button v-on:click=&quot;add()&quot; class=&quot;btn btn-white btn-default btn-round&quot;&gt;        &lt;i class=&quot;ace-icon fa fa-edit red2&quot;&gt;&lt;/i&gt;        新增      &lt;/button&gt;      &amp;nbsp;      &lt;button v-on:click=&quot;all()&quot; class=&quot;btn btn-white btn-default btn-round&quot;&gt;        &lt;i class=&quot;ace-icon fa fa-refresh red2&quot;&gt;&lt;/i&gt;        刷新      &lt;/button&gt;    &lt;/p&gt;    &lt;table id=&quot;level2-table&quot; class=&quot;table  table-bordered table-hover&quot;&gt;      &lt;thead&gt;      &lt;tr&gt;        &lt;th&gt;id&lt;/th&gt;        &lt;th&gt;名称&lt;/th&gt;        &lt;th&gt;顺序&lt;/th&gt;        &lt;th&gt;操作&lt;/th&gt;      &lt;/tr&gt;      &lt;/thead&gt;      &lt;tbody&gt;      &lt;tr v-for=&quot;category in level2&quot; &gt;        &lt;td&gt;&#123;&#123;category.id&#125;&#125;&lt;/td&gt;        &lt;td&gt;&#123;&#123;category.name&#125;&#125;&lt;/td&gt;        &lt;td&gt;&#123;&#123;category.sort&#125;&#125;&lt;/td&gt;        &lt;td&gt;          &lt;div class=&quot;hidden-sm hidden-xs btn-group&quot;&gt;            &lt;button v-on:click=&quot;edit(category)&quot; class=&quot;btn btn-xs btn-info&quot;&gt;              &lt;i class=&quot;ace-icon fa fa-pencil bigger-120&quot;&gt;&lt;/i&gt;            &lt;/button&gt;            &lt;button v-on:click=&quot;del(category.id)&quot; class=&quot;btn btn-xs btn-danger&quot;&gt;              &lt;i class=&quot;ace-icon fa fa-trash-o bigger-120&quot;&gt;&lt;/i&gt;            &lt;/button&gt;          &lt;/div&gt;          &lt;div class=&quot;hidden-md hidden-lg&quot;&gt;            &lt;div class=&quot;inline pos-rel&quot;&gt;              &lt;button class=&quot;btn btn-minier btn-primary dropdown-toggle&quot; data-toggle=&quot;dropdown&quot; data-position=&quot;auto&quot;&gt;                &lt;i class=&quot;ace-icon fa fa-cog icon-only bigger-110&quot;&gt;&lt;/i&gt;              &lt;/button&gt;              &lt;ul class=&quot;dropdown-menu dropdown-only-icon dropdown-yellow dropdown-menu-right dropdown-caret dropdown-close&quot;&gt;                &lt;li&gt;                  &lt;a href=&quot;#&quot; class=&quot;tooltip-info&quot; data-rel=&quot;tooltip&quot; title=&quot;View&quot;&gt;               &lt;span class=&quot;blue&quot;&gt;                &lt;i class=&quot;ace-icon fa fa-search-plus bigger-120&quot;&gt;&lt;/i&gt;               &lt;/span&gt;                  &lt;/a&gt;                &lt;/li&gt;                &lt;li&gt;                  &lt;a href=&quot;#&quot; class=&quot;tooltip-success&quot; data-rel=&quot;tooltip&quot; title=&quot;Edit&quot;&gt;               &lt;span class=&quot;green&quot;&gt;                &lt;i class=&quot;ace-icon fa fa-pencil-square-o bigger-120&quot;&gt;&lt;/i&gt;               &lt;/span&gt;                  &lt;/a&gt;                &lt;/li&gt;                &lt;li&gt;                  &lt;a href=&quot;#&quot; class=&quot;tooltip-error&quot; data-rel=&quot;tooltip&quot; title=&quot;Delete&quot;&gt;               &lt;span class=&quot;red&quot;&gt;                &lt;i class=&quot;ace-icon fa fa-trash-o bigger-120&quot;&gt;&lt;/i&gt;               &lt;/span&gt;                  &lt;/a&gt;                &lt;/li&gt;              &lt;/ul&gt;            &lt;/div&gt;          &lt;/div&gt;        &lt;/td&gt;      &lt;/tr&gt;      &lt;/tbody&gt;    &lt;/table&gt;  &lt;/div&gt;&lt;/div&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 为左边表增加点击事件，点击右边就显示子表</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  onClickLevel1(category)&#123;</span><br><span class="line">    let _this =this;</span><br><span class="line">    _this.level2 =category.children;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>出现问题一：点击刷新的时候，会重复增加，主要是因为all事件每次都会将level1push<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/04/mITPCRfrskdY2Ee.png"                      alt="image-20220304165944171"                ></p></li><li><p>解决只需要再每次格式化前将level1清空即增加_this.level1 &#x3D;[];</p></li><li><p>问题二：点击左边的，出来右边时，我们需要增加一个激活效果<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/04/LMTYs7igUP2ItEh.png"                      alt="image-20220304170305414"                ></p></li><li><p>动态class：使用v-bind:class&#x3D;json表达式，key就是样式，value是boolean，为true时，表示key的样式生效。可以和原生的class并存</p></li><li><pre><code>///////////////////////////////////////////////////////////////&lt;tr v-for=&quot;category in level1&quot; v-on:click=&quot;onClickLevel1(category)&quot; v-bind:class=&quot;&#123;&#39;active&#39;: category.id === active.id&#125;&quot;&gt;////////////////////////////////////////////////////data: function () &#123;    return &#123;      category: &#123;&#125;,      categorys: [],      level1: [],      level2: [],      active: &#123;&#125;,//增加    &#125;  &#125;,  /////////////////////////////////////////////////   onClickLevel1(category) &#123;        let _this = this;        _this.active = category;        _this.level2 = category.children;      &#125;    &#125;  &#125; /////////////////////////////////////////////&lt;style scoped&gt;  .active td &#123;    background-color: #d6e9c6 !important;  &#125;&lt;/style&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">两级分类的新增修改删除：</span><br><span class="line"></span><br><span class="line">- 将两个新增标签改成新增一级，新增二级，对应的方法改为add1(),add2()，将父id改成父分类</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;label class=&quot;col-sm-2 control-label&quot;&gt;父分类&lt;/label&gt;</span><br><span class="line">    &lt;div class=&quot;col-sm-10&quot;&gt;</span><br><span class="line">      &lt;p  class=&quot;form-control-static&quot;&gt;&#123;&#123;active.name || &quot;无&quot;&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  //////////////////////////////////////////////////////////////////////////////////</span><br><span class="line">    /**</span><br><span class="line">       * 点击【新增一级】</span><br><span class="line">       */</span><br><span class="line">      add1() &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        _this.active = &#123;&#125;;</span><br><span class="line">        _this.level2 = [];</span><br><span class="line">        _this.category = &#123;</span><br><span class="line">          parent:&quot;00000000&quot;</span><br><span class="line">        &#125;;</span><br><span class="line">        $(&quot;#form-modal&quot;).modal(&quot;show&quot;);</span><br><span class="line">      &#125;,</span><br><span class="line">      /**</span><br><span class="line">       * 点击【新增二级】</span><br><span class="line">       */</span><br><span class="line">      add2() &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        if(Tool.isEmpty(_this.active))&#123;</span><br><span class="line">          Toast.warning(&quot;请先点击一级分类&quot;);</span><br><span class="line">          return;</span><br><span class="line">        &#125;</span><br><span class="line">        _this.category = &#123;</span><br><span class="line">          parent:_this.active.id</span><br><span class="line">        &#125;;</span><br><span class="line">        $(&quot;#form-modal&quot;).modal(&quot;show&quot;);</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure></code></pre></li><li><p>修改CategoryService</p></li><li><pre><code class="java">/** * 删除 */@Transactionalpublic void delete(String id)&#123;    deleteChildren(id);    categoryMapper.deleteByPrimaryKey(id);&#125;/** * 删除子分类 * @param id */public void deleteChildren(String id) &#123;    Category category = categoryMapper.selectByPrimaryKey(id);    if (&quot;00000000&quot;.equals(category.getParent())) &#123;        // 如果是一级分类，需要删除其下的二级分类        CategoryExample example = new CategoryExample();        example.createCriteria().andParentEqualTo(category.getId());        categoryMapper.deleteByExample(example);    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 问题：新增、编辑、删除二级分类时，没有马上刷新出来，会用到另一个小知识点</span><br><span class="line"></span><br><span class="line">- 处理：对一级或二级分类的增删改查，都会调用all()刷新数据，所以all()的后面触发一次表格行点击事件。</span><br><span class="line"></span><br><span class="line">```vue</span><br><span class="line">_this.level2 =[];</span><br><span class="line">  //对当前一级分类中选中的表格触发一次点击事件，以刷新二级菜单栏</span><br><span class="line">  //注意：界面的渲染需要等vue绑定好变量后才做，所以延迟100ms</span><br><span class="line">  setTimeout(function ()&#123;</span><br><span class="line">    $(&quot;tr.active&quot;).trigger(&quot;click&quot;);</span><br><span class="line">  &#125;,100)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></code></pre></li><li><p>小技巧：当界面又用了jquery（特别是第三插件），当觉得代码没问题，但是效果又没出来，可以加一个小延迟看看。</p></li></ul><h2 id="7-4-课程和分类关联保存和显示"><a href="#7-4-课程和分类关联保存和显示" class="headerlink" title="7-4 课程和分类关联保存和显示"></a>7-4 课程和分类关联保存和显示</h2><p>集成树型展示插件zTree：<a class="link"   href="http://www.treejs.cn/v3/main.php#_zTreeInfo" >http://www.treejs.cn/v3/main.php#_zTreeInfo<i class="fas fa-external-link-alt"></i></a></p><ul><li><p>先弄成这个样式：<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/05/dRaPCEKfeHr5jcs.png"                      alt="image-20220305153046685"                ></p></li><li><p>zTree是jquery插件，用于展示树型结构数据。分类数据有两层结构，可用树形结构展示。</p></li><li><p>首先再index中引入</p></li><li><p>&#96;&#96;&#96;html</p><!--  zTree jquery树插件  --><link rel="stylesheet" href="<%= BASE_URL %>zTree_v3/css/zTreeStyle/zTreeStyle.css" type="text/css">///////////////////////////////////<!--  zTree jquery树插件  --><script src="<%= BASE_URL %>zTree_v3-master/js/jquery.ztree.core.min.js"></script><script src="<%= BASE_URL %>zTree_v3-master/js/jquery.ztree.excheck.min.js"></script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 功能设计：新增课程的时候，同时选择这门课程属于哪些分类，并且一门课程可以属于多个分类。</span><br><span class="line"></span><br><span class="line">- 再course.vue表单下添加</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;label class=&quot;col-sm-2 control-label&quot;&gt;</span><br><span class="line">      分类</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;div class=&quot;col-sm-10&quot;&gt;</span><br><span class="line">      &lt;ul id=&quot;tree&quot; class=&quot;ztree&quot;&gt;&lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  /////////////////////////////////初始化时</span><br><span class="line">     _this.initTree();</span><br><span class="line">  ////////////////////////////////////////</span><br><span class="line">      initTree()&#123;</span><br><span class="line">        let setting = &#123;</span><br><span class="line">          check: &#123;</span><br><span class="line">            enable: true</span><br><span class="line">          &#125;,</span><br><span class="line">          data: &#123;</span><br><span class="line">            simpleData: &#123;</span><br><span class="line">              enable: true</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">  </span><br><span class="line">        let zNodes =[</span><br><span class="line">          &#123; id:1, pId:0, name:&quot;随意勾选 1&quot;, open:true&#125;,</span><br><span class="line">          &#123; id:11, pId:1, name:&quot;随意勾选 1-1&quot;, open:true&#125;,</span><br><span class="line">          &#123; id:111, pId:11, name:&quot;随意勾选 1-1-1&quot;&#125;,</span><br><span class="line">          &#123; id:112, pId:11, name:&quot;随意勾选 1-1-2&quot;&#125;,</span><br><span class="line">          &#123; id:12, pId:1, name:&quot;随意勾选 1-2&quot;, open:true&#125;,</span><br><span class="line">          &#123; id:121, pId:12, name:&quot;随意勾选 1-2-1&quot;&#125;,</span><br><span class="line">          &#123; id:122, pId:12, name:&quot;随意勾选 1-2-2&quot;&#125;,</span><br><span class="line">          &#123; id:2, pId:0, name:&quot;随意勾选 2&quot;, checked:true, open:true&#125;,</span><br><span class="line">          &#123; id:21, pId:2, name:&quot;随意勾选 2-1&quot;&#125;,</span><br><span class="line">          &#123; id:22, pId:2, name:&quot;随意勾选 2-2&quot;, open:true&#125;,</span><br><span class="line">          &#123; id:221, pId:22, name:&quot;随意勾选 2-2-1&quot;, checked:true&#125;,</span><br><span class="line">          &#123; id:222, pId:22, name:&quot;随意勾选 2-2-2&quot;&#125;,</span><br><span class="line">          &#123; id:23, pId:2, name:&quot;随意勾选 2-3&quot;&#125;</span><br><span class="line">        ];</span><br><span class="line">        $.fn.zTree.init($(&quot;#tree&quot;), setting, zNodes);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li></ul><p>将其改成这样：1.zTree数据改为分类所有记录<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/05/jo7QPzke8GR2TYm.png"                      alt="image-20220305153545604"                ></p><ul><li><p>首先将category中all方法复制修改到course中，然后初始值，接着将初始initTree更改初始allCategory，然后再allCategory中使用initTree（在第八行），接着将分支写入tree中，最后pId是zTree默认的父ID名称，而分类表是用parent，需要配置转换</p></li><li><p>&#96;&#96;&#96;<br>&#x2F;&#x2F;首先将category中all方法复制修改到course中<br>allCategory() {<br>  let _this &#x3D; this;<br>  Loading.show();<br>  _this.$ajax.post(process.env.VUE_APP_SERVER +’&#x2F;business&#x2F;admin&#x2F;category&#x2F;all’).then((respond) &#x3D;&gt; {<br>Loading.hide();<br>let resp &#x3D; respond.data;<br>_this.categorys &#x3D; resp.content;<br>_this.initTree();&#x2F;&#x2F;然后再allCategory中使用initTree<br>  })<br>},<br>&#x2F;&#x2F;然后初始值<br>categorys: [],<br>&#x2F;&#x2F;接着将初始initTree更改初始allCategory<br> _this.allCategory();<br> &#x2F;&#x2F;将分支写入tree中<br>let zNodes &#x3D; _this.categorys;<br>&#x2F;&#x2F;pId是zTree默认的父ID名称，而分类表是用parent，需要配置转换<br> data: {<br>      simpleData: {<br>        idKey:”id”,<br>        pIdKey:”parent”,<br>        rootPId:”00000000”,<br>        enable: true<br>      }<br>    }</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">保存课程时，同时保存课程分类：</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.保存课程时，同时保存课程分类<br>2.增加课程分类关联表，一门课程可以属于多个分类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 首先创建sql语句</span><br><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  #课程分类</span><br><span class="line">  DROP TABLE IF EXISTS `course_category`;</span><br><span class="line">  create table `course_category`(</span><br><span class="line">              `id` char(8) not null default &#x27;&#x27; comment &#x27;id&#x27;,</span><br><span class="line">              `course_id` char(8) comment &#x27;课程|course.id&#x27;,</span><br><span class="line">              `category_id` char(8) comment &#x27;分类|course.id&#x27;,</span><br><span class="line">  </span><br><span class="line">               primary key (`id`)</span><br><span class="line">  )engine =innodb default charset=utf8mb4 comment=&#x27;课程分类&#x27;;</span><br></pre></td></tr></table></figure><ul><li><p>接着就是代码生成器，不需要前端的，所以也不需要controller。</p></li><li><p>在course.vue中进行代码的修改</p></li><li><pre><code class="vue">//在data中定义treetree: &#123;&#125;,//再保存中进行一些弹框提示let categorys = _this.tree.getCheckedNodes();if(Tool.isEmpty(categorys))&#123;  Toast.warning(&quot;请选择分类!&quot;);  return;&#125;_this.course.categorys =categorys;//将这个赋值到tree_this.tree = $.fn.zTree.init($(&quot;#tree&quot;), setting, zNodes);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在courseDto中增加一个变量</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  private List&lt;CategoryDto&gt; categorys;//属性名和前端传递的参数名一致，这样spring会自动映射参数</span><br></pre></td></tr></table></figure></code></pre></li><li><p>在CourseService中save中增加</p></li><li><pre><code class="java">@Resourceprivate CourseCategoryService courseCategoryService;   //批量保存课程分类courseCategoryService.saveBatch(courseDto.getId(),courseDto.getCategorys());<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- 在CourseCategoryService增加saveBatch方法</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  public void saveBatch(String courseId, List&lt;CategoryDto&gt; dtoList)&#123;</span><br><span class="line">      CourseCategoryExample example = new CourseCategoryExample();</span><br><span class="line">      example.createCriteria().andCourseIdEqualTo(courseId);</span><br><span class="line">      courseCategoryMapper.deleteByExample(example);</span><br><span class="line">      for (int i = 0,l = dtoList.size(); i &lt; l; i++) &#123;</span><br><span class="line">          CategoryDto categoryDto = dtoList.get(i);</span><br><span class="line">          CourseCategory courseCategory = new CourseCategory();</span><br><span class="line">          courseCategory.setId(UuidUtil.getShortUuid());</span><br><span class="line">          courseCategory.setCourseId(courseId);</span><br><span class="line">          courseCategory.setCategoryId(categoryDto.getId());</span><br><span class="line">          insert(courseCategory);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>我们只需要保存分类的ID，所以数据传输可以选择id数组，也可以选择category数组</p></li><li><p>也可以通过自定义的mapper写动态sql，将list传入mybatis，批量插入一批数据，只要一条insert语句。项目开发需要在开发效率和运行效率间找平衡。</p></li><li><p>问题：保存课程时，调用saveBatch，那么课程新增时，还会批量插入数据，课程更新时，会再次批量插入数据，每次调用保存都会批量插入数据</p></li></ul><p>编辑课程时，加载课程分类树，并设置勾选：</p><ul><li>首先在CourseService增加一个事务，</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存，id有值时更新，无值时新增</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br></pre></td></tr></table></figure><ul><li><p>外层save增加了事务，saveBatch按理可以不加事务。但是由于本身也是多个sql操作，且以后可能被多个地方调用，为了防止外层save忘记加事务，所以在saveBatch加事务，以防外一。</p></li><li><p>在CourseCategoryService中增加,其次在saveBatch也增加一个事务</p></li><li><pre><code class="java">/**  * 根据某一课程，前清空课程分类，再保存课程分类  * @param courseId  * @param dtoList*/@Transactional///////////////////////////////////////////////public List&lt;CourseCategoryDto&gt; listByCourse(String courseId)&#123;    CourseCategoryExample example = new CourseCategoryExample();    example.createCriteria().andCourseIdEqualTo(courseId);    List&lt;CourseCategory&gt; courseCategoryList = courseCategoryMapper.selectByExample(example);    return CopyUtil.copyList(courseCategoryList,CourseCategoryDto.class);&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在coursecontroller中增加一个方法</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  /**</span><br><span class="line">  * 查找课程下所有分类</span><br><span class="line">  */</span><br><span class="line">  @PostMapping (&quot;/list-category/&#123;courseId&#125;&quot;)</span><br><span class="line">  public ResponseDto listCategory(@PathVariable(value = &quot;courseId&quot;)  String courseId)&#123;</span><br><span class="line">      ResponseDto responseDto = new ResponseDto();</span><br><span class="line">      List&lt;CourseCategoryDto&gt; dtoList = courseCategoryService.listByCourse(courseId);</span><br><span class="line">      responseDto.setContent(dtoList);</span><br><span class="line">      return responseDto;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>最后在course.vue中增加</p></li><li><pre><code class="vue">add() &#123;  _this.tree.checkAllNodes(false);&#125;,/////////////////edit(course) &#123;     _this.listCategory(course.id);&#125;,////////////////////// /**     * 查找课程下所有分类     * @param courseId     */    listCategory(courseId) &#123;      let _this = this;      Loading.show();      _this.$ajax.post(process.env.VUE_APP_SERVER + &#39;/business/admin/course/list-category/&#39; + courseId).then((res)=&gt;&#123;        Loading.hide();        console.log(&quot;查找课程下所有分类结果：&quot;, res);        let response = res.data;        let categorys = response.content;        // 勾选查询到的分类        _this.tree.checkAllNodes(false);        for (let i = 0; i &lt; categorys.length; i++) &#123;          let node = _this.tree.getNodeByParam(&quot;id&quot;, categorys[i].categoryId);          _this.tree.checkNode(node, true);        &#125;      &#125;)    &#125;,<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 7-5 课程内容功能开发</span><br><span class="line"></span><br><span class="line">课程内容表的设计与基本代码的生成：</span><br><span class="line"></span><br><span class="line">- all.sql生成代码</span><br><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  #课程内容</span><br><span class="line">  DROP TABLE IF EXISTS `course_content`;</span><br><span class="line">  create table `course_content`(</span><br><span class="line">              `id` char(8) not null default &#x27;&#x27; comment &#x27;课程id&#x27;,</span><br><span class="line">              `content` mediumtext not null  comment &#x27;课程内容&#x27;,</span><br><span class="line">               primary key (`id`)</span><br><span class="line">  )engine =innodb default charset=utf8mb4 comment=&#x27;课程内容&#x27;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>课程表和课程内容表是1：1的关系，两张表都用同样的字段</p></li><li><p>课程详情一般会有文字，图片，视频等，虽然不会把整张图片或者整个视频放到数据库，但是存的信息还是很多，所以用大字段。mediumtext比text类型长度更长。</p></li><li><p>然后依旧mybatis和后端生成器生成代码。</p></li><li><p>表里有大字段时，就会生成withBLOBs方法（在service中）</p></li></ul><p>完成课程内容管理功能：</p><ul><li><p>富文本编辑器，一个很重要的特性：所见即所得</p></li><li><p>课程内容，只有读和写，没有列表查询，也没有删除</p></li><li><p>新增课程的时候，course表有数据，course_content表没有数据。</p></li><li><p>正常思路，先去select，看看有没有数据，再判断时insert还是update，这样会执行两个sql。其实可以直接更新，没有更新到再插入，只有第一次会更新不到，执行两次sql，后面都只需要一个sql</p></li><li><p>首先在CourseService中插入</p></li><li><pre><code class="java"> @Resource private CourseContentMapper courseContentMapper;    /** * 查找课程内容 */public CourseContentDto findContent(String id)&#123;    CourseContent content = courseContentMapper.selectByPrimaryKey(id);    if(content == null)&#123;        return null;    &#125;    return CopyUtil.copy(content,CourseContentDto.class);&#125;/** * 保存课程内容，包含新增和修改 */public int saveContent(CourseContentDto contentDto)&#123;    CourseContent content = CopyUtil.copy(contentDto,CourseContent.class);    int i = courseContentMapper.updateByPrimaryKeyWithBLOBs(content);    if (i == 0)&#123;        i = courseContentMapper.insert(content);    &#125;    return i;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 其次在controller中将service中写的两个方法都暴露出去</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  @GetMapping (&quot;/find-content/&#123;id&#125;&quot;)</span><br><span class="line">  public ResponseDto findContent(@PathVariable  String id)&#123;</span><br><span class="line">      ResponseDto responseDto = new ResponseDto();</span><br><span class="line">      CourseContentDto contentDto = courseService.findContent(id);</span><br><span class="line">      responseDto.setContent(contentDto);</span><br><span class="line">      return responseDto;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">  @PostMapping(&quot;/save-content&quot;)</span><br><span class="line">  public ResponseDto saveContent(@RequestBody CourseContentDto contentDto) &#123;</span><br><span class="line">      ResponseDto responseDto = new ResponseDto();</span><br><span class="line">      courseService.saveContent(contentDto);</span><br><span class="line">      return responseDto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>接着在index中引入富文本的css和js</p></li><li><p>&#96;&#96;&#96;html<br>!– include summernote css&#x2F;js –&gt;</p><link href="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.css" rel="stylesheet"><script src="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.js"></script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 最後在course.vue中添加代碼</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  &lt;button v-on:click=&quot;editContent(course)&quot; class=&quot;btn btn-white btn-xs btn-info btn-round&quot;&gt;</span><br><span class="line">    内容</span><br><span class="line">  &lt;/button&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">  /////////////////////////////////////</span><br><span class="line">    &lt;div id=&quot;course-content-modal&quot; class=&quot;modal fade&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;modal-dialog&quot; role=&quot;document&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;modal-content&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;modal-header&quot;&gt;</span><br><span class="line">              &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;&lt;/button&gt;</span><br><span class="line">              &lt;h4 class=&quot;modal-title&quot;&gt;内容编辑&lt;/h4&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;modal-body&quot;&gt;</span><br><span class="line">              &lt;form class=&quot;form-horizontal&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                  &lt;div class=&quot;col-lg-12&quot;&gt;</span><br><span class="line">                    &lt;div id=&quot;content&quot;&gt;&lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/form&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;modal-footer&quot;&gt;</span><br><span class="line">              &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; data-dismiss=&quot;modal&quot;&gt;</span><br><span class="line">                &lt;i class=&quot;ace-icon fa fa-times&quot;&gt;&lt;/i&gt;</span><br><span class="line">                取消</span><br><span class="line">              &lt;/button&gt;</span><br><span class="line">              &lt;button v-on:click=&quot;saveContent()&quot; type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;</span><br><span class="line">                &lt;i class=&quot;ace-icon fa fa-plus blue&quot;&gt;&lt;/i&gt;</span><br><span class="line">                保存</span><br><span class="line">              &lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;&lt;!-- /.modal-content --&gt;</span><br><span class="line">        &lt;/div&gt;&lt;!-- /.modal-dialog --&gt;</span><br><span class="line">      &lt;/div&gt;&lt;!-- /.modal --&gt;</span><br><span class="line">  ///////////////////////////////////////////////</span><br><span class="line">   /**</span><br><span class="line">       * 打开内容编辑</span><br><span class="line">       */</span><br><span class="line">      editContent(course) &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        let id = course.id;</span><br><span class="line">        _this.course =course;</span><br><span class="line">        $(&quot;#content&quot;).summernote(&#123;</span><br><span class="line">          focus: true,</span><br><span class="line">          height: 300</span><br><span class="line">        &#125;);</span><br><span class="line">  </span><br><span class="line">        // 先清空历史文本</span><br><span class="line">        $(&quot;#content&quot;).summernote(&#x27;code&#x27;, &#x27;&#x27;);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        Loading.show();</span><br><span class="line">        _this.$ajax.get(process.env.VUE_APP_SERVER + &#x27;/business/admin/course/find-content/&#x27; + id).then((response)=&gt;&#123;</span><br><span class="line">          Loading.hide();</span><br><span class="line">          let resp = response.data;</span><br><span class="line">  </span><br><span class="line">          if (resp.success) &#123;</span><br><span class="line">            if (resp.content) &#123;</span><br><span class="line">              $(&quot;#content&quot;).summernote(&#x27;code&#x27;, resp.content.content);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            Toast.warning(resp.message);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">     </span><br><span class="line">      /**</span><br><span class="line">       * 保存内容</span><br><span class="line">       */</span><br><span class="line">      saveContent () &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        let content = $(&quot;#content&quot;).summernote(&quot;code&quot;);</span><br><span class="line">        _this.$ajax.post(process.env.VUE_APP_SERVER + &#x27;/business/admin/course/save-content&#x27;, &#123;</span><br><span class="line">          id: _this.course.id,</span><br><span class="line">          content: content</span><br><span class="line">        &#125;).then((response)=&gt;&#123;</span><br><span class="line">          Loading.hide();</span><br><span class="line">          let resp = response.data;</span><br><span class="line">          if (resp.success) &#123;</span><br><span class="line">            Toast.success(&quot;内容保存成功&quot;);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            Toast.warning(resp.message);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure></li></ul><p>利用setInterval完成自動保存功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.利用setInterval完成自动保存功能</span><br><span class="line">2.增加js日期格式化方法</span><br></pre></td></tr></table></figure><ul><li><p>setInterval，重复的定时任务；setTimeout，只执行一次的定时任务</p></li><li><p>在editContent中增加。</p></li><li><pre><code class="vue">//自動保存功能let saveContentInterval = setInterval(function ()&#123;  _this.saveContent();&#125;,5000);//关闭内容框时，情况自动保存功能$(&#39;course-content-modal&#39;).on(&#39;hidden.bs.modal&#39;,function (e)&#123;  clearInterval(saveContentInterval);&#125;)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![image-20220307112732051](https://s2.loli.net/2022/03/07/5IEnyTGtJkpHu62.png)</span><br><span class="line"></span><br><span class="line">- 这样写右上角总是出现下面这个框，所以做以下修改，在tool.js增加一个日期格式化方法</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  /**</span><br><span class="line">   * 时间格式化，date为空时取当前时间</span><br><span class="line">   */</span><br><span class="line">  dateFormat: function (format, date) &#123;</span><br><span class="line">    let result;</span><br><span class="line">    if (!date) &#123;</span><br><span class="line">      date = new Date();</span><br><span class="line">    &#125;</span><br><span class="line">    const option = &#123;</span><br><span class="line">      &quot;y+&quot;: date.getFullYear().toString(),        // 年</span><br><span class="line">      &quot;M+&quot;: (date.getMonth() + 1).toString(),     // 月</span><br><span class="line">      &quot;d+&quot;: date.getDate().toString(),            // 日</span><br><span class="line">      &quot;h+&quot;: date.getHours().toString(),           // 时</span><br><span class="line">      &quot;m+&quot;: date.getMinutes().toString(),         // 分</span><br><span class="line">      &quot;s+&quot;: date.getSeconds().toString()          // 秒</span><br><span class="line">    &#125;;</span><br><span class="line">    for (let i in option) &#123;</span><br><span class="line">      result = new RegExp(&quot;(&quot; + i + &quot;)&quot;).exec(format);</span><br><span class="line">      if (result) &#123;</span><br><span class="line">        format = format.replace(result[1], (result[1].length == 1) ? (option[i]) : (option[i].padStart(result[1].length, &quot;0&quot;)))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return format;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后在course.vue增加，在富文本内容上增加一个时间标签</p></li><li><pre><code class="vue">&lt;div class=&quot;form-group&quot;&gt;  &lt;div class=&quot;col-lg-12&quot;&gt;    &#123;&#123;saveContentLable&#125;&#125;  &lt;/div&gt;&lt;/div&gt;//定义变量saveContentLabel:&quot;&quot;,//在每次打开editContent每次都要情况历史文本 _this.saveContentLabel = &quot;&quot;;//在saveContent中加入if (resp.success) &#123;    let now = Tool.dateFormat(&quot;mm:ss&quot;);    _this.saveContentLabel = &quot;最后保存时间: &quot;+now;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 7-6 课程代码优化</span><br><span class="line"></span><br><span class="line">课程自定义排序：</span><br><span class="line"></span><br><span class="line">- 注意用法：小节的顺序是可以重复的，每一章里的小节都可以从1开始排序</span><br><span class="line"></span><br><span class="line">- 首先在course.vue中进行修改</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;button v-on:click=&quot;openSortModal(course)&quot; class=&quot;btn btn-white btn-xs btn-info btn-round&quot;&gt;</span><br><span class="line">    排序</span><br><span class="line">  &lt;/button&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">  ////增加disabled</span><br><span class="line">   &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">   &lt;label  class=&quot;col-sm-2 control-label&quot;&gt;顺序&lt;/label&gt;</span><br><span class="line">   &lt;div class=&quot;col-sm-10&quot;&gt;</span><br><span class="line">   &lt;input v-model=&quot;course.sort&quot; class=&quot;form-control&quot; disabled &gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">  //增加模态框</span><br><span class="line">    &lt;div id=&quot;course-sort-modal&quot; class=&quot;modal fade&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;modal-dialog&quot; role=&quot;document&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;modal-content&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;modal-header&quot;&gt;</span><br><span class="line">              &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;&lt;/button&gt;</span><br><span class="line">              &lt;h4 class=&quot;modal-title&quot;&gt;排序&lt;/h4&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;modal-body&quot;&gt;</span><br><span class="line">              &lt;form class=&quot;form-horizontal&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                  &lt;label class=&quot;control-label col-lg-3&quot;&gt;</span><br><span class="line">                    当前排序</span><br><span class="line">                  &lt;/label&gt;</span><br><span class="line">                  &lt;div class=&quot;col-lg-9&quot;&gt;</span><br><span class="line">                    &lt;input class=&quot;form-control&quot; v-model=&quot;sort.oldSort&quot; name=&quot;oldSort&quot; disabled&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                  &lt;label class=&quot;control-label col-lg-3&quot;&gt;</span><br><span class="line">                    新排序</span><br><span class="line">                  &lt;/label&gt;</span><br><span class="line">                  &lt;div class=&quot;col-lg-9&quot;&gt;</span><br><span class="line">                    &lt;input class=&quot;form-control&quot; v-model=&quot;sort.newSort&quot; name=&quot;newSort&quot;&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/form&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;modal-footer&quot;&gt;</span><br><span class="line">              &lt;button type=&quot;button&quot; class=&quot;btn btn-white btn-default btn-round&quot; data-dismiss=&quot;modal&quot;&gt;</span><br><span class="line">                &lt;i class=&quot;ace-icon fa fa-times&quot;&gt;&lt;/i&gt;</span><br><span class="line">                取消</span><br><span class="line">              &lt;/button&gt;</span><br><span class="line">              &lt;button type=&quot;button&quot; class=&quot;btn btn-white btn-info btn-round&quot; v-on:click=&quot;updateSort()&quot;&gt;</span><br><span class="line">                &lt;i class=&quot;ace-icon fa fa-plus blue&quot;&gt;&lt;/i&gt;</span><br><span class="line">                更新排序</span><br><span class="line">              &lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;&lt;!-- /.modal-content --&gt;</span><br><span class="line">        &lt;/div&gt;&lt;!-- /.modal-dialog --&gt;</span><br><span class="line">      &lt;/div&gt;&lt;!-- /.modal --&gt;</span><br><span class="line">  //data增加变量</span><br><span class="line">   sort: &#123;</span><br><span class="line">          id: &quot;&quot;,</span><br><span class="line">          oldSort: 0,</span><br><span class="line">          newSort: 0</span><br><span class="line">        &#125;,</span><br><span class="line">  //在添加方法增加</span><br><span class="line">  _this.course = &#123;</span><br><span class="line">    sort: _this.$refs.pagination.total+1</span><br><span class="line">     &#125;;</span><br><span class="line">  //增加两个方法</span><br><span class="line">  </span><br><span class="line">      openSortModal(course) &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        _this.sort = &#123;</span><br><span class="line">          id: course.id,</span><br><span class="line">          oldSort: course.sort,</span><br><span class="line">          newSort: course.sort</span><br><span class="line">        &#125;;</span><br><span class="line">        $(&quot;#course-sort-modal&quot;).modal(&quot;show&quot;);</span><br><span class="line">      &#125;,</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 排序</span><br><span class="line">       */</span><br><span class="line">      updateSort() &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        if (_this.sort.newSort === _this.sort.oldSort) &#123;</span><br><span class="line">          Toast.warning(&quot;排序没有变化&quot;);</span><br><span class="line">          return;</span><br><span class="line">        &#125;</span><br><span class="line">        Loading.show();</span><br><span class="line">        _this.$ajax.post(process.env.VUE_APP_SERVER + &quot;/business/admin/course/sort&quot;, _this.sort).then((res) =&gt; &#123;</span><br><span class="line">          let response = res.data;</span><br><span class="line">  </span><br><span class="line">          if (response.success) &#123;</span><br><span class="line">            Toast.success(&quot;更新排序成功&quot;);</span><br><span class="line">            $(&quot;#course-sort-modal&quot;).modal(&quot;hide&quot;);</span><br><span class="line">            _this.list(1);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            Toast.error(&quot;更新排序失败&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">  </span><br></pre></td></tr></table></figure></code></pre></li><li><p>其次增加SortDto</p></li><li><pre><code class="java">package com.course.server.dto;public class SortDto &#123;    /**     * ID     */    private String id;    /**     * 当前排序     */    private int oldSort;    /**     * 新排序     */    private int newSort;    public String getId() &#123;        return id;    &#125;    public void setId(String id) &#123;        this.id = id;    &#125;    public int getNewSort() &#123;        return newSort;    &#125;    public void setNewSort(int newSort) &#123;        this.newSort = newSort;    &#125;    public int getOldSort() &#123;        return oldSort;    &#125;    public void setOldSort(int oldSort) &#123;        this.oldSort = oldSort;    &#125;    @Override    public String toString() &#123;        final StringBuffer sb = new StringBuffer(&quot;SortDto&#123;&quot;);        sb.append(&quot;id=&#39;&quot;).append(id).append(&#39;\&#39;&#39;);        sb.append(&quot;, oldSort=&quot;).append(oldSort);        sb.append(&quot;, newSort=&quot;).append(newSort);        sb.append(&#39;&#125;&#39;);        return sb.toString();    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后我们在coursecontroller添加</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  @RequestMapping(value = &quot;/sort&quot;)</span><br><span class="line">  public ResponseDto sort(@RequestBody SortDto sortDto) &#123;</span><br><span class="line">      LOG.info(&quot;更新排序&quot;);</span><br><span class="line">      ResponseDto responseDto = new ResponseDto();</span><br><span class="line">      courseService.sort(sortDto);</span><br><span class="line">      return responseDto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>在CourseService中进行</p></li><li><pre><code class="java">//批量保存课程分类courseCategoryService.saveBatch(course.getId(),courseDto.getCategorys());//这改了，之前是coursedto，新增课程的时候coursedto.id没有值,应该用course.id//增加方法/**     * 排序     * @param sortDto     */    @Transactional    public void sort(SortDto sortDto)&#123;        //修改当前记录的排序值        myCourseMapper.updateSort(sortDto);        //如果排序值变大        if (sortDto.getNewSort()&gt;sortDto.getOldSort())&#123;            myCourseMapper.moveSortsForward(sortDto);        &#125;        //如果排序值变小        if (sortDto.getNewSort()&lt;sortDto.getOldSort())&#123;            myCourseMapper.moveSortsBackward(sortDto);        &#125;    &#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在MyCourseMapper创建CourseService调用的方法</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  int updateSort(SortDto sortDto);</span><br><span class="line">  </span><br><span class="line">  int moveSortsForward(SortDto sortDto);</span><br><span class="line">  </span><br><span class="line">  int moveSortsBackward(SortDto sortDto);</span><br></pre></td></tr></table></figure></code></pre></li><li><p>在MyCourseMapper.xml写对应接口</p></li><li><pre><code class="xml">&lt;update id=&quot;updateSort&quot; parameterType=&quot;com.course.server.dto.SortDto&quot;&gt;    update course set `sort`= #&#123;newSort&#125; where id = #&#123;id&#125;&lt;/update&gt;&lt;update id=&quot;moveSortsBackward&quot; parameterType=&quot;com.course.server.dto.SortDto&quot;&gt;    &lt;![CDATA[    update course set `sort`= (`sort`+1) where `sort` &gt;= #&#123;newSort&#125; and `sort` &lt;= #&#123;oldSort&#125; and id != #&#123;id&#125;    ]]&gt;&lt;/update&gt;&lt;update id=&quot;moveSortsForward&quot; parameterType=&quot;com.course.server.dto.SortDto&quot;&gt;    &lt;![CDATA[    update course set `sort`= (`sort`-1) where `sort` &lt;= #&#123;newSort&#125; and `sort` &gt;= #&#123;oldSort&#125; and id != #&#123;id&#125;    ]]&gt;&lt;/update&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">菜单隐藏掉大章和小节：</span><br><span class="line"></span><br><span class="line">- 修改一：菜单栏不出现大章管理和小节管理</span><br><span class="line"></span><br><span class="line">- 首先admin中注释掉大章和小节管理</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;!--   &lt;li class=&quot;active&quot; id=&quot;business-chapter-sidebar&quot;&gt;--&gt;</span><br><span class="line">  &lt;!--                &lt;router-link to=&quot;/business/chapter&quot;&gt;--&gt;</span><br><span class="line">  &lt;!--                  &lt;i class=&quot;menu-icon fa fa-caret-right&quot;&gt;&lt;/i&gt;--&gt;</span><br><span class="line">  &lt;!--                  大章管理--&gt;</span><br><span class="line">  &lt;!--                &lt;/router-link&gt;--&gt;</span><br><span class="line">  &lt;!--                &lt;b class=&quot;arrow&quot;&gt;&lt;/b&gt;--&gt;</span><br><span class="line">  &lt;!--              &lt;/li&gt;--&gt;</span><br><span class="line">  &lt;!--              &lt;li class=&quot;active&quot; id=&quot;business-section-sidebar&quot;&gt;--&gt;</span><br><span class="line">  &lt;!--                &lt;router-link to=&quot;/business/section&quot;&gt;--&gt;</span><br><span class="line">  &lt;!--                  &lt;i class=&quot;menu-icon fa fa-caret-right&quot;&gt;&lt;/i&gt;--&gt;</span><br><span class="line">  &lt;!--                  小节管理--&gt;</span><br><span class="line">  &lt;!--                &lt;/router-link&gt;--&gt;</span><br><span class="line">  &lt;!--                &lt;b class=&quot;arrow&quot;&gt;&lt;/b&gt;--&gt;</span><br><span class="line">  &lt;!--              &lt;/li&gt;--&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>修改2：页面进入大章管理和小节管理时，侧边栏的课程管理应该显示激活样式</p></li><li><p>然后再chapter和section都加上激活样式</p></li><li><pre><code class="vue">//sidebar激活样式方法一this.$parent.activeSidebar(&quot;business-course-sidebar&quot;);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sessionStorage的key改成常量：</span><br><span class="line"></span><br><span class="line">- key值不要直接写字符串，后面缓存用得越来越多；key名有可能冲突，这时要改key名的话所有set和get都要改。且不要用单一的单词，最好加一些前后缀。</span><br><span class="line"></span><br><span class="line">- 在SessionStorage.js中添加常量</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  SESSION_KEY_COURSE = &quot;SESSION_KEY_COURSE&quot;; // 课程管理页面点击章管理时，保存课程信息</span><br><span class="line">  SESSION_KEY_CHAPTER = &quot;SESSION_KEY_CHAPTER&quot;; // 章管理页面点击节管理时，保存章信息</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后再course和chapter和section中都修改SessionStorage方法的key</p></li></ul><p>表格内文字上下居中：</p><ul><li><p>在static中创建css文件夹建立style.css文件，在index中引入css</p></li><li><pre><code class="css">/*表格内容上下居中显示*/.table td&#123;    vertical-align: middle !important;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 7-7 讲师管理功能开发</span><br><span class="line"></span><br><span class="line">增加讲师管理功能：</span><br><span class="line"></span><br><span class="line">- 注意：菜单去掉了大章和小节，但是路由不能去</span><br><span class="line"></span><br><span class="line">- 简介要改成多行文本框textarea</span><br><span class="line"></span><br><span class="line">- all.sql增加</span><br><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  #讲师</span><br><span class="line">  DROP TABLE IF EXISTS `teacher`;</span><br><span class="line">  create table `teacher`(</span><br><span class="line">              `id` char(8) not null default &#x27;&#x27; comment &#x27;课程id&#x27;,</span><br><span class="line">              `name` varchar(50) not null comment &#x27;名称&#x27;,</span><br><span class="line">              `nickname` varchar(50)  comment &#x27;昵称&#x27;,</span><br><span class="line">              `image` varchar(100)  comment &#x27;头像&#x27;,</span><br><span class="line">              `position` varchar(50)  comment &#x27;职位&#x27;,</span><br><span class="line">              `motto` varchar(50)  comment &#x27;座右铭&#x27;,</span><br><span class="line">              `intro` varchar(500)  comment &#x27;简介&#x27;,</span><br><span class="line">               primary key (`id`)</span><br><span class="line">  )engine =innodb default charset=utf8mb4 comment=&#x27;讲师&#x27;;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后就是各种代码生成器，然后admin中和router中添加相应模块和路由。</p></li></ul><p>讲师管理布局优化：</p><ul><li><p>只需要改teacher.vue，table删了，加上这个。</p></li><li><pre><code class="vue">&lt;div class=&quot;row&quot;&gt;  &lt;div v-for=&quot;teacher in teachers&quot; class=&quot;col-md-3&quot;&gt;    &lt;div&gt;      &lt;span class=&quot;profile-picture&quot;&gt;        &lt;img v-show=&quot;!teacher.image&quot; class=&quot;editable img-responsive editable-click editable-empty&quot; src=&quot;/static/image/讲师头像/头像1.jpg&quot; v-bind:title=&quot;teacher.intro&quot;/&gt;        &lt;img v-show=&quot;teacher.image&quot; class=&quot;editable img-responsive editable-click editable-empty&quot; v-bind:src=&quot;teacher.image&quot; v-bind:title=&quot;teacher.intro&quot;/&gt;      &lt;/span&gt;      &lt;div class=&quot;space-4&quot;&gt;&lt;/div&gt;      &lt;div class=&quot;width-85 label label-info label-xlg arrowed-in arrowed-in-right&quot;&gt;        &lt;div class=&quot;inline position-relative&quot;&gt;          &lt;a href=&quot;javascript:;&quot; class=&quot;user-title-label dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;            &lt;i class=&quot;ace-icon fa fa-circle light-green&quot;&gt;&lt;/i&gt;            &amp;nbsp;            &lt;span class=&quot;white&quot;&gt;&#123;&#123;teacher.position&#125;&#125;&lt;/span&gt;          &lt;/a&gt;        &lt;/div&gt;      &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;space-6&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;text-center&quot;&gt;      &lt;a href=&quot;javascript:;&quot; class=&quot;text-info bigger-110&quot; v-bind:title=&quot;teacher.motto&quot;&gt;        &lt;i class=&quot;ace-icon fa fa-user&quot;&gt;&lt;/i&gt;        &#123;&#123;teacher.name&#125;&#125;【&#123;&#123;teacher.nickname&#125;&#125;】      &lt;/a&gt;    &lt;/div&gt;    &lt;div class=&quot;space-6&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;profile-social-links align-center&quot;&gt;      &lt;button v-on:click=&quot;edit(teacher)&quot; class=&quot;btn btn-xs btn-info&quot;&gt;        &lt;i class=&quot;ace-icon fa fa-pencil bigger-120&quot;&gt;&lt;/i&gt;      &lt;/button&gt;      &amp;nbsp;      &lt;button v-on:click=&quot;del(teacher.id)&quot; class=&quot;btn btn-xs btn-danger&quot;&gt;        &lt;i class=&quot;ace-icon fa fa-trash-o bigger-120&quot;&gt;&lt;/i&gt;      &lt;/button&gt;    &lt;/div&gt;    &lt;div class=&quot;hr hr16 dotted&quot;&gt;&lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;//再把简介的input修改&lt;textarea v-model=&quot;teacher.intro&quot; class=&quot;form-control&quot; rows=&quot;5&quot;&gt;&lt;/textarea&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">课程讲师的关联：</span><br><span class="line"></span><br><span class="line">- 一个分类可以有多门课程，一门课程也可以属于多个分类，所以他们是多对多的关系。多对多的关系，一般会设计个中间来维护关系</span><br><span class="line"></span><br><span class="line">- 一个讲师可以讲多门课程，一门课程只能有一个讲师，所以他们是一对多的关系。一对多的关系，可以把关系维护在“一那张表中</span><br><span class="line"></span><br><span class="line">- 旧表加字段，使用单独的sql：alter table，这样，上生产的时候也是执行这个sql</span><br><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  alter table `course` add column (`teacher_id` char(8) comment  &#x27;讲师|teacher.id&#x27;);</span><br></pre></td></tr></table></figure></code></pre></li><li><p>需要重新生成mybatis-generator。增加字段重新生成代码时，CourseMapper.java不会变化。</p></li><li><p>要求：mybatis自动生成的四个文件不允许修改，这样才能做到重复生成</p></li><li><p>但是courseDto要手动添加course.java中新增加的变量</p></li><li><p>在course.vue中修改代码</p></li><li><pre><code>//在data中增加teachers: [],//页面打开始就加载所有讲师//在mounted中增加 _this.allTeacher();//增加方法allTeacher() &#123;  let _this = this;  Loading.show();  _this.$ajax.post(process.env.VUE_APP_SERVER + &#39;/business/admin/teacher/all&#39;).then((respond) =&gt; &#123;    Loading.hide();    let resp = respond.data;    _this.teachers = resp.content;  &#125;)&#125;,<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在后端增加all方法，加载所有讲师信息。参照CategoryController的all来修改TeacherController。同样service也一样。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">/**</span><br><span class="line"> * 列表查询</span><br><span class="line"> */</span><br><span class="line">@PostMapping(&quot;/all&quot;)</span><br><span class="line">public ResponseDto all()&#123;</span><br><span class="line">    ResponseDto responseDto = new ResponseDto();</span><br><span class="line">    List&lt;TeacherDto&gt; teacherDtoList = teacherService.all();</span><br><span class="line">    responseDto.setContent(teacherDtoList);</span><br><span class="line">    return responseDto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>在课程表单中增加讲师选择框，在course.vue</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">  &lt;label  class=&quot;col-sm-2 control-label&quot;&gt;讲师&lt;/label&gt;</span><br><span class="line">  &lt;div class=&quot;col-sm-10&quot;&gt;</span><br><span class="line">    &lt;select v-model=&quot;course.teacherId&quot; class=&quot;form-control&quot;  &gt;</span><br><span class="line">      &lt;option v-for=&quot;o in teachers&quot; v-bind:value=&quot;o.id&quot;&gt;&#123;&#123;o.name&#125;&#125;&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>课程列表中显示讲师信息，课程名字字体自适应：</p><ul><li><p>v-for中，对循环的数组，可通过filter进行数据过滤</p></li><li><pre><code class="vue">&lt;div v-for=&quot;teacher in teachers.filter(t=&gt;&#123;return t.id===course.teacherId&#125;)&quot; class=&quot;profile-activity clearfix&quot;&gt;  &lt;div&gt;    &lt;img v-show=&quot;!teacher.image&quot; class=&quot;pull-left&quot; src=&quot;/ace/assets/images/avatars/avatar5.png&quot;&gt;    &lt;img v-show=&quot;teacher.image&quot; class=&quot;pull-left&quot; v-bind:src=&quot;teacher.image&quot;&gt;    &lt;a class=&quot;user&quot; href=&quot;#&quot;&gt; &#123;&#123;teacher.name&#125;&#125; &lt;/a&gt;    &lt;br&gt;    &#123;&#123;teacher.position&#125;&#125;  &lt;/div&gt;&lt;/div&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 字体大小自适应，根据屏幕的分辩率显示不同大小的字体</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  @media (max-width: 1199px) &#123;</span><br><span class="line">    .caption h3 &#123;</span><br><span class="line">      font-size: 16px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>前端开发小技巧：可以用浏览器的开发工具修改样式，调试好后，再把样式拷到代码里</p></li></ul><h1 id="第8章-文件上传功能开发"><a href="#第8章-文件上传功能开发" class="headerlink" title="第8章 文件上传功能开发"></a>第8章 文件上传功能开发</h1><p>本章将演示文件模块的开发，会使用SpringBoot + Vue完成文件上传功能，上传的图片支持实时预览显示。文件上传是系统操作中常见的功能，文件有大有小，不可避免带来带宽的问题，单独的文件模块很好的解决这个问题。</p><hr><h2 id="8-1-完成基本的文件上传功能"><a href="#8-1-完成基本的文件上传功能" class="headerlink" title="8-1 完成基本的文件上传功能"></a>8-1 完成基本的文件上传功能</h2><p>搭建文件模块-file：1.增加file模块用于文件上传和储存</p><ul><li>就是maven模块，增加启动文件，配置文件，路由转发。</li></ul><p>springboot+vue文件上传功能：1.文件上传功能开发：springboot+vue基本的文件上传功能，上传讲师头像</p><ul><li><p>type&#x3D;file，文件上传控件，将头像的input进行修改</p></li><li><pre><code class="vue">&lt;div class=&quot;form-group&quot;&gt;  &lt;label class=&quot;col-sm-2 control-label&quot;&gt;头像&lt;/label&gt;  &lt;div class=&quot;col-sm-10&quot;&gt;    &lt;input type = &quot;file&quot;  &gt;  &lt;/div&gt;&lt;/div&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 触发文件上传动作方法一：增加一个新的按钮开始上传</span><br><span class="line"></span><br><span class="line">- 触发文件上传动作方法一：在文件上传组件上增加chang事件（选择这个）</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;label class=&quot;col-sm-2 control-label&quot;&gt;头像&lt;/label&gt;</span><br><span class="line">    &lt;div class=&quot;col-sm-10&quot;&gt;</span><br><span class="line">      &lt;input type = &quot;file&quot; v-on:change=&quot;uploadImage()&quot; id=&quot;file-upload-input&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  //添加方法</span><br><span class="line">  uploadImage()&#123;</span><br><span class="line">        let _this =this;</span><br><span class="line">        let formData = new window.FormData();</span><br><span class="line">        //key：”file“必须和后端controller参数名一致</span><br><span class="line">        formData.append(&#x27;file&#x27;,document.querySelector(&#x27;#file-upload-input&#x27;).files[0]);</span><br><span class="line">        Loading.show();</span><br><span class="line">        _this.$ajax.post(process.env.VUE_APP_SERVER +&#x27;/file/admin/upload&#x27;,formData).then((respond) =&gt; &#123;</span><br><span class="line">          Loading.hide();</span><br><span class="line">          let resp = respond.data;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>在file文件下创建controller.admin,创建文件UploadController</p></li><li><p>&#96;&#96;&#96;java<br>@RequestMapping(“&#x2F;admin”)<br>@RestController<br>public class UploadController {<br>   private static final Logger LOG &#x3D; LoggerFactory.getLogger(UploadController.class);</p><pre><code>@RequestMapping(&quot;/upload&quot;) public ResponseDto upload(@RequestParam MultipartFile file) throws IOException &#123;     LOG.info(&quot;上传文件开始：&#123;&#125;&quot;,file);     LOG.info(file.getOriginalFilename());     LOG.info(String.valueOf(file.getSize()));     //保存文件到本地    String fileName =file.getOriginalFilename();    String key = UuidUtil.getShortUuid();    String fullPath = &quot;C:/Users/1/Desktop/方梓旭/course/admin/public/static/image/讲师头像/&quot;+key+&quot;-&quot;+fileName;    File dest = new File(fullPath);    file.transferTo(dest);    LOG.info(dest.getAbsolutePath());    ResponseDto responseDto = new ResponseDto();    return responseDto;&#125;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 8-2 讲师头像的保存与显示</span><br><span class="line"></span><br><span class="line">文件访问配置：1.文件上传功能开发：增加springboot静态资源配置，配置文件访问路径</span><br><span class="line"></span><br><span class="line">- SpringBoot静态资源配置，静态资源包含图片.Css、JS等</span><br><span class="line"></span><br><span class="line">- 测试路由转发到file模块是否生效，测试的时候要注意浏览器是有静态资源缓存的，可以用ctrl+f5强制刷新姿可铁用ohrome无痕浏览来测试，不会有缓存</span><br><span class="line"></span><br><span class="line">- 在file.config目录下创建SpringMvcConfig文件</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.course.file.config;</span><br><span class="line">  </span><br><span class="line">  import org.springframework.context.annotation.Configuration;</span><br><span class="line">  import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line">  import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line">  </span><br><span class="line">  @Configuration</span><br><span class="line">  public class SpringMvcConfig implements WebMvcConfigurer &#123;</span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">          registry.addResourceHandler(&quot;/f/**&quot;).addResourceLocations(&quot;file:C:/Users/1/Desktop/方梓旭/course/admin/public/static/image/&quot; );</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p>文件上传实时显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.文件上传功能开发：文件上传实时显示与保存</span><br></pre></td></tr></table></figure><ul><li><p>在UploadController中将地址返回到前端</p></li><li><pre><code class="java">responseDto.setContent(&quot;http://192.168.0.105:9000/file/f/讲师头像/&quot;+key+&quot;-&quot;+fileName);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在teacher前端的uploadImage方法中，取出来照片地址</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  let image =resp.content;</span><br><span class="line">  console.log(&quot;头像地址:&quot;,image);</span><br><span class="line">  _this.teacher.image = image;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>img-responsive：bootstrap内置的样式，图片自适应</p></li><li><p>在teacher.vue表单中头像input下增加</p></li><li><pre><code class="vue">&lt;div class=&quot;form-group&quot;&gt;  &lt;label class=&quot;col-sm-2 control-label&quot;&gt;头像&lt;/label&gt;  &lt;div class=&quot;col-sm-10&quot;&gt;    &lt;input type = &quot;file&quot; v-on:change=&quot;uploadImage()&quot; id=&quot;file-upload-input&quot;&gt;    &lt;img v-bind:src=&quot;teacher.image&quot; class=&quot;img-responsive&quot;&gt;  &lt;/div&gt;&lt;/div&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">讲师头像显示优化：</span><br><span class="line"></span><br><span class="line">- 如果头像显示特别大class就应该使用</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;img v-show=&quot;!teacher.image&quot; class=&quot;editable img-responsive editable-click editable-empty&quot; src=&quot;/static/image/讲师头像/头像1.jpg&quot; v-bind:title=&quot;teacher.intro&quot;/&gt;</span><br><span class="line">  &lt;img v-show=&quot;teacher.image&quot; class=&quot;editable img-responsive editable-click editable-empty&quot; v-bind:src=&quot;teacher.image&quot; v-bind:title=&quot;teacher.intro&quot;/&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>利用bootstrape栅格系统，一个div是12格，可以让图片只占4格的宽度</p></li><li><pre><code class="vue">&lt;div v-show=&quot;teacher.image&quot; class=&quot;row&quot;&gt;  &lt;div class=&quot;col-md-4&quot;&gt;    &lt;img v-bind:src=&quot;teacher.image&quot; class=&quot;img-responsive&quot;&gt;  &lt;/div&gt;&lt;/div&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 接下来我们把图片地址进行修改，不写死。首先在application中增加</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  file.path=C:/Users/1/Desktop/方梓旭/course/admin/public/static/image/</span><br><span class="line">  file.domain=http://192.168.0.105:9000/file/</span><br></pre></td></tr></table></figure></code></pre></li><li><p>其次在UploadController，@Value，注入属性值</p></li><li><pre><code>@Value(&quot;$&#123;file.domain&#125;&quot;)private String FILE_DOMAIN;@Value(&quot;$&#123;file.path&#125;&quot;)private String FILE_PATH;//将地址替换 String fullPath = FILE_PATH+&quot;讲师头像/&quot;+key+&quot;-&quot;+fileName; responseDto.setContent(FILE_DOMAIN+&quot;/f/讲师头像/&quot;+key+&quot;-&quot;+fileName);     <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 同样在SpringMvcConfig中也注入</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  @Value(&quot;$&#123;file.path&#125;&quot;)</span><br><span class="line">  private String FILE_PATH;</span><br><span class="line">  registry.addResourceHandler(&quot;/f/**&quot;).addResourceLocations(&quot;file:&quot;+FILE_PATH );</span><br></pre></td></tr></table></figure></code></pre></li><li><p>Maven多环境配置，将开发环境和生产环境配置成不同的值</p></li></ul><h2 id="8-3-文件上传组件开发1"><a href="#8-3-文件上传组件开发1" class="headerlink" title="8-3 文件上传组件开发1"></a>8-3 文件上传组件开发1</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.文件上传功能开发，使用单独的文件上传按钮</span><br></pre></td></tr></table></figure><ul><li>优化点：用一个单独的按钮，来代替file控件，且操作的流程没有变化</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/10/G3eArFUsVDhRJQ1.png"                      alt="image-20220310101103257"                ></p><ul><li><p>对teacher.vue进行修改，增加了button按钮，并将input隐藏，写selectImage方法</p></li><li><p>&#96;&#96;&#96;vue</p><div class="form-group">  <label class="col-sm-2 control-label">头像</label>  <div class="col-sm-10">    <button type="button" v-on:click="selectImage()" class="btn btn-white btn-default btn-round">      <i class="ace-icon fa fa-upload"></i>      上传头像    </button>    <input class="hidden" type = "file" v-on:change="uploadImage()" id="file-upload-input">    <div v-show="teacher.image" class="row">      <div class="col-md-4">        <img  v-bind:                     lazyload                     src="/images/loading.svg"                     data-src="teacher.image"                      class="img-responsive"                >      </div>    </div>  </div></div>//selectImage方法  selectImage(){      $("#file-upload-input").trigger("click");    }<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![image-20220310102612545](https://s2.loli.net/2022/03/10/inwODrlohaQKgzy.png)</span><br><span class="line"></span><br><span class="line">增加上传文件类型判断：1.文件上传功能开发，增加上传文件类型的判断</span><br><span class="line"></span><br><span class="line">图片显示不出来我又把SpringMvcConfig改了回去</span><br><span class="line"></span><br><span class="line">- 优化：使用vue的$refs来获取组件</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  //在头像那加ref</span><br><span class="line">  &lt;input class=&quot;hidden&quot; type = &quot;file&quot; ref=&quot;file&quot; v-on:change=&quot;uploadImage()&quot; id=&quot;file-upload-input&quot;&gt;</span><br><span class="line">  //在uploadImage中增加</span><br><span class="line">  let file = _this.$refs.file.files[0];</span><br><span class="line">        //判断文件格式</span><br><span class="line">        let suffixs = [&quot;jpg&quot;,&quot;png&quot;,&quot;jpeg&quot;];</span><br><span class="line">        let fileName = file.name;</span><br><span class="line">        let suffix = fileName.substring(fileName.lastIndexOf(&quot;.&quot;)+1,fileName.length).toLowerCase();</span><br><span class="line">        let validateSuffix = false;</span><br><span class="line">        for (let i = 0; i &lt; suffixs.length; i++) &#123;</span><br><span class="line">          if(suffixs[i].toLowerCase() === suffix)&#123;</span><br><span class="line">            validateSuffix = true;</span><br><span class="line">            break;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(!validateSuffix)&#123;</span><br><span class="line">          Toast.warning(&quot;文件格式不对！只支持上传：&quot;+suffixs.join(&quot;,&quot;));</span><br><span class="line">          return;</span><br><span class="line">        &#125;</span><br><span class="line">        //key：”file“必须和后端controller参数名一致</span><br><span class="line">        formData.append(&#x27;file&#x27;,file);</span><br></pre></td></tr></table></figure></li></ul><p>制作文件上传公共组件1：</p><ul><li><p>一个项目中，很多地方都会用到文件上传功能，所以有必要把文件上传做成通用组件，这样以后也可以把文件组件直接拷贝到其他项目直接引用</p></li><li><p>props，用于父子组件传递数据，可以理解成组件可配置的属性</p></li><li><p>创建了file.vue组件</p></li><li><p>&#96;&#96;&#96;vue</p><template>  <div>    <button type="button" v-on:click="selectFile()" class="btn btn-white btn-default btn-round">      <i class="ace-icon fa fa-upload"></i>          </button>    <input class="hidden" type = "file" ref="file" v-on:change="uploadFile()" id="file-upload-input">    <div v-show="teacher.image" class="row">      <div class="col-md-4">        <img  v-bind:                     lazyload                     src="/images/loading.svg"                     data-src="teacher.image"                      class="img-responsive"                >      </div>    </div>  </div></template><script>export default {  name: 'pagination',  props: {    text:{      default: "上传文件"    },    list: {      type: Function,      default: null    },    itemCount: Number // 显示的页码数，比如总共有100页，只显示10页，其它用省略号表示  },  data: function () {  },  methods: {    uploadFile(){      let _this =this;      let formData = new window.FormData();      let file = _this.$refs.file.files[0];      //判断文件格式      let suffixs = ["jpg","png","jpeg"];      let fileName = file.name;      let suffix = fileName.substring(fileName.lastIndexOf(".")+1,fileName.length).toLowerCase();      let validateSuffix = false;      for (let i = 0; i < suffixs.length; i++) {        if(suffixs[i].toLowerCase() === suffix){          validateSuffix = true;          break;        }      }      if(!validateSuffix){        Toast.warning("文件格式不对！只支持上传："+suffixs.join(","));        return;      }      //key：”file“必须和后端controller参数名一致      formData.append('file',file);      Loading.show();      _this.$ajax.post(process.env.VUE_APP_SERVER +'/file/admin/upload',formData).then((respond) => {        Loading.hide();        let resp = respond.data;        let image =resp.content;        console.log("头像地址:",image);        _this.teacher.image = image;      });    },    selectFile(){      $("#file-upload-input").trigger("click");    }  }}</script><style scoped>.pagination {  vertical-align: middle !important;  font-size: 16px;  margin-top: 0;  margin-bottom: 10px;}.pagination button {  margin-right: 5px;}.btn-primary.active {  background-color: #2f7bba !important;  border-color: #27689d !important;  color: white !important;  font-weight: 600;}/*.pagination select {*//*vertical-align: middle !important;*//*font-size: 16px;*//*margin-top: 0;*//*}*/</style><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 8-4 文件上传组件开发2</span><br><span class="line"></span><br><span class="line">制作文件上传公共组件1：</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.文件上传功能开发：制作文件上传公共组件<br>2.修复不能连续上传同一个文件的BUG</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 对file进行修改</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button type=&quot;button&quot; v-on:click=&quot;selectFile()&quot; class=&quot;btn btn-white btn-default btn-round&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;ace-icon fa fa-upload&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &#123;&#123;text&#125;&#125;</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">      &lt;input class=&quot;hidden&quot; type=&quot;file&quot; ref=&quot;file&quot; v-on:change=&quot;uploadFile()&quot; v-bind:id=&quot;inputId+&#x27;-input&#x27;&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;file&#x27;,</span><br><span class="line">    props: &#123;</span><br><span class="line">      text: &#123;</span><br><span class="line">        default: &quot;上传文件&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      inputId: &#123;</span><br><span class="line">        default: &quot;file-upload&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      suffixs: &#123;</span><br><span class="line">        default: []</span><br><span class="line">      &#125;,</span><br><span class="line">      use: &#123;</span><br><span class="line">        default: &quot;&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      afterUpload: &#123;</span><br><span class="line">        type: Function,</span><br><span class="line">        default: null</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      uploadFile () &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        let formData = new window.FormData();</span><br><span class="line">        let file = _this.$refs.file.files[0];</span><br><span class="line">  </span><br><span class="line">        // 判断文件格式</span><br><span class="line">        let suffixs = _this.suffixs;</span><br><span class="line">        let fileName = file.name;</span><br><span class="line">        let suffix = fileName.substring(fileName.lastIndexOf(&quot;.&quot;) + 1, fileName.length).toLowerCase();</span><br><span class="line">        let validateSuffix = false;</span><br><span class="line">        for (let i = 0; i &lt; suffixs.length; i++) &#123;</span><br><span class="line">          if (suffixs[i].toLowerCase() === suffix) &#123;</span><br><span class="line">            validateSuffix = true;</span><br><span class="line">            break;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!validateSuffix) &#123;</span><br><span class="line">          Toast.warning(&quot;文件格式不正确！只支持上传：&quot; + suffixs.join(&quot;,&quot;));</span><br><span class="line">          $(&quot;#&quot; + _this.inputId + &quot;-input&quot;).val(&quot;&quot;);//将控件里的值清空</span><br><span class="line">          return;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        // key：&quot;file&quot;必须和后端controller参数名一致</span><br><span class="line">        formData.append(&#x27;file&#x27;, file);</span><br><span class="line">        formData.append(&#x27;use&#x27;, _this.use);</span><br><span class="line">        Loading.show();</span><br><span class="line">        _this.$ajax.post(process.env.VUE_APP_SERVER + &#x27;/file/admin/upload&#x27;, formData).then((response)=&gt;&#123;</span><br><span class="line">          Loading.hide();</span><br><span class="line">          let resp = response.data;</span><br><span class="line">          console.log(&quot;上传文件成功：&quot;, resp);</span><br><span class="line">          _this.afterUpload(resp);//回调函数</span><br><span class="line">          $(&quot;#&quot; + _this.inputId + &quot;-input&quot;).val(&quot;&quot;);//将控件里的值清空</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">  </span><br><span class="line">      selectFile () &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        $(&quot;#&quot; + _this.inputId + &quot;-input&quot;).trigger(&quot;click&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>为组件增加上传成功后的回调函数，和组件不相关的业务代码应该由外部通过回调函数传进来。因为在file组件中没有teacher这个属性，所以需要在file中增加一个回调</p></li><li><p>公共的代码放到组件里，变化的代码做成可配置的属性，由外部传入</p></li><li><p>如果一个页面放了两个文件上传组件，会出现两个input的id重复，可以把id也做成可配置的。</p></li><li><p>在teacher.vue中引用，file的可配置属性，然后再引入公共组件，最后设置回调函数</p></li><li><pre><code>&lt;file v-bind:input-id=&quot;&#39;image-upload&#39;&quot;          v-bind:text=&quot;&#39;上传头像&#39;&quot;          v-bind:suffixs=&quot;[&#39;jpg&#39;, &#39;jpeg&#39;, &#39;png&#39;]&quot;          v-bind:after-upload=&quot;afterUpload&quot;&gt;&lt;/file&gt;//引入公共组件import File from &quot;../../components/file&quot;;export default &#123;  components: &#123;Pagination,File&#125;,  &#125;//设置回调函数 afterUpload(resp)&#123;      let _this=this;      let image =resp.content;      _this.teacher.image = image;    &#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- BUG：连续选择同一个文件的时候，第二次会没反应，这时就要增加  $(&quot;#&quot; + _this.inputId + &quot;-input&quot;).val(&quot;&quot;);（上面file标注了）</span><br><span class="line"></span><br><span class="line">## 8-5 增加文件管理功能1</span><br><span class="line"></span><br><span class="line">文件表设计与基本代码生成：</span><br><span class="line"></span><br><span class="line">- 首先在all.sql中写</span><br><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  #文件</span><br><span class="line">  drop table if exists `file`;</span><br><span class="line">  create table `file`(</span><br><span class="line">              `id` char(8) not null default &#x27;&#x27; comment &#x27;id&#x27;,</span><br><span class="line">              `path` varchar(100)  not null comment &#x27;相对路径&#x27;,</span><br><span class="line">              `name` varchar(100)  comment &#x27;文件名&#x27;,</span><br><span class="line">              `suffix` varchar(10)  comment &#x27;后缀&#x27;,</span><br><span class="line">              `size` int  comment &#x27;大小|字节B&#x27;,</span><br><span class="line">              `use` char(1)  comment &#x27;用途|枚举[FileUseEnum]:COURSE(&quot;C&quot;,&quot;讲师&quot;),TEACHER(&quot;T&quot;,&quot;课程&quot;)&#x27;,</span><br><span class="line">              `created_at` datetime(3) comment &#x27;创建时间&#x27;,</span><br><span class="line">              `updated_at` datetime(3) comment &#x27;修改时间&#x27;,</span><br><span class="line">               primary key (`id`),</span><br><span class="line">               unique key `path_unique`(`path`)</span><br><span class="line">  )engine =innodb default charset=utf8mb4 comment=&#x27;文件&#x27;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>对于sql关键字就要在生成器中添加</p></li><li><pre><code class="xml">&lt;!--        会对关键字的表、 字段，增加反引号 (Shift+~)--&gt;        &lt;property name=&quot;autoDelimitKeywords&quot; value=&quot;true&quot;/&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 对这个代码mybatis-generator，后端，前端，枚举。</span><br><span class="line"></span><br><span class="line">- 在对ServerGenerator和VueGenerator修改时，都要修改这个值</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  static String MODULE = &quot;file&quot;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后在server.enums创建FileUseEnum</p></li><li><pre><code class="java">package com.course.server.enums;public enum FileUseEnum &#123;    COURSE(&quot;C&quot;, &quot;课程&quot;),    TEACHER(&quot;T&quot;, &quot;讲师&quot;);    private String code;    private String desc;    FileUseEnum(String code, String desc) &#123;        this.code = code;        this.desc = desc;    &#125;    public String getCode() &#123;        return code;    &#125;    public void setCode(String code) &#123;        this.code = code;    &#125;    public void setDesc(String desc) &#123;        this.desc = desc;    &#125;    public String getDesc() &#123;        return desc;    &#125;    public static FileUseEnum getByCode(String code)&#123;        for(FileUseEnum e: FileUseEnum.values())&#123;            if(code.equals(e.getCode()))&#123;                return e;            &#125;        &#125;        return  null;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后再EnumGenerator加入</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  toJson(FileUseEnum.class, bufferObject, bufferArray);</span><br></pre></td></tr></table></figure></code></pre></li><li><p>接下来对admin进行修改</p></li><li><p>&#96;&#96;&#96;vue</p><li class="active open">  <a href="#" class="dropdown-toggle">    <i class="menu-icon fa fa-list"></i>    <span class="menu-text"> 文件管理 </span><pre><code>&lt;b class=&quot;arrow fa fa-angle-down&quot;&gt;&lt;/b&gt;</code></pre>  </a><p>  <b class="arrow"></b></p>  <ul class="submenu">    <li class="active" id="file-file-sidebar">      <router-link to="/file/file">        <i class="menu-icon fa fa-caret-right"></i>        分类管理      </router-link>      <b class="arrow"></b>    </li>  </ul></li><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后是router.js</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  import File from &quot;./views/admin/file.vue&quot;</span><br><span class="line">  </span><br><span class="line">  ,&#123;</span><br><span class="line">      path: &quot;file/file&quot;,</span><br><span class="line">      name:&quot;file/file&quot;,</span><br><span class="line">      component: File,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p>上传文件时保存文件记录：1.文件上传功能开发：上传文件时保存文件记录</p><ul><li><p>统一文件名为8位uuid+文件后缓。下一章，我们还会对进一步规范文件名。</p></li><li><p>文件记录不允许编辑和删除，但是可以做一些统计功能，比如文件大小统计，文件类型统计，也可增加文件审核功能，对不合规的图片、视频做处理</p></li><li><p>先把application中，地址加一个f&#x2F;，好看</p></li><li><p>&#96;&#96;&#96;java<br>file.domain&#x3D;<a class="link"   href="http://192.168.0.105:9000/file/f/" >http://192.168.0.105:9000/file/f/<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后修改UploadController</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  //注入</span><br><span class="line">  @Resource</span><br><span class="line">  private FileService fileService;</span><br><span class="line">  //取后缀</span><br><span class="line">  String suffix =fileName.substring(fileName.lastIndexOf(&quot;.&quot;)+1).toLowerCase();</span><br><span class="line">  String path = &quot;teacher/&quot;+key+&quot;.&quot;+suffix;</span><br><span class="line">  String fullPath = FILE_PATH+path;</span><br><span class="line">  //记录</span><br><span class="line">  LOG.info(&quot;保存文件记录开始&quot;);</span><br><span class="line">  FileDto fileDto = new FileDto();</span><br><span class="line">  fileDto.setPath(path);</span><br><span class="line">  fileDto.setName(fileName);</span><br><span class="line">  fileDto.setSize(Math.toIntExact(file.getSize()));</span><br><span class="line">  fileDto.setSuffix(suffix);</span><br><span class="line">  fileDto.setUse(&quot;&quot;);</span><br><span class="line">  fileService.save(fileDto);</span><br><span class="line">  //地址也得相应修改       </span><br><span class="line">  responseDto.setContent(FILE_DOMAIN+path);</span><br></pre></td></tr></table></figure></li></ul><h2 id="8-6-增加文件管理功能2"><a href="#8-6-增加文件管理功能2" class="headerlink" title="8-6 增加文件管理功能2"></a>8-6 增加文件管理功能2</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.文件上传功能开发：去掉文件管理的新增、修改，删除功能</span><br></pre></td></tr></table></figure><ul><li>就是该删删</li></ul><p>文件上传功能开发：增加文件大小格式化过滤器</p><ul><li><p>小技巧：不用算出最终的数值大小，直接写表达式，让程序来计算，这种写法方便维护和修改，比如我写个5242880，看不出来是多少但是写5 * 1024 * 1024，一看就是5M。</p></li><li><p>再filter.js中设置格式化方法</p></li><li><p>&#96;&#96;&#96;js<br>&#x2F;**</p><ul><li>格式化文件大小</li><li>@param value</li><li>@returns {string}</li></ul><p> *&#x2F;</p><p>let formatFileSize &#x3D; (value) &#x3D;&gt; {<br>    value &#x3D; value || 0;<br>    let result;<br>    if (value &gt; 100 * 1024) {<br>        result &#x3D; Math.round((value &#x2F; 1024 &#x2F; 1024) * 100) &#x2F; 100 + “MB”;<br>    } else {<br>        result &#x3D; Math.round((value &#x2F; 1024) * 100) &#x2F; 100 + “KB”;<br>    }<br>    return result;<br>};<br>&#x2F;&#x2F;将其抛出<br>export default {<br>    formatFileSize<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在filter.vue中使用只需要这样</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;td&gt;&#123;&#123;file.size|formatFileSize&#125;&#125;&lt;/td&gt;</span><br></pre></td></tr></table></figure></li></ul><p>文件按用途分类保存：</p><ul><li>首先在FileUseEnum中创建一个方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过code得到完整的枚举</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> FileUseEnum <span class="title function_">getByCode</span><span class="params">(String code)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(FileUseEnum e: FileUseEnum.values())&#123;</span><br><span class="line">        <span class="keyword">if</span>(code.equals(e.getCode()))&#123;</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>然后再filevue（这个是哪个通用组件）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//增加一个可改变的属性</span><br><span class="line">props: &#123;</span><br><span class="line">  use: &#123;</span><br><span class="line">    default: &quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line"> &#125;</span><br><span class="line"> //提交表单时将use也提交出去</span><br><span class="line"> formData.append(&#x27;use&#x27;, _this.use);</span><br></pre></td></tr></table></figure><ul><li><p>再teacher.vue中使用，生成的枚举</p></li><li><p>&#96;&#96;&#96;<br>data: function () {<br>  return {<br>teacher: {},<br>teachers: [],<br>FILE_USE:FILE_USE&#x2F;&#x2F;将枚举js全局变量定义组件变量，再html中使用的时组件变量<br>  }<br>},<br>&#x2F;&#x2F;再上传file标签那使用<br>v-bind:use&#x3D;”FILE_USE.TEACHER.key”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 最后在UploadController中</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  //将use传进来</span><br><span class="line">  public ResponseDto upload(@RequestParam MultipartFile file,String use) throws IOException &#123;    </span><br><span class="line">  //保存文件到本地，通过use获取枚举类型</span><br><span class="line">   FileUseEnum useEnum =FileUseEnum.getByCode(use);      </span><br><span class="line">  //如果文件夹不存在，创建文件夹</span><br><span class="line">   String dir = useEnum.name().toLowerCase();</span><br><span class="line">   File fullDir = new File(FILE_PATH+dir);</span><br><span class="line">   if(!fullDir.exists())&#123;</span><br><span class="line">   fullDir.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">   String path = dir+File.separator+key+&quot;.&quot;+suffix;   </span><br><span class="line">  //将use设置进去</span><br><span class="line">  fileDto.setUse(use);</span><br></pre></td></tr></table></figure></li></ul><h2 id="8-7-文件上传组件的使用"><a href="#8-7-文件上传组件的使用" class="headerlink" title="8-7 文件上传组件的使用"></a>8-7 文件上传组件的使用</h2><p>文件上传成功后返回值处理：1，文件上传功能开发：文件上传成功后返回值的处理</p><ul><li><p>要将全路径返回回去，首先在UploadController中重新设置下全路径，再将其设置到内容里</p></li><li><p>&#96;&#96;&#96;java<br>fileDto.setPath(FILE_DOMAIN+path);<br>responseDto.setContent(fileDto);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 与此同时teacher.vue也要改afterUpload方法中content后加一个.path</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  afterUpload(resp)&#123;</span><br><span class="line">    let _this=this;</span><br><span class="line">    let image =resp.content.path;</span><br><span class="line">    _this.teacher.image = image;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p>课程管理和小节管理使用文件组件：1.文件上传功能开发：课程管理和小节管理使用文件组件</p><ul><li><p>我们先修改course的封面：</p></li><li><pre><code class="vue">//修改封面部分&lt;div class=&quot;form-group&quot;&gt;  &lt;label  class=&quot;col-sm-2 control-label&quot;&gt;封面&lt;/label&gt;  &lt;div class=&quot;col-sm-10&quot;&gt;    &lt;file v-bind:input-id=&quot;&#39;image-upload&#39;&quot;          v-bind:text=&quot;&#39;上传封面&#39;&quot;          v-bind:suffixs=&quot;[&#39;jpg&#39;, &#39;jpeg&#39;, &#39;png&#39;]&quot;          v-bind:use=&quot;FILE_USE.COURSE.key&quot;          v-bind:after-upload=&quot;afterUpload&quot;&gt;&lt;/file&gt;    &lt;div v-show=&quot;course.image&quot; class=&quot;row&quot;&gt;      &lt;div class=&quot;col-md-4&quot;&gt;        &lt;img v-bind:src=&quot;course.image&quot; class=&quot;img-responsive&quot;&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;//引入Fileimport File from &quot;../../components/file&quot;;export default &#123;   components: &#123;Pagination,File&#125;,  &#125;//data中引入全局变量FILE_USE:FILE_USE,//引入方法afterUpload(resp)&#123;    let _this=this;    let image =resp.content.path;    _this.course.image = image;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 接下来我们改小节的视频上传部分：</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  //修改视频部分</span><br><span class="line">  &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;label  class=&quot;col-sm-2 control-label&quot;&gt;视频&lt;/label&gt;</span><br><span class="line">    &lt;div class=&quot;col-sm-10&quot;&gt;</span><br><span class="line">      &lt;file v-bind:input-id=&quot;&#x27;video-upload&#x27;&quot;</span><br><span class="line">            v-bind:text=&quot;&#x27;上传视频&#x27;&quot;</span><br><span class="line">            v-bind:suffixs=&quot;[&#x27;mp4&#x27;]&quot;</span><br><span class="line">            v-bind:use=&quot;FILE_USE.COURSE.key&quot;</span><br><span class="line">            v-bind:after-upload=&quot;afterUpload&quot;&gt;&lt;/file&gt;</span><br><span class="line">      &lt;div v-show=&quot;section.video&quot; class=&quot;row&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;col-md-9&quot;&gt;</span><br><span class="line">          &lt;video v-bind:src=&quot;section.video&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  //引入File</span><br><span class="line">  import File from &quot;../../components/file&quot;;</span><br><span class="line">  export default &#123;</span><br><span class="line">    components: &#123;Pagination,File&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  //data中引入变量</span><br><span class="line">  FILE_USE:FILE_USE,</span><br><span class="line">  //引入方法</span><br><span class="line">   afterUpload(resp)&#123;</span><br><span class="line">        let _this=this;</span><br><span class="line">        let video =resp.content.path;</span><br><span class="line">        _this.section.video = video;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>max-file-size：单个文件的大小；max-request-size：请求的大小，比如一次请求可以上传多个文件，这时两个值就不一样了。</p></li><li><p>修改File的application</p></li><li><p>&#96;&#96;&#96;java<br>spring.servlet.multipart.max-file-size&#x3D;100MB<br>spring.servlet.multipart.max-request-size&#x3D;100MB</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">自动获取视频时长：1.文件上传功能开发：自动获取视频时长</span><br><span class="line"></span><br><span class="line">- 修改section.vue</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  //给video标签加一个id</span><br><span class="line">  &lt;div class=&quot;col-md-9&quot;&gt;</span><br><span class="line">    &lt;video v-bind:src=&quot;section.video&quot; id=&quot;video&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  //  afterUpload中使用getTime方法</span><br><span class="line">  afterUpload(resp)&#123;</span><br><span class="line">        _this.getTime();</span><br><span class="line">      &#125;,</span><br><span class="line">  //加一个获取时长方法</span><br><span class="line">      /**</span><br><span class="line">       * 获取时长</span><br><span class="line">       */</span><br><span class="line">      getTime()&#123;</span><br><span class="line">        let _this=this;</span><br><span class="line">        let ele =document.getElementById(&quot;video&quot;);</span><br><span class="line">        _this.section.time =parseInt(ele.duration,10);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h2 id="8-8-作业讲解：课程内容中增加文件管理"><a href="#8-8-作业讲解：课程内容中增加文件管理" class="headerlink" title="8-8 作业讲解：课程内容中增加文件管理"></a>8-8 作业讲解：课程内容中增加文件管理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.文件上传功能开发：增加误程内容文件管理，用于富文本框中插入图片或视</span><br><span class="line">2.修复course，section，teacher页面中关于文件组件中inputId的赋值</span><br><span class="line">3，修复file组件中selectFile，id的值改为变量</span><br></pre></td></tr></table></figure><ul><li><p>首先在all.sql中写入</p></li><li><pre><code class="sql">#课程内容文件drop table if exists `course_content_file`;create table `course_content_file`(                       `id` char(8) not null default &#39;&#39; comment &#39;id&#39;,                       `course_id` char(8) not null  comment &#39;课程id&#39;,                       `url` varchar(100)  comment &#39;地址&#39;,                       `name` varchar(100)  comment &#39;文件名&#39;,                       `size` int  comment &#39;大小|字节B&#39;,                       primary key (`id`))engine =innodb default charset=utf8mb4 comment=&#39;课程内容文件&#39;;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 只需要生成持久层和服务端的代码，不需要生成界面，记得改后端生成器ServerGenerator的模块名</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  static String MODULE = &quot;business&quot;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>对生成的CourseContentFileService进行一些改动</p></li><li><pre><code class="java">/*** 列表查询*/    public List&lt;CourseContentFileDto&gt; list(String courseId) &#123;        CourseContentFileExample example = new CourseContentFileExample();        CourseContentFileExample.Criteria criteria =example.createCriteria();        criteria.andCourseIdEqualTo(courseId);        List&lt;CourseContentFile&gt; fileList = courseContentFileMapper.selectByExample(example);        return CopyUtil.copyList(fileList,CourseContentFileDto.class);    &#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- CourseContentFileController也做修改</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  //习惯用哪个就写成哪个</span><br><span class="line">  @RequestMapping(&quot;/admin/course-content-file&quot;)</span><br><span class="line">  </span><br><span class="line">  /**</span><br><span class="line">  * 列表查询</span><br><span class="line">  */</span><br><span class="line">  @GetMapping(&quot;/list/&#123;courseId&#125;&quot;)</span><br><span class="line">  public ResponseDto list(@PathVariable String courseId)&#123;</span><br><span class="line">      ResponseDto responseDto = new ResponseDto();</span><br><span class="line">      List&lt;CourseContentFileDto&gt; fileDtoList = courseContentFileService.list(courseId);</span><br><span class="line">      responseDto.setContent(fileDtoList);</span><br><span class="line">      return responseDto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>首先修改course.vue</p></li><li><pre><code class="vue">//增加模态框&lt;file v-bind:input-id=&quot;&#39;content--upload&#39;&quot;      v-bind:text=&quot;&#39;上传文件&#39;&quot;      v-bind:suffixs=&quot;[&#39;jpg&#39;, &#39;jpeg&#39;, &#39;png&#39;]&quot;      v-bind:use=&quot;FILE_USE.COURSE.key&quot;      v-bind:after-upload=&quot;afterUploadContentFile&quot;&gt;&lt;/file&gt;&lt;br&gt;&lt;table id=&quot;file-table&quot; class=&quot;table  table-bordered table-hover&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;    &lt;th&gt;名称&lt;/th&gt;    &lt;th&gt;地址&lt;/th&gt;    &lt;th&gt;大小&lt;/th&gt;    &lt;th&gt;操作&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;  &lt;tr v-for=&quot;(f,i) in files&quot; v-bind:key=&quot;f.id&quot;&gt;    &lt;td&gt;&#123;&#123;f.name&#125;&#125;&lt;/td&gt;    &lt;td&gt;&#123;&#123;f.url&#125;&#125;&lt;/td&gt;    &lt;td&gt;&#123;&#123;f.size|formatFileSize&#125;&#125;&lt;/td&gt;    &lt;td&gt;        &lt;button v-on:click=&quot;delFile(f)&quot; class=&quot;btn btn-white btn-xs btn-warning&quot;&gt;          &lt;i class=&quot;ace-icon fa fa-times red2&quot;&gt;&lt;/i&gt;          删除        &lt;/button&gt;    &lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;&lt;/table&gt;//在data中增加变量files: [],//在editContent方法中增加，加载内容文件列表_this.listContentFiles();//添加相应方法 /**     * 加载文件列表     */    listContentFiles()&#123;      let _this =this;      _this.$ajax.get(process.env.VUE_APP_SERVER +&#39;/business/admin/course-content-file/list&#39;+_this.course.id).then((respond)=&gt;&#123;        let resp = respond.data;        if(resp.success)&#123;          _this.file = resp.content;        &#125;      &#125;);    &#125;,    /**     * 上传内容文件后，保存内容文件记录，流程：先使用文件上传组件，上传文件，并保存file表记录，前端拿到上传结果后，再调一次服务端，保存course_content_file表记录。     */    afterUploadContentFile(response) &#123;      let _this = this;      console.log(&quot;开始保存文件记录&quot;);      let file = response.content;      file.courseId = _this.course.id;      file.url = file.path;      _this.$ajax.post(process.env.VUE_APP_SERVER + &#39;/business/admin/course-content-file/save&#39;, file).then((response)=&gt;&#123;        let resp = response.data;        if (resp.success) &#123;          Toast.success(&quot;上传文件成功&quot;);          _this.files.push(resp.content);        &#125;      &#125;);    &#125;,    /**     * 删除内容文件，这里的删除只是删除course-content-file表的记录，并没有删除真正的文件，也没有删除fie表的记录，看起来会导致脏数据，下一章我们会解决这个问题     */    delFile(f) &#123;      let _this = this;      Confirm.show(&quot;删除课程后不可恢复，确认删除？&quot;, function () &#123;        _this.$ajax.delete(process.env.VUE_APP_SERVER + &#39;/business/admin/course-content-file/delete/&#39; + f.id).then((response)=&gt;&#123;          let resp = response.data;          if (resp.success) &#123;            Toast.success(&quot;删除文件成功&quot;);            Tool.removeObj(_this.files, f);          &#125;        &#125;);      &#125;);    &#125;,<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在Tool.js中添加removeObj方法</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  /**</span><br><span class="line">   * 移除对象数组中的对象</span><br><span class="line">   * @param array</span><br><span class="line">   * @param obj</span><br><span class="line">   * @returns &#123;number&#125;</span><br><span class="line">   */</span><br><span class="line">  removeObj: function (array, obj) &#123;</span><br><span class="line">      let index = -1;</span><br><span class="line">      for (let i = 0; i &lt; array.length; i++) &#123;</span><br><span class="line">          if (array[i] === obj) &#123;</span><br><span class="line">              array.splice(i, 1);//splice(）方法向/从数组中添加/删除项目，然后返回被删除的项目。注释：该方法会改变原始数组。</span><br><span class="line">              index = i;</span><br><span class="line">              break;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return index;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.文件上传功能开发：将文件内容权态柜做成单独的页面，代码更容易维护，内容编辑更方便</span><br></pre></td></tr></table></figure></code></pre></li><li><p>增加一个content页面</p></li><li><pre><code class="vue">&lt;template&gt;  &lt;div&gt;    &lt;h4 class=&quot;lighter&quot;&gt;      &lt;i class=&quot;ace-icon fa fa-hand-o-right icon-animated-hand-pointer blue&quot;&gt;&lt;/i&gt;      &lt;router-link to=&quot;/business/course&quot; class=&quot;pink&quot;&gt; &#123;&#123;course.name&#125;&#125; &lt;/router-link&gt;    &lt;/h4&gt;    &lt;hr&gt;    &lt;file v-bind:input-id=&quot;&#39;content-file-upload&#39;&quot;          v-bind:text=&quot;&#39;上传文件&#39;&quot;          v-bind:suffixs=&quot;[&#39;jpg&#39;, &#39;jpeg&#39;, &#39;png&#39;, &#39;mp4&#39;]&quot;          v-bind:use=&quot;FILE_USE.COURSE.key&quot;          v-bind:after-upload=&quot;afterUploadContentFile&quot;&gt;&lt;/file&gt;    &lt;br&gt;    &lt;table id=&quot;file-table&quot; class=&quot;table  table-bordered table-hover&quot;&gt;      &lt;thead&gt;      &lt;tr&gt;        &lt;th&gt;名称&lt;/th&gt;        &lt;th&gt;地址&lt;/th&gt;        &lt;th&gt;大小&lt;/th&gt;        &lt;th&gt;操作&lt;/th&gt;      &lt;/tr&gt;      &lt;/thead&gt;      &lt;tbody&gt;      &lt;tr v-for=&quot;(f, i) in files&quot; v-bind:key=&quot;f.id&quot;&gt;        &lt;td&gt;&#123;&#123;f.name&#125;&#125;&lt;/td&gt;        &lt;td&gt;&#123;&#123;f.url&#125;&#125;&lt;/td&gt;        &lt;td&gt;&#123;&#123;f.size | formatFileSize&#125;&#125;&lt;/td&gt;        &lt;td&gt;          &lt;button v-on:click=&quot;delFile(f)&quot; class=&quot;btn btn-white btn-xs btn-warning btn-round&quot;&gt;            &lt;i class=&quot;ace-icon fa fa-times red2&quot;&gt;&lt;/i&gt;            删除          &lt;/button&gt;        &lt;/td&gt;      &lt;/tr&gt;      &lt;/tbody&gt;    &lt;/table&gt;    &lt;form class=&quot;form-horizontal&quot;&gt;      &lt;div class=&quot;form-group&quot;&gt;        &lt;div class=&quot;col-lg-12&quot;&gt;          &#123;&#123;saveContentLabel&#125;&#125;        &lt;/div&gt;      &lt;/div&gt;      &lt;div class=&quot;form-group&quot;&gt;        &lt;div class=&quot;col-lg-12&quot;&gt;          &lt;div id=&quot;content&quot;&gt;&lt;/div&gt;        &lt;/div&gt;      &lt;/div&gt;      &lt;div class=&quot;form-group&quot;&gt;        &lt;div class=&quot;col-lg-12&quot;&gt;          &#123;&#123;saveContentLabel&#125;&#125;        &lt;/div&gt;      &lt;/div&gt;    &lt;/form&gt;    &lt;p&gt;      &lt;button type=&quot;button&quot; class=&quot;btn btn-white btn-info btn-round&quot; v-on:click=&quot;saveContent()&quot;&gt;        &lt;i class=&quot;ace-icon fa fa-plus blue&quot;&gt;&lt;/i&gt;        保存      &lt;/button&gt;&amp;nbsp;      &lt;router-link to=&quot;/business/course&quot; type=&quot;button&quot; class=&quot;btn btn-white btn-default btn-round&quot; data-dismiss=&quot;modal&quot;&gt;        &lt;i class=&quot;ace-icon fa fa-times&quot;&gt;&lt;/i&gt;        返回课程      &lt;/router-link&gt;    &lt;/p&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import File from &quot;../../components/file&quot;;export default &#123;  components: &#123;File&#125;,  name: &quot;business-course-content&quot;,  data: function() &#123;    return &#123;      course: &#123;&#125;,      FILE_USE: FILE_USE,      saveContentLabel: &quot;&quot;,      files: [],      saveContentInterval: &#123;&#125;,    &#125;  &#125;,  mounted: function() &#123;    let _this = this;    let course = SessionStorage.get(SESSION_KEY_COURSE) || &#123;&#125;;    if (Tool.isEmpty(course)) &#123;      _this.$router.push(&quot;/welcome&quot;);    &#125;    _this.course = course;    _this.init();    // sidebar激活样式方法一    this.$parent.activeSidebar(&quot;business-course-sidebar&quot;);  &#125;,  destroyed: function() &#123;    let _this = this;    console.log(&quot;组件销毁&quot;);    clearInterval(_this.saveContentInterval);  &#125;,  methods: &#123;    /**     * 打开内容编辑框     */    init() &#123;      let _this = this;      let course = _this.course;      let id = course.id;      $(&quot;#content&quot;).summernote(&#123;        focus: true,        height: 300      &#125;);      // 先清空历史文本      $(&quot;#content&quot;).summernote(&#39;code&#39;, &#39;&#39;);      _this.saveContentLabel = &quot;&quot;;      // 加载内容文件列表      _this.listContentFiles();      Loading.show();      _this.$ajax.get(process.env.VUE_APP_SERVER + &#39;/business/admin/course/find-content/&#39; + id).then((response)=&gt;&#123;        Loading.hide();        let resp = response.data;        if (resp.success) &#123;          if (resp.content) &#123;            $(&quot;#content&quot;).summernote(&#39;code&#39;, resp.content.content);          &#125;          // 定时自动保存          _this.saveContentInterval = setInterval(function() &#123;            _this.saveContent();          &#125;, 5000);        &#125; else &#123;          Toast.warning(resp.message);        &#125;      &#125;);    &#125;,    /**     * 保存内容     */    saveContent () &#123;      let _this = this;      let content = $(&quot;#content&quot;).summernote(&quot;code&quot;);      _this.$ajax.post(process.env.VUE_APP_SERVER + &#39;/business/admin/course/save-content&#39;, &#123;        id: _this.course.id,        content: content      &#125;).then((response)=&gt;&#123;        Loading.hide();        let resp = response.data;        if (resp.success) &#123;          // Toast.success(&quot;内容保存成功&quot;);          // let now = Tool.dateFormat(&quot;yyyy-MM-dd hh:mm:ss&quot;);          let now = Tool.dateFormat(&quot;mm:ss&quot;);          _this.saveContentLabel = &quot;最后保存时间：&quot; + now;        &#125; else &#123;          Toast.warning(resp.message);        &#125;      &#125;);    &#125;,    /**     * 加载内容文件列表     */    listContentFiles() &#123;      let _this = this;      _this.$ajax.get(process.env.VUE_APP_SERVER + &#39;/business/admin/course-content-file/list/&#39; + _this.course.id).then((response)=&gt;&#123;        let resp = response.data;        if (resp.success) &#123;          _this.files = resp.content;        &#125;      &#125;);    &#125;,    /**     * 上传内容文件后，保存内容文件记录     */    afterUploadContentFile(response) &#123;      let _this = this;      console.log(&quot;开始保存文件记录&quot;);      let file = response.content;      file.courseId = _this.course.id;      file.url = file.path;      _this.$ajax.post(process.env.VUE_APP_SERVER + &#39;/business/admin/course-content-file/save&#39;, file).then((response)=&gt;&#123;        let resp = response.data;        if (resp.success) &#123;          Toast.success(&quot;上传文件成功&quot;);          _this.files.push(resp.content);        &#125;      &#125;);    &#125;,    /**     * 删除内容文件     */    delFile(f) &#123;      let _this = this;      Confirm.show(&quot;删除课程后不可恢复，确认删除？&quot;, function () &#123;        _this.$ajax.delete(process.env.VUE_APP_SERVER + &#39;/business/admin/course-content-file/delete/&#39; + f.id).then((response)=&gt;&#123;          let resp = response.data;          if (resp.success) &#123;            Toast.success(&quot;删除文件成功&quot;);            Tool.removeObj(_this.files, f);          &#125;        &#125;);      &#125;);    &#125;,  &#125;&#125;&lt;/script&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 原来是逻辑是打开模态框时，开始定时任务，关闭模态框时，清除定时任务。现在要改为打开页面组件初始化时（mounted），开始定时任务，页面组件销毁时（destroyed），清除定时任务。</span><br><span class="line"></span><br><span class="line">- 修改course.vue</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;button v-on:click=&quot;toContent(course)&quot; class=&quot;btn btn-white btn-xs btn-info btn-round&quot;&gt;</span><br><span class="line">    内容</span><br><span class="line">  &lt;/button&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">  //增加toContent方法</span><br><span class="line">  /**</span><br><span class="line">       * 点击内容</span><br><span class="line">       * @param course</span><br><span class="line">       */</span><br><span class="line">      toContent(course) &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        SessionStorage.set(SESSION_KEY_COURSE, course);</span><br><span class="line">        _this.$router.push(&quot;/business/content&quot;);</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure></code></pre></li><li><p>增加路由router.js</p></li><li><pre><code class="js">import Content from &quot;./views/admin/content.vue&quot;&#123;    path: &quot;business/content&quot;,    name:&quot;business/content&quot;,    component: Content,&#125;,<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 第9章 大文件断点续与极速秒传</span><br><span class="line"></span><br><span class="line">本章将在上一章的基础上增加大文件断点续传功能。作为一个视频网站，一个文件从几十M到上G，上传一个大文件受网络影响很大，一次上传成功的几率很小，为此我们会在本章完善文件上传功能，支持断点续传并且上传文件时，检查文件是否上传过实现极速秒传。...</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">## 9-1 分片传输的试探</span><br><span class="line"></span><br><span class="line">分片上传：1.大文件断原续传与极速秒传：增加big-fi1e组件，分片传输测试成功</span><br><span class="line"></span><br><span class="line">- 极速秒传听起来很高深，原理其实很简单，就是开始上传前，先检查一下文件是否上传过了，如果已上传过，直接弹出提示，极速秒传成功。</span><br><span class="line"></span><br><span class="line">- 一个文件有10M，每个分片定义为1M，那这个文件就会被分为10片进行传输</span><br><span class="line"></span><br><span class="line">- 首先创建一个组件big-file就是把file复制过去修改下</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  //修改姓名和文本</span><br><span class="line">  name: &#x27;big-file&#x27;,</span><br><span class="line">    props: &#123;</span><br><span class="line">      text: &#123;</span><br><span class="line">        default: &quot;上传大文件&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  //在uploadFile中增加文件分片</span><br><span class="line">  let shardSize=20 * 1024 * 1024;//以20MB为一个分片</span><br><span class="line">  let shardIndex = 0;//分片索引</span><br><span class="line">  let start = shardIndex * shardSize;//当前分片起始位置</span><br><span class="line">  let end = Math.min(file.size,start+shardSize);//当前分片结束位置</span><br><span class="line">  let fileShard = file.slice(start,end);//从文件中截取当前的分片数据</span><br><span class="line">  </span><br><span class="line">  // key：&quot;file&quot;必须和后端controller参数名一致</span><br><span class="line">  formData.append(&#x27;file&#x27;, fileShard);</span><br></pre></td></tr></table></figure></code></pre></li><li><p>file.slice（），对文件进行截取</p></li><li><p>在section中引入big-file，并将file组件改为big-file</p></li><li><p>&#96;&#96;&#96;<br>import BigFile from “..&#x2F;..&#x2F;components&#x2F;big-file”;<br>export default {<br>  components: {Pagination,BigFile},</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">分片合并：1.大文件断点续传与极速秒传：分片合并测试成功</span><br><span class="line"></span><br><span class="line">- 在UploadController中增加方法</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  @GetMapping(&quot;merge&quot;)</span><br><span class="line">  public ResponseDto merge() throws Exception &#123;</span><br><span class="line">      File newFile = new File(FILE_PATH + &quot;/course/test123.mp4&quot;);</span><br><span class="line">      FileOutputStream outputStream = new FileOutputStream(newFile, true);//文件追加写入</span><br><span class="line">      FileInputStream fileInputStream = null;//分片文件</span><br><span class="line">      byte[] byt = new byte[10 * 1024 * 1024];</span><br><span class="line">      int len;</span><br><span class="line">      try &#123;</span><br><span class="line">          //读取第一个分片</span><br><span class="line">          fileInputStream = new FileInputStream(new File(FILE_PATH + &quot;/course/G8Yfj2Ij.blob&quot;));</span><br><span class="line">          while ((len = fileInputStream.read(byt)) != -1) &#123;</span><br><span class="line">              outputStream.write(byt, 0, len);</span><br><span class="line">          &#125;</span><br><span class="line">          //读第二个分片</span><br><span class="line">          fileInputStream = new FileInputStream(new File(FILE_PATH + &quot;/course/NUTxyaDe.blob&quot;));</span><br><span class="line">          while ((len = fileInputStream.read(byt)) != -1) &#123;</span><br><span class="line">              outputStream.write(byt, 0, len);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;catch (IOException e)&#123;</span><br><span class="line">          LOG.error(&quot;分片异常&quot;,e);</span><br><span class="line">      &#125;finally &#123;</span><br><span class="line">          try &#123;</span><br><span class="line">              if(fileInputStream!=null)&#123;</span><br><span class="line">                  fileInputStream.close();</span><br><span class="line">              &#125;</span><br><span class="line">              outputStream.close();</span><br><span class="line">              LOG.info(&quot;IO流关闭&quot;);</span><br><span class="line">          &#125;catch (Exception e)&#123;</span><br><span class="line">              LOG.error(&quot;IO流关闭&quot;,e);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      ResponseDto responseDto = new ResponseDto();</span><br><span class="line">      return  responseDto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="9-2-分片上传功能开发1"><a href="#9-2-分片上传功能开发1" class="headerlink" title="9-2 分片上传功能开发1"></a>9-2 分片上传功能开发1</h2><p>文件分片管理的模型设计：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.大文件断点续传与极速秒传：文件表增加分片相关字段</span><br></pre></td></tr></table></figure><ul><li><p>在all.sql的“文件”中增加，然后mybatis-generator</p></li><li><pre><code class="sql">alter table `file` add column (`Shard_index` int comment &#39;已上传分片&#39;);alter table `file` add column (`Shard_size` int comment &#39;分片大小|B&#39;);alter table `file` add column (`Shard_total` int comment &#39;分片总数&#39;);alter table `file` add column (`key` varchar(32) comment &#39;文件标识&#39;);alter table `file` add unique key key_unique(`key`);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">分片数据传输：</span><br><span class="line"></span><br><span class="line">- 经验分享：对于对于一些不涉及安全性的数据，可以交由前端来计算，这样可以减轻服务端的压力</span><br><span class="line"></span><br><span class="line">- 我们将File中生成的变量复制到filedto中然后生成get和set和tostring方法</span><br><span class="line"></span><br><span class="line">- 然后我们对前端big-file组件做修改：</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  let size = file.size;</span><br><span class="line">  let shardTotal = Math.ceil(size/shardSize);//总片数</span><br><span class="line">  // key：&quot;file&quot;必须和后端controller参数名一致</span><br><span class="line">  formData.append(&#x27;shard&#x27;, fileShard);</span><br><span class="line">  formData.append(&#x27;shardIndex&#x27;, shardIndex);</span><br><span class="line">  formData.append(&#x27;shardSize&#x27;, shardSize);</span><br><span class="line">  formData.append(&#x27;shardTotal&#x27;, shardTotal);</span><br><span class="line">  //提交表单时将use也提交出去</span><br><span class="line">  formData.append(&#x27;use&#x27;, _this.use);</span><br><span class="line">  formData.append(&#x27;name&#x27;, file.name);</span><br><span class="line">  formData.append(&#x27;suffix&#x27;, suffix);</span><br><span class="line">  formData.append(&#x27;size&#x27;, size);</span><br></pre></td></tr></table></figure></code></pre></li><li><p>其次对服务端UploadController做修改：</p></li><li><pre><code class="java">//对传入参数进行增加public ResponseDto upload(@RequestParam MultipartFile shard,                                            String use,                                            String name,                                            String suffix,                                            Integer size,                                            Integer shardIndex,                                            Integer shardSize,                                            Integer shardTotal) throws IOException &#123;//将file改为shardshard.transferTo(dest);//将里面参数进行修改fileDto.setName(name);fileDto.setSize(size);//再将新增参数设置进去fileDto.setShardIndex(shardIndex);fileDto.setSize(shardSize);fileDto.setShardTotal(shardTotal);fileDto.setKey(key);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">文件标识的设计：1.大文件断点续传与极速秒传：使用文件生成md5签名，作为文件标识</span><br><span class="line"></span><br><span class="line">- 数据库设计上传第一个分片时，插入一条记录，上传之后的分片都是更新记录，只需更新shard_index字段，当然也包括updated_at</span><br><span class="line"></span><br><span class="line">- 数据库设计：shard_index和shard_total的值相等时表示所有分片都已上传完成</span><br><span class="line"></span><br><span class="line">- 数据库设计：不管上传第几个分片，传输的key值是一样的，key跟文件相关，跟分片无关</span><br><span class="line"></span><br><span class="line">- MD5信息摘要算法，常用于密码加密传输与存储，会生成128位二制数，每4个二进制可以转成1个16进制数字，结果是32个16进制数字</span><br><span class="line"></span><br><span class="line">- 26个大写字字母+26个小写字母+10个阿拉伯数字，共62个字符，可以表达62进制数字。</span><br><span class="line"></span><br><span class="line">- 首先我们增加md5.js文件</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  var KEY = &quot;!@#QWERT&quot;;</span><br><span class="line">  /*</span><br><span class="line">   * Configurable variables. You may need to tweak these to be compatible with</span><br><span class="line">   * the server-side, but the defaults work in most cases.</span><br><span class="line">   */</span><br><span class="line">  var hexcase = 0;  /* hex output format. 0 - lowercase; 1 - uppercase        */</span><br><span class="line">  var b64pad  = &quot;&quot;; /* base-64 pad character. &quot;=&quot; for strict RFC compliance   */</span><br><span class="line">  var chrsz   = 8;  /* bits per input character. 8 - ASCII; 16 - Unicode      */</span><br><span class="line">  </span><br><span class="line">  /*</span><br><span class="line">   * These are the functions you&#x27;ll usually want to call</span><br><span class="line">   * They take string arguments and return either hex or base-64 encoded strings</span><br><span class="line">   */</span><br><span class="line">  function hex_md5(s)&#123; return binl2hex(core_md5(str2binl(s), s.length * chrsz));&#125;</span><br><span class="line">  function b64_md5(s)&#123; return binl2b64(core_md5(str2binl(s), s.length * chrsz));&#125;</span><br><span class="line">  function str_md5(s)&#123; return binl2str(core_md5(str2binl(s), s.length * chrsz));&#125;</span><br><span class="line">  function hex_hmac_md5(key, data) &#123; return binl2hex(core_hmac_md5(key, data)); &#125;</span><br><span class="line">  function b64_hmac_md5(key, data) &#123; return binl2b64(core_hmac_md5(key, data)); &#125;</span><br><span class="line">  function str_hmac_md5(key, data) &#123; return binl2str(core_hmac_md5(key, data)); &#125;</span><br><span class="line">  </span><br><span class="line">  /*</span><br><span class="line">   * Perform a simple self-test to see if the VM is working</span><br><span class="line">   */</span><br><span class="line">  function md5_vm_test()</span><br><span class="line">  &#123;</span><br><span class="line">    return hex_md5(&quot;abc&quot;) == &quot;900150983cd24fb0d6963f7d28e17f72&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  /*</span><br><span class="line">   * Calculate the MD5 of an array of little-endian words, and a bit length</span><br><span class="line">   */</span><br><span class="line">  function core_md5(x, len)</span><br><span class="line">  &#123;</span><br><span class="line">    /* append padding */</span><br><span class="line">    x[len &gt;&gt; 5] |= 0x80 &lt;&lt; ((len) % 32);</span><br><span class="line">    x[(((len + 64) &gt;&gt;&gt; 9) &lt;&lt; 4) + 14] = len;</span><br><span class="line">  </span><br><span class="line">    var a =  1732584193;</span><br><span class="line">    var b = -271733879;</span><br><span class="line">    var c = -1732584194;</span><br><span class="line">    var d =  271733878;</span><br><span class="line">  </span><br><span class="line">    for(var i = 0; i &lt; x.length; i += 16)</span><br><span class="line">    &#123;</span><br><span class="line">      var olda = a;</span><br><span class="line">      var oldb = b;</span><br><span class="line">      var oldc = c;</span><br><span class="line">      var oldd = d;</span><br><span class="line">  </span><br><span class="line">      a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);</span><br><span class="line">      d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);</span><br><span class="line">      c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);</span><br><span class="line">      b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);</span><br><span class="line">      a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);</span><br><span class="line">      d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);</span><br><span class="line">      c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);</span><br><span class="line">      b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);</span><br><span class="line">      a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);</span><br><span class="line">      d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);</span><br><span class="line">      c = md5_ff(c, d, a, b, x[i+10], 17, -42063);</span><br><span class="line">      b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);</span><br><span class="line">      a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);</span><br><span class="line">      d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);</span><br><span class="line">      c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);</span><br><span class="line">      b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);</span><br><span class="line">  </span><br><span class="line">      a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);</span><br><span class="line">      d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);</span><br><span class="line">      c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);</span><br><span class="line">      b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);</span><br><span class="line">      a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);</span><br><span class="line">      d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);</span><br><span class="line">      c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);</span><br><span class="line">      b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);</span><br><span class="line">      a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);</span><br><span class="line">      d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);</span><br><span class="line">      c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);</span><br><span class="line">      b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);</span><br><span class="line">      a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);</span><br><span class="line">      d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);</span><br><span class="line">      c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);</span><br><span class="line">      b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);</span><br><span class="line">  </span><br><span class="line">      a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);</span><br><span class="line">      d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);</span><br><span class="line">      c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);</span><br><span class="line">      b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);</span><br><span class="line">      a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);</span><br><span class="line">      d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);</span><br><span class="line">      c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);</span><br><span class="line">      b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);</span><br><span class="line">      a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);</span><br><span class="line">      d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);</span><br><span class="line">      c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);</span><br><span class="line">      b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);</span><br><span class="line">      a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);</span><br><span class="line">      d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);</span><br><span class="line">      c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);</span><br><span class="line">      b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);</span><br><span class="line">  </span><br><span class="line">      a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);</span><br><span class="line">      d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);</span><br><span class="line">      c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);</span><br><span class="line">      b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);</span><br><span class="line">      a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);</span><br><span class="line">      d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);</span><br><span class="line">      c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);</span><br><span class="line">      b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);</span><br><span class="line">      a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);</span><br><span class="line">      d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);</span><br><span class="line">      c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);</span><br><span class="line">      b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);</span><br><span class="line">      a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);</span><br><span class="line">      d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);</span><br><span class="line">      c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);</span><br><span class="line">      b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);</span><br><span class="line">  </span><br><span class="line">      a = safe_add(a, olda);</span><br><span class="line">      b = safe_add(b, oldb);</span><br><span class="line">      c = safe_add(c, oldc);</span><br><span class="line">      d = safe_add(d, oldd);</span><br><span class="line">    &#125;</span><br><span class="line">    return Array(a, b, c, d);</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  /*</span><br><span class="line">   * These functions implement the four basic operations the algorithm uses.</span><br><span class="line">   */</span><br><span class="line">  function md5_cmn(q, a, b, x, s, t)</span><br><span class="line">  &#123;</span><br><span class="line">    return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);</span><br><span class="line">  &#125;</span><br><span class="line">  function md5_ff(a, b, c, d, x, s, t)</span><br><span class="line">  &#123;</span><br><span class="line">    return md5_cmn((b &amp; c) | ((~b) &amp; d), a, b, x, s, t);</span><br><span class="line">  &#125;</span><br><span class="line">  function md5_gg(a, b, c, d, x, s, t)</span><br><span class="line">  &#123;</span><br><span class="line">    return md5_cmn((b &amp; d) | (c &amp; (~d)), a, b, x, s, t);</span><br><span class="line">  &#125;</span><br><span class="line">  function md5_hh(a, b, c, d, x, s, t)</span><br><span class="line">  &#123;</span><br><span class="line">    return md5_cmn(b ^ c ^ d, a, b, x, s, t);</span><br><span class="line">  &#125;</span><br><span class="line">  function md5_ii(a, b, c, d, x, s, t)</span><br><span class="line">  &#123;</span><br><span class="line">    return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  /*</span><br><span class="line">   * Calculate the HMAC-MD5, of a key and some data</span><br><span class="line">   */</span><br><span class="line">  function core_hmac_md5(key, data)</span><br><span class="line">  &#123;</span><br><span class="line">    var bkey = str2binl(key);</span><br><span class="line">    if(bkey.length &gt; 16) bkey = core_md5(bkey, key.length * chrsz);</span><br><span class="line">  </span><br><span class="line">    var ipad = Array(16), opad = Array(16);</span><br><span class="line">    for(var i = 0; i &lt; 16; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      ipad[i] = bkey[i] ^ 0x36363636;</span><br><span class="line">      opad[i] = bkey[i] ^ 0x5C5C5C5C;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    var hash = core_md5(ipad.concat(str2binl(data)), 512 + data.length * chrsz);</span><br><span class="line">    return core_md5(opad.concat(hash), 512 + 128);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  /*</span><br><span class="line">   * Add integers, wrapping at 2^32. This uses 16-bit operations internally</span><br><span class="line">   * to work around bugs in some JS interpreters.</span><br><span class="line">   */</span><br><span class="line">  function safe_add(x, y)</span><br><span class="line">  &#123;</span><br><span class="line">    var lsw = (x &amp; 0xFFFF) + (y &amp; 0xFFFF);</span><br><span class="line">    var msw = (x &gt;&gt; 16) + (y &gt;&gt; 16) + (lsw &gt;&gt; 16);</span><br><span class="line">    return (msw &lt;&lt; 16) | (lsw &amp; 0xFFFF);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  /*</span><br><span class="line">   * Bitwise rotate a 32-bit number to the left.</span><br><span class="line">   */</span><br><span class="line">  function bit_rol(num, cnt)</span><br><span class="line">  &#123;</span><br><span class="line">    return (num &lt;&lt; cnt) | (num &gt;&gt;&gt; (32 - cnt));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  /*</span><br><span class="line">   * Convert a string to an array of little-endian words</span><br><span class="line">   * If chrsz is ASCII, characters &gt;255 have their hi-byte silently ignored.</span><br><span class="line">   */</span><br><span class="line">  function str2binl(str)</span><br><span class="line">  &#123;</span><br><span class="line">    var bin = Array();</span><br><span class="line">    var mask = (1 &lt;&lt; chrsz) - 1;</span><br><span class="line">    for(var i = 0; i &lt; str.length * chrsz; i += chrsz)</span><br><span class="line">      bin[i&gt;&gt;5] |= (str.charCodeAt(i / chrsz) &amp; mask) &lt;&lt; (i%32);</span><br><span class="line">    return bin;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  /*</span><br><span class="line">   * Convert an array of little-endian words to a string</span><br><span class="line">   */</span><br><span class="line">  function binl2str(bin)</span><br><span class="line">  &#123;</span><br><span class="line">    var str = &quot;&quot;;</span><br><span class="line">    var mask = (1 &lt;&lt; chrsz) - 1;</span><br><span class="line">    for(var i = 0; i &lt; bin.length * 32; i += chrsz)</span><br><span class="line">      str += String.fromCharCode((bin[i&gt;&gt;5] &gt;&gt;&gt; (i % 32)) &amp; mask);</span><br><span class="line">    return str;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  /*</span><br><span class="line">   * Convert an array of little-endian words to a hex string.</span><br><span class="line">   */</span><br><span class="line">  function binl2hex(binarray)</span><br><span class="line">  &#123;</span><br><span class="line">    var hex_tab = hexcase ? &quot;0123456789ABCDEF&quot; : &quot;0123456789abcdef&quot;;</span><br><span class="line">    var str = &quot;&quot;;</span><br><span class="line">    for(var i = 0; i &lt; binarray.length * 4; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      str += hex_tab.charAt((binarray[i&gt;&gt;2] &gt;&gt; ((i%4)*8+4)) &amp; 0xF) +</span><br><span class="line">             hex_tab.charAt((binarray[i&gt;&gt;2] &gt;&gt; ((i%4)*8  )) &amp; 0xF);</span><br><span class="line">    &#125;</span><br><span class="line">    return str;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  /*</span><br><span class="line">   * Convert an array of little-endian words to a base-64 string</span><br><span class="line">   */</span><br><span class="line">  function binl2b64(binarray)</span><br><span class="line">  &#123;</span><br><span class="line">    var tab = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;;</span><br><span class="line">    var str = &quot;&quot;;</span><br><span class="line">    for(var i = 0; i &lt; binarray.length * 4; i += 3)</span><br><span class="line">    &#123;</span><br><span class="line">      var triplet = (((binarray[i   &gt;&gt; 2] &gt;&gt; 8 * ( i   %4)) &amp; 0xFF) &lt;&lt; 16)</span><br><span class="line">                  | (((binarray[i+1 &gt;&gt; 2] &gt;&gt; 8 * ((i+1)%4)) &amp; 0xFF) &lt;&lt; 8 )</span><br><span class="line">                  |  ((binarray[i+2 &gt;&gt; 2] &gt;&gt; 8 * ((i+2)%4)) &amp; 0xFF);</span><br><span class="line">      for(var j = 0; j &lt; 4; j++)</span><br><span class="line">      &#123;</span><br><span class="line">        if(i * 8 + j * 6 &gt; binarray.length * 32) str += b64pad;</span><br><span class="line">        else str += tab.charAt((triplet &gt;&gt; 6*(3-j)) &amp; 0x3F);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return str;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后我们在index中引用</p></li><li><pre><code class="html">&lt;!--  md5工具类--&gt;&lt;script src=&quot;&lt;%= BASE_URL %&gt;static/js/md5.js&quot;&gt;&lt;/script&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后再big-file中就可以使用了，再uploadFile中增加</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  //生成文件标识，标识多次上传的是不是同一文件</span><br><span class="line">  let key = hex_md5(file);</span><br><span class="line">  let key10 = parseInt(key,16);</span><br><span class="line">  let key62 = Tool._10to62(key10);</span><br><span class="line">  console.log(key,key10,key62)</span><br><span class="line">  //表单增加key</span><br><span class="line">  formData.append(&#x27;key&#x27;, key62);</span><br></pre></td></tr></table></figure></code></pre></li><li><p>对于Tool._10to62方法，我们在tool中增加</p></li><li><pre><code class="js">/** * 10进制转62进制 * @param number * @returns &#123;string&#125; * @private */_10to62: function (number) &#123;    let chars = &#39;0123456789abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ&#39;;    let radix = chars.length;    let arr = [];    do &#123;        let mod = number % radix;        number = (number - mod) / radix;        arr.unshift(chars[mod]);    &#125; while (number);    return arr.join(&#39;&#39;);&#125;,<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在UploadController增加String key参数，将自定义参数key删了</span><br><span class="line"></span><br><span class="line">大文件断点续传与极速秒传：根据文件标识来新增或修改文件记录，修改分片索引从1开始</span><br><span class="line"></span><br><span class="line">- 实际使用场景中，一个文件太大，当第一次上传一半，失败了。第二次再上传时，有可能隔了一天或更久</span><br><span class="line"></span><br><span class="line">- 我们对FileService进行修改</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  //增加方法</span><br><span class="line">  public File selectByKet(String key)&#123;</span><br><span class="line">      FileExample example = new FileExample();</span><br><span class="line">      example.createCriteria().andKeyEqualTo(key);</span><br><span class="line">      List&lt;File&gt; fileList = fileMapper.selectByExample(example);</span><br><span class="line">      if(CollectionUtils.isEmpty(fileList))&#123;</span><br><span class="line">          return null;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">          return fileList.get(0);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  //使用方法</span><br><span class="line">  public void save(FileDto fileDto)&#123;</span><br><span class="line">          File file = CopyUtil.copy(fileDto, File.class);</span><br><span class="line">          File fileDb = selectByKet(fileDto.getKey());</span><br><span class="line">          if(fileDb == null)&#123;</span><br><span class="line">              this.insert(file);</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">              fileDb.setShardIndex(fileDb.getShardIndex());</span><br><span class="line">              this.update(fileDb);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>big-file中也进行修改，1标识第一个分片</p></li><li><pre><code class="vue">let shardIndex = 1;//分片索引 1标识第一个分片let start = (shardIndex-1) * shardSize;//当前分片起始位置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## **9-3 分片上传功能开发2** </span><br><span class="line"></span><br><span class="line">分片数据格式转换，统一系统前后端数据交互传参：1.大文件断点续传与极速秒传：分片数据改成base64进行传输，后端统一用RequestBody接收数据</span><br><span class="line"></span><br><span class="line">- 将file类型转换成String有一个方法就是base64</span><br><span class="line"></span><br><span class="line">- 首先在big-file中的uploadFile方法增加</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  let fileReader = new FileReader();</span><br><span class="line">    fileReader.onload = function (e)&#123;//当读分片数据时就会触发onload事件监听</span><br><span class="line">      let base64 = e.target.result;</span><br><span class="line">  </span><br><span class="line">      let param = &#123;//就可以将上面append那些注释掉了</span><br><span class="line">        &#x27;shard&#x27;:base64,</span><br><span class="line">        &#x27;shardIndex&#x27;: shardIndex,</span><br><span class="line">        &#x27;shardSize&#x27;: shardSize,</span><br><span class="line">        &#x27;shardTotal&#x27;: shardTotal,</span><br><span class="line">        &#x27;use&#x27;: _this.use,</span><br><span class="line">        &#x27;name&#x27;: file.name,</span><br><span class="line">        &#x27;suffix&#x27;: suffix,</span><br><span class="line">        &#x27;size&#x27;: size,</span><br><span class="line">        &#x27;key&#x27;: key62</span><br><span class="line">      &#125;;</span><br><span class="line">      Loading.show();</span><br><span class="line">      _this.$ajax.post(process.env.VUE_APP_SERVER + &#x27;/file/admin/upload&#x27;, param).then((response)=&gt;&#123;</span><br><span class="line">        Loading.hide();</span><br><span class="line">        let resp = response.data;</span><br><span class="line">        console.log(&quot;上传文件成功：&quot;, resp);</span><br><span class="line">        _this.afterUpload(resp);</span><br><span class="line">        $(&quot;#&quot; + _this.inputId + &quot;-input&quot;).val(&quot;&quot;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    fileReader.readAsDataURL(fileShard);//这个方法去读分片数据</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></code></pre></li><li><p>这时我们就可以在UploadController中将参数改了</p></li><li><pre><code class="java">public ResponseDto upload(@RequestBody FileDto fileDto) //删除一些东西//FileDto fileDto = new FileDto();fileDto.setPath(path);//fileDto.setName(name);//fileDto.setSize(size);//fileDto.setSuffix(suffix);//fileDto.setUse(use);//fileDto.setShardIndex(shardIndex);//fileDto.setSize(shardSize);//.setShardTotal(shardTotal);//fileDto.setKey(key);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 记得在FileDto中增加，生成方法和tostring</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  /**</span><br><span class="line">   *base64</span><br><span class="line">   */</span><br><span class="line">  private  String shard;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>这时有四个变量没有定义我们将他们定义成本地变量<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/16/C4YgUfzwObcGJpv.png"                      alt="image-20220316095352944"                ></p></li><li><pre><code>String use = fileDto.getUse();String key = fileDto.getKey();String suffix = fileDto.getSuffix();String shardBase64 = fileDto.getShard();<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 这时我还有一处报错，因为现在的shard是String类型，我们还要把string类型转成MultipartFile，所以我们将shard名改为shardBase64，不使用同一名称。![image-20220316095802234](https://s2.loli.net/2022/03/16/jSm7NtLEnKZDcIo.png)</span><br><span class="line"></span><br><span class="line">- 我们在util增加Base64ToMultipartFile类</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.course.server.util;</span><br><span class="line">  </span><br><span class="line">  import org.springframework.web.multipart.MultipartFile;</span><br><span class="line">  import sun.misc.BASE64Decoder;</span><br><span class="line">  </span><br><span class="line">  import java.io.*;</span><br><span class="line">  </span><br><span class="line">  public class Base64ToMultipartFile implements MultipartFile &#123;</span><br><span class="line">  </span><br><span class="line">      private final byte[] imgContent;</span><br><span class="line">      private final String header;</span><br><span class="line">  </span><br><span class="line">      public Base64ToMultipartFile(byte[] imgContent, String header) &#123;</span><br><span class="line">          this.imgContent = imgContent;</span><br><span class="line">          this.header = header.split(&quot;;&quot;)[0];</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      public String getName() &#123;</span><br><span class="line">          // TODO - implementation depends on your requirements</span><br><span class="line">          return System.currentTimeMillis() + Math.random() + &quot;.&quot; + header.split(&quot;/&quot;)[1];</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      public String getOriginalFilename() &#123;</span><br><span class="line">          // TODO - implementation depends on your requirements</span><br><span class="line">          return System.currentTimeMillis() + (int) Math.random() * 10000 + &quot;.&quot; + header.split(&quot;/&quot;)[1];</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      public String getContentType() &#123;</span><br><span class="line">          // TODO - implementation depends on your requirements</span><br><span class="line">          return header.split(&quot;:&quot;)[1];</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      public boolean isEmpty() &#123;</span><br><span class="line">          return imgContent == null || imgContent.length == 0;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      public long getSize() &#123;</span><br><span class="line">          return imgContent.length;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      public byte[] getBytes() throws IOException &#123;</span><br><span class="line">          return imgContent;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      public InputStream getInputStream() throws IOException &#123;</span><br><span class="line">          return new ByteArrayInputStream(imgContent);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      public void transferTo(File dest) throws IOException, IllegalStateException &#123;</span><br><span class="line">          new FileOutputStream(dest).write(imgContent);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public static MultipartFile base64ToMultipart(String base64) &#123;</span><br><span class="line">          try &#123;</span><br><span class="line">              String[] baseStrs = base64.split(&quot;,&quot;);</span><br><span class="line">  </span><br><span class="line">              BASE64Decoder decoder = new BASE64Decoder();</span><br><span class="line">              byte[] b = new byte[0];</span><br><span class="line">              b = decoder.decodeBuffer(baseStrs[1]);</span><br><span class="line">  </span><br><span class="line">              for(int i = 0; i &lt; b.length; ++i) &#123;</span><br><span class="line">                  if (b[i] &lt; 0) &#123;</span><br><span class="line">                      b[i] += 256;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">  </span><br><span class="line">              return new Base64ToMultipartFile(b, baseStrs[0]);</span><br><span class="line">          &#125; catch (IOException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">              return null;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>最后我们在UploadController使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MultipartFile</span> <span class="variable">shard</span> <span class="operator">=</span> Base64ToMultipartFile.base64ToMultipart(shardBase64);</span><br></pre></td></tr></table></figure></li><li><p>base64格式：文件说明+“+文件内容</p></li><li><p>将文件转成base64进行传输，优势是变成了常见的字符串类型，劣势是传输的数据会变大</p></li></ul><p>设置分片文件名:</p><ul><li><p>小提示：当字符串拼接个数大多时，不要使用+，而是使用StringBuffer</p></li><li><pre><code class="java">//String path = dir + File.separator + key + &quot;.&quot; + suffix+ &quot;.&quot; +fileDto.getShardIndex();String path = new StringBuffer(dir)        .append(File.separator)        .append(key)        .append(&quot;.&quot;)        .append(suffix)        .append(&quot;.&quot;)        .append(fileDto.getShardIndex()).toString();<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">支持连续上传多个分片:</span><br><span class="line"></span><br><span class="line">- 在上传结束时，做个判断，如果shardlndex==shardTotal，表示所有分片都上传完成了,如果shardindex&lt;shardTotal，继续上传下一个分片。以下在big-file中进行</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  if (shardIndex &lt; shardTotal) &#123;</span><br><span class="line">    // 上传下一个分片</span><br><span class="line">    param.shardIndex = param.shardIndex + 1;</span><br><span class="line">    _this.upload(param);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    _this.afterUpload(resp);</span><br><span class="line">    $(&quot;#&quot; + _this.inputId + &quot;-input&quot;).val(&quot;&quot;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>递归，不断的重复做某一件事（上传分片），直到某个条件成立（shardlndex&#x3D;&#x3D;shardTotal），退出重复做的事。</p></li><li><p>然后将代码重构</p></li><li><p>&#96;&#96;&#96;vue<br>&#x2F;**</p><ul><li>将分片数据转成base64进行上传</li></ul><p> *&#x2F;<br>upload (param) {<br>  let _this &#x3D; this;<br>  let shardIndex &#x3D; param.shardIndex;<br>  let shardTotal &#x3D; param.shardTotal;<br>  let shardSize &#x3D; param.shardSize;<br>  let fileShard &#x3D; _this.getFileShard(shardIndex, shardSize);<br>  &#x2F;&#x2F; 将图片转为base64进行传输<br>  let fileReader &#x3D; new FileReader();</p><p>  fileReader.onload &#x3D; function (e) {<br>    let base64 &#x3D; e.target.result;<br>    &#x2F;&#x2F; console.log(“base64:”, base64);</p><pre><code>param.shard = base64;Loading.show();_this.$ajax.post(process.env.VUE_APP_SERVER + &#39;/file/admin/upload&#39;, param).then((response) =&gt; &#123;  Loading.hide();  let resp = response.data;  console.log(&quot;上传文件成功：&quot;, resp);  if (shardIndex &lt; shardTotal) &#123;    // 上传下一个分片    param.shardIndex = param.shardIndex + 1;    _this.upload(param);  &#125; else &#123;    _this.afterUpload(resp);    $(&quot;#&quot; + _this.inputId + &quot;-input&quot;).val(&quot;&quot;);  &#125;&#125;);</code></pre><p>  };<br>  fileReader.readAsDataURL(fileShard);<br>},</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  getFileShard (shardIndex, shardSize) &#123;</span><br><span class="line">    let _this = this;</span><br><span class="line">    let file = _this.$refs.file.files[0];</span><br><span class="line">    let start = (shardIndex - 1) * shardSize;  //当前分片起始位置</span><br><span class="line">    let end = Math.min(file.size, start + shardSize); //当前分片结束位置</span><br><span class="line">    let fileShard = file.slice(start, end); //从文件中截取当前的分片数据</span><br><span class="line">    return fileShard;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li></ul><h2 id="9-4-分片合并功能开发"><a href="#9-4-分片合并功能开发" class="headerlink" title="9-4 分片合并功能开发"></a>9-4 分片合并功能开发</h2><p>按分片顺序合并成原始文件：</p><ul><li><p>保存到本地的分片名是xxx.mp4.1，但是我们返给前端和保存进数据库的path都用xxx.mp4</p></li><li><p>UploadController首先我们先修改下路径，一个文件带多余后缀的，一个不带的</p></li><li><pre><code class="java">String path = new StringBuffer(dir)        .append(File.separator)        .append(key)        .append(&quot;.&quot;)        .append(suffix)        .toString();String localPath = new StringBuffer(path)        .append(&quot;.&quot;)        .append(fileDto.getShardIndex()).toString();String fullPath = FILE_PATH + localPath;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后我们想要将分片合并，这时我们就要判断分片是不是最后一个分片，如果是就调用本地方法merge</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  if(fileDto.getShardIndex().equals(fileDto.getShardTotal()) )&#123;//因为是一个对象所以用equals</span><br><span class="line">      this.merge(fileDto);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>最后修改merge</p></li><li><p>&#96;&#96;&#96;java<br>public void merge(FileDto fileDto) throws Exception {<br>    LOG.info(“合并分片开始”);<br>    String path &#x3D; fileDto.getPath();&#x2F;&#x2F;这个是全路径，我们只需要绝对路径<br><br>    path &#x3D; path.replace(FILE_DOMAIN,””);<br>    Integer ShardTotal &#x3D; fileDto.getShardTotal();<br>    File newFile &#x3D; new File(FILE_PATH + path);<br>    &#x2F;&#x2F;FileOutputStream outputStream &#x3D; new FileOutputStream(newFile, true);&#x2F;&#x2F;文件追加写入<br>    &#x2F;&#x2F;FileInputStream fileInputStream &#x3D; null;&#x2F;&#x2F;分片文件<br>   &#x2F;&#x2F; byte[] byt &#x3D; new byte[10 * 1024 * 1024];<br>   &#x2F;&#x2F; int len;<br>   &#x2F;&#x2F; try {<br>        for (int i &#x3D; 0; i &lt; shardTotal; i++) {<br>            &#x2F;&#x2F;读取第i个分片<br>            fileInputStream &#x3D; new FileInputStream(new File(FILE_PATH + path+”.”+(i+1)));<br>            while ((len &#x3D; fileInputStream.read(byt)) !&#x3D; -1) {<br>                outputStream.write(byt, 0, len);<br>            }<br>        }<br>   &#x2F;&#x2F; }catch (IOException e){<br>        &#x2F;&#x2F;LOG.error(“分片异常”,e);<br>    &#x2F;&#x2F;}finally {<br>       &#x2F;&#x2F; try {<br>          &#x2F;&#x2F;  if(fileInputStream!&#x3D;null){<br>           &#x2F;&#x2F;     fileInputStream.close();<br>          &#x2F;&#x2F;  }<br>          &#x2F;&#x2F;  outputStream.close();<br>          &#x2F;&#x2F;  LOG.info(“IO流关闭”);<br>&#x2F;&#x2F;}catch (Exception e){<br>           &#x2F;&#x2F; LOG.error(“IO流关闭”,e);<br>        }<br>    }<br>    LOG.info(“合并分片结束”);<br>}<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">合并完成后删除多余分片:1.大文件断点续传与极速秒传：合并成原始文件后，删除所有分片</span><br><span class="line"></span><br><span class="line">- 就是在合并分片结束后加一个删除分片</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  System.gc();</span><br><span class="line">  //删除分片</span><br><span class="line">  LOG.info(&quot;删除分片开始&quot;);</span><br><span class="line">  for (int i = 0; i &lt; shardTotal; i++) &#123;</span><br><span class="line">      String filePath = FILE_PATH+path+&quot;.&quot;+(i+1);</span><br><span class="line">      File file = new File(filePath);</span><br><span class="line">      boolean result = file.delete();</span><br><span class="line">      LOG.info(&quot;删除&#123;&#125;,&#123;&#125;&quot;,filePath,result?&quot;成功&quot; : &quot;失败&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  LOG.info(&quot;删除分片结束&quot;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="9-5-分片检查与极速秒传"><a href="#9-5-分片检查与极速秒传" class="headerlink" title="9-5 分片检查与极速秒传"></a>9-5 分片检查与极速秒传</h2><p>上传分片之前先进行分片检查：1.大文件断点续传与极速秒传：上传分片之前先进行分片检查，支持断点续传</p><ul><li><p>开始上传之前，先检查资源率当前的文件是否上传过了（数据库是否有记录），如果上传过了，已经传到第几个分片了。</p></li><li><p>首先在FileService中增加方法</p></li><li><pre><code class="java">/** * 根据文件标识查询数据库记录 */public FileDto findByKey(String key)&#123;    return CopyUtil.copy(selectByKet(key),FileDto.class);&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后再UploadController中使用</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  @GetMapping(&quot;/check/&#123;key&#125;&quot;)</span><br><span class="line">  public  ResponseDto check(@PathVariable String key)&#123;</span><br><span class="line">      LOG.info(&quot;减产上传分片开始：&#123;&#125;&quot;,key);</span><br><span class="line">      ResponseDto responseDto = new ResponseDto();</span><br><span class="line">      FileDto fileDto = fileService.findByKey(key);</span><br><span class="line">      responseDto.setContent(fileDto);</span><br><span class="line">      return  responseDto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>最后修改big-file将uploadFile方法中的_this.upload改为  _this.check(param);增加check方法</p></li><li><pre><code class="vue">/** * 检查文件状态，是否已上传过？上传到第几个分片？ */check(param)&#123;  let _this =this;  _this.$ajax.get(process.env.VUE_APP_SERVER + &#39;/file/admin/check/&#39;+param.key).then((response)=&gt;&#123;    let resp = response.data;    if (resp.success)&#123;      let obj = resp.content;      if (!obj)&#123;        param.shardIndex = 1;        console.log(&quot;没有找到文件记录，从分片1开始上传&quot;);        _this.upload(param);      &#125;else&#123;        param.shardIndex = obj.shardIndex+1;        console.log(&quot;找到文件记录，从分片&quot;+param.shardIndex+&quot;开始上传&quot;);        _this.upload(param);      &#125;    &#125;else&#123;      Toast.warning(&quot;文件上传失败&quot;);      $(&quot;#&quot;+_this.inputId+&quot;-input&quot;).val(&quot;&quot;);    &#125;  &#125;)&#125;,<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">极速秒传：就是检查是否已经上传过了文件，如果上传过了就显示极速秒传</span><br><span class="line"></span><br><span class="line">- 首先再big-file中的check增加代码</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  /**</span><br><span class="line">   * 检查文件状态，是否已上传过？上传到第几个分片？</span><br><span class="line">   */</span><br><span class="line">  check(param)&#123;</span><br><span class="line">    let _this =this;</span><br><span class="line">    _this.$ajax.get(process.env.VUE_APP_SERVER + &#x27;/file/admin/check/&#x27;+param.key).then((respond)=&gt;&#123;</span><br><span class="line">      let resp = respond.data;</span><br><span class="line">      if (resp.success)&#123;</span><br><span class="line">        let obj = resp.content;</span><br><span class="line">        if (!obj)&#123;</span><br><span class="line">          param.shardIndex = 1;</span><br><span class="line">          console.log(&quot;没有找到文件记录，从分片1开始上传&quot;);</span><br><span class="line">          _this.upload(param);</span><br><span class="line">        &#125;else if(obj.shardIndex === obj.shardTotal)&#123;//增加这行</span><br><span class="line">          Toast.success(&quot;文件极速秒传成功！&quot;);</span><br><span class="line">          _this.afterUpload(resp);</span><br><span class="line">          $(&quot;#&quot;+_this.inputId+&quot;-input&quot;).val(&quot;&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          param.shardIndex = obj.shardIndex+1;</span><br><span class="line">          console.log(&quot;找到文件记录，从分片&quot;+param.shardIndex+&quot;开始上传&quot;);</span><br><span class="line">          _this.upload(param);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        Toast.warning(&quot;文件上传失败&quot;);</span><br><span class="line">        $(&quot;#&quot;+_this.inputId+&quot;-input&quot;).val(&quot;&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></code></pre></li><li><p>再UploadController中增加,返回前端的应该是全路径</p></li><li><pre><code>public  ResponseDto check(@PathVariable String key)&#123;    LOG.info(&quot;减产上传分片开始：&#123;&#125;&quot;,key);    ResponseDto responseDto = new ResponseDto();    FileDto fileDto = fileService.findByKey(key);    if(fileDto != null)&#123;//增加这个        fileDto.setPath(FILE_DOMAIN+fileDto.getPath());    &#125;    responseDto.setContent(fileDto);    return  responseDto;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">增加上传进度条：</span><br><span class="line"></span><br><span class="line">- 可以做成vue组件，也可以做成is工具类，做成vue组件的话，就只能在vue框架中使用，做成js组件的话可以在isp页面、thymelea模板页面、angular等前端框架中直接使用。</span><br><span class="line"></span><br><span class="line">- progress-div显示的进度条，progress-overlay：背景遮罩，将页面所有的元素挡住，不可点击任何地方，常用于防止重复提交。</span><br><span class="line"></span><br><span class="line">- 做成is全局工具类，可以直接使用，不需要import</span><br><span class="line"></span><br><span class="line">- 首先再js中创建Progress.js代码</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  Progress = &#123;</span><br><span class="line">    show: function (width) &#123;</span><br><span class="line">      let _this = this;</span><br><span class="line">      _this.width = width;</span><br><span class="line">      if ($(&quot;#progress-div&quot;).length &gt; 0) &#123;</span><br><span class="line">        $(&quot;.progress&quot;).attr(&quot;data-percent&quot;, width);</span><br><span class="line">        $(&quot;.progress-bar&quot;).width(width + &quot;%&quot;);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        let progressDiv = &quot;&lt;div id=\&quot;progress-div\&quot; style=\&quot;z-index: 10011;\n&quot; +</span><br><span class="line">          &quot;    position: fixed;\n&quot; +</span><br><span class="line">          &quot;    padding: 10px;\n&quot; +</span><br><span class="line">          &quot;    margin: 0px 0px 0px -150px;\n&quot; +</span><br><span class="line">          &quot;    width: 300px;\n&quot; +</span><br><span class="line">          &quot;    top: 40%;\n&quot; +</span><br><span class="line">          &quot;    left: 50%;\n&quot; +</span><br><span class="line">          &quot;    text-align: center;\n&quot; +</span><br><span class="line">          &quot;    height: 45px;\n&quot; +</span><br><span class="line">          &quot;    color: rgb(0, 0, 0);\n&quot; +</span><br><span class="line">          &quot;    border: 3px solid rgb(170, 170, 170);\n&quot; +</span><br><span class="line">          &quot;    background-color: rgb(255, 255, 255);\n&quot; +</span><br><span class="line">          &quot;    cursor: wait;\&quot;&gt;&lt;div class=\&quot;progress pos-rel\&quot; data-percent=\&quot;&quot; + width + &quot;%\&quot;&gt;&lt;div class=\&quot;progress-bar\&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&quot;;</span><br><span class="line">        $(&quot;#progress-div&quot;).remove();</span><br><span class="line">        $(&quot;body&quot;).append(progressDiv);</span><br><span class="line">  </span><br><span class="line">        // 背景遮罩</span><br><span class="line">        $(&quot;body&quot;).append($(&quot;&lt;div id=\&quot;progress-overlay\&quot; style=\&quot;z-index: 10010;\n&quot; +</span><br><span class="line">          &quot;  border: none;\n&quot; +</span><br><span class="line">          &quot;  margin: 0px;\n&quot; +</span><br><span class="line">          &quot;  padding: 0px;\n&quot; +</span><br><span class="line">          &quot;  width: 100%;\n&quot; +</span><br><span class="line">          &quot;  height: 100%;\n&quot; +</span><br><span class="line">          &quot;  top: 0px;\n&quot; +</span><br><span class="line">          &quot;  left: 0px;\n&quot; +</span><br><span class="line">          &quot;  background-color: rgb(0, 0, 0);\n&quot; +</span><br><span class="line">          &quot;  opacity: 0.6;\n&quot; +</span><br><span class="line">          &quot;  cursor: wait;\n&quot; +</span><br><span class="line">          &quot;  position: fixed;\&quot;&gt;&lt;/div&gt;&quot;));</span><br><span class="line">        $(&quot;.progress-bar&quot;).width(width + &quot;%&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">    &#125;,</span><br><span class="line">  </span><br><span class="line">    hide: function () &#123;</span><br><span class="line">      setTimeout(function () &#123;</span><br><span class="line">        $(&quot;#progress-div&quot;).remove();</span><br><span class="line">        $(&quot;#progress-overlay&quot;).remove();</span><br><span class="line">      &#125;, 1000);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后再index中引入</p></li><li><p>&#96;&#96;&#96;html</p><!--  进度条  --><script src="<%= BASE_URL %>static/js/progress.js"></script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在big-file中使用</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  Progress.show(parseInt((shardIndex-1)*100/shardTotal));</span><br><span class="line">  console.log(&quot;上传文件成功：&quot;, resp);</span><br><span class="line">  Progress.show(parseInt((shardIndex)*100/shardTotal));</span><br><span class="line">  Progress.hide(); </span><br></pre></td></tr></table></figure></li></ul><p>大文件断点续传与极速秒传：讲师师头像和课程封面改用大文件组件：</p><ul><li><p>就是将teacher和course中file改为big-file，并且将大组件引入。</p></li><li><p>我们还将改下big-file中，hex_md5中的参数，如果直接传入file，所得的md5永远都是一个值，因为这样相当于传入一个空数组</p></li><li><pre><code class="vue">//生成文件标识，标识多次上传的是不是同一文件let key = hex_md5(file.name+file.size+file.type);let key10 = parseInt(key,16);let key62 = Tool._10to62(key10);console.log(key,key10,key62);console.log(hex_md5(Array()));<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 9-6 文件上传流程图</span><br><span class="line"></span><br><span class="line">![](https://s2.loli.net/2022/03/18/8Bxg3WM5t1rqkzK.png)</span><br><span class="line"></span><br><span class="line">![image-20220317112616569](https://s2.loli.net/2022/03/18/ZgeIuThVN6wrXOD.png)</span><br><span class="line"></span><br><span class="line">![](https://s2.loli.net/2022/03/18/ZgeIuThVN6wrXOD.png)</span><br><span class="line"></span><br><span class="line"># 第10章 基于阿里云OSS的文件上传</span><br><span class="line"></span><br><span class="line">在线视频课程的核心内容就是视频，保障视频不外泄是程序的重中之重，所以我们需要对视频做加密处理，本章我们选择阿里云视频加密，阿里云视频点播是对OSS的包装，支持防盗链和视频加密。</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">## 10-1 阿里云OSS简介</span><br><span class="line"></span><br><span class="line">- 前面介绍的文件上传是基于本地文件服务器的文件上传，但是自己搭文件服务器会有很多运维的问题，比如磁盘满了要扩容，高峰期要增加带宽，低谷期要减少带宽，为了安全，我们还要对文件做备份等等所以一般会选择云平台来存储文件，云平台有很多，比如阿里云、腾讯云、百度云等，云平台做得最好的是亚马逊我们这里选择国内最大的阿里云。</span><br><span class="line">- 防盗链：防止别人盗用你网站资源链接，包括视频，音频，图片等</span><br><span class="line">- 从浏览器通过ECS（服务器）访问OSS算内网访问，不算流量费，但是要考虑ECS的带宽问题。从浏览器直接访问OSS资源，算外网访问OSS需付流量费，但是可以不用考虑带宽</span><br><span class="line"></span><br><span class="line">## 10-2 基于OSS接口的文件上传</span><br><span class="line"></span><br><span class="line">阿里云OSS控台的使用:</span><br><span class="line"></span><br><span class="line">- bucket：存储空间，名称必须是全阿里云唯一</span><br><span class="line">- 上传的文件默认都继承bucket，这里的设置读写权限，只针对当前的文件有效</span><br><span class="line"></span><br><span class="line">基于OSS接口实现文件上传:1.大文件断点续传与极速秒传：基于oss接口实现文件上传，增加文件追加上传oss-append和简单上传oss-simple</span><br><span class="line"></span><br><span class="line">- 首先开通OSS，然后就可以上传文件了，在权限管理的RAM创建用户![image-20220317175917177](https://s2.loli.net/2022/03/18/lSnfAvgqshPQH9T.png)</span><br><span class="line">- Key ID就是开发文档里的那个</span><br><span class="line"></span><br><span class="line">![image-20220317180015443](https://s2.loli.net/2022/03/18/xGFMlOg8qV6Dj7K.png)</span><br><span class="line"></span><br><span class="line">- 这个页面就有很多示例![image-20220317180230837](https://s2.loli.net/2022/03/18/tziOYhkyHVcBK72.png)</span><br><span class="line"></span><br><span class="line">- 每次分片上传都是一个新的请求所以在每次请求里，只需要append一次</span><br><span class="line"></span><br><span class="line">- 我们在course和file的pom.xml中都加入</span><br><span class="line"></span><br><span class="line">- ```xml</span><br><span class="line">  &lt;!--阿里云oss--&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;3.10.2&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>首先在file中创建一个新的controller（OssController），里面一个追加上传，一个简单上传</p></li><li><pre><code class="java">package com.course.file.controller.admin;import com.alibaba.fastjson.JSONObject;import com.aliyun.oss.OSS;import com.aliyun.oss.OSSClientBuilder;import com.aliyun.oss.model.AppendObjectRequest;import com.aliyun.oss.model.AppendObjectResult;import com.aliyun.oss.model.ObjectMetadata;import com.aliyun.oss.model.PutObjectRequest;import com.course.server.dto.FileDto;import com.course.server.dto.ResponseDto;import com.course.server.enums.FileUseEnum;import com.course.server.service.FileService;import com.course.server.util.Base64ToMultipartFile;import com.course.server.util.UuidUtil;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Value;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import javax.annotation.Resource;import java.io.ByteArrayInputStream;import java.io.File;import java.io.IOException;@RequestMapping(&quot;/admin&quot;)@RestControllerpublic class OssController &#123;    private static final Logger LOG = LoggerFactory.getLogger(OssController.class);    public static final String BUSINESS_NAME = &quot;文件上传&quot;;    @Value(&quot;$&#123;accessKeyId&#125;&quot;)    private String accessKeyId;    @Value(&quot;$&#123;accessKeySecret&#125;&quot;)    private String accessKeySecret;    @Value(&quot;$&#123;endpoint&#125;&quot;)    private String endpoint;    @Value(&quot;$&#123;ossDomain&#125;&quot;)    private String ossDomain;    @Value(&quot;$&#123;bucket&#125;&quot;)    private String bucket;    @Resource    private FileService fileService;   @PostMapping(&quot;/oss-append&quot;)    public ResponseDto fileUpload(@RequestBody FileDto fileDto) throws IOException &#123;       LOG.info(&quot;上传文件开始&quot;);       String use = fileDto.getUse();       String key = fileDto.getKey();       String suffix = fileDto.getSuffix();       Integer shardIndex = fileDto.getShardIndex();       Integer shardSize = fileDto.getShardSize();       String shardBase64 = fileDto.getShard();       MultipartFile shard = Base64ToMultipartFile.base64ToMultipart(shardBase64);       // 保存文件到本地       FileUseEnum useEnum = FileUseEnum.getByCode(use);       //如果文件夹不存在则创建       String dir = useEnum.name().toLowerCase();       String path = new StringBuffer(dir)               .append(File.separator)               .append(key)               .append(&quot;.&quot;)               .append(suffix)               .toString();               // 创建OSSClient实例。       OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);       ObjectMetadata meta = new ObjectMetadata();       meta.setContentType(&quot;text/plain&quot;);       // 通过AppendObjectRequest设置多个参数。       AppendObjectRequest appendObjectRequest = new AppendObjectRequest(bucket, path, new ByteArrayInputStream(shard.getBytes()),meta);       // 第一次追加。       // 设置文件的追加位置。       appendObjectRequest.setPosition((long) ((shardIndex - 1) * shardSize));       AppendObjectResult appendObjectResult = ossClient.appendObject(appendObjectRequest);       // 文件的64位CRC值。此值根据ECMA-182标准计算得出。       System.out.println(appendObjectResult.getObjectCRC());       System.out.println(JSONObject.toJSONString(appendObjectResult));       ossClient.shutdown();       LOG.info(&quot;保存文件记录开始&quot;);       fileDto.setPath(path);       fileService.save(fileDto);       ResponseDto responseDto = new ResponseDto();       fileDto.setPath(ossDomain + path);       responseDto.setContent(fileDto);       return responseDto;   &#125;    @PostMapping(&quot;/oss-simple&quot;)    public ResponseDto fileUpload(@RequestParam MultipartFile file, String use) throws Exception &#123;        LOG.info(&quot;上传文件开始&quot;);        FileUseEnum useEnum = FileUseEnum.getByCode(use);        String key = UuidUtil.getShortUuid();        String fileName = file.getOriginalFilename();        String suffix = fileName.substring(fileName.lastIndexOf(&quot;.&quot;) + 1).toLowerCase();        String dir = useEnum.name().toLowerCase();        String path = dir + &quot;/&quot; + key + &quot;.&quot; + suffix;        // 创建OSSClient实例。        OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);        // 创建PutObjectRequest对象。//        String content = &quot;Hello OSS&quot;;        // &lt;yourObjectName&gt;表示上传文件到OSS时需要指定包含文件后缀在内的完整路径，例如abc/efg/123.jpg。        PutObjectRequest putObjectRequest = new PutObjectRequest(bucket, path, new ByteArrayInputStream(file.getBytes()));        // 如果需要上传时设置存储类型与访问权限，请参考以下示例代码。        // ObjectMetadata metadata = new ObjectMetadata();        // metadata.setHeader(OSSHeaders.OSS_STORAGE_CLASS, StorageClass.Standard.toString());        // metadata.setObjectAcl(CannedAccessControlList.Private);        // putObjectRequest.setMetadata(metadata);        // 上传字符串。        ossClient.putObject(putObjectRequest);//        LOG.info(&quot;保存文件记录开始&quot;);//        fileDto.setPath(path);//        fileService.save(fileDto);        ResponseDto responseDto = new ResponseDto();        FileDto fileDto = new FileDto();        fileDto.setPath(ossDomain + path);        responseDto.setContent(fileDto);        return responseDto;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 里面的一些参数我们在application中写入</span><br><span class="line"></span><br><span class="line">- ```properties</span><br><span class="line">  #oss</span><br><span class="line">  accessKeyId = LTAI5tCAu933RDd5W7kfi2UJ</span><br><span class="line">  accessKeySecret = EP8alQTIWH4bHqGXttwZiOqcJ5DxQ1</span><br><span class="line">  endpoint = http://oss-cn-shanghai.aliyuncs.com</span><br><span class="line">  ossDomain = http://course-imooc123.oss-cn-shanghai.aliyuncs.com</span><br><span class="line">  bucket = course-imooc123</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后分别把big-file和file.vue的upload</p></li><li><pre><code class="vue"> _this.$ajax.post(process.env.VUE_APP_SERVER + &#39;/file/admin/oss-append&#39;, param)  _this.$ajax.post(process.env.VUE_APP_SERVER + &#39;/file/admin/oss-simple&#39;, param)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 使用的时候，就跟平常一样，引入组件</span><br><span class="line"></span><br><span class="line">## 10-3 阿里云视频点播服务介绍</span><br><span class="line"></span><br><span class="line">阿里云视频点播服务介绍：</span><br><span class="line"></span><br><span class="line">- 视频点播（ApsaraVideo VoD，简称VoD）是集视频采集、编辑、上传、媒体资源管理、自动化转码处理（窄带高清™）、视频审核分析、分发加速于一体的一站式音视频点播解决方案。</span><br><span class="line"></span><br><span class="line">视频点播控台的使用：</span><br><span class="line"></span><br><span class="line">![image-20220318100227475](https://s2.loli.net/2022/03/18/rVwLAcmoHM5NdIp.png)</span><br><span class="line"></span><br><span class="line">视频点播帮助文档概览：</span><br><span class="line"></span><br><span class="line">![image-20220318100727542](https://s2.loli.net/2022/03/18/Out79eVMalPJjCE.png)</span><br><span class="line"></span><br><span class="line">## 10-4 基于OSS原生SDK上传视频到点播1</span><br><span class="line"></span><br><span class="line">**VOD上传并加密转码：**</span><br><span class="line"></span><br><span class="line">1.视频加密与授权播放：基于oss原生SDK上传视频到点播服务，官方示例代码</span><br><span class="line"></span><br><span class="line">- 在course和server中pom都加入jar包</span><br><span class="line"></span><br><span class="line">- ```xml</span><br><span class="line">  &lt;!--阿里云oss--&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;3.10.2&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 阿里云vod --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.aliyun&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;4.3.3&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.aliyun&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;aliyun-java-sdk-vod&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;2.15.8&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;3.4&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>在server的util中增加VodUtil</p></li><li><p>&#96;&#96;&#96;java<br>package com.course.server.util;</p><p>import com.alibaba.fastjson.JSONObject;<br>import com.aliyun.oss.OSSClient;<br>import com.aliyuncs.DefaultAcsClient;<br>import com.aliyuncs.exceptions.ClientException;<br>import com.aliyuncs.profile.DefaultProfile;<br>import com.aliyuncs.vod.model.v20170321.CreateUploadVideoRequest;<br>import com.aliyuncs.vod.model.v20170321.CreateUploadVideoResponse;<br>import org.apache.commons.codec.binary.Base64;</p><p>import java.io.File;<br>public class VodUtil {<br>public static DefaultAcsClient initVodClient(String accessKeyId, String accessKeySecret) throws ClientException {<br>    &#x2F;&#x2F; 根据点播接入服务所在的Region填写，例如：接入服务在上海，则填cn-shanghai；其他区域请参见存储说明。<br>    String regionId &#x3D; “cn-shanghai”;<br>    DefaultProfile profile &#x3D; DefaultProfile.getProfile(regionId, accessKeyId, accessKeySecret);<br>    DefaultAcsClient client &#x3D; new DefaultAcsClient(profile);<br>    return client;<br>}<br><br>public static CreateUploadVideoResponse createUploadVideo(DefaultAcsClient vodClient) throws ClientException {<br>    CreateUploadVideoRequest request &#x3D; new CreateUploadVideoRequest();<br>    request.setFileName(“vod_test.mp4”);<br>    request.setTitle(“this is title”);<br>    &#x2F;&#x2F;request.setDescription(“this is desc”);<br>    &#x2F;&#x2F;request.setTags(“tag1,tag2”);<br>    &#x2F;&#x2F;CoverURL示例：<a class="link"   href="http://example.aliyundoc.com/test_cover_****.jpg" >http://example.aliyundoc.com/test_cover_****.jpg<i class="fas fa-external-link-alt"></i></a><br>    &#x2F;&#x2F;request.setCoverURL(“<your CoverURL>“);<br>    &#x2F;&#x2F;request.setCateId(-1L);<br>    &#x2F;&#x2F;request.setTemplateGroupId(“”);<br>    &#x2F;&#x2F;request.setWorkflowId(“”);<br>    &#x2F;&#x2F;request.setStorageLocation(“”);<br>    &#x2F;&#x2F;request.setAppId(“app-1000000”);<br>    &#x2F;&#x2F;设置请求超时时间<br>    request.setSysReadTimeout(1000);<br>    request.setSysConnectTimeout(1000);<br>    return vodClient.getAcsResponse(request);<br>}<br><br>public static OSSClient initOssClient(JSONObject uploadAuth, JSONObject uploadAddress) {<br>    String endpoint &#x3D; uploadAddress.getString(“Endpoint”);<br>    String accessKeyId &#x3D; uploadAuth.getString(“AccessKeyId”);<br>    String accessKeySecret &#x3D; uploadAuth.getString(“AccessKeySecret”);<br>    String securityToken &#x3D; uploadAuth.getString(“SecurityToken”);<br>    return new OSSClient(endpoint, accessKeyId, accessKeySecret, securityToken);<br>}<br><br>public static void uploadLocalFile(OSSClient ossClient, JSONObject uploadAddress, String localFile) {<br>    String bucketName &#x3D; uploadAddress.getString(“Bucket”);<br>    String objectName &#x3D; uploadAddress.getString(“FileName”);<br>    File file &#x3D; new File(localFile);<br>    ossClient.putObject(bucketName, objectName, file);<br>}<br><br>public static void main(String[] argv) {<br>    &#x2F;&#x2F;您的AccessKeyId<br>    String accessKeyId &#x3D; “LTAI5tCDYephRBLH8xn9w48J”;<br>    &#x2F;&#x2F;您的AccessKeySecret<br>    String accessKeySecret &#x3D; “5qunGIsBmu475zk27xPfqBKa8V48K9”;<br>    &#x2F;&#x2F;需要上传到VOD的本地视频文件的完整路径，需要包含文件扩展名<br>    String localFile &#x3D; “C:\Users\1\Desktop\fang\course\admin\public\static\image\小节视频\test.mp4”;<br>    try {<br>        &#x2F;&#x2F; 初始化VOD客户端并获取上传地址和凭证<br>        DefaultAcsClient vodClient &#x3D; initVodClient(accessKeyId, accessKeySecret);<br>        CreateUploadVideoResponse createUploadVideoResponse &#x3D; createUploadVideo(vodClient);<br>        &#x2F;&#x2F; 执行成功会返回VideoId、UploadAddress和UploadAuth<br>        String videoId &#x3D; createUploadVideoResponse.getVideoId();<br><br>        JSONObject uploadAuth &#x3D; JSONObject.parseObject(<br>                Base64.decodeBase64(createUploadVideoResponse.getUploadAuth()),JSONObject.class);<br>        JSONObject uploadAddress &#x3D; JSONObject.parseObject(<br>                Base64.decodeBase64(createUploadVideoResponse.getUploadAddress()),JSONObject.class);<br><br>        &#x2F;&#x2F; 使用UploadAuth和UploadAddress初始化OSS客户端<br>        OSSClient ossClient &#x3D; initOssClient(uploadAuth, uploadAddress);<br>        &#x2F;&#x2F; 上传文件，注意是同步上传会阻塞等待，耗时与文件大小和网络上行带宽有关<br>        uploadLocalFile(ossClient, uploadAddress, localFile);<br>        System.out.println(“Put local file succeed, VideoId : “ + videoId);<br>    } catch (Exception e) {<br>        System.out.println(“Put local file fail, ErrorMessage : “ + e.getLocalizedMessage());<br>    }<br>}<br><br>private static String decodeBase64(String data) {<br>    return new String(Base64.decodeBase64(data));<br>}<br> }</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 10-5 基于OSS原生SDK上传视频到点播2</span><br><span class="line"></span><br><span class="line">2.视频加密与授权播放：基于OSS原生SDK上传视频到点播服务，上传到指定分类并自动转码：</span><br><span class="line"></span><br><span class="line">- 把上面这部分注释注释掉</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  request.setCoverURL(&quot;https://s2.loli.net/2022/03/18/Out79eVMalPJjCE.png&quot;);</span><br><span class="line">  request.setCateId(1000384585L);</span><br><span class="line">  request.setTemplateGroupId(&quot;f563e13b2a67fdd2b4e44bc1b1d421c2&quot;);</span><br></pre></td></tr></table></figure></li></ul><p>3.视频点播不支持追加上传：</p><ul><li>在上面uploadLocalFile方法中官方示例中用是简单上传putObiect，我们要改成我们需要的追加上传,很遗憾是不能实现的。</li></ul><p><strong>项目集成VOD上传：</strong></p><p>1.视频加密与授权播放：小节增加vod字段：</p><ul><li><p>我们首先在all小节处增加一列</p></li><li><p>&#96;&#96;&#96;sql<br> alter table <code>section</code> add column (<code>vod</code> char(32) comment ‘VOD|阿里云VOD’);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后mybatis-generator，然后我们还需要在sectionDto增加新增的变量。</span><br><span class="line"></span><br><span class="line">- 先对big-file进行修改</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  //设置两个默认值</span><br><span class="line">  shardSize:&#123;</span><br><span class="line">    default:50*1024</span><br><span class="line">  &#125;,</span><br><span class="line">  url:&#123;</span><br><span class="line">    default:&quot;oss-append&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  //使用默认值</span><br><span class="line">  let shardSize = _this.shardSize;</span><br><span class="line">  _this.$ajax.post(process.env.VUE_APP_SERVER + &#x27;/file/admin/&#x27;+_this.url, param)</span><br></pre></td></tr></table></figure></li></ul><p>2，视频加密与授权播放：增加vod组件，用于上传视频到视频点播服务：</p><ul><li><p>vod组件就是对big-file组件做了一层封装，要注意度，封装得越多，灵活度就越低。</p></li><li><p>然后我们就在组件中创建一个vod.vue</p></li><li><p>&#96;&#96;&#96;</p><template>  <big-file v-bind:input-id="inputId"            v-bind:text="text"            v-bind:suffixs="suffixs"            v-bind:use="use"            v-bind:after-upload="afterUpload"            v-bind:shard-size="shardSize"            v-bind:url="oss-append"></big-file></template><script>import BigFile from "./big-file"export default {  components:{BigFile},  name: 'vod',  props: {    text: {      default: "上传VOD"    },    inputId: {      default: "vod-upload"    },    suffixs: {      default: []    },    use: {      default: ""    },    shardSize:{      default:50*1024    },    afterUpload: {      type: Function,      default: null    },  },  data: function () {    return {    }  },  methods: {  }}</script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 我们在js里对video赋值，vue会监听到值的变化”并渲染视频控件。如果还没渲染完，我们就去获取时长，这时就会得到NaN，所以需要加延时获取。因此我们修改section获取时长代码，增加一个延迟。另外我们在section中使用vod组件。</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  /**</span><br><span class="line">   * 获取时长</span><br><span class="line">   */</span><br><span class="line">  getTime()&#123;</span><br><span class="line">    let _this=this;</span><br><span class="line">    setTimeout(function ()&#123;let ele =document.getElementById(&quot;video&quot;);</span><br><span class="line">      _this.section.time =parseInt(ele.duration,10);</span><br><span class="line">    &#125;,100);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></li></ul><p>3.视频加密与授权播放：file表增加vod字段</p><ul><li><p>我们给file也增加vod字段，其他忽略</p></li><li><pre><code class="sql">alter table `file` add column (`vod` char(32) comment &#39;Vod|阿里云Vod&#39;);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4.视频加密与授权播放：增加视频点播文件上传功能</span><br><span class="line"></span><br><span class="line">- 我们首先修改下application，并将OssController对应的值也进行修改</span><br><span class="line"></span><br><span class="line">- ```properties</span><br><span class="line">  #oss</span><br><span class="line">  oss.accessKeyId = LTAI5tCAu933RDd5W7kfi2UJ</span><br><span class="line">  oss.accessKeySecret = EP8alQTIWH4bHqGXttwZiOqcJ5DxQ1</span><br><span class="line">  oss.endpoint = http://oss-cn-shanghai.aliyuncs.com</span><br><span class="line">  oss.domain = http://course-imooc123.oss-cn-shanghai.aliyuncs.com</span><br><span class="line">  oss.bucket = course-imooc123</span><br><span class="line">  </span><br><span class="line">  #vod</span><br><span class="line">  vod.accessKeyId = LTAI5tCDYephRBLH8xn9w48J</span><br><span class="line">  vod.accessKeySecret = 5qunGIsBmu475zk27xPfqBKa8V48K9</span><br></pre></td></tr></table></figure></code></pre></li><li><p>由于视频点播不支持追加上传，所以使用vod组件进行上传的，只能有一个分片，所以我们将shardSize写死，不给暴漏出去,就默认1G</p></li><li><pre><code class="vue">v-bind:shard-size=&quot;1000*1024*1024&quot;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 接下来修改VodUtil</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  //给函数增加一个参数</span><br><span class="line">  public static CreateUploadVideoResponse createUploadVideo(DefaultAcsClient vodClient,String fileName) throws ClientException &#123;</span><br><span class="line">      request.setFileName(fileName);</span><br><span class="line">      request.setTitle(fileName);</span><br><span class="line">  &#125;</span><br><span class="line">  //在main中使用该函数</span><br><span class="line">  String fileName = &quot;test.mp4&quot;;</span><br><span class="line">  CreateUploadVideoResponse createUploadVideoResponse = createUploadVideo(vodClient,fileName);</span><br><span class="line">              </span><br><span class="line">   /**</span><br><span class="line">       * 增加简单上传</span><br><span class="line">       * @param ossClient</span><br><span class="line">       * @param uploadAddress</span><br><span class="line">       * @param inputStream</span><br><span class="line">       */</span><br><span class="line">      public static void uploadLocalFile(OSSClient ossClient, JSONObject uploadAddress, InputStream inputStream) &#123;</span><br><span class="line">          String bucketName = uploadAddress.getString(&quot;Bucket&quot;);</span><br><span class="line">          String objectName = uploadAddress.getString(&quot;FileName&quot;);</span><br><span class="line">          //单文件上传</span><br><span class="line">          ossClient.putObject(bucketName, objectName, inputStream);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>下面加这个方法的目的就是去获取播放地址</p></li><li><pre><code class="java">/** * 取源文件信息 * @param client * @param videoId * @return * @throws ClientException */public static GetMezzanineInfoResponse getMezzanineInfo(DefaultAcsClient client,String videoId) throws ClientException &#123;    GetMezzanineInfoRequest request = new GetMezzanineInfoRequest();    request.setVideoId(videoId);    //源片下载地址过期时间    request.setAuthTimeout(3600L);    return client.getAcsResponse(request);&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 阿里云JAR里的实体类里没有重写tostring（方法，所以每次打印日志都要用JSoN.to]sONString()，这就是为什么我要求自己的实体类要生成tostring（）</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  System.out.println(&quot;视频上传成功, VideoId : &quot; + videoId);//再这之后添加代码</span><br><span class="line">  GetMezzanineInfoResponse response = new GetMezzanineInfoResponse();</span><br><span class="line">  response = getMezzanineInfo(vodClient,videoId);</span><br><span class="line">  System.out.println(&quot;获取视频信息,response : &quot;+ JSON.toJSONString(response));</span><br></pre></td></tr></table></figure></code></pre></li><li><p>我们新建一个VodController</p></li><li><p>&#96;&#96;&#96;java<br>package com.course.file.controller.admin;</p><p>import com.alibaba.fastjson.JSON;<br>import com.alibaba.fastjson.JSONObject;<br>import com.aliyun.oss.OSSClient;<br>import com.aliyuncs.DefaultAcsClient;<br>import com.aliyuncs.vod.model.v20170321.CreateUploadVideoResponse;<br>import com.aliyuncs.vod.model.v20170321.GetMezzanineInfoResponse;<br>import com.course.server.dto.FileDto;<br>import com.course.server.dto.ResponseDto;<br>import com.course.server.enums.FileUseEnum;<br>import com.course.server.service.FileService;<br>import com.course.server.util.Base64ToMultipartFile;<br>import com.course.server.util.VodUtil;<br>import org.apache.commons.codec.binary.Base64;<br>import org.slf4j.Logger;<br>import org.slf4j.LoggerFactory;<br>import org.springframework.beans.factory.annotation.Value;<br>import org.springframework.web.bind.annotation.PostMapping;<br>import org.springframework.web.bind.annotation.RequestBody;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RestController;<br>import org.springframework.web.multipart.MultipartFile;</p><p>import javax.annotation.Resource;<br>import java.io.File;<br>import java.io.IOException;</p><p>@RequestMapping(“&#x2F;admin”)<br>@RestController<br>public class VodController {</p><pre><code>private static final Logger LOG = LoggerFactory.getLogger(VodController.class);public static final String BUSINESS_NAME = &quot;文件上传&quot;;@Value(&quot;$&#123;vod.accessKeyId&#125;&quot;)private String accessKeyId;@Value(&quot;$&#123;vod.accessKeySecret&#125;&quot;)private String accessKeySecret;@Resourceprivate FileService fileService;</code></pre><p>   @PostMapping(“&#x2F;vod”)<br>public ResponseDto fileUpload(@RequestBody FileDto fileDto) throws IOException {<br>   LOG.info(“上传文件开始”);<br>   String use &#x3D; fileDto.getUse();<br>   String key &#x3D; fileDto.getKey();<br>   String suffix &#x3D; fileDto.getSuffix();<br>   Integer shardIndex &#x3D; fileDto.getShardIndex();<br>   Integer shardSize &#x3D; fileDto.getShardSize();<br>   String shardBase64 &#x3D; fileDto.getShard();<br>   MultipartFile shard &#x3D; Base64ToMultipartFile.base64ToMultipart(shardBase64);<br><br>   &#x2F;&#x2F; 保存文件到本地<br>   FileUseEnum useEnum &#x3D; FileUseEnum.getByCode(use);<br><br>   &#x2F;&#x2F;如果文件夹不存在则创建<br>   String dir &#x3D; useEnum.name().toLowerCase();<br><br>   String path &#x3D; new StringBuffer(dir)<br>           .append(File.separator)<br>           .append(key)<br>           .append(“.”)<br>           .append(suffix)<br>           .toString();<br><br>   String vod &#x3D;””;<br>   String fileUrl &#x3D; “”;<br>   try {<br>       &#x2F;&#x2F; 初始化VOD客户端并获取上传地址和凭证<br>       DefaultAcsClient vodClient &#x3D; VodUtil.initVodClient(accessKeyId, accessKeySecret);<br>       CreateUploadVideoResponse createUploadVideoResponse &#x3D; VodUtil.createUploadVideo(vodClient,path);<br>       &#x2F;&#x2F; 执行成功会返回VideoId、UploadAddress和UploadAuth<br>       vod &#x3D; createUploadVideoResponse.getVideoId();<br><br>       JSONObject uploadAuth &#x3D; JSONObject.parseObject(<br>               Base64.decodeBase64(createUploadVideoResponse.getUploadAuth()),JSONObject.class);<br>       JSONObject uploadAddress &#x3D; JSONObject.parseObject(<br>               Base64.decodeBase64(createUploadVideoResponse.getUploadAddress()),JSONObject.class);<br><br>       &#x2F;&#x2F; 使用UploadAuth和UploadAddress初始化OSS客户端<br>       OSSClient ossClient &#x3D; VodUtil.initOssClient(uploadAuth, uploadAddress);<br>       &#x2F;&#x2F; 上传文件，注意是同步上传会阻塞等待，耗时与文件大小和网络上行带宽有关<br>       VodUtil.uploadLocalFile(ossClient, uploadAddress, shard.getInputStream());<br>       System.out.println(“视频上传成功, VideoId : “ + vod);<br>       GetMezzanineInfoResponse response &#x3D;  VodUtil.getMezzanineInfo(vodClient,vod);<br>       System.out.println(“获取视频信息,response : “+ JSON.toJSONString(response));<br>       fileUrl &#x3D; response.getMezzanine().getFileURL();<br>       ossClient.shutdown();<br>   } catch (Exception e) {<br>       System.out.println(“文件上传失败, ErrorMessage : “ + e.getLocalizedMessage());<br>   }<br><br>   LOG.info(“保存文件记录开始”);<br>   fileDto.setPath(path);<br>   fileDto.setVod(vod);<br>   fileService.save(fileDto);<br><br>   ResponseDto responseDto &#x3D; new ResponseDto();<br>   fileDto.setPath(fileUrl);&#x2F;&#x2F;返回给前端的需要一个可播放的地址，为了自动获取时长<br>   responseDto.setContent(fileDto);<br><br>   return responseDto;<br>   }</p><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 修改section</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  //获取到的可播放地址是有时效的，所以就算保存到数据库也会过期没用。以后会根据vod来播放，所以我们保存的时候将video的全路径清空，在save方法中加</span><br><span class="line">  _this.section.video=&quot;&quot;;</span><br><span class="line">  //上传完文件后，多返回一个vod，那么我们在afterUpload方法中将vod放到section.vod中</span><br><span class="line">  let vod =resp.content.vod;</span><br><span class="line">  _this.section.vod = vod;</span><br></pre></td></tr></table></figure></li></ul><p>5.视频加密与授权播放：文件检查时，根据是否是视频点播文件来获取视频信息</p><ul><li>在UploadController中check方法增加判断vod是否有值，如过有就上传vod的地址，如果没有就上传本地地址</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;vod.accessKeyId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String accessKeyId;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;vod.accessKeySecret&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String accessKeySecret;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(fileDto != <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(fileDto.getVod()))&#123;</span><br><span class="line">        fileDto.setPath(FILE_DOMAIN+fileDto.getPath());</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">DefaultAcsClient</span> <span class="variable">vodClient</span> <span class="operator">=</span> VodUtil.initVodClient(accessKeyId, accessKeySecret);</span><br><span class="line">        <span class="type">GetMezzanineInfoResponse</span> <span class="variable">response</span> <span class="operator">=</span>  VodUtil.getMezzanineInfo(vodClient,fileDto.getVod());</span><br><span class="line">        System.out.println(<span class="string">&quot;获取视频信息,response : &quot;</span>+ JSON.toJSONString(response));</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileUrl</span> <span class="operator">=</span> response.getMezzanine().getFileURL();</span><br><span class="line">        fileDto.setPath(fileUrl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-6-视频授权播放功能开发"><a href="#10-6-视频授权播放功能开发" class="headerlink" title="10-6 视频授权播放功能开发"></a>10-6 视频授权播放功能开发</h2><p><strong>阿里云播放器的基本使用:</strong></p><p>1.视频加密与授权播放：集成阿里云播放器，制作player播放器组件</p><ul><li><p>我们再次创建一个组件player.vue</p></li><li><pre><code class="vue">&lt;template&gt;  &lt;div v-bind:id=&quot;playerId&quot;&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;  export  default &#123;    name:&#39;player&#39;,    props:&#123;      playerId:&#123;        default:&quot;player-div&quot;      &#125;,    &#125;,    data: function ()&#123;      return&#123;        aliPlayer:&#123;&#125;,//播放器实例      &#125;    &#125;,    methods:&#123;      playUrl(url)&#123;        let _this=this;        console.log(&quot;开始播放:&quot;,url);        //如果已经有播放器了，则将播放器的div删除        if (_this.aliPlayer)&#123;          _this.aliPlayer=null;          $(&quot;#J_prismPlayer&quot;).remove();        &#125;        //初始播放器        $(&quot;#&quot;+_this.playerId).append(&quot;&lt;div class=\&quot;prism-player\&quot; id=\&quot;J_prismPlayer\&quot;&gt;&lt;/div&gt;&quot;);        _this.aliPlayer = new Aliplayer(&#123;          id: &#39;J_prismPlayer&#39;,          width: &#39;100%&#39;,          autoplay:false,          source:url,          cover:&#39;https://s2.loli.net/2022/03/01/6wagXDIZQGcebUt.png&#39;,        &#125;,function(player)&#123;          console.log(&#39;播放器创建好了&#39;)        &#125;);      &#125;    &#125;  &#125;&lt;/script&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后我们在index中引入代码js和css</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  &lt;!--  阿里云播放器--&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://g.alicdn.com/de/prismplayer/2.9.19/skins/default/aliplayer-min.css&quot; /&gt; </span><br><span class="line">   &lt;!--  阿里云播放器--&gt;</span><br><span class="line">  &lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://g.alicdn.com/de/prismplayer/2.9.19/aliplayer-min.js&quot;&gt;&lt;/script&gt; </span><br></pre></td></tr></table></figure></code></pre></li><li><p>最后我们对section进行修改</p></li><li><pre><code class="vue">//增加了player，并且将video隐藏起来，不能注释掉，因为我们要用它获取时长&lt;player ref=&quot;player&quot;&gt;&lt;/player&gt;&lt;video v-bind:src=&quot;section.video&quot; id=&quot;video&quot; controls=&quot;controls&quot; class=&quot;hidden&quot;&gt;&lt;/video&gt;//引入player组件import Player from &quot;../../components/player&quot;;components: &#123;Player, Pagination,BigFile,Vod&#125;,//在afterUpload方法中增加，通过url播放视频_this.$refs.player.playUrl(video);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**获取vod授权码并授权播放**</span><br><span class="line"></span><br><span class="line">1.视频加密与授权播放：获取vod授权码并授权播放，需要在存储管理中将权限设置成公共读         </span><br><span class="line"></span><br><span class="line">- 首先在VodUtil中增加</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  /**</span><br><span class="line">   * 获取播放凭证函数</span><br><span class="line">   * @param client</span><br><span class="line">   * @return</span><br><span class="line">   * @throws Exception</span><br><span class="line">   */</span><br><span class="line">  public static GetVideoPlayAuthResponse getVideoPlayAuth(DefaultAcsClient client, String videoId) throws Exception &#123;</span><br><span class="line">      GetVideoPlayAuthRequest request = new GetVideoPlayAuthRequest();</span><br><span class="line">      request.setVideoId(videoId);</span><br><span class="line">      return client.getAcsResponse(request);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后我们在VodController中增加请求</p></li><li><pre><code class="java">@RequestMapping(value = &quot;/get-auth/&#123;vod&#125;&quot;, method = RequestMethod.GET)public ResponseDto getAuth(@PathVariable String vod) throws ClientException, ClientException &#123;    LOG.info(&quot;获取播放授权开始: &quot;);    ResponseDto responseDto = new ResponseDto();    DefaultAcsClient client = VodUtil.initVodClient(accessKeyId, accessKeySecret);    GetVideoPlayAuthResponse response = new GetVideoPlayAuthResponse();    try &#123;        response = VodUtil.getVideoPlayAuth(client, vod);        LOG.info(&quot;授权码 = &#123;&#125;&quot;, response.getPlayAuth());        responseDto.setContent(response.getPlayAuth());        //VideoMeta信息        LOG.info(&quot;VideoMeta = &#123;&#125;&quot;, JSON.toJSONString(response.getVideoMeta()));    &#125; catch (Exception e) &#123;        System.out.print(&quot;ErrorMessage = &quot; + e.getLocalizedMessage());    &#125;    LOG.info(&quot;获取播放授权结束&quot;);    return responseDto;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 一个页面可能会放多个player组件，所以需要把id做成动态变化，一个页面的元素，id值要是唯一的。修改player.vue</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">   $(&quot;#&quot;+_this.playerId+&#x27;-player&#x27;).remove();</span><br><span class="line">  //初始播放器</span><br><span class="line">  $(&quot;#&quot;+_this.playerId).append(&quot;&lt;div class=\&quot;prism-player\&quot; id=\&quot;&quot;+_this.playerId+&quot;-player\&quot;&gt;&lt;/div&gt;&quot;);</span><br><span class="line">  _this.aliPlayer = new Aliplayer(&#123;</span><br><span class="line">    id: _this.playerId+&#x27;-player&#x27;,&#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>我们在player组件增加一个方法，设置播放凭证</p></li><li><pre><code class="vue">playVod (vod) &#123;  let _this = this;  Loading.show();  _this.$ajax.get(process.env.VUE_APP_SERVER + &#39;/file/admin/get-auth/&#39; + vod).then((response)=&gt;&#123;    Loading.hide();    let resp = response.data;    if (resp.success) &#123;      //如果已经有播放器了，则将播放器div删除      if (_this.aliPlayer) &#123;        _this.aliPlayer = null;        $(&quot;#&quot; + _this.playerId + &#39;-player&#39;).remove();      &#125;      // 初始化播放器      $(&quot;#&quot; + _this.playerId).append(&quot;&lt;div class=\&quot;prism-player\&quot; id=\&quot;&quot; + _this.playerId + &quot;-player\&quot;&gt;&lt;/div&gt;&quot;);      _this.aliPlayer = new Aliplayer(&#123;        id: _this.playerId + &#39;-player&#39;,        width: &#39;100%&#39;,        autoplay: false,        vid: vod,        playauth: resp.content,        cover: &#39;http://liveroom-img.oss-cn-qingdao.aliyuncs.com/logo.png&#39;,        encryptType:1, //当播放私有加密流时需要设置。      &#125;,function(player)&#123;        console.log(&#39;播放器创建好了。&#39;)      &#125;);    &#125; else &#123;      Toast.warning(&#39;播放错误。&#39;)    &#125;  &#125;)&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 我们再创建一个带有模态框的播放器组件modal-player，里面包含了player组件</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;player-modal&quot; class=&quot;modal&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;modal-dialog&quot; role=&quot;document&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;modal-content&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;modal-body&quot;&gt;</span><br><span class="line">            &lt;player v-bind:player-id=&quot;&#x27;modal-player-div&#x27;&quot;</span><br><span class="line">                    ref=&quot;player&quot;&gt;&lt;/player&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    import Player from &quot;./player&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">      name: &#x27;modal-player&#x27;,</span><br><span class="line">      components: &#123;Player&#125;,</span><br><span class="line">      data: function () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          aliPlayer: &#123;&#125;, // 播放器实例</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        playUrl(url) &#123;</span><br><span class="line">          let _this = this;</span><br><span class="line">          _this.$refs.player.playUrl(url);</span><br><span class="line">        &#125;,</span><br><span class="line">  </span><br><span class="line">        playVod(vod) &#123;</span><br><span class="line">          let _this = this;</span><br><span class="line">          _this.$refs.player.playVod(vod);</span><br><span class="line">          $(&quot;#player-modal&quot;).modal(&quot;show&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;style scoped&gt;</span><br><span class="line">    #player-modal .modal-body &#123;</span><br><span class="line">      padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>接下来我们设置个section，改动如下</p></li><li><pre><code>//将视频改为VOD&lt;th&gt;VOD&lt;/th&gt;//操作中增加一个按钮 &lt;button v-on:click=&quot;play(section)&quot; class=&quot;btn btn-xs btn-info&quot;&gt;    &lt;i class=&quot;ace-icon fa fa-video-camera bigger-120&quot;&gt;&lt;/i&gt; &lt;/button&gt;//给player设置一个id&lt;player v-bind:player-id=&quot;&#39;form-player-div&#39;&quot; ref=&quot;player&quot;&gt;&lt;/player&gt;//再最后一个div前面加&lt;modal-player ref=&quot;modalPlayer&quot;&gt;&lt;/modal-player&gt;//引入组件import ModalPlayer from &quot;../../components/modal-player&quot;;components: &#123;ModalPlayer, Player, Pagination,BigFile,Vod&#125;,//增加play方法play(section)&#123;  let _this=this;  _this.$refs.modalPlayer.playVod(section.vod);&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 第11章 用户管理与登录</span><br><span class="line"></span><br><span class="line">本章将演示用户管理及控台登录功能的开发，登录拦截是一个管理控台最基本的权限拦截，防止出现未登录用户直接访问控台界面或接口，同时保障系统内部用户的信息安全，介绍单点登录功能的开发，单点登录SSO（Single Sign On）在大型网站设计中非常常见，用户只需要登录一次就可以访问所有相互信任的应用系统，是提升用户体...</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">## 11-1 增加用户管理功能</span><br><span class="line"></span><br><span class="line">**用户表设计与基本代码生成：**</span><br><span class="line"></span><br><span class="line">1.用户管理与登录：用户表设计与基本代码生成</span><br><span class="line"></span><br><span class="line">- 创建sql</span><br><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  #用户</span><br><span class="line">  drop table if exists `user`;</span><br><span class="line">  create table `user`(</span><br><span class="line">                    `id` char(8) not null default &#x27;&#x27; comment &#x27;id&#x27;,</span><br><span class="line">                    `login_name` varchar(50)  not null comment &#x27;登录名&#x27;,</span><br><span class="line">                    `name` varchar(50)  comment &#x27;昵称&#x27;,</span><br><span class="line">                    `password` char(32) not null  comment &#x27;密码&#x27;,</span><br><span class="line">                    primary key (`id`),</span><br><span class="line">                    unique key `login_name_unique`(`login_name`)</span><br><span class="line">  )engine =innodb default charset=utf8mb4 comment=&#x27;用户&#x27;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后修改前端后端为system，然后就开始代码生成器</p></li><li><p>最后在admin中修改代码</p></li><li><p>&#96;&#96;&#96;vue</p><li class="active" id="system-user-sidebar"> <router-link to="/system/user">    <i class="menu-icon fa fa-caret-right"></i>    用户管理 </router-link><p>  <b class="arrow"></b></p></li><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 修改router，增加路由</span><br><span class="line"></span><br><span class="line">**增加用户名是否已存在校验：**</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.用户管理与登录：增加用户名是否已存在校验<br>2.增加自定义业务异常</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 登录名是不可编辑的，登录名一般会跟其它表有关联，一旦登录名改了，这些关联信息就没有了。</span><br><span class="line"></span><br><span class="line">- 根据传入登录名到数据库中查找是否有记录，有记录就说明用户名已存在</span><br><span class="line"></span><br><span class="line">- 我们在UserService中增加方法</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  /**</span><br><span class="line">   * 根据登录名查询用户信息</span><br><span class="line">   * @param loginName</span><br><span class="line">   * @return</span><br><span class="line">   */</span><br><span class="line">  public User selectByLoginName(String loginName) &#123;</span><br><span class="line">      UserExample userExample = new UserExample();</span><br><span class="line">      userExample.createCriteria().andLoginNameEqualTo(loginName);</span><br><span class="line">      List&lt;User&gt; userList = userMapper.selectByExample(userExample);</span><br><span class="line">      if (CollectionUtils.isEmpty(userList)) &#123;</span><br><span class="line">          return null;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          return userList.get(0);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p>然后我们在其insert方法中，增加判断，我们在业务上的逻辑校验，在校验不通过时，使用业务异常（自定义异常）</p></li><li><pre><code>User userDb = this.selectByLoginName(user.getLoginName());if(userDb != null)&#123; throw new BusinessException(BusinessExceptionCode.USER_LOGIN_NAME_EXIST);&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 我们在com.course.server.exception增加自定义异常，先写BusinessException，</span><br><span class="line"></span><br><span class="line">- 继承RuntimeException的一个好处就是代码不需要捕获。如果是直接继承Exception，代码需要捕获，否则编译不通过。</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.course.server.exception;</span><br><span class="line">  </span><br><span class="line">  public class BusinessException extends RuntimeException&#123;</span><br><span class="line">  </span><br><span class="line">      private BusinessExceptionCode code;</span><br><span class="line">  </span><br><span class="line">      public BusinessException (BusinessExceptionCode code) &#123;</span><br><span class="line">          super(code.getDesc());</span><br><span class="line">          this.code = code;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public BusinessExceptionCode getCode() &#123;</span><br><span class="line">          return code;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void setCode(BusinessExceptionCode code) &#123;</span><br><span class="line">          this.code = code;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 不写入堆栈信息，提高性能，抛出业务异常时，不打印堆栈信息，一方面是提高性能，另一方面是没有业务异常没必要看堆栈信息</span><br><span class="line">       */</span><br><span class="line">      @Override</span><br><span class="line">      public Throwable fillInStackTrace() &#123;</span><br><span class="line">          return this;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>看上面的代码里面有个BusinessExceptionCode，我们也写下文件，它也是个枚举就是没有code了</p></li><li><pre><code class="java">package com.course.server.exception;public enum BusinessExceptionCode &#123;       USER_LOGIN_NAME_EXIST(&quot;登录名已存在&quot;),     ;    private String desc;    BusinessExceptionCode(String desc) &#123;        this.desc = desc;    &#125;    public String getDesc() &#123;        return desc;    &#125;    public void setDesc(String desc) &#123;        this.desc = desc;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 我们还要对BusinessException做个全局的捕获，我们复制business里的ControllerExceptionHandler到system的controller下面，进行修改</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.course.system.controller;</span><br><span class="line">  </span><br><span class="line">  import com.course.server.dto.ResponseDto;</span><br><span class="line">  import com.course.server.exception.BusinessException;</span><br><span class="line">  import org.slf4j.Logger;</span><br><span class="line">  import org.slf4j.LoggerFactory;</span><br><span class="line">  import org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line">  import org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line">  import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">  </span><br><span class="line">  @ControllerAdvice</span><br><span class="line">  public class ControllerExceptionHandler &#123;</span><br><span class="line">  </span><br><span class="line">      private static final Logger LOG = LoggerFactory.getLogger(ControllerExceptionHandler.class);</span><br><span class="line">  </span><br><span class="line">      @ExceptionHandler(value = BusinessException.class)</span><br><span class="line">      @ResponseBody</span><br><span class="line">      public ResponseDto businessExceptionHandler(BusinessException e) &#123;</span><br><span class="line">          ResponseDto responseDto = new ResponseDto();</span><br><span class="line">          responseDto.setSuccess(false);</span><br><span class="line">          LOG.error(&quot;业务异常：&#123;&#125;&quot;, e.getCode().getDesc());</span><br><span class="line">          responseDto.setMessage(e.getCode().getDesc());</span><br><span class="line">          return responseDto;</span><br><span class="line">  </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>下面我们修改user.vue，</p></li><li><pre><code class="vue">//为了让登录名新增是可以修改，修改时不能进行修改我们增加了disabled&lt;div class=&quot;form-group&quot;&gt;  &lt;label class=&quot;col-sm-2 control-label&quot;&gt;登录名&lt;/label&gt;  &lt;div class=&quot;col-sm-10&quot;&gt;    &lt;input v-model=&quot;user.loginName&quot; v-bind:disabled=&quot;user.id&quot; class=&quot;form-control&quot;&gt;  &lt;/div&gt;&lt;/div&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 以后我们会有很多业务异常使用方法在BusinessExceptionCode增加一种异常枚举；在业务代码中抛出指定枚举类型的业务异常</span><br><span class="line"></span><br><span class="line">**侧边栏激活样式优化**</span><br><span class="line"></span><br><span class="line">1.用户管理与登录：侧边栏激活样式优化</span><br><span class="line"></span><br><span class="line">- 现在菜单栏的样式是这样的，我们要做的是当前菜单的父菜单的同级菜单，下面所有的子菜单，清空激活样式</span><br><span class="line">- ![image-20220320171949483](https://s2.loli.net/2022/03/20/Ux4suobOkTcCq1h.png)</span><br><span class="line"></span><br><span class="line">- 只需要在admin的activeSidebar方法，判断是否有父菜单的时候加，然后把原来标签的active都去了</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  parentLi.siblings().find(&quot;li&quot;).removeClass(&quot;active&quot;);</span><br></pre></td></tr></table></figure></code></pre></li><li><p>改完之后<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/20/1MZavcFOSzeYmT3.png"                      alt="image-20220320192232985"                ></p></li><li><p>还有一个问题问题：访问根目录时，页面显示的是admin.vue，但是右边的content部分是空的，没有路由到任何一个子路由</p></li><li><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/20/jhDmNJGQtAokE63.png"                      alt="image-20220320192535989"                ></p></li><li><p>我们将其重定位到Login，在router中增加一个</p></li><li><pre><code class="js">,&#123;    path: &quot;&quot;,    redirect: &quot;/login&quot;,&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2.用户管理与登录：解决从登录页面跳到控台主页时，侧边栏失效的问题</span><br><span class="line"></span><br><span class="line">- 但是随机而来的又有一个问题：从登录页面跳转到控台主页时，菜单失效了。因为打开登录页面时，会去加载所需的js，包括ace.min.js，这里会去做很多的初始化包括侧边栏的点击事件，但是此时还没有侧边栏。</span><br><span class="line"></span><br><span class="line">- 解决方法：进入控台主页时，重新加载ace.min.js，只需要在admin的mounted方法添加</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">   $.getScript(&#x27;/ace/assets/js/ace.min.js&#x27;);</span><br></pre></td></tr></table></figure></code></pre></li><li><p>小提示：大家在用很多第三方框架或jquery插件时，如果发现有些功能不起作用，如果看不懂源码，可以尝试这种方法解决，把核心的js重新加载一遍</p></li></ul><h2 id="11-2-密码的加密传输与加密存储"><a href="#11-2-密码的加密传输与加密存储" class="headerlink" title="11-2 密码的加密传输与加密存储"></a>11-2 密码的加密传输与加密存储</h2><p><strong>加密算法MD5与盐值</strong></p><ul><li>网站的数据库里已经把原值和密文都算好并存储超来了，如果刚好你输入的密文在数据库里有，就能解出来</li><li>盐值也叫salt值，加上盐值后，密文不容易被破解（查询）</li></ul><p><strong>密码加密传输和加密加密</strong></p><p>1.用户管理与登录：密码加密传输和加密存储</p><ul><li><p>所有人的密码存成明文的话，至少程序员可以直接到生产上看到</p></li><li><p>从路由器的日志，我可以看到所有人浏览的网站的地址、用户名、密码，如果密码刚好是明文传输，那就泄露了，如果是简单的md5，也很容易被破解，所以需要加个盐值。</p></li><li><p>盐值可以是随机的一串值，但是所有用到盐值的地方必须是同一个值。如果你是做平台系统，有多个客户用你的平台，最好是一个客户一个盐值。</p></li><li><p>我们只需要在user.vue的save方法使用md5就能完成加密</p></li><li><p>&#96;&#96;&#96;vue<br>_this.user.password &#x3D; hex_md5(_this.user.password+KEY);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 当然我们为了保险，我们要设置两层加密，所以我们在UserController的save方法中也使用md5</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  userDto.setPassword(DigestUtils.md5DigestAsHex(userDto.getPassword().getBytes()));</span><br></pre></td></tr></table></figure></li></ul><p><strong>增加修改密码功能</strong></p><p>1.用户管理与登录：增加重置密码功能：编辑用户信息的时候不修改密码</p><ul><li><p>修改用户信息和修改密码应该分开，做成两个功能</p></li><li><p>首先我们设置下user.vue，只有新增时密码才显示出来，修改时不显示密码修改</p></li><li><pre><code class="vue">&lt;div v-show=&quot;!user.id&quot; class=&quot;form-group&quot;&gt;  &lt;label class=&quot;col-sm-2 control-label&quot;&gt;密码&lt;/label&gt;  &lt;div class=&quot;col-sm-10&quot;&gt;    &lt;input v-model=&quot;user.password&quot; type=&quot;password&quot; class=&quot;form-control&quot;&gt;  &lt;/div&gt;&lt;/div&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- mybatis-generator生成的方法里，updateByPrimarykeySelective会对字段进行非空判断，再更新，如果值为空就不更新，原理就是利mybatis的if拼成动态sql。</span><br><span class="line"></span><br><span class="line">- 我们在UserService中修改updata</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  private void update(User user)&#123;</span><br><span class="line">      user.setPassword(null);</span><br><span class="line">      userMapper.updateByPrimaryKeySelective(user);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/21/9qKkAPibF4HDwcG.png"                      alt="image-20220321092349206"                ></p></li><li><p>接下来我们要做的就是设置一个重置密码的操作下面修改user.vue</p></li><li><pre><code class="vue">//增加一个修改密码表单&lt;div id=&quot;edit-password-modal&quot; class=&quot;modal fade&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot;&gt;  &lt;div class=&quot;modal-dialog&quot; role=&quot;document&quot;&gt;    &lt;div class=&quot;modal-content&quot;&gt;      &lt;div class=&quot;modal-header&quot;&gt;        &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;&lt;/button&gt;        &lt;h4 class=&quot;modal-title&quot;&gt;修改密码&lt;/h4&gt;      &lt;/div&gt;      &lt;div class=&quot;modal-body&quot;&gt;        &lt;form class=&quot;form-horizontal&quot;&gt;          &lt;div class=&quot;form-group&quot;&gt;            &lt;label class=&quot;control-label col-sm-2&quot;&gt;密码&lt;/label&gt;            &lt;div class=&quot;col-sm-10&quot;&gt;              &lt;input class=&quot;form-control&quot; type=&quot;password&quot; v-model=&quot;user.password&quot; name=&quot;password&quot;&gt;            &lt;/div&gt;          &lt;/div&gt;        &lt;/form&gt;      &lt;/div&gt;      &lt;div class=&quot;modal-footer&quot;&gt;        &lt;button type=&quot;button&quot; class=&quot;btn btn-white btn-default btn-round&quot; data-dismiss=&quot;modal&quot;&gt;          &lt;i class=&quot;ace-icon fa fa-times&quot;&gt;&lt;/i&gt;          取消        &lt;/button&gt;        &lt;button type=&quot;button&quot; class=&quot;btn btn-white btn-info btn-round&quot; v-on:click=&quot;savePassword()&quot;&gt;          &lt;i class=&quot;ace-icon fa fa-plus blue&quot;&gt;&lt;/i&gt;          保存密码        &lt;/button&gt;      &lt;/div&gt;    &lt;/div&gt;&lt;!-- /.modal-content --&gt;  &lt;/div&gt;&lt;!-- /.modal-dialog --&gt;&lt;/div&gt;&lt;!-- /.modal --&gt;//在操作中增加一个按钮 &lt;button v-on:click=&quot;editPassword(user)&quot; class=&quot;btn btn-xs btn-info&quot;&gt;     &lt;i class=&quot;ace-icon fa fa-key bigger-120&quot;&gt;&lt;/i&gt;&lt;/button&gt;//增加editPassword点击事件 /**    * 重置密码    * @param user*/editPassword(user) &#123;    let _this = this;    _this.user = $.extend(&#123;&#125;, user);    _this.user.password = null;    $(&quot;#edit-password-modal&quot;).modal(&quot;show&quot;);&#125;,//增加savePassword点击事件 /**     * 点击重置     */    savePassword() &#123;      let _this = this;      _this.user.password = hex_md5(_this.user.password+KEY);      Loading.show();      _this.$ajax.post(process.env.VUE_APP_SERVER +&#39;/system/admin/user/save-password&#39;, _this.user).then((respond) =&gt; &#123;        Loading.hide();        let resp = respond.data;        if (resp.success) &#123;          $(&quot;#edit-password-modal&quot;).modal(&quot;hide&quot;);          _this.list(1);          Toast.success(&quot;保存成功&quot;);        &#125;else&#123;          Toast.warning(resp.message);        &#125;      &#125;)    &#125;,<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后我们在服务端UserService增加保存密码的方法</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  /**</span><br><span class="line">   * 重置密码</span><br><span class="line">   * @param userDto</span><br><span class="line">   */</span><br><span class="line">  public void savePassword(UserDto userDto)&#123;</span><br><span class="line">      User user = new User();</span><br><span class="line">      user.setId(userDto.getId());</span><br><span class="line">      user.setPassword(userDto.getPassword());</span><br><span class="line">      userMapper.updateByPrimaryKeySelective(user);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>我们还需要再UserController中写个savepassword请求</p></li><li><pre><code class="java">/** * 重置密码 */@PostMapping(&quot;/save-password&quot;)public ResponseDto savePassword(@RequestBody UserDto userDto)&#123;    userDto.setPassword(DigestUtils.md5DigestAsHex(userDto.getPassword().getBytes()));    ResponseDto responseDto = new ResponseDto();    userService.savePassword(userDto);    responseDto.setContent(userDto);    return responseDto;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![image-20220321092436139](https://s2.loli.net/2022/03/21/XEF4g93IWfPop1B.png)</span><br><span class="line"></span><br><span class="line">- 思考：我现在存到数据库里面的密码是密文，那用户登录的时候，我数据库里面的密码解密不出来了，我怎么知道用户输入的密码对不对？</span><br><span class="line"></span><br><span class="line">## 11-3 基本的登录功能开发</span><br><span class="line"></span><br><span class="line">**基本的登录功能开发**</span><br><span class="line"></span><br><span class="line">1.用户管理与登录：基本的登录功能开发，校验用户名密码</span><br><span class="line"></span><br><span class="line">- 我们先修改login.vue</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">   &lt;label class=&quot;block clearfix&quot;&gt;</span><br><span class="line">  &lt;span class=&quot;block input-icon input-icon-right&quot;&gt;</span><br><span class="line">   &lt;input v-model=&quot;user.loginName&quot; type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;用户名&quot;/&gt;</span><br><span class="line">   &lt;i class=&quot;ace-icon fa fa-user&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">            &lt;/label&gt;</span><br><span class="line">  </span><br><span class="line">            &lt;label class=&quot;block clearfix&quot;&gt;</span><br><span class="line">  &lt;span class=&quot;block input-icon input-icon-right&quot;&gt;</span><br><span class="line">   &lt;input v-model=&quot;user.password&quot; type=&quot;password&quot; class=&quot;form-control&quot; placeholder=&quot;密码&quot;/&gt;</span><br><span class="line">   &lt;i class=&quot;ace-icon fa fa-lock&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">            &lt;/label&gt;</span><br><span class="line">  //然后设置一个data数据</span><br><span class="line">  data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        user: &#123;&#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  //设置login方法</span><br><span class="line">   login()&#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        _this.user.password = hex_md5(_this.user.password+KEY);</span><br><span class="line">        Loading.show();</span><br><span class="line">        _this.$ajax.post(process.env.VUE_APP_SERVER +&#x27;/system/admin/user/login&#x27;, _this.user).then((respond) =&gt; &#123;</span><br><span class="line">          Loading.hide();</span><br><span class="line">          let resp = respond.data;</span><br><span class="line">          if (resp.success) &#123;</span><br><span class="line">            console.log(resp.content)</span><br><span class="line">            this.$router.push(&quot;/welcome&quot;)</span><br><span class="line">          &#125;else &#123;</span><br><span class="line">            Toast.warning(resp.message);</span><br><span class="line">          &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后我们设置UserController</p></li><li><pre><code class="java">/** * 登录 */@PostMapping(&quot;/login&quot;)public ResponseDto login(@RequestBody UserDto userDto)&#123;    userDto.setPassword(DigestUtils.md5DigestAsHex(userDto.getPassword().getBytes()));    ResponseDto responseDto = new ResponseDto();    LoginUserDto loginUserDto = userService.login(userDto);    responseDto.setContent(loginUserDto);    return responseDto;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 接着userService也增加login方法</span><br><span class="line"></span><br><span class="line">- 登录验证思考：是否是根据用户名+密码到数据中去查找记录？</span><br><span class="line"></span><br><span class="line">- 用户名+密码去数据库查找的话，程序不知道是用户名不对，还是密码不对。程序应该要能知道，比如我如果发现有大量的用户名不对的报错，说明有人正在不断的探测我系统的用户名</span><br><span class="line"></span><br><span class="line">- 再次思考：如果用户名不对，提示给前端的是：用户名不存在。如果是密码不对，提示给前端的是：密码不对。是否是这样？</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  /**</span><br><span class="line">   * 登录</span><br><span class="line">   * @param userDto</span><br><span class="line">   */</span><br><span class="line">  public LoginUserDto login(UserDto userDto)&#123;</span><br><span class="line">      User user = selectByLoginName((userDto.getLoginName()));</span><br><span class="line">      if(user == null)&#123;</span><br><span class="line">          LOG.info(&quot;用户名不存在,&#123;&#125;&quot;,userDto.getLoginName());</span><br><span class="line">          throw new BusinessException(BusinessExceptionCode.LOGIN_ERROR);</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">          if (user.getPassword().equals(userDto.getPassword()))&#123;</span><br><span class="line">              return CopyUtil.copy(user,LoginUserDto.class);</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">              LOG.info(&quot;密码不对,输入密码:&#123;&#125;,数据库密码:&#123;&#125;&quot;,userDto.getPassword(),user.getPassword());</span><br><span class="line">              throw new BusinessException(BusinessExceptionCode.LOGIN_ERROR);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>如果你直接告诉前端说用户名不存在，我做为一个黑客的话，可以拿着现成的一堆用户名，包括手机号邮箱，不断的探测哪些用户名是你系统里有了。不要给别人任何机会获取你系统的关键信息。这时我们在BusinessExceptionCode中增加一个变量</p></li><li><p>&#96;&#96;&#96;<br>LOGIN_ERROR(“用户名或密码错误”),</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 另外我们还需要增加一个LoginUserDto，用于返回返回信息</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.course.server.dto;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  public class LoginUserDto &#123;</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * id</span><br><span class="line">       */</span><br><span class="line">      private String id;</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 登录名</span><br><span class="line">       */</span><br><span class="line">      private String loginName;</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 昵称</span><br><span class="line">       */</span><br><span class="line">      private String name;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">      public String getId() &#123;</span><br><span class="line">          return id;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void setId(String id) &#123;</span><br><span class="line">          this.id = id;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public String getLoginName() &#123;</span><br><span class="line">          return loginName;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void setLoginName(String loginName) &#123;</span><br><span class="line">          this.loginName = loginName;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public String getName() &#123;</span><br><span class="line">          return name;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void setName(String name) &#123;</span><br><span class="line">          this.name = name;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      public String toString() &#123;</span><br><span class="line">          StringBuilder sb = new StringBuilder();</span><br><span class="line">          sb.append(getClass().getSimpleName());</span><br><span class="line">          sb.append(&quot; [&quot;);</span><br><span class="line">          sb.append(&quot;Hash = &quot;).append(hashCode());</span><br><span class="line">          sb.append(&quot;, id=&quot;).append(id);</span><br><span class="line">          sb.append(&quot;, loginName=&quot;).append(loginName);</span><br><span class="line">          sb.append(&quot;, name=&quot;).append(name);</span><br><span class="line">          sb.append(&quot;]&quot;);</span><br><span class="line">          return sb.toString();</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>登录后保存登录信息</strong></p><p>1.用户管理与登录：登录后前端保存登录信息并显示</p><ul><li><p>前端的信息保存有多种选择：h5的localStorage，sessionStorage；js的全局变量，vue的store等</p></li><li><p>sessionStorage在页面刷新的时候，信息不会丢；关闭页面后，信息自动清空，适合用来存储登录信息</p></li><li><p>localStorage在关闭页面后，登录信息还是在的，适合一些内网使用的系统保存登录信息</p></li><li><p>用js全局变量或vue的store，刷新浏览器的时候，信息会丢失。</p></li><li><p>把登录信息的保存和读取做成通用的方法</p></li><li><p>小技巧：在获取一些对象的时候，加上||{ }，避免获取属性值时报错</p></li><li><p>再这我们在tool.js将登录信息的保存和读取做成通用的方法</p></li><li><pre><code class="js">/** * 保存登录信息 * @param loginUser */setLoginUser:function (loginUser)&#123;    SessionStorage.set(SESSION_KEY_LOGIN_USER,loginUser);&#125;,/** * 获取登录信息 * @param loginUser * @returns &#123;any|&#123;&#125;&#125; */getLoginUser:function (loginUser)&#123;    return SessionStorage.get(SESSION_KEY_LOGIN_USER) ||&#123;&#125;;&#125;,<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后我们在session-storage中设置一个常量</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  SESSION_KEY_LOGIN_USER = &quot;SESSION_KEY_LOGIN_USER&quot;; // 登录信息</span><br></pre></td></tr></table></figure></code></pre></li><li><p>我们在login.vue</p></li><li><p>&#96;&#96;&#96;vue<br>if (resp.success) {<br>  console.log(“登录成功：”,resp.content)<br>  Tool.setLoginUser(resp.content)&#x2F;&#x2F;增加这个<br>  this.$router.push(“&#x2F;welcome”)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 我们在admin</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  //先增加data</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      loginUser: &#123;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  //在mounted:function初始化时获取 </span><br><span class="line">  _this.loginUser  = Tool.getLoginUser()</span><br><span class="line">  //最后在头像处将名字显示出来</span><br><span class="line">  &lt;span class=&quot;user-info&quot;&gt;</span><br><span class="line">      &lt;small&gt;Welcome,&lt;/small&gt;</span><br><span class="line">      &#123;&#123; loginUser.name &#125;&#125;</span><br><span class="line">  &lt;/span&gt;</span><br></pre></td></tr></table></figure></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/21/VQjGaSv4H2wlWkK.png"                      alt="image-20220321120620302"                ></p><h2 id="11-4-退出登录与记住登录"><a href="#11-4-退出登录与记住登录" class="headerlink" title="11-4 退出登录与记住登录"></a>11-4 退出登录与记住登录</h2><p><strong>增加推出登录功能</strong></p><p>1.用户管理与登录：增加退出登录功能，清空前后增的会话缓存</p><ul><li><p>退出登录：清空当前登录的缓存信息，并跳到登录页面</p></li><li><p>我们先修改下admin页面头像里的三个</p></li><li><pre><code class="vue">//头像里的三个文字&lt;ul class=&quot;user-menu dropdown-menu-right dropdown-menu dropdown-yellow dropdown-caret dropdown-close&quot;&gt;  &lt;li&gt;    &lt;a href=&quot;#&quot;&gt;      &lt;i class=&quot;ace-icon fa fa-cog&quot;&gt;&lt;/i&gt;      系统设置    &lt;/a&gt;  &lt;/li&gt;  &lt;li&gt;    &lt;a href=&quot;profile.html&quot;&gt;      &lt;i class=&quot;ace-icon fa fa-user&quot;&gt;&lt;/i&gt;      个人信息    &lt;/a&gt;  &lt;/li&gt;  &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;  &lt;li&gt;    &lt;a v-on:click=&quot;logout()&quot; href=&quot;#&quot;&gt;      &lt;i class=&quot;ace-icon fa fa-power-off&quot;&gt;&lt;/i&gt;      登出登录    &lt;/a&gt;  &lt;/li&gt;&lt;/ul&gt;//上面登录页面有一个logoutlogout()&#123;      let _this = this;      Loading.show();      _this.$ajax.get(process.env.VUE_APP_SERVER +&#39;/system/admin/user/logout&#39;).then((response) =&gt; &#123;        Loading.hide();        let resp = response.data;        if (resp.success) &#123;          Tool.setLoginUser(null);          this.$router.push(&quot;/login&quot;)        &#125;else &#123;          Toast.warning(resp.message);        &#125;      &#125;);    &#125;,<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 我们再在server的dto在增加一个常字段Constants</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.course.server.dto;</span><br><span class="line">  </span><br><span class="line">  public class Constants &#123;</span><br><span class="line">      public static final String LOGIN_USER = &quot;LOGIN_USER&quot;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>接下来写后端，一般登录信息在前后端都会保存，后端缓存</p></li><li><pre><code class="java">/** * 登录，这是后端的缓存 */@PostMapping(&quot;/login&quot;)public ResponseDto login(@RequestBody UserDto userDto, HttpServletRequest request)&#123;    userDto.setPassword(DigestUtils.md5DigestAsHex(userDto.getPassword().getBytes()));    ResponseDto responseDto = new ResponseDto();    LoginUserDto loginUserDto = userService.login(userDto);    request.getSession().setAttribute(Constants.LOGIN_USER,loginUserDto);    responseDto.setContent(loginUserDto);    return responseDto;&#125;/** * 退出登录 */@GetMapping(&quot;/logout&quot;)public ResponseDto logout(HttpServletRequest request)&#123;    ResponseDto responseDto = new ResponseDto();    request.getSession().removeAttribute(Constants.LOGIN_USER);//去掉后端缓存    return responseDto;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**增加记住登录信息功能**</span><br><span class="line"></span><br><span class="line">1.用户管理与登录：增加记住登录信息功能</span><br><span class="line"></span><br><span class="line">- 使用localStorage来保存输入的用户名密码</span><br><span class="line"></span><br><span class="line">- 如果不清空本地缓存，重新打开页面时会再次显示记住的用户名密码</span><br><span class="line"></span><br><span class="line">- 能获取到缓存的值，说明上一次有勾选“记住我</span><br><span class="line"></span><br><span class="line">- 我们首先在local-storage设置一个常量</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  LOCAL_KEY_REMEMBER_USER =&quot;LOCAL_KEY_REMEMBER_USER&quot;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后我们对login进行修改</p></li><li><pre><code class="vue">//给记住我增加一个model&lt;div class=&quot;clearfix&quot;&gt;  &lt;label class=&quot;inline&quot;&gt;    &lt;input v-model=&quot;remember&quot; type=&quot;checkbox&quot; class=&quot;ace&quot;/&gt;    &lt;span class=&quot;lbl&quot;&gt; 记住我&lt;/span&gt;  &lt;/label&gt;//data中设置remember    data: function () &#123;    return &#123;      user: &#123;&#125;,      remember:true    &#125;  &#125;,//在初始化时写以下代码let _this=this;//从缓存中获取记住的用户名密码,如果获取不到说明上一次没有勾选上“记住我”let rememberUser = LocalStorage.get(LOCAL_KEY_REMEBER_USER);if(rememberUser)&#123;    _this.user = rememberUser; &#125;//登录代码    methods:&#123;    login()&#123;      let _this = this;      let passwordShow = _this.user.password;//新增，先获取明文密码      _this.user.password = hex_md5(_this.user.password+KEY);      Loading.show();      _this.$ajax.post(process.env.VUE_APP_SERVER +&#39;/system/admin/user/login&#39;, _this.user).then((response) =&gt; &#123;        Loading.hide();        let resp = response.data;        if (resp.success) &#123;          console.log(&quot;登录成功：&quot;,resp.content)          let loginUser = resp.content;//新增          Tool.setLoginUser(resp.content)          this.$router.push(&quot;/welcome&quot;)    ///////////////////////////////////////以下新增          //判断“记住我”          if(_this.remember)&#123;            //如果勾就记住我,则将用户名密码保存到本地缓存这里需要保存密码明文，否则登录时又会再加一层密            LocalStorage.set(LOCAL_KEY_REMEBER_USER,&#123;              loginName:loginUser.loginName,              password:passwordShow            &#125;);          &#125;else&#123;            //没有勾选“记住我”时，要把本地缓存清空否则按照Mounted的逻验·下次打开时会自动显示用户名密码            LocalStorage.set(LOCAL_KEY_REMEBER_USER,null);          &#125;    ///////////////////////////////////////////////        &#125;else &#123;          Toast.warning(resp.message);        &#125;        &#125;);    &#125;,<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![image-20220321173337007](https://s2.loli.net/2022/03/21/SPKgOtfGJW42TE7.png)</span><br><span class="line"></span><br><span class="line">2.用户管理与登录：增加记住登录信息功能，安全加固，本地缓存</span><br><span class="line"></span><br><span class="line">修改login.vue</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">login()&#123;</span><br><span class="line">  let _this = this;</span><br><span class="line">  //////////////////////////////////////////////////////////////</span><br><span class="line">  //将明文存储到缓存中</span><br><span class="line">  // let passwordShow = _this.user.password;</span><br><span class="line">  //如果密码是从缓存带出来的，则不需要重新加密</span><br><span class="line">  let md5 = hex_md5(_this.user.password);</span><br><span class="line">  let rememberUser = LocalStorage.get(LOCAL_KEY_REMEBER_USER)||&#123;&#125;;</span><br><span class="line">  if (md5 !== rememberUser.md5)&#123;</span><br><span class="line">    _this.user.password = hex_md5(_this.user.password+KEY);</span><br><span class="line">  &#125;</span><br><span class="line">  //////////////////////////////////////////////////////////////////</span><br><span class="line">  Loading.show();</span><br><span class="line">  _this.$ajax.post(process.env.VUE_APP_SERVER +&#x27;/system/admin/user/login&#x27;, _this.user).then((response) =&gt; &#123;</span><br><span class="line">    Loading.hide();</span><br><span class="line">    let resp = response.data;</span><br><span class="line">    if (resp.success) &#123;</span><br><span class="line">      console.log(&quot;登录成功：&quot;,resp.content)</span><br><span class="line">      let loginUser = resp.content;</span><br><span class="line">      Tool.setLoginUser(resp.content)</span><br><span class="line">      this.$router.push(&quot;/welcome&quot;)</span><br><span class="line">/////////////////////////////////////////////////////////////////////////////</span><br><span class="line">      //判断“记住我”</span><br><span class="line">      if(_this.remember)&#123;</span><br><span class="line">        //如果勾就记住我,则将用户名密码保存到本地缓存这里需要保存密码明文，否则登录时又会再加一层密</span><br><span class="line">        //原：这里需要保存密码明文，否则登陆时又会再增加一层密</span><br><span class="line">        //新：这里保存密码密文，并保存密文md5，用于检测密码是否被重新输入过</span><br><span class="line">        let md5 = hex_md5(_this.user.password)</span><br><span class="line">        LocalStorage.set(LOCAL_KEY_REMEBER_USER,&#123;</span><br><span class="line">          loginName:loginUser.loginName,</span><br><span class="line">          password:_this.user.password,</span><br><span class="line">          md5: md5</span><br><span class="line">        &#125;);</span><br><span class="line">//////////////////////////////////////////////////////////////////////////////////</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        //没有勾选“记住我”时，要把本地缓存清空否则按照Mounted的逻验·下次打开时会自动显示用户名密码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        LocalStorage.set(LOCAL_KEY_REMEBER_USER,null);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">      Toast.warning(resp.message);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></code></pre></li><li><p>从刚才的记住我这个功能，大家可以看出来，一个是记住明文，一是记住密文，虽然实现的功能是一样的，但是安全性上不一样，所以我们写程序不只是把功能写出来，还要严谨，不要留下坑</p></li></ul><h2 id="11-5-增加登录图形验证码"><a href="#11-5-增加登录图形验证码" class="headerlink" title="11-5 增加登录图形验证码"></a>11-5 增加登录图形验证码</h2><p><strong>集成图形验证码kaptcha</strong></p><p>1.用户管理与登录：集成图形验证码kaptcha</p><ul><li>我们首先再course和server的pom.xml中添加</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 图形验证码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.penggle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>然后在server的config中添加KaptchaConfig，如果项目中有多个页面会用到验证码图片，且图片的大小颜色等都不一样，就可以增加多个生成验证码图片方法</p></li><li><p>&#96;&#96;&#96;java<br>package com.course.server.config;</p><p>import com.google.code.kaptcha.impl.DefaultKaptcha;<br>import com.google.code.kaptcha.util.Config;<br>import org.springframework.context.annotation.Bean;<br>import org.springframework.context.annotation.Configuration;</p><p>import java.util.Properties;</p><p>@Configuration<br>public class KaptchaConfig {<br>@Bean<br>public DefaultKaptcha getDefaultKaptcha() {<br>    DefaultKaptcha defaultKaptcha &#x3D; new DefaultKaptcha();<br>    Properties properties &#x3D; new Properties();<br>    properties.setProperty(“kaptcha.border”, “no”);<br>&#x2F;&#x2F;        properties.setProperty(“kaptcha.border.color”, “105,179,90”);<br>    properties.setProperty(“kaptcha.textproducer.font.color”, “blue”);<br>    properties.setProperty(“kaptcha.image.width”, “90”);<br>    properties.setProperty(“kaptcha.image.height”, “32”);<br>    properties.setProperty(“kaptcha.textproducer.font.size”, “24”);<br>    properties.setProperty(“kaptcha.session.key”, “code”);<br>    properties.setProperty(“kaptcha.textproducer.char.length”, “4”);<br>    properties.setProperty(“kaptcha.textproducer.font.names”, “Arial”);<br>    properties.setProperty(“kaptcha.noise.color”, “255,96,0”);<br>    properties.setProperty(“kaptcha.noise.impl”, “com.google.code.kaptcha.impl.NoNoise”);<br>&#x2F;&#x2F;        properties.setProperty(“kaptcha.obscurificator.impl”, “com.google.code.kaptcha.impl.WaterRipple”);<br>    properties.setProperty(“kaptcha.obscurificator.impl”, “com.course.server.util.NoWaterRipple”);<br>    Config config &#x3D; new Config(properties);<br>    defaultKaptcha.setConfig(config);<br>    return defaultKaptcha;<br>}<br><br>@Bean<br>public DefaultKaptcha getWebKaptcha() {<br>    DefaultKaptcha defaultKaptcha &#x3D; new DefaultKaptcha();<br>    Properties properties &#x3D; new Properties();<br>    properties.setProperty(“kaptcha.border”, “no”);<br>&#x2F;&#x2F;        properties.setProperty(“kaptcha.border.color”, “105,179,90”);<br>    properties.setProperty(“kaptcha.textproducer.font.color”, “blue”);<br>    properties.setProperty(“kaptcha.image.width”, “90”);<br>    properties.setProperty(“kaptcha.image.height”, “45”);<br>    properties.setProperty(“kaptcha.textproducer.font.size”, “30”);<br>    properties.setProperty(“kaptcha.session.key”, “code”);<br>    properties.setProperty(“kaptcha.textproducer.char.length”, “4”);<br>    properties.setProperty(“kaptcha.textproducer.font.names”, “Arial”);<br>    properties.setProperty(“kaptcha.noise.impl”, “com.google.code.kaptcha.impl.NoNoise”);<br>    properties.setProperty(“kaptcha.obscurificator.impl”, “com.google.code.kaptcha.impl.WaterRipple”);<br>    Config config &#x3D; new Config(properties);<br>    defaultKaptcha.setConfig(config);<br>    return defaultKaptcha;<br>}<br>} </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后再system的admin添加KaptchaController</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.course.system.controller.admin;</span><br><span class="line">  </span><br><span class="line">  import com.google.code.kaptcha.impl.DefaultKaptcha;</span><br><span class="line">  import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">  import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">  import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">  import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">  import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">  import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">  </span><br><span class="line">  import javax.imageio.ImageIO;</span><br><span class="line">  import javax.servlet.ServletOutputStream;</span><br><span class="line">  import javax.servlet.http.HttpServletRequest;</span><br><span class="line">  import javax.servlet.http.HttpServletResponse;</span><br><span class="line">  import java.awt.image.BufferedImage;</span><br><span class="line">  import java.io.ByteArrayOutputStream;</span><br><span class="line">  </span><br><span class="line">  @RestController</span><br><span class="line">  @RequestMapping(&quot;/admin/kaptcha&quot;)</span><br><span class="line">  public class KaptchaController &#123;</span><br><span class="line">  </span><br><span class="line">      @Qualifier(&quot;getDefaultKaptcha&quot;)</span><br><span class="line">      @Autowired</span><br><span class="line">      DefaultKaptcha defaultKaptcha;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">      @GetMapping(&quot;/image-code/&#123;imageCodeToken&#125;&quot;)</span><br><span class="line">      public void imageCode(@PathVariable(value = &quot;imageCodeToken&quot;) String imageCodeToken, HttpServletRequest request, HttpServletResponse httpServletResponse) throws Exception&#123;</span><br><span class="line">          ByteArrayOutputStream jpegOutputStream = new ByteArrayOutputStream();</span><br><span class="line">          try &#123;</span><br><span class="line">              // 生成验证码字符串</span><br><span class="line">              String createText = defaultKaptcha.createText();</span><br><span class="line">  </span><br><span class="line">              // 将生成的验证码放入会话缓存中，后续验证的时候用到</span><br><span class="line">               request.getSession().setAttribute(imageCodeToken, createText);</span><br><span class="line">  </span><br><span class="line">              // 使用验证码字符串生成验证码图片</span><br><span class="line">              BufferedImage challenge = defaultKaptcha.createImage(createText);</span><br><span class="line">              ImageIO.write(challenge, &quot;jpg&quot;, jpegOutputStream);</span><br><span class="line">          &#125; catch (IllegalArgumentException e) &#123;</span><br><span class="line">              httpServletResponse.sendError(HttpServletResponse.SC_NOT_FOUND);</span><br><span class="line">              return;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          // 定义response输出类型为image/jpeg类型，使用response输出流输出图片的byte数组</span><br><span class="line">          byte[] captchaChallengeAsJpeg = jpegOutputStream.toByteArray();</span><br><span class="line">          httpServletResponse.setHeader(&quot;Cache-Control&quot;, &quot;no-store&quot;);</span><br><span class="line">          httpServletResponse.setHeader(&quot;Pragma&quot;, &quot;no-cache&quot;);</span><br><span class="line">          httpServletResponse.setDateHeader(&quot;Expires&quot;, 0);</span><br><span class="line">          httpServletResponse.setContentType(&quot;image/jpeg&quot;);</span><br><span class="line">          ServletOutputStream responseOutputStream = httpServletResponse.getOutputStream();</span><br><span class="line">          responseOutputStream.write(captchaChallengeAsJpeg);</span><br><span class="line">          responseOutputStream.flush();</span><br><span class="line">          responseOutputStream.close();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>页面显示验证码及刷新验证码</strong></p><p>1.用户管理与登录：页面显示验证码及刷新验证码</p><ul><li><p>验证码功能分为显示和验证两个步骤，用token将两个步骤关联起</p></li><li><p>我们首先给Tool.js增加一个方法，原理：以62进制为例，随机生成一个0~61的数值，比如41，那边就取chars数组中的第41个字符，这样重复做8遍，就生成了8位的62进制数，重复的概率是62的8次方。也可以生成更长的数值。</p></li><li><p>&#96;&#96;&#96;js<br>&#x2F;**</p><ul><li>随机生成[len]长度的[radix]进制数</li><li>@param len</li><li>@param radix 默认62</li><li>@returns {string}</li></ul><p> *&#x2F;<br>uuid: function (len, radix) {<br>    let chars &#x3D; ‘0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz’.split(‘’);<br>    let uuid &#x3D; [];<br>    radix &#x3D; radix || chars.length;</p><pre><code>for (let i = 0; i &lt; len; i++) &#123;    uuid[i] = chars[0 | Math.random() * radix];&#125;return uuid.join(&#39;&#39;);</code></pre><p>},</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后我们修改login.vue</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">   //增加一个验证码框，在Bootstrap中找</span><br><span class="line">  &lt;label class=&quot;block clearfix&quot;&gt;</span><br><span class="line">  &lt;span class=&quot;block input-icon input-icon-right&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;input-group&quot;&gt;</span><br><span class="line">                  &lt;input  type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;验证码&quot; &gt;</span><br><span class="line">                  &lt;span class=&quot;input-group-addon&quot; id=&quot;basic-add2on&quot;&gt;</span><br><span class="line">                    &lt;img v-on:click=&quot;loadImageCode()&quot; id=&quot;image-code&quot; alt=&quot;验证码&quot;/&gt;</span><br><span class="line">                  &lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">  &lt;/label&gt;</span><br><span class="line">  //初始时加载一次验证码图片</span><br><span class="line">  _this.loadImageCode();</span><br><span class="line">  </span><br><span class="line">   /**</span><br><span class="line">       * 加载验证码方法</span><br><span class="line">       */</span><br><span class="line">      loadImageCode:function ()&#123;</span><br><span class="line">        let _this =this;</span><br><span class="line">        _this.imageCodeToken = Tool.uuid(8);</span><br><span class="line">        $(&#x27;#image-code&#x27;).attr(&#x27;src&#x27;,process.env.VUE_APP_SERVER+&#x27;/system/admin/kaptcha/image-code/&#x27;+_this.imageCodeToken);</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure></li></ul><p><strong>登录增加验证码校验</strong></p><ul><li><p>在userdto中增加属性，增加属性后，记得Alt+lnsert生成get，set，toString（）方法</p></li><li><pre><code class="java">/** * 验证码 */private String imageCode;/** * 图片验证码 */private String imageCodeToken;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在登录里面，增加验证码校验：通过token去缓存中获取验证码字符串，并和用户输入的字符串做比较，在这我们修改UserController的login</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  /**</span><br><span class="line">   * 登录</span><br><span class="line">   */</span><br><span class="line">  @PostMapping(&quot;/login&quot;)</span><br><span class="line">  public ResponseDto login(@RequestBody UserDto userDto, HttpServletRequest request)&#123;</span><br><span class="line">      LOG.info(&quot;用户登录开始&quot;);</span><br><span class="line">      userDto.setPassword(DigestUtils.md5DigestAsHex(userDto.getPassword().getBytes()));</span><br><span class="line">      ResponseDto responseDto = new ResponseDto();</span><br><span class="line">      ////////////////////////////////////////////////////////////////////////////////////</span><br><span class="line">      //根据验证码token去获取缓存中的验证码，和用户输入的验证码是否一致</span><br><span class="line">      String imageCode = (String) request.getSession().getAttribute(userDto.getImageCodeToken());</span><br><span class="line">      if (StringUtils.isEmpty(imageCode))&#123;</span><br><span class="line">          responseDto.setSuccess(false);</span><br><span class="line">          responseDto.setMessage(&quot;验证码已过期&quot;);</span><br><span class="line">          LOG.info(&quot;用户登录失败&quot;);</span><br><span class="line">          return responseDto;</span><br><span class="line">      &#125;</span><br><span class="line">      if (!imageCode.toLowerCase().equals(userDto.getImageCode().toLowerCase()))&#123;</span><br><span class="line">          responseDto.setSuccess(false);</span><br><span class="line">          responseDto.setMessage(&quot;验证码不对&quot;);</span><br><span class="line">          LOG.info(&quot;用户登录失败&quot;);</span><br><span class="line">          return responseDto;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">          //验证码通过后，移除验证码</span><br><span class="line">          request.getSession().removeAttribute(userDto.getImageCodeToken());</span><br><span class="line">      &#125;</span><br><span class="line">      ///////////////////////////////////////////////////////////////////////////////</span><br><span class="line">      LoginUserDto loginUserDto = userService.login(userDto);</span><br><span class="line">      request.getSession().setAttribute(Constants.LOGIN_USER,loginUserDto);</span><br><span class="line">      responseDto.setContent(loginUserDto);</span><br><span class="line">      return responseDto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>前后端分离会有一个问题，每次ajax请求，后端的session是不一样的。在springboo+jsp，或springboot+thymeleaf中，不会有这个问题。获取的验证码一致都是空，这个问题在页面中显示：<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/22/YKgnEjV2ah8r5Tl.png"                      alt="image-20220322110349728"                ></p></li><li><p>下面开始解决验证码获取为空的方法，在main.js中加入</p></li><li><p>&#96;&#96;&#96;js<br>&#x2F;&#x2F;解决每次ajax请求·对应的sessionId不一致的问题<br>axios.defaults.withCredentials &#x3D;true;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 登录验证出错时，将密码清空，同时刷新验证码图片</span><br><span class="line"></span><br><span class="line">- 刷新验证码会让网站更安全，但是会辆性一点用户体验，需要折中选择</span><br><span class="line"></span><br><span class="line">- 只需要在login.vue中login方法登陆不成功时输入下面代码，就可以将密码清空，同时刷新验证码图片</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  _this.user.password = &quot;&quot;;</span><br><span class="line">  _this.loadImageCode();</span><br></pre></td></tr></table></figure></li></ul><h2 id="11-6-单点登录功能开发"><a href="#11-6-单点登录功能开发" class="headerlink" title="11-6 单点登录功能开发"></a>11-6 单点登录功能开发</h2><p><strong>单点登录解决方案介绍</strong></p><ul><li>生产发布时，至少是双节点，防止单台宕机</li><li>request.getSession（）可以访问这片空间</li><li>问题一：B节点中，没有经历过之前的登录，Session没有保存登录用户信息，于是B节点会认为未登录过，会拦截掉业务请</li><li>解决方法一：IP_HASH，对客户端IP做HASH计算，负载均衡SLB中，会根据HASH值将该IP所有的请求固定的发往其中一台，缺点，当其中一个节点宕机，则该节点下的用户需要重新登录；另一个缺点是对SLB不能灵活的配置流量此如A这台机器性能好一点可以分配流量高一些</li><li>解决方法二：不管是在哪一台做的登录，登录完成后，会把登录信息保存到redis中。当业务请求进来时，再到redis中获取登录信息，能获取到就表示已登录；未获取到就表示未登录，拦截掉请求</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/22/1wHWjQd4vIpLYVz.png"                      alt="image-20220322144243004"                ></p><ul><li>功能：只要在其中一个产品中登录过，其他关联的产品都不需要再登录</li><li>token：登录标识，每个用户每次登录，都会生成不同的token</li><li>单点登录（Single Sign On），简称为SSO，核心功能为session共享</li><li>需要解决Session共享的场景：1.同个应用多节点共享登录信息；2.多个项目间共享登录信息。一般我们通常说的单点登录系统，是用来解决场景2的</li><li><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/22/LarEsBOM7Ig6UpH.png"                      alt="image-20220322144848481"                ></li></ul><p><strong>集成redis</strong></p><p>1，用户管理与登录：集成redis，图片验证码的存储从session改为redis</p><ul><li><p>首先在server集成pom.xml</p></li><li><pre><code class="xml">&lt;!-- redis --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&lt;/dependency&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后在application中增加配置</span><br><span class="line"></span><br><span class="line">- ```properties</span><br><span class="line">  # redis配置</span><br><span class="line">  spring.redis.host=r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com</span><br><span class="line">  spring.redis.port=6379</span><br><span class="line">  spring.redis.password=Redis000</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后我们在KaptchaController中修改放验证码操作</p></li><li><p>&#96;&#96;&#96;java<br>&#x2F;&#x2F;注入<br>@Resource<br>public RedisTemplate redisTemplate;</p><p>&#x2F;&#x2F; 将生成的验证码放入会话缓存中，后续验证的时候用到<br>&#x2F;&#x2F; request.getSession().setAttribute(imageCodeToken, createText);<br>&#x2F;&#x2F;将生成的验证码放入redis缓存中后续验证的时候用到<br>redisTemplate.opsForValue().set(imageCodeToken,createText,300, TimeUnit.SECONDS);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 最后在UserController进行取操作</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  //注入</span><br><span class="line">  @Resource</span><br><span class="line">  public RedisTemplate redisTemplate;</span><br><span class="line">  </span><br><span class="line">  //根据验证码token去获取缓存中的验证码，和用户输入的验证码是否一致</span><br><span class="line">  //String imageCode = (String)request.getSession().getAttribute(userDto.getImageCodeToken());</span><br><span class="line">  String imageCode =(String)redisTemplate.opsForValue().get(userDto.getImageCodeToken());</span><br><span class="line">  LOG.info(&quot;从redis中获取到验证码:&#123;&#125;&quot;,imageCode);</span><br></pre></td></tr></table></figure></li></ul><p><strong>生成登录token并存储到redis中</strong></p><p>1.用户管理与登录；生成登录token并存储到redis中：退出登录删除token</p><ul><li><p>我们在LoginUserDto增加</p></li><li><pre><code class="java">/** * 登录凭证 */private String token;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后修改UserController，这里也可以直接保存loginUserDto对象，但是需要序列化。如果是跨应用使用的，比如A应用存，B应用取，一般会把值转成JSON字符串</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">     //验证码通过后，移除验证码</span><br><span class="line">      //request.getSession().removeAttribute(userDto.getImageCodeToken());</span><br><span class="line">      redisTemplate.delete(userDto.getImageCodeToken());</span><br><span class="line">  &#125;</span><br><span class="line">  LoginUserDto loginUserDto = userService.login(userDto);</span><br><span class="line">  String token = UuidUtil.getShortUuid();</span><br><span class="line">  loginUserDto.setToken(token);</span><br><span class="line">  //request.getSession().setAttribute(Constants.LOGIN_USER,loginUserDto);</span><br><span class="line">  redisTemplate.opsForValue().set(token, JSON.toJSONString(loginUserDto),300, TimeUnit.SECONDS);</span><br><span class="line">  responseDto.setContent(loginUserDto);</span><br><span class="line">  return responseDto;</span><br><span class="line">  ////////////////////////////////////////////////////</span><br><span class="line">  /**</span><br><span class="line">       * 退出登录</span><br><span class="line">       */</span><br><span class="line">      @GetMapping(&quot;/logout/&#123;token&#125;&quot;)</span><br><span class="line">      public ResponseDto logout(@PathVariable String token)&#123;</span><br><span class="line">          ResponseDto responseDto = new ResponseDto();</span><br><span class="line">          //request.getSession().removeAttribute(Constants.LOGIN_USER);</span><br><span class="line">         redisTemplate.delete(token);</span><br><span class="line">         LOG.info(&quot;从redis中删除token:&#123;&#125;&quot;,token);</span><br><span class="line">          return responseDto;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>相应的admin.vue，增加token参数</p></li><li><pre><code class="vue">_this.$ajax.get(process.env.VUE_APP_SERVER +&#39;/system/admin/user/logout/&#39;+_this.loginUser.token)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 11-7 前后端登录拦截</span><br><span class="line"></span><br><span class="line">1.用户管理与登录；基于Vue路由的登录拦截</span><br><span class="line"></span><br><span class="line">- 首先在router的admin下增加meta</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  path: &quot;/&quot;,</span><br><span class="line">  name:&quot;admin&quot;,</span><br><span class="line">  component: Admin,</span><br><span class="line">  meta:&#123;</span><br><span class="line">      loginRequire:true</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></code></pre></li><li><p>最后我们在main.js增加，就实现了拦截</p></li><li><p>&#96;&#96;&#96;java<br>&#x2F;&#x2F;路由拦截器<br>router.beforeEach((to,from,next) &#x3D;&gt;{<br>  if (to.matched.some(function (item){<br>return item.meta.loginRequire<br>  })){<br>let loginUser &#x3D; Tool.getLoginUser();<br>if(Tool.isEmpty(loginUser)){<br>  next(‘&#x2F;login’);<br>}else{<br>  next();<br>}<br>  }else{<br>next();<br>  }<br>});</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**在请求headers中统一增加token**</span><br><span class="line"></span><br><span class="line">- 问题：界面拦住了，但是所有的接口都可以直接访问，非常危险，这时我们要做的就是基于后端的登录拦截</span><br><span class="line"></span><br><span class="line">- 就是在main.js的axias拦截器中增加，可以用这种给所有请求加了统一的系统参数，比如在header里加上请求流水，请求时间等</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  let token =Tool.getLoginUser().token;</span><br><span class="line">  if (Tool.isNotEmpty(token))&#123;</span><br><span class="line">    config.headers.token = token;</span><br><span class="line">    console.log(&quot;请求headers增加token:&quot;,token);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>gateway增加登录拦截</strong></p><p>1.用户管理与登录：：在Gateway中增加登录拦截器</p><ul><li><p>不是所有的请求都需要做登录拦截，比如登录接口、验证码图片接口</p></li><li><p>我们首先在application中增加过滤配置</p></li><li><pre><code class="properties">spring.cloud.gateway.routes[0].filters[0].name=LoginAdminspring.cloud.gateway.routes[0].filters[0].args[0]=true<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后我们给系统加一个过滤器，在gateway下增加一个filter软件包，建立一个类LoginAdminGatewayFilterFactory</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.course.gateway.filter;</span><br><span class="line">  </span><br><span class="line">  import org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line">  import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;</span><br><span class="line">  import org.springframework.stereotype.Component;</span><br><span class="line">  </span><br><span class="line">  import javax.annotation.Resource;</span><br><span class="line">  </span><br><span class="line">  @Component</span><br><span class="line">  public class LoginAdminGatewayFilterFactory extends AbstractGatewayFilterFactory&lt;Object&gt; &#123;</span><br><span class="line">  </span><br><span class="line">      @Resource</span><br><span class="line">      LoginAdminGatewayFilter loginAdminGatewayFilter;</span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      public GatewayFilter apply(Object config) &#123;</span><br><span class="line">          return loginAdminGatewayFilter;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>最后在同包下建立实现类LoginAdminGatewayFilter</p></li><li><pre><code class="java">package com.course.gateway.filter;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.cloud.gateway.filter.GatewayFilter;import org.springframework.cloud.gateway.filter.GatewayFilterChain;import org.springframework.core.Ordered;import org.springframework.stereotype.Component;import org.springframework.web.server.ServerWebExchange;import reactor.core.publisher.Mono;@Componentpublic class LoginAdminGatewayFilter implements GatewayFilter, Ordered &#123;    private static final Logger LOG = LoggerFactory.getLogger(LoginAdminGatewayFilter.class);    @Override    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;        //获取header的token参数        String token = exchange.getRequest().getHeaders().getFirst(&quot;token&quot;);        LOG.info(&quot;控台登录验证开始，token：&#123;&#125;&quot;, token);        return chain.filter(exchange);        &#125;    @Override    public int getOrder()    &#123;        return 1;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2.用户管理与登录：gateway实现控台登录拦截功能</span><br><span class="line"></span><br><span class="line">- 我们给gateway的pom.xml增加，gateway模块并没有依赖server模块，所以有些jar包redis，json等，需要单独在pom.xml中增加依赖</span><br><span class="line"></span><br><span class="line">- ```xml</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 热部署DevTools --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>在LoginAdminGatewayFilter做如下修改</p></li><li><pre><code class="java">//注入@Resourceprivate RedisTemplate redisTemplate;//判断拦截 @Override    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;    //////////////////////////////////////////////////////////        String path = exchange.getRequest().getURI().getPath();        //请求地址不包含/admin/的，不是控台请求，不需要拦截        if(!path.contains(&quot;/admin/&quot;))&#123;            return chain.filter(exchange);        &#125;        if (path.contains(&quot;/system/admin/user/login&quot;)                ||path.contains(&quot;/system/admin/user/logout&quot;)                ||path.contains(&quot;/system/admin/kaptcha&quot;))&#123;            LOG.info(&quot;不需要控台登录验证:&#123;&#125;&quot;,path);            return chain.filter(exchange);        &#125;    ///////////////////////////////////////////////////////////////        //获取header的token参数        String token = exchange.getRequest().getHeaders().getFirst(&quot;token&quot;);        LOG.info(&quot;控台登录验证开始，token：&#123;&#125;&quot;, token);    /////////////////////////////////////////////////////////////////        if (token == null||token.isEmpty())&#123;            LOG.info(&quot;token为空，请求被拦截&quot;);            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);            return exchange.getResponse().setComplete();        &#125;        Object object = redisTemplate.opsForValue().get(token);        if (object == null)&#123;            LOG.warn(&quot;token无效，请求被拦截&quot;);            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);            return exchange.getResponse().setComplete();        &#125;else&#123;            LOG.info(&quot;已登录:&#123;&#125;&quot;,object);            return chain.filter(exchange);        &#125;    ////////////////////////////////////////////////////////////////////////////        &#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 11-8 用户登录流程图</span><br><span class="line"></span><br><span class="line">**验证码图片登录**</span><br><span class="line"></span><br><span class="line">![image-20220323120729776](https://s2.loli.net/2022/03/23/mLCw1ZGrJPQuhUo.png)</span><br><span class="line"></span><br><span class="line">![image-20220323120812348](https://s2.loli.net/2022/03/23/Yag4z8IZPEwA3DT.png)</span><br><span class="line"></span><br><span class="line">**登录的流程**</span><br><span class="line"></span><br><span class="line">![image-20220323120858378](https://s2.loli.net/2022/03/23/5He4E1ZMb23TXPs.png)</span><br><span class="line"></span><br><span class="line">![image-20220323120919748](https://s2.loli.net/2022/03/23/h5Iut2cBRlPMOHa.png)</span><br><span class="line"></span><br><span class="line">![image-20220323121028370](https://s2.loli.net/2022/03/23/b6ODknduZC3LPKE.png)</span><br><span class="line"></span><br><span class="line">![](https://s2.loli.net/2022/03/23/9PiSnANMfyRC16L.png)</span><br><span class="line"></span><br><span class="line">![image-20220323121244262](https://s2.loli.net/2022/03/23/JWmX4CScP35lig7.png)</span><br><span class="line"></span><br><span class="line">![image-20220323121306313](https://s2.loli.net/2022/03/23/H9YwsyDmTvcdX6h.png)</span><br><span class="line"></span><br><span class="line"># 第12章 通用权限设计</span><br><span class="line"></span><br><span class="line">本章演示通用权限功能开发，不依赖任何使用第三方框架，使用经典的资源、角色、用户关联，灵活且维护，可以细粒度的控制菜单、按钮、接口的权限，适用于通用后台管理系统的权限管理。</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">## 12-1 通用权限解决方案介绍</span><br><span class="line"></span><br><span class="line">- 目前一些知名的权限框架有Shiro和SpringSecurity。正常情况，直接用框架没什么问题。方便，快速，但是需要一定的学习成本，得学习如何使用这些框架。</span><br><span class="line">- 用框架还有一个缺点是不好定制，因为每个产品的业务都不太一样，要控制的权限都不太一样，此时如果硬是套用框架就会很别扭</span><br><span class="line">- 经典的权限管理设计：用户和角色关联，角色和资源关联</span><br><span class="line">- 两张关联表的配置，可以单独设计界面，也可以直接做到角色管理界面里。</span><br><span class="line">- 权限初始化，系统上线时，要初始化这五张表的数据。初始有一个用户能登录能管理角色，管理资源，分配权限</span><br><span class="line">- 疑问：前端已经对菜单和按钮做拦截，用户不能操作，为什么还要对接口做拦截？</span><br><span class="line">- 重要提示：所有前端的设计都是不安全的</span><br><span class="line"></span><br><span class="line">![image-20220323144829155](https://s2.loli.net/2022/03/23/sGLSViJINfwhj5d.png)</span><br><span class="line"></span><br><span class="line">## 12-2 资源配置管理</span><br><span class="line"></span><br><span class="line">**资源表的设计与基本代码生成**</span><br><span class="line"></span><br><span class="line">1.通用权限管理：资源表的设计与基本代码生成</span><br><span class="line"></span><br><span class="line">- 资源的名称一般是用页面上看得见的元素：菜单、按钮等。</span><br><span class="line"></span><br><span class="line">- 页面对vue框架来说，就是路由</span><br><span class="line"></span><br><span class="line">- 如果是一个页面的所有操作统一控制权限，request可以填相关接口的前缀</span><br><span class="line"></span><br><span class="line">- 我们首先写sql</span><br><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  # 资源</span><br><span class="line">  drop table if exists `resource`;</span><br><span class="line">  create table `resource`(</span><br><span class="line">                         `id` char(6) not null default &#x27;&#x27; comment &#x27;id&#x27;,</span><br><span class="line">                         `name` varchar(100) not null comment &#x27;名称|菜单或按钮&#x27;,</span><br><span class="line">                         `page` varchar(50) null comment &#x27;页面|路由&#x27;,</span><br><span class="line">                         `request` varchar(200) null comment &#x27;请求|接口&#x27;,</span><br><span class="line">                         `parent` char(6)  comment &#x27;父id&#x27;,</span><br><span class="line">                         primary key (`id`)</span><br><span class="line">  )engine =innodb default charset=utf8mb4 comment=&#x27;资源&#x27;;</span><br><span class="line">  </span><br><span class="line">  insert into `resource` values (&#x27;01&#x27;,&#x27;系统管理&#x27;,null,null,null);</span><br><span class="line">  insert into `resource` values (&#x27;0101&#x27;,&#x27;用户管理&#x27;,&#x27;/system/user&#x27;,null,&#x27;01&#x27;);</span><br><span class="line">  insert into `resource` values (&#x27;010101&#x27;,&#x27;保存&#x27;,null,&#x27;[&quot;/system/admin/user/list&quot;,&quot;/system/admin/user/save&quot;]&#x27;,&#x27;0101&#x27;);</span><br><span class="line">  insert into `resource` values (&#x27;010102&#x27;,&#x27;删除&#x27;,null,&#x27;[&quot;/system/admin/user/delete&quot;]&#x27;,&#x27;0101&#x27;);</span><br><span class="line">  insert into `resource` values (&#x27;010103&#x27;,&#x27;重置密码&#x27;,null,&#x27;[&quot;/system/admin/user/save-password&quot;]&#x27;,&#x27;0101&#x27;);</span><br><span class="line">  insert into `resource` values (&#x27;0102&#x27;,&#x27;资源管理&#x27;,&#x27;/system/resource&#x27;,null,&#x27;01&#x27;);</span><br><span class="line">  insert into `resource` values (&#x27;010201&#x27;,&#x27;保存/显示&#x27;,null,&#x27;[&quot;/system/admin/resource&quot;]&#x27;,&#x27;0102&#x27;);</span><br><span class="line">  insert into `resource` values (&#x27;0103&#x27;,&#x27;角色管理&#x27;,&#x27;/system/role&#x27;,null,&#x27;01&#x27;);</span><br><span class="line">  insert into `resource` values (&#x27;010301&#x27;,&#x27;角色/权限管理&#x27;,null,&#x27;[&quot;/system/admin/role&quot;]&#x27;,&#x27;0103&#x27;);</span><br></pre></td></tr></table></figure></code></pre></li><li><p>接着就开始一顿操作，代码生成器，最后生成vue时，ResourceService和ResourceController会出现一个问题，原因：资源表的实体类是Resource，和@Resbutee注解同名！导致冲突<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/23/wW3hxoPyMv9dsLg.png"                      alt="image-20220323192200289"                ></p></li><li><p>解决上面的问题就是直接写全<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/23/UW5xh67KifNCE3n.png"                      alt="image-20220323192341557"                ></p></li><li><p>下面开始修改admin</p></li><li><p>&#96;&#96;&#96;vue</p><li class="">  <router-link to="/system/resource">    <i class="menu-icon fa fa-caret-right"></i>    资源管理  </router-link><p>  <b class="arrow"></b></p></li><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 最后改下router.js</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  ,&#123;</span><br><span class="line">      path: &quot;system/resource&quot;,</span><br><span class="line">      name:&quot;system/resource&quot;,</span><br><span class="line">      component: Resource,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>资源树的保存</strong></p><p>1.通用权限管理：资源树的保存</p><ul><li><p>资源点是开发阶段就确定的，所以并不是上线后再一个一个配置的。</p></li><li><p>资源管理最简单的一种方案：上线前准备好sql，刷库</p></li><li><p>在这里将资源管理做成资源树进行管理，填入数据：带有层级结构的json字符串<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/23/WGr4hF6TIQeXSkY.png"                      alt="image-20220323201202115"                ></p></li><li><p>用法：以后开发新功能的时候，就在该文件里加入新的资源可以上线前将新的资源json通过控台保存进数据库</p></li><li><pre><code class="json">[&#123;  &quot;id&quot;: &quot;01&quot;,&quot;name&quot;: &quot;系统管理&quot;,  &quot;children&quot;:[&#123;    &quot;id&quot;:&quot;0101&quot;,&quot;name&quot;:&quot;用户管理&quot;,&quot;page&quot;:&quot;/system/user&quot;,    &quot;children&quot;:[        &#123;&quot;id&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;保存&quot;,&quot;request&quot;:[&quot;/system/admin/user/list&quot;,&quot;/system/admin/user/save&quot;]&#125;,        &#123;&quot;id&quot;:&quot;010102&quot;,&quot;name&quot;:&quot;删除&quot;,&quot;request&quot;:[&quot;/system/admin/user/delete&quot;]&#125;,        &#123;&quot;id&quot;:&quot;010103&quot;,&quot;name&quot;:&quot;重置密码&quot;,&quot;request&quot;:[&quot;/system/admin/user/save-password&quot;]&#125;      ]&#125;,    &#123;      &quot;id&quot;:&quot;0102&quot;,&quot;name&quot;:&quot;资源管理&quot;,&quot;page&quot;:&quot;/system/resource&quot;,      &quot;children&quot;:[        &#123;&quot;id&quot;:&quot;010201&quot;,&quot;name&quot;:&quot;保存/显示&quot;,&quot;request&quot;:[&quot;/system/admin/resource&quot;]&#125;      ]    &#125;, &#123;        &quot;id&quot;:&quot;0103&quot;,&quot;name&quot;:&quot;角色管理&quot;,&quot;page&quot;:&quot;/system/role&quot;,        &quot;children&quot;:[            &#123;&quot;id&quot;:&quot;010301&quot;,&quot;name&quot;:&quot;角色/权限管理&quot;,&quot;request&quot;:[&quot;/system/admin/role&quot;]&#125;          ]      &#125;]&#125;]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 接下来修改下resource.vue，</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  //新增去了，加上保存，并且删除模态框</span><br><span class="line">  &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;col-md-6&quot;&gt;</span><br><span class="line">      &lt;textarea id=&quot;resource-textarea&quot; class=&quot;form-control&quot; v-model=&quot;resourceStr&quot; name=&quot;resource&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">  </span><br><span class="line">      &lt;br&gt;</span><br><span class="line">      &lt;button id=&quot;save-btn&quot; type=&quot;button&quot; class=&quot;btn btn-primary&quot; v-on:click=&quot;save()&quot;&gt;</span><br><span class="line">        保存</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">  //然后data新增一个resourceStr绑定到多行文本框里的</span><br><span class="line">  resourceStr:&quot;&quot;,</span><br><span class="line">  //然后add和edit都删了</span><br><span class="line">  //最后修改下save</span><br><span class="line">    save() &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">  /////////////////////////////////////////////以下是修改</span><br><span class="line">        // 保存校验</span><br><span class="line">        if (Tool.isEmpty(_this.resourceStr)) &#123;</span><br><span class="line">          Toast.warning(&quot;资源不能为空！&quot;);</span><br><span class="line">          return;</span><br><span class="line">        &#125;</span><br><span class="line">        let json = JSON.parse(_this.resourceStr);</span><br><span class="line">  </span><br><span class="line">        Loading.show();</span><br><span class="line">        _this.$ajax.post(process.env.VUE_APP_SERVER +&#x27;/system/admin/resource/save&#x27;, json).then((respond) =&gt; &#123;</span><br><span class="line">  /////////////////////////////////////////////////</span><br><span class="line">          Loading.hide();</span><br><span class="line">          let resp = respond.data;</span><br><span class="line">          if (resp.success) &#123;</span><br><span class="line">            $(&quot;#form-modal&quot;).modal(&quot;hide&quot;);</span><br><span class="line">            _this.list(1);</span><br><span class="line">            Toast.success(&quot;保存成功&quot;);</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">            Toast.warning(resp.message);</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure></code></pre></li><li><p>接下来修改下ResourceController的save，原本是一个个保存，现在直接保存整个字符串</p></li><li><pre><code class="java">@PostMapping(&quot;/save&quot;)public ResponseDto save(@RequestBody String jsonStr)&#123;    //保存校验        ValidatorUtil.require(jsonStr, &quot;资源&quot;);    ResponseDto responseDto = new ResponseDto();    resourceService.saveJson(jsonStr);    return responseDto;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后我们修改ResourceDto</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  private List&lt;ResourceDto&gt; children;//嵌套实类结构</span><br></pre></td></tr></table></figure></code></pre></li><li><p>最后我们修改ResourceService</p></li><li><pre><code class="java">/** * 新增，ID是自定义好的，不是自动生成的，将setId删除 */private void insert(Resource resource)&#123;    resourceMapper.insert(resource);&#125; /**     * 保存资源树     * @param json     */    @Transactional    public void saveJson(String json)&#123;        List&lt;ResourceDto&gt; jsonList = JSON.parseArray(json, ResourceDto.class);        List&lt;ResourceDto&gt; list = new ArrayList&lt;&gt;();//将带有嵌套结构的jsonList里所有的节点取出来，组成简单的list        if (!CollectionUtils.isEmpty(jsonList))&#123;            for (ResourceDto d:jsonList)&#123;                d.setParent(&quot;&quot;);                add(list,d);            &#125;        &#125;        LOG.info(&quot;共&#123;&#125;条&quot;,list.size());        resourceMapper.deleteByExample(null);//把数据库整张表清空        for (int i = 0; i &lt; list.size(); i++) &#123;            this.insert(CopyUtil.copy(list.get(i),Resource.class));        &#125;    &#125; /**     * 递归，将树形节点全部取出来，放到list。add方法是一个递归函数，功能是将d节点下的子节点添加到list中如果子节点下还有孙子节点，则递归调用add方法     * @param list     * @param dto     */    public void add(List&lt;ResourceDto&gt; list,ResourceDto dto)&#123;        list.add(dto);        if(!CollectionUtils.isEmpty(dto.getChildren()))&#123;            for (ResourceDto d:dto.getChildren())&#123;                d.setParent(dto.getId());                add(list,d);            &#125;        &#125;    &#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**资源树的显示**</span><br><span class="line"></span><br><span class="line">![image-20220324100951445](https://s2.loli.net/2022/03/24/S43O1C9zFjX7xfI.png)</span><br><span class="line"></span><br><span class="line">- 我们首先修改resource.vue</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  //在保存按钮下新增，下面表格就可以删了</span><br><span class="line">  &lt;div class=&quot;col-md-6&quot;&gt;</span><br><span class="line">    &lt;ul id=&quot;tree&quot; class=&quot;ztree&quot;&gt;&lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  //data中增加对象</span><br><span class="line">  tree:&#123;&#125;,</span><br><span class="line">  //对list进行修改</span><br><span class="line">  list() &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        Loading.show();</span><br><span class="line">        _this.$ajax.get(process.env.VUE_APP_SERVER +&#x27;/system/admin/resource/load-tree&#x27;)</span><br><span class="line">        .then((res) =&gt; &#123;</span><br><span class="line">          Loading.hide();</span><br><span class="line">          let response = res.data;</span><br><span class="line">          _this.resources = response.content;</span><br><span class="line">          //初始树</span><br><span class="line">          _this.initTree();</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">  //增加一个初始化树</span><br><span class="line">   initTree()&#123;</span><br><span class="line">        let _this =this;</span><br><span class="line">        let setting=&#123;</span><br><span class="line">          data:&#123;</span><br><span class="line">            simpleData:&#123;</span><br><span class="line">              idKey:&quot;id&quot;,</span><br><span class="line">              pIdKey:&quot;parent&quot;,</span><br><span class="line">              rootPId:&quot;&quot;,</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        _this.zTree = $.fn.zTree.init($(&quot;#tree&quot;),setting,_this.resources);</span><br><span class="line">        _this.zTree.expandAll(true);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>在ResourceController就增加了一个方法</p></li><li><pre><code class="java">/** * 资源树查询 */@GetMapping(&quot;/load-tree&quot;)public  ResponseDto loadTree()&#123;    ResponseDto responseDto = new ResponseDto();    List&lt;ResourceDto&gt; resourceDtoList = resourceService.loadTree();    responseDto.setContent(resourceDtoList);    return responseDto;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 接下来修改下对应的ResourceService</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  /**</span><br><span class="line">   * 按约定将列表转成树</span><br><span class="line">   * 要求：ID要正序排列</span><br><span class="line">   */</span><br><span class="line">  public List&lt;ResourceDto&gt; loadTree() &#123;</span><br><span class="line">      ResourceExample example = new ResourceExample();</span><br><span class="line">      example.setOrderByClause(&quot;id asc&quot;);</span><br><span class="line">      List&lt;Resource&gt; resourceList = resourceMapper.selectByExample(example);</span><br><span class="line">      List&lt;ResourceDto&gt; resourceDtoList = CopyUtil.copyList(resourceList, ResourceDto.class);</span><br><span class="line">      for (int i = resourceDtoList.size() - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">          //当前要移动的记录</span><br><span class="line">          ResourceDto child = resourceDtoList.get(i);</span><br><span class="line">          //如果当前节点没有父节点，则不用往下了</span><br><span class="line">          if (StringUtils.isEmpty(child.getParent())) &#123;</span><br><span class="line">              continue;</span><br><span class="line">          &#125;</span><br><span class="line">          //查找父节点</span><br><span class="line">          for (int j = i - 1; j &gt;= 0; j--) &#123;</span><br><span class="line">              ResourceDto parent = resourceDtoList.get(j);</span><br><span class="line">              if (child.getParent().equals(parent.getId())) &#123;</span><br><span class="line">                  if (CollectionUtils.isEmpty(parent.getChildren())) &#123;</span><br><span class="line">                      parent.setChildren(new ArrayList&lt;&gt;());</span><br><span class="line">                  &#125;</span><br><span class="line">                  //添加到最前面，否则会变成倒序，因为循环是从后往前循环的</span><br><span class="line">                  parent.getChildren().add(0, child);</span><br><span class="line">                  //子节点找到父节点后删除列表中的子节点</span><br><span class="line">                  resourceDtoList.remove(child);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return resourceDtoList;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>资源的保存是将树结构转成列表，重点是children属性；资源的显示是将列表转成树结构，重点是parent属性。</p></li><li><p>小知识：一边循环list，一边删除list中的对象，可以使用倒序循环</p></li></ul><h2 id="12-3角色权限管理"><a href="#12-3角色权限管理" class="headerlink" title="12-3角色权限管理"></a>12-3角色权限管理</h2><p><strong>基本的角色管理功能</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.通用权限管理：增加基本的角色管理功能</span><br><span class="line">2.资源列表补全</span><br></pre></td></tr></table></figure><ul><li><p>我们首先写sql，然后代码生成器</p></li><li><pre><code class="sql"># 角色drop table if exists `role`;create table `role`(                           `id` char(8) not null default &#39;&#39; comment &#39;id&#39;,                           `name` varchar(50) not null comment &#39;角色&#39;,                           `desc` varchar(100) not null comment &#39;描述&#39;,                           primary key (`id`))engine =innodb default charset=utf8mb4 comment=&#39;角色&#39;;insert into `role` values (&#39;00000000&#39;,&#39;系统管理员&#39;,&#39;管理用户、角色权限&#39;);insert into `role` values (&#39;00000001&#39;,&#39;开发&#39;,&#39;维护资源&#39;);insert into `role` values (&#39;00000002&#39;,&#39;业务管理员&#39;,&#39;负责业务管理&#39;);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- admin增加</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;b class=&quot;arrow&quot;&gt;&lt;/b&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;li class=&quot;&quot; id=&quot;system-role-sidebar&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/system/role&quot;&gt;</span><br><span class="line">      &lt;i class=&quot;menu-icon fa fa-caret-right&quot;&gt;&lt;/i&gt;</span><br><span class="line">      角色管理</span><br><span class="line">    &lt;/router-link&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>最后修改router.js</p></li><li><p>&#96;&#96;&#96;js<br>,{<br>path: “system&#x2F;role”,<br>name:”system&#x2F;role”,<br>component: Role,<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 另外我们把resource.js补全</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  [&#123;</span><br><span class="line">      &quot;id&quot;: &quot;01&quot;,&quot;name&quot;: &quot;系统管理&quot;,</span><br><span class="line">      &quot;children&quot;:[&#123;</span><br><span class="line">        &quot;id&quot;:&quot;0101&quot;,&quot;name&quot;:&quot;用户管理&quot;,&quot;page&quot;:&quot;/system/user&quot;,</span><br><span class="line">        &quot;children&quot;:[</span><br><span class="line">          &#123;&quot;id&quot;:&quot;010101&quot;,&quot;name&quot;:&quot;保存&quot;,&quot;request&quot;:[&quot;/system/admin/user/list&quot;,&quot;/system/admin/user/save&quot;]&#125;,</span><br><span class="line">          &#123;&quot;id&quot;:&quot;010102&quot;,&quot;name&quot;:&quot;删除&quot;,&quot;request&quot;:[&quot;/system/admin/user/delete&quot;]&#125;,</span><br><span class="line">          &#123;&quot;id&quot;:&quot;010103&quot;,&quot;name&quot;:&quot;重置密码&quot;,&quot;request&quot;:[&quot;/system/admin/user/save-password&quot;]&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;id&quot;:&quot;0102&quot;,&quot;name&quot;:&quot;资源管理&quot;,&quot;page&quot;:&quot;/system/resource&quot;,</span><br><span class="line">        &quot;children&quot;:[</span><br><span class="line">          &#123;&quot;id&quot;:&quot;010201&quot;,&quot;name&quot;:&quot;保存/显示&quot;,&quot;request&quot;:[&quot;/system/admin/resource&quot;]&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">          &quot;id&quot;:&quot;0103&quot;,&quot;name&quot;:&quot;角色管理&quot;,&quot;page&quot;:&quot;/system/role&quot;,</span><br><span class="line">          &quot;children&quot;:[</span><br><span class="line">              &#123;&quot;id&quot;:&quot;010301&quot;,&quot;name&quot;:&quot;角色/权限管理&quot;,&quot;request&quot;:[&quot;/system/admin/role&quot;]&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;]</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    &quot;id&quot;: &quot;02&quot;,&quot;name&quot;: &quot;业务管理&quot;,</span><br><span class="line">    &quot;children&quot;:[&#123;</span><br><span class="line">      &quot;id&quot;:&quot;0201&quot;,&quot;name&quot;:&quot;分类管理&quot;,&quot;page&quot;:&quot;/business/category&quot;,</span><br><span class="line">      &quot;children&quot;:[</span><br><span class="line">        &#123;&quot;id&quot;:&quot;020101&quot;,&quot;name&quot;:&quot;增删改查&quot;,&quot;request&quot;:[&quot;/business/admin/category&quot;]&#125;</span><br><span class="line">       ]</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        &quot;id&quot;:&quot;0202&quot;,&quot;name&quot;:&quot;课程管理&quot;,&quot;page&quot;:&quot;/business/course&quot;,</span><br><span class="line">        &quot;children&quot;:[</span><br><span class="line">          &#123;&quot;id&quot;:&quot;020201&quot;,&quot;name&quot;:&quot;增删改查&quot;,&quot;request&quot;:[&quot;/business/admin/course&quot;,&quot;/business/admin/category/all&quot;]&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        &quot;id&quot;:&quot;0203&quot;,&quot;name&quot;:&quot;讲师管理&quot;,&quot;page&quot;:&quot;/business/teacher&quot;,</span><br><span class="line">        &quot;children&quot;:[</span><br><span class="line">          &#123;&quot;id&quot;:&quot;020301&quot;,&quot;name&quot;:&quot;增删改查&quot;,&quot;request&quot;:[&quot;/business/admin/teacher&quot;]&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">    &quot;id&quot;: &quot;03&quot;,&quot;name&quot;: &quot;文件管理&quot;,</span><br><span class="line">    &quot;children&quot;:[&#123;</span><br><span class="line">      &quot;id&quot;:&quot;0301&quot;,&quot;name&quot;:&quot;文件管理&quot;,&quot;page&quot;:&quot;/file/file&quot;,</span><br><span class="line">      &quot;children&quot;:[</span><br><span class="line">        &#123;&quot;id&quot;:&quot;030101&quot;,&quot;name&quot;:&quot;文件管理&quot;,&quot;request&quot;:[&quot;/file/admin/file&quot;]&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br></pre></td></tr></table></figure></li></ul><p><strong>增加角色资源关联功能</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.通用权限管理：增加角色资源关联表，生成持久层和服务端代码</span><br></pre></td></tr></table></figure><ul><li><p>首先添加sql,然后mybatis和server代码生成器，界面就用role的</p></li><li><p>&#96;&#96;&#96;sql</p><h1 id="角色-资源关联表"><a href="#角色-资源关联表" class="headerlink" title="角色-资源关联表"></a>角色-资源关联表</h1><p>drop table if exists <code>role_resource</code>;<br>create table <code>role_resource</code>(<br>                   <code>id</code> char(8) not null default ‘’ comment ‘id’,<br>                   <code>role_id</code> char(8) not null  comment ‘角色|id’,<br>                   <code>resource_id</code> char(6) not null  comment ‘资源|id’,<br>                   primary key (<code>id</code>)<br>)engine &#x3D;innodb default charset&#x3D;utf8mb4 comment&#x3D;’角色资源关联’;</p><p>insert into <code>role_resource</code> values (‘00000000’,’00000000’,’01’);<br>insert into <code>role_resource</code> values (‘00000001’,’00000000’,’0101’);<br>insert into <code>role_resource</code> values (‘00000002’,’00000000’,’010101’);<br>insert into <code>role_resource</code> values (‘00000003’,’00000000’,’010102’);<br>insert into <code>role_resource</code> values (‘00000004’,’00000000’,’010103’);<br>insert into <code>role_resource</code> values (‘00000005’,’00000000’,’0102’);<br>insert into <code>role_resource</code> values (‘00000006’,’00000000’,’010201’);<br>insert into <code>role_resource</code> values (‘00000007’,’00000000’,’0103’);<br>insert into <code>role_resource</code> values (‘00000008’,’00000000’,’010301’);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>2.通用权限管理：点击【关联资源】按钮时，加载资源树</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 显示图片如下所示![image-20220324150010236](https://s2.loli.net/2022/03/24/nvjwr5k9myh7LNQ.png)</span><br><span class="line"></span><br><span class="line">- 我们只修改role就行</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  //在操作那加一个按钮</span><br><span class="line">  &lt;button v-on:click=&quot;editResource(role)&quot; class=&quot;btn btn-xs btn-info&quot;&gt;</span><br><span class="line">    &lt;i class=&quot;ace-icon fa fa-list bigger-120&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">  //增加一个模态框</span><br><span class="line">  &lt;!-- 角色资源关联配置 --&gt;</span><br><span class="line">      &lt;div id=&quot;resource-modal&quot; class=&quot;modal fade&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;modal-dialog&quot; role=&quot;document&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;modal-content&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;modal-header&quot;&gt;</span><br><span class="line">              &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;&lt;/button&gt;</span><br><span class="line">              &lt;h4 class=&quot;modal-title&quot;&gt;角色资源关联配置&lt;/h4&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;modal-body&quot;&gt;</span><br><span class="line">              &lt;ul id=&quot;tree&quot; class=&quot;ztree&quot;&gt;&lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;modal-footer&quot;&gt;</span><br><span class="line">              &lt;button type=&quot;button&quot; class=&quot;btn btn-white btn-default btn-round&quot; data-dismiss=&quot;modal&quot;&gt;</span><br><span class="line">                &lt;i class=&quot;ace-icon fa fa-times&quot;&gt;&lt;/i&gt;</span><br><span class="line">                关闭</span><br><span class="line">              &lt;/button&gt;</span><br><span class="line">              &lt;button type=&quot;button&quot; class=&quot;btn btn-white btn-info btn-round&quot; v-on:click=&quot;saveResource()&quot;&gt;</span><br><span class="line">                &lt;i class=&quot;ace-icon fa fa-plus blue&quot;&gt;&lt;/i&gt;</span><br><span class="line">                保存</span><br><span class="line">              &lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;&lt;!-- /.modal-content --&gt;</span><br><span class="line">        &lt;/div&gt;&lt;!-- /.modal-dialog --&gt;</span><br><span class="line">      &lt;/div&gt;&lt;!-- /.modal --&gt;</span><br><span class="line">  //在data中加两个对象</span><br><span class="line">      resource:[],</span><br><span class="line">        zTree:&#123;&#125;,</span><br><span class="line">  //增加这几个方法</span><br><span class="line">  /**</span><br><span class="line">       * 点击【编辑】</span><br><span class="line">       */</span><br><span class="line">      editResource(role) &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        _this.role = $.extend(&#123;&#125;, role);</span><br><span class="line">        _this.loadResource();</span><br><span class="line">        $(&quot;#resource-modal&quot;).modal(&quot;show&quot;);</span><br><span class="line">      &#125;,</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 加载资源树</span><br><span class="line">       */</span><br><span class="line">      loadResource() &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        Loading.show();</span><br><span class="line">        _this.$ajax.get(process.env.VUE_APP_SERVER + &#x27;/system/admin/resource/load-tree&#x27;).then((res)=&gt;&#123;</span><br><span class="line">          Loading.hide();</span><br><span class="line">          let response = res.data;</span><br><span class="line">          _this.resources = response.content;</span><br><span class="line">          // 初始化树</span><br><span class="line">          _this.initTree();</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 初始资源树</span><br><span class="line">       */</span><br><span class="line">      initTree() &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        let setting = &#123;</span><br><span class="line">          check: &#123;</span><br><span class="line">            enable: true</span><br><span class="line">          &#125;,</span><br><span class="line">          data: &#123;</span><br><span class="line">            simpleData: &#123;</span><br><span class="line">              idKey: &quot;id&quot;,</span><br><span class="line">              pIdKey: &quot;parent&quot;,</span><br><span class="line">              rootPId: &quot;&quot;,</span><br><span class="line">              enable: true</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">  </span><br><span class="line">        _this.zTree = $.fn.zTree.init($(&quot;#tree&quot;), setting, _this.resources);</span><br><span class="line">        _this.zTree.expandAll(true);</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.通用权限管理：点击资源树模态框【保存】按钮时，保存角色资源关联表</span><br></pre></td></tr></table></figure><ul><li><p>增加一个保存功能<img                       lazyload                     src="/images/loading.svg"                     data-src="/../../../AppData/Roaming/Typora/typora-user-images/image-20220324151335505.png"                      alt="image-20220324151335505"                ></p></li><li><p>现在role.vue中添加保存方法</p></li><li><pre><code>/** * 资源模态框点击【保存】 */saveResource() &#123;  let _this = this;  let resources = _this.zTree.getCheckedNodes();  console.log(&quot;勾选的资源：&quot;, resources);  // 保存时，只需要保存资源id，所以使用id数组进行参数传递  let resourceIds = [];  for (let i = 0; i &lt; resources.length; i++) &#123;    resourceIds.push(resources[i].id);  &#125;  _this.$ajax.post(process.env.VUE_APP_SERVER + &#39;/system/admin/role/save-resource&#39;, &#123;    id: _this.role.id,    resourceIds: resourceIds  &#125;).then((response)=&gt;&#123;    let resp = response.data;    if (resp.success) &#123;      Toast.success(&quot;保存成功!&quot;);    &#125; else &#123;      Toast.warning(resp.message);    &#125;  &#125;);&#125;,<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 再在roledto增加字段</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  private List&lt;String&gt; resourceIds;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>接下来修改RoleController</p></li><li><p>&#96;&#96;&#96;Java<br>&#x2F;**</p><ul><li>保存资源</li><li>@param roleDto</li></ul><p> *&#x2F;<br>@PostMapping(“&#x2F;save-resource”)<br>public ResponseDto saveResource(@RequestBody RoleDto roleDto) {<br>    LOG.info(“保存角色资源关联开始”);<br>    ResponseDto<RoleDto> responseDto &#x3D; new ResponseDto&lt;&gt;();<br>    roleService.saveResource(roleDto);<br>    responseDto.setContent(roleDto);<br>    return responseDto;<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 最后修改RoleService</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  @Resource</span><br><span class="line">  private RoleResourceMapper roleResourceMapper;</span><br><span class="line">   /**</span><br><span class="line">       * 按角色保存资源</span><br><span class="line">       */</span><br><span class="line">      @Transactional</span><br><span class="line">      public void saveResource(RoleDto roleDto) &#123;</span><br><span class="line">          String roleId = roleDto.getId();</span><br><span class="line">          List&lt;String&gt; resourceIds = roleDto.getResourceIds();</span><br><span class="line">          // 清空库中所有的当前角色下的记录</span><br><span class="line">          RoleResourceExample example = new RoleResourceExample();</span><br><span class="line">          example.createCriteria().andRoleIdEqualTo(roleId);</span><br><span class="line">          roleResourceMapper.deleteByExample(example);</span><br><span class="line">  </span><br><span class="line">          // 保存角色资源</span><br><span class="line">          for (int i = 0; i &lt; resourceIds.size(); i++) &#123;</span><br><span class="line">              RoleResource roleResource = new RoleResource();</span><br><span class="line">              roleResource.setId(UuidUtil.getShortUuid());</span><br><span class="line">              roleResource.setRoleId(roleId);</span><br><span class="line">              roleResource.setResourceId(resourceIds.get(i));</span><br><span class="line">              roleResourceMapper.insert(roleResource);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4.通用权限管理：打开资源树模态框时，加载角色资源关联数据，并自动勾选树节点</span><br></pre></td></tr></table></figure><ul><li><p>批量操作的思路：先将原有的删除，再批量新增</p></li><li><p>首先修改role.vue</p></li><li><pre><code class="vue">//在loadResource方法初始化树后加载资源// 初始化树_this.initTree();_this.listRoleResource();/**     * 加载角色资源关联记录     */    listRoleResource() &#123;      let _this = this;      _this.$ajax.get(process.env.VUE_APP_SERVER + &#39;/system/admin/role/list-resource/&#39; + _this.role.id).then((response)=&gt;&#123;        let resp = response.data;        let resources = resp.content;        // 勾选查询到的资源：先把树的所有节点清空勾选，再勾选查询到的节点        _this.zTree.checkAllNodes(false);        for (let i = 0; i &lt; resources.length; i++) &#123;          let node = _this.zTree.getNodeByParam(&quot;id&quot;, resources[i]);          _this.zTree.checkNode(node, true);        &#125;      &#125;);    &#125;,<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 接下来在RoleController</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  /**</span><br><span class="line">   * 加载已关联的资源</span><br><span class="line">   */</span><br><span class="line">  @GetMapping(&quot;/list-resource/&#123;roleId&#125;&quot;)</span><br><span class="line">  public ResponseDto listResource(@PathVariable String roleId) &#123;</span><br><span class="line">      LOG.info(&quot;加载资源开始&quot;);</span><br><span class="line">      ResponseDto responseDto = new ResponseDto&lt;&gt;();</span><br><span class="line">      List&lt;String&gt; resourceIdList = roleService.listResource(roleId);</span><br><span class="line">      responseDto.setContent(resourceIdList);</span><br><span class="line">      return responseDto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>最后在RoleService</p></li><li><p>&#96;&#96;&#96;java<br>&#x2F;**</p><ul><li>按角色加载资源</li><li>@param roleId</li></ul><p> *&#x2F;<br>public List<String> listResource(String roleId) {<br>    RoleResourceExample example &#x3D; new RoleResourceExample();<br>    example.createCriteria().andRoleIdEqualTo(roleId);<br>    List<RoleResource> roleResourceList &#x3D; roleResourceMapper.selectByExample(example);<br>    List<String> resourceIdList &#x3D; new ArrayList&lt;&gt;();<br>    for (int i &#x3D; 0, l &#x3D; roleResourceList.size(); i &lt; l; i++) {<br>        resourceIdList.add(roleResourceList.get(i).getResourceId());<br>    }<br>    return resourceIdList;<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**增加角色用户关联功能**</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.通用权限管理：增加角色用户关联表，生成持久层和服务端代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 首先建立sql，然后代码生成器</span><br><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  # 角色-用户关联表</span><br><span class="line">  drop table if exists `role_user`;</span><br><span class="line">  create table `role_user`(</span><br><span class="line">                                  `id` char(8) not null default &#x27;&#x27; comment &#x27;id&#x27;,</span><br><span class="line">                                  `role_id` char(8) not null  comment &#x27;角色|id&#x27;,</span><br><span class="line">                                  `user_id` char(8) not null  comment &#x27;用户|id&#x27;,</span><br><span class="line">                                  primary key (`id`)</span><br><span class="line">  )engine =innodb default charset=utf8mb4 comment=&#x27;角色用户关联&#x27;;</span><br><span class="line">  </span><br><span class="line">  insert into `role_user` values (&#x27;00000000&#x27;,&#x27;00000000&#x27;,&#x27;10000000&#x27;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.通用权限管理：点击【关联用户】按钮时，加载所有用户</span><br></pre></td></tr></table></figure><ul><li><p>加一个按钮显示这样的界面<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/24/SXptR8sDVfA1rQ9.png"                      alt="image-20220324171309337"                ></p></li><li><p>只需要修改role.vue</p></li><li><p>&#96;&#96;&#96;vue<br>&#x2F;&#x2F;增加用户按钮</p><button v-on:click="editUser(role)" class="btn btn-xs btn-info">  <i class="ace-icon fa fa-user bigger-120"></i></button>//增加一个模态框 <!-- 角色用户关联配置 -->    <div id="user-modal" class="modal fade" tabindex="-1" role="dialog">      <div class="modal-dialog" role="document">        <div class="modal-content">          <div class="modal-header">            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>            <h4 class="modal-title">角色用户关联配置</h4>          </div>          <div class="modal-body">            <div class="row">              <div class="col-md-6">                <table id="user-table" class="table table-hover">                  <tbody>                  <tr v-for="user in users">                    <td></td>                    <td class="text-right">                      <a  href="javascript:;" class="">                        <i class="ace-icon fa fa-arrow-circle-right blue"></i>                      </a>                    </td>                  </tr>                  </tbody>                </table>              </div>              <div class="col-md-6">                <table id="role-user-table" class="table table-hover">                  <tbody>                  <tr v-for="user in roleUsers">                    <td></td>                    <td class="text-right">                      <a v-on:click="deleteUser(user)" href="javascript:;" class="">                        <i class="ace-icon fa fa-trash blue"></i>                      </a>                    </td>                  </tr>                  </tbody>                </table>              </div>            </div>          </div>          <div class="modal-footer">            <button type="button" class="btn btn-white btn-default btn-round" data-dismiss="modal">              <i class="ace-icon fa fa-times"></i>              关闭            </button>            <button type="button" class="btn btn-white btn-info btn-round" v-on:click="saveUser()">              <i class="ace-icon fa fa-plus blue"></i>              保存            </button>          </div>        </div><!-- /.modal-content -->      </div><!-- /.modal-dialog -->    </div><!-- /.modal -->//data中增加users:[],roleUsers:[]<p>&#x2F;**<br> * 点击【用户】<br> <em>&#x2F;<br>editUser(role) {<br>  let _this &#x3D; this;<br>  _this.role &#x3D; $.extend({}, role);<br>  _this.listUser();<br>  $(“#user-modal”).modal(“show”);<br>},<br><br>&#x2F;</em>*<br> * 查询所有用户<br> *&#x2F;<br>listUser() {<br>  let _this &#x3D; this;<br>  _this.$ajax.post(process.env.VUE_APP_SERVER + ‘&#x2F;system&#x2F;admin&#x2F;user&#x2F;list’, {<br>    page: 1,<br>    size: 9999<br>  }).then((response)&#x3D;&gt;{<br>    let resp &#x3D; response.data;<br>    if (resp.success) {<br>      _this.users &#x3D; resp.content.list;<br>      console.log(_this.users);<br>    } else {<br>      Toast.warning(resp.message);<br>    }<br>  })<br>},</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>3.通用权限管理：点击用户模态框【保存】按钮时，保存角色用户关联表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 增加一个这样的功能![image-20220324173001257](../../../AppData/Roaming/Typora/typora-user-images/image-20220324173001257.png)</span><br><span class="line"></span><br><span class="line">- 依赖vue的双向数据绑定特性，可以将复杂的页面操作变成，简单的数据操作。很多前端框架都有双向数据绑定的特性，比如angular，微信小程序</span><br><span class="line"></span><br><span class="line">- 先修改role.vue</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  //分别修改右边和左边的模态框</span><br><span class="line">  &lt;a v-on:click=&quot;addUser(user)&quot; href=&quot;javascript:;&quot; class=&quot;&quot;&gt;</span><br><span class="line">  &lt;a v-on:click=&quot;deleteUser(user)&quot; href=&quot;javascript:;&quot; class=&quot;&quot;&gt;</span><br><span class="line">  //增加对应方法，最后一个方法是保存时候的</span><br><span class="line">   /**</span><br><span class="line">       * 角色中增加用户</span><br><span class="line">       */</span><br><span class="line">      addUser(user) &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">  </span><br><span class="line">        // 如果当前要添加的用户在右边列表中已经有了，则不用再添加</span><br><span class="line">        let users = _this.roleUsers;</span><br><span class="line">        for (let i = 0; i &lt; users.length; i++) &#123;</span><br><span class="line">          if (user === users[i]) &#123;</span><br><span class="line">            return;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        _this.roleUsers.push(user);</span><br><span class="line">      &#125;,</span><br><span class="line">      /**</span><br><span class="line">       * 角色中删除用户</span><br><span class="line">       */</span><br><span class="line">      deleteUser(user) &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        Tool.removeObj(_this.roleUsers, user);</span><br><span class="line">      &#125;,</span><br><span class="line">      /**</span><br><span class="line">       * 角色用户模态框点击【保存】</span><br><span class="line">       */</span><br><span class="line">      saveUser() &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        let users = _this.roleUsers;</span><br><span class="line">  </span><br><span class="line">        // 保存时，只需要保存用户id，所以使用id数组进行参数传递</span><br><span class="line">        let userIds = [];</span><br><span class="line">        for (let i = 0; i &lt; users.length; i++) &#123;</span><br><span class="line">          userIds.push(users[i].id);</span><br><span class="line">        &#125;</span><br><span class="line">        _this.$ajax.post(process.env.VUE_APP_SERVER + &#x27;/system/admin/role/save-user&#x27;, &#123;</span><br><span class="line">          id: _this.role.id,</span><br><span class="line">          userIds: userIds</span><br><span class="line">        &#125;).then((response)=&gt;&#123;</span><br><span class="line">          console.log(&quot;保存角色用户结果：&quot;, response);</span><br><span class="line">          let resp = response.data;</span><br><span class="line">          if (resp.success) &#123;</span><br><span class="line">            Toast.success(&quot;保存成功!&quot;);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            Toast.warning(resp.message);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><ul><li><p>我们接下来要修改RoleDto</p></li><li><pre><code class="java">//增加这个private List&lt;String&gt; userIds;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 接下来RoleController</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  /**</span><br><span class="line">   * 保存用户</span><br><span class="line">   * @param roleDto</span><br><span class="line">   */</span><br><span class="line">  @PostMapping(&quot;/save-user&quot;)</span><br><span class="line">  public ResponseDto saveUser(@RequestBody RoleDto roleDto) &#123;</span><br><span class="line">      LOG.info(&quot;保存角色用户关联开始&quot;);</span><br><span class="line">      ResponseDto&lt;RoleDto&gt; responseDto = new ResponseDto&lt;&gt;();</span><br><span class="line">      roleService.saveUser(roleDto);</span><br><span class="line">      responseDto.setContent(roleDto);</span><br><span class="line">      return responseDto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>最后修改RoleService</p></li><li><p>&#96;&#96;&#96;java<br>@Resource<br>private RoleUserMapper roleUserMapper;<br> &#x2F;**<br> * 按角色保存用户<br> *&#x2F;<br>public void saveUser(RoleDto roleDto) {<br>    String roleId &#x3D; roleDto.getId();<br>    List<String> userIdList &#x3D; roleDto.getUserIds();<br>    &#x2F;&#x2F; 清空库中所有的当前角色下的记录<br>    RoleUserExample example &#x3D; new RoleUserExample();<br>    example.createCriteria().andRoleIdEqualTo(roleId);<br>    roleUserMapper.deleteByExample(example);<br><br>    &#x2F;&#x2F; 保存角色用户<br>    for (int i &#x3D; 0; i &lt; userIdList.size(); i++) {<br>        RoleUser roleUser &#x3D; new RoleUser();<br>        roleUser.setId(UuidUtil.getShortUuid());<br>        roleUser.setRoleId(roleId);<br>        roleUser.setUserId(userIdList.get(i));<br>        roleUserMapper.insert(roleUser);<br>    }<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>4.通用权限管理：打开用户模态框时，加载角色用户关联数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 查关联表，得到的是userld，但是显示需要的是loginName。这里也可以通过写自定义mapper，把user表和role_user表关联得到loginName</span><br><span class="line"></span><br><span class="line">- 首先修改role.vue</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  //在listUser中成功时添加</span><br><span class="line">   _this.listRoleUser();</span><br><span class="line">   /**</span><br><span class="line">       * 加载角色用户</span><br><span class="line">       */</span><br><span class="line">      listRoleUser() &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        _this.roleUsers = [];</span><br><span class="line">        _this.$ajax.get(process.env.VUE_APP_SERVER + &#x27;/system/admin/role/list-user/&#x27; + _this.role.id).then((res)=&gt;&#123;</span><br><span class="line">          let response = res.data;</span><br><span class="line">          let userIds = response.content;</span><br><span class="line">  </span><br><span class="line">          // 根据加载到用户ID，到【所有用户数组：users】中查找用户对象，用于列表显示</span><br><span class="line">          for (let i = 0; i &lt; userIds.length; i++) &#123;</span><br><span class="line">            for (let j = 0; j &lt; _this.users.length; j++) &#123;</span><br><span class="line">              if (userIds[i] === _this.users[j].id) &#123;</span><br><span class="line">                _this.roleUsers.push(_this.users[j]);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><ul><li><p>然后修改RoleController</p></li><li><p>&#96;&#96;&#96;java<br>&#x2F;**</p><ul><li>加载用户</li><li>@param roleId</li></ul><p> *&#x2F;<br>@GetMapping(“&#x2F;list-user&#x2F;{roleId}”)<br>public ResponseDto listUser(@PathVariable String roleId) {<br>    LOG.info(“加载用户开始”);<br>    ResponseDto responseDto &#x3D; new ResponseDto&lt;&gt;();<br>    List<String> userIdList &#x3D; roleService.listUser(roleId);<br>    responseDto.setContent(userIdList);<br>    return responseDto;<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 最后修改RoleService</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  /**</span><br><span class="line">   * 按角色加载用户</span><br><span class="line">   * @param roleId</span><br><span class="line">   */</span><br><span class="line">  public List&lt;String&gt; listUser(String roleId) &#123;</span><br><span class="line">      RoleUserExample example = new RoleUserExample();</span><br><span class="line">      example.createCriteria().andRoleIdEqualTo(roleId);</span><br><span class="line">      List&lt;RoleUser&gt; roleUserList = roleUserMapper.selectByExample(example);</span><br><span class="line">      List&lt;String&gt; userIdList = new ArrayList&lt;&gt;();</span><br><span class="line">      for (int i = 0, l = roleUserList.size(); i &lt; l; i++) &#123;</span><br><span class="line">          userIdList.add(roleUserList.get(i).getUserId());</span><br><span class="line">      &#125;</span><br><span class="line">      return userIdList;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="12-4-登录时获取资源权限"><a href="#12-4-登录时获取资源权限" class="headerlink" title="12-4 登录时获取资源权限"></a>12-4 登录时获取资源权限</h2><p><strong>读取当前登录用户所属的角色的所有资源</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.通用权限管理：登录时，读取当前登录用户所属的角色的所有资源</span><br></pre></td></tr></table></figure><ul><li><p>一个资源可以会用到多个接口，多个资源的接口就可能重复，所以这里用Set去重</p></li><li><p>在LoginUserDto中增加</p></li><li><pre><code>/** * 所有资源用于前端界面控制 */private List&lt;ResourceDto&gt; resources;/** * 所有资源中的请求，用于后端接口拦截 */private HashSet&lt;String&gt; requests;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 关于User的权限设置比较细，每个请求接口都可以单独控制。关于Resource的权限设置比较粗，所有接口用同一个request控制</span><br><span class="line"></span><br><span class="line">- 在com.course.server.mapper.my下建立MyUserMapper.xml</span><br><span class="line"></span><br><span class="line">- ```xml</span><br><span class="line">  &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">  &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;</span><br><span class="line">  &lt;mapper namespace=&quot;com.course.server.mapper.my.MyUserMapper&quot; &gt;</span><br><span class="line">  </span><br><span class="line">      &lt;!-- 一个用户可以属于多个角色，配置的资源可能重复，所以用distinct去重 --&gt;</span><br><span class="line">      &lt;select id=&quot;findResources&quot; resultType=&quot;com.course.server.dto.ResourceDto&quot;&gt;</span><br><span class="line">          select distinct r.id, r.`name`, r.page, r.request, r.parent</span><br><span class="line">          from role_user ru, role_resource rr, resource r</span><br><span class="line">          where ru.user_id = #&#123;userId&#125;</span><br><span class="line">          and ru.role_id = rr.role_id</span><br><span class="line">          and rr.resource_id = r.id</span><br><span class="line">          order by r.id asc</span><br><span class="line">      &lt;/select&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;/mapper&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后再com.course.server.mapper.my下建立MyUserMapper.java</p></li><li><p>&#96;&#96;&#96;java<br>package com.course.server.mapper.my;</p><p>import com.course.server.dto.ResourceDto;<br>import org.apache.ibatis.annotations.Param;</p><p>import java.util.List;</p><p>public interface MyUserMapper {</p><pre><code>List&lt;ResourceDto&gt; findResources(@Param(&quot;userId&quot;) String userId);</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 最后我们修改UserService</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  /**</span><br><span class="line">   * 为登录用户读取权限</span><br><span class="line">   */</span><br><span class="line">  private void setAuth(LoginUserDto loginUserDto) &#123;</span><br><span class="line">      List&lt;ResourceDto&gt; resourceDtoList = myUserMapper.findResources(loginUserDto.getId());</span><br><span class="line">      loginUserDto.setResources(resourceDtoList);</span><br><span class="line">  </span><br><span class="line">      // 整理所有有权限的请求，用于接口拦截</span><br><span class="line">      HashSet&lt;String&gt; requestSet = new HashSet&lt;&gt;();</span><br><span class="line">      if (!CollectionUtils.isEmpty(resourceDtoList)) &#123;</span><br><span class="line">          for (int i = 0, l = resourceDtoList.size(); i &lt; l; i++) &#123;</span><br><span class="line">              ResourceDto resourceDto = resourceDtoList.get(i);</span><br><span class="line">              String arrayString = resourceDto.getRequest();</span><br><span class="line">              List&lt;String&gt; requestList = JSON.parseArray(arrayString, String.class);</span><br><span class="line">              if (!CollectionUtils.isEmpty(requestList)) &#123;</span><br><span class="line">                  requestSet.addAll(requestList);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      LOG.info(&quot;有权限的请求：&#123;&#125;&quot;, requestSet);</span><br><span class="line">      loginUserDto.setRequests(requestSet);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //最后使用这个在login方法</span><br><span class="line">      public LoginUserDto login(UserDto userDto)&#123;</span><br><span class="line">          User user = selectByLoginName((userDto.getLoginName()));</span><br><span class="line">          if(user == null)&#123;</span><br><span class="line">              LOG.info(&quot;用户名不存在,&#123;&#125;&quot;,userDto.getLoginName());</span><br><span class="line">              throw new BusinessException(BusinessExceptionCode.LOGIN_ERROR);</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">              if (user.getPassword().equals(userDto.getPassword()))&#123;</span><br><span class="line">  ////////////////////////////////////////////////////////////////////</span><br><span class="line">                  //登陆成功</span><br><span class="line">                  LoginUserDto loginUserDto = CopyUtil.copy(user,LoginUserDto.class);</span><br><span class="line">                  //为登录用户获取权限</span><br><span class="line">                  setAuth(loginUserDto);</span><br><span class="line">                  return loginUserDto;</span><br><span class="line">  ///////////////////////////////////////////////////////////////////////////</span><br><span class="line">              &#125;else&#123;</span><br><span class="line">                  LOG.info(&quot;密码不对,输入密码:&#123;&#125;,数据库密码:&#123;&#125;&quot;,userDto.getPassword(),user.getPassword());</span><br><span class="line">                  throw new BusinessException(BusinessExceptionCode.LOGIN_ERROR);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>修复讲师管理显示错位的BUG</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.通用权限管理：修复讲师管理显示错位的BUG.自定义样式要加上前缀，防止冲突，vue组件样式加scoped</span><br></pre></td></tr></table></figure><ul><li>问题：讲师管理页面，讲师的显示重叠在一起了。但是这个页面已经很久没动过了。之前介绍讲师管理时，都是确认了页面正常才提交的代码。不知道从什么时候开始出现这个BUG？</li><li>css样式的问题，可以优先用F12开发者工具来查看没有可疑的样式</li><li>前端常见问题：引入新的css文件后，导致原有页面显示错乱</li><li>写自定义样式的时候！不要用通用的单词，很容易和别人的样式出现冲突，可以给样式加上一些固定的，有意义的前缀</li><li>解决方法：为每个样式加一个“aliplayer前缀！或者加一个顶级的”.aliplayer”样式</li></ul><h2 id="12-5-权限拦截功能开发"><a href="#12-5-权限拦截功能开发" class="headerlink" title="12-5 权限拦截功能开发"></a>12-5 权限拦截功能开发</h2><p><strong>前端界面权限拦截</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.通用权限管理：前端界面权限拦截，完成用户管理</span><br></pre></td></tr></table></figure><ul><li><p>目前只修改了用户管理的权限拦截，以用户管理为例</p></li><li><p>每次修改权限配置，需要重新登录后才生效</p></li><li><p>我们首先在tool.js增加方法</p></li><li><pre><code class="js"> /**   * 查找是否有权限   * @param id 资源id   */  hasResource: function (id) &#123;    let _this = this;    let resources = _this.getLoginUser().resources;    if (_this.isEmpty(resources)) &#123;      return false;    &#125;    for (let i = 0; i &lt; resources.length; i++) &#123;      if (id === resources[i].id) &#123;        return true;      &#125;    &#125;    return false;  &#125;&#125;;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 接下来修改admin</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  //在html中要使用vue方法，这个方法得在methods中定义</span><br><span class="line">  /**</span><br><span class="line">   * 查找是否有权限</span><br><span class="line">   * @param id</span><br><span class="line">   */</span><br><span class="line">  hasResource(id) &#123;</span><br><span class="line">    return Tool.hasResource(id);</span><br><span class="line">  &#125;,</span><br><span class="line">  //使用的话就在li里加v-show</span><br><span class="line">   &lt;li v-show=&quot;hasResource(&#x27;0101&#x27;)&quot; class=&quot;&quot; id=&quot;system-user-sidebar&quot;&gt;</span><br><span class="line">                 &lt;router-link to=&quot;/system/user&quot;&gt;</span><br><span class="line">                    &lt;i class=&quot;menu-icon fa fa-caret-right&quot;&gt;&lt;/i&gt;</span><br><span class="line">                    用户管理</span><br><span class="line">                 &lt;/router-link&gt;</span><br><span class="line">  </span><br><span class="line">                  &lt;b class=&quot;arrow&quot;&gt;&lt;/b&gt;</span><br><span class="line">                &lt;/li&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>user修改也一样</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.通用权限管理：前端界面权限拦截，完成所有界面控制</span><br></pre></td></tr></table></figure><ul><li>如果一个页面的所有按钮是统一控制的那么只需要控制菜单就可以了，不需要给每个按钮加权限控制代码</li><li>就是给admin其他菜单加上v-show</li></ul><p><strong>路由权限判断</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.通用权限管理：前端界面权限拦截，增加路由权限判断</span><br></pre></td></tr></table></figure><ul><li><p>因为我们前端的路由是不带&#x2F;的所以我们修改resource.json</p></li><li><p>&#96;&#96;&#96;json<br>[{<br>  “id”: “00”,”name”: “欢迎”,”page”: “welcome”<br>},<br>  {<br>“id”: “01”,”name”: “系统管理”,<br>“children”:[{<br>  “id”:”0101”,”name”:”用户管理”,”page”:”system&#x2F;user”,<br>  “children”:[<br>    {“id”:”010101”,”name”:”保存”,”request”:[“&#x2F;system&#x2F;admin&#x2F;user&#x2F;list”,”&#x2F;system&#x2F;admin&#x2F;user&#x2F;save”]},<br>    {“id”:”010102”,”name”:”删除”,”request”:[“&#x2F;system&#x2F;admin&#x2F;user&#x2F;delete”]},<br>    {“id”:”010103”,”name”:”重置密码”,”request”:[“&#x2F;system&#x2F;admin&#x2F;user&#x2F;save-password”]}<br>  ]<br>},<br>{<br>  “id”:”0102”,”name”:”资源管理”,”page”:”system&#x2F;resource”,<br>  “children”:[<br>    {“id”:”010201”,”name”:”保存&#x2F;显示”,”request”:[“&#x2F;system&#x2F;admin&#x2F;resource”]}<br>  ]<br>}, {<br>    “id”:”0103”,”name”:”角色管理”,”page”:”system&#x2F;role”,<br>    “children”:[<br>        {“id”:”010301”,”name”:”角色&#x2F;权限管理”,”request”:[“&#x2F;system&#x2F;admin&#x2F;role”]}<br>      ]<br>  }]<br>},{<br>  “id”: “02”,”name”: “业务管理”,<br>  “children”:[{<br>“id”:”0201”,”name”:”分类管理”,”page”:”business&#x2F;category”,<br>“children”:[<br>  {“id”:”020101”,”name”:”增删改查”,”request”:[“&#x2F;business&#x2F;admin&#x2F;category”]}<br> ]<br>  },{<br>  “id”:”0202”,”name”:”课程管理”,”page”:”business&#x2F;course”,<br>  “children”:[<br>    {“id”:”020201”,”name”:”增删改查”,”request”:[“&#x2F;business&#x2F;admin&#x2F;course”,”&#x2F;business&#x2F;admin&#x2F;category&#x2F;all”]}<br>  ]<br>},{<br>  “id”:”0203”,”name”:”讲师管理”,”page”:”business&#x2F;teacher”,<br>  “children”:[<br>    {“id”:”020301”,”name”:”增删改查”,”request”:[“&#x2F;business&#x2F;admin&#x2F;teacher”]}<br>  ]<br>}]<br>  },{<br>  “id”: “03”,”name”: “文件管理”,<br>  “children”:[{<br>“id”:”0301”,”name”:”文件管理”,”page”:”file&#x2F;file”,<br>“children”:[<br>  {“id”:”030101”,”name”:”文件管理”,”request”:[“&#x2F;file&#x2F;admin&#x2F;file”]}<br>]<br>  }]<br>}]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 修改admin</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  /**</span><br><span class="line">   * 查找是否有权限</span><br><span class="line">   * @param router</span><br><span class="line">   */</span><br><span class="line">  hasResourceRouter(router) &#123;</span><br><span class="line">    let _this = this;</span><br><span class="line">    let resources = Tool.getLoginUser().resources;</span><br><span class="line">    if (Tool.isEmpty(resources)) &#123;</span><br><span class="line">      return false;</span><br><span class="line">    &#125;</span><br><span class="line">    for (let i = 0; i &lt; resources.length; i++) &#123;</span><br><span class="line">      if (router === resources[i].page) &#123;</span><br><span class="line">        return true;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;,</span><br><span class="line">  //在mounted使用，第一次加载amin.vue时，需要判断路由权限。比如从登录页跳到控台主页，或者刷新控台主页时，会执行mounted</span><br><span class="line">  if (!_this.hasResourceRouter(_this.$route.name)) &#123;</span><br><span class="line">        _this.$router.push(&quot;/login&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">  //进入控台主页后，发生子路由跳转时，会触发watch</span><br><span class="line">   if (!_this.hasResourceRouter(val.name)) &#123;</span><br><span class="line">            _this.$router.push(&quot;/login&quot;);</span><br><span class="line">            return;</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>后端接口权限判断</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.通用权限管理：增加后端接口权限拦截</span><br></pre></td></tr></table></figure><ul><li><p>在做登录功能时，我们也对接口做了登录校验，否则容易被绕开登录，直接调用后端接口。这里同样需要对接口做权限拦截</p></li><li><p>比如资源的保存：path&#x3D;system&#x2F;admin&#x2F;resource&#x2F;save，而配置的request&#x3D;system&#x2F;admin&#x2F;resource，那么path.contain(request)就是true</p></li><li><p>可以在vue的拦截器中，针对401返回码做判断，如果是401，就跳到登录页面</p></li><li><p>我们修改LoginAdminGatewayFilter</p></li><li><p>&#96;&#96;&#96;java<br>&#x2F;&#x2F;在已登录这进行判断<br>else{<br>LOG.info(“已登录:{}”,object);<br>&#x2F;&#x2F; 增加权限校验，gateway里没有LoginUserDto，所以全部用JSON操作<br>LOG.info(“接口权限校验，请求地址：{}”, path);<br>boolean exist &#x3D; false;<br>JSONObject loginUserDto &#x3D; JSON.parseObject(String.valueOf(object));<br>redisTemplate.opsForValue().set(token, JSON.toJSONString(loginUserDto), 3600, TimeUnit.SECONDS);<br>JSONArray requests &#x3D; loginUserDto.getJSONArray(“requests”);<br>&#x2F;&#x2F; 遍历所有【权限请求】，判断当前请求的地址是否在【权限请求】里<br>for (int i &#x3D; 0, l &#x3D; requests.size(); i &lt; l; i++) {<br>    String request &#x3D; (String) requests.get(i);<br>    if (path.contains(request)) {<br>        exist &#x3D; true;<br>        break;<br>    }<br>}<br>if (exist) {<br>    LOG.info(“权限校验通过”);<br>} else {<br>    LOG.warn(“权限校验未通过”);<br>    exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);<br>    return exchange.getResponse().setComplete();<br>}<br><br>return chain.filter(exchange);<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 第13章 网站开发</span><br><span class="line"></span><br><span class="line">本章将制作用于学员使用的网站，学习BootStrap的网站模板的使用，可以让程序员即使不会美工也可以写出漂亮的网站。</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">## 13-1 网站模块的搭建</span><br><span class="line"></span><br><span class="line">**新建web模板**</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.网站开发，增加web模块使用命令：vue create web</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 大家拿到一个vue项目后，要先执行npm install，才能运行项目，一步会去下载node  module，类似于maven项目要先下载jar包</span><br><span class="line">- 步骤：vue create web ---&gt; cd web ---&gt; npm run serve</span><br><span class="line"></span><br><span class="line">**多环境配置**</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.网站开发，web模块增加多环境配置启动命令，增加–port8081</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 就是将admin里的两个配置文件复制过来，然后改package.json</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  &quot;serve-dev&quot;: &quot;vue-cli-service serve --mode dev --port 8081&quot;,</span><br><span class="line">  &quot;serve-prod&quot;: &quot;vue-cli-service serve --mode prod --port 8081&quot;,</span><br></pre></td></tr></table></figure><p><strong>增加路由配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.网站开发，web模块增加路由配置</span><br><span class="line">使用命令：npm install --Save vue-router</span><br></pre></td></tr></table></figure><ul><li>这里只是增加了router依赖，后续开发页面时会增加router的配置</li></ul><h2 id="13-2-集成bootstrap官方模板"><a href="#13-2-集成bootstrap官方模板" class="headerlink" title="13-2 集成bootstrap官方模板"></a>13-2 集成bootstrap官方模板</h2><ul><li>我们的控台admin，用的是免费的ace admin模板，ace也是基于bootstrap做的封装。有很多组织和个人以卖各种前端模板为生</li><li>本章开发的前端网站，是基于bootstrap官方提供的原生模板</li></ul><p><strong>bootstrap4.4.1文档介绍</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.网站开发，增加bootstrp-4.4.1的js,css</span><br></pre></td></tr></table></figure><ul><li>jquery.slim是jquery的简化版也可以引入原版jquery。popper.js是一个js提示插件</li><li>网站首页选用album模板，相册主题</li><li>就是下载这个将其放到web的public<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/25/xTzvVYPaRqLpyjG.png"                      alt="image-20220325163100644"                ></li></ul><p><strong>集成album模板</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.网站开发，集成album模板</span><br></pre></td></tr></table></figure><ul><li><p>做前端的同学，会经常看到bundle这个词，就是将几个依赖的js或css，打包成一个bundle.js</p></li><li><p>首先在index中加css和js</p></li><li><p>&#96;&#96;&#96;html</p><link rel="stylesheet" href="<%= BASE_URL %>bootstrap-4.4.1/css/bootstrap.min.css"><link rel="stylesheet" href="<%= BASE_URL %>static/css/album.css"><script src="https://cdn.jsdelivr.net/npm/jquery@3.4.1/dist/jquery.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script><script src="<%= BASE_URL %>bootstrap-4.4.1/js/bootstrap.bundle.min.js"></script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 将album模板中的body标签里的内容，复制到template标签中。修改app.vue</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;header&gt;</span><br><span class="line">        &lt;div class=&quot;collapse bg-dark&quot; id=&quot;navbarHeader&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;col-sm-8 col-md-7 py-4&quot;&gt;</span><br><span class="line">                &lt;h4 class=&quot;text-white&quot;&gt;About&lt;/h4&gt;</span><br><span class="line">                &lt;p class=&quot;text-muted&quot;&gt;Add some information about the album below, the author, or any other background context. Make it a few sentences long so folks can pick up some informative tidbits. Then, link them off to some social networking sites or contact information.&lt;/p&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;col-sm-4 offset-md-1 py-4&quot;&gt;</span><br><span class="line">                &lt;h4 class=&quot;text-white&quot;&gt;Contact&lt;/h4&gt;</span><br><span class="line">                &lt;ul class=&quot;list-unstyled&quot;&gt;</span><br><span class="line">                  &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;text-white&quot;&gt;Follow on Twitter&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                  &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;text-white&quot;&gt;Like on Facebook&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                  &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;text-white&quot;&gt;Email me&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;navbar navbar-dark bg-dark shadow-sm&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;container d-flex justify-content-between&quot;&gt;</span><br><span class="line">            &lt;a href=&quot;#&quot; class=&quot;navbar-brand d-flex align-items-center&quot;&gt;</span><br><span class="line">              &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; stroke-width=&quot;2&quot; aria-hidden=&quot;true&quot; class=&quot;mr-2&quot; viewBox=&quot;0 0 24 24&quot; focusable=&quot;false&quot;&gt;&lt;path d=&quot;M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z&quot;/&gt;&lt;circle cx=&quot;12&quot; cy=&quot;13&quot; r=&quot;4&quot;/&gt;&lt;/svg&gt;</span><br><span class="line">              &lt;strong&gt;Album&lt;/strong&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">            &lt;button class=&quot;navbar-toggler&quot; type=&quot;button&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#navbarHeader&quot; aria-controls=&quot;navbarHeader&quot; aria-expanded=&quot;false&quot; aria-label=&quot;Toggle navigation&quot;&gt;</span><br><span class="line">              &lt;span class=&quot;navbar-toggler-icon&quot;&gt;&lt;/span&gt;</span><br><span class="line">            &lt;/button&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/header&gt;</span><br><span class="line">      &lt;main role=&quot;main&quot;&gt;</span><br><span class="line">  </span><br><span class="line">        &lt;section class=&quot;jumbotron text-center&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">            &lt;h1&gt;Album example&lt;/h1&gt;</span><br><span class="line">            &lt;p class=&quot;lead text-muted&quot;&gt;Something short and leading about the collection below—its contents, the creator, etc. Make it short and sweet, but not too short so folks don’t simply skip over it entirely.&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">              &lt;a href=&quot;#&quot; class=&quot;btn btn-primary my-2&quot;&gt;Main call to action&lt;/a&gt;</span><br><span class="line">              &lt;a href=&quot;#&quot; class=&quot;btn btn-secondary my-2&quot;&gt;Secondary action&lt;/a&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/section&gt;</span><br><span class="line">  </span><br><span class="line">        &lt;div class=&quot;album py-5 bg-light&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">  </span><br><span class="line">            &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;col-md-4&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;</span><br><span class="line">                  &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;</span><br><span class="line">  </span><br><span class="line">                  &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;</span><br><span class="line">                    &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;</span><br><span class="line">                      &lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;</span><br><span class="line">                      &lt;/div&gt;</span><br><span class="line">                      &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;col-md-4&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;</span><br><span class="line">                  &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;</span><br><span class="line">  </span><br><span class="line">                  &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;</span><br><span class="line">                    &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;</span><br><span class="line">                      &lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;</span><br><span class="line">                      &lt;/div&gt;</span><br><span class="line">                      &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;col-md-4&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;</span><br><span class="line">                  &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;</span><br><span class="line">  </span><br><span class="line">                  &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;</span><br><span class="line">                    &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;</span><br><span class="line">                      &lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;</span><br><span class="line">                      &lt;/div&gt;</span><br><span class="line">                      &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">              &lt;div class=&quot;col-md-4&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;</span><br><span class="line">                  &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;</span><br><span class="line">  </span><br><span class="line">                  &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;</span><br><span class="line">                    &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;</span><br><span class="line">                      &lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;</span><br><span class="line">                      &lt;/div&gt;</span><br><span class="line">                      &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;col-md-4&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;</span><br><span class="line">                  &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;</span><br><span class="line">  </span><br><span class="line">                  &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;</span><br><span class="line">                    &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;</span><br><span class="line">                      &lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;</span><br><span class="line">                      &lt;/div&gt;</span><br><span class="line">                      &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;col-md-4&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;</span><br><span class="line">                  &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;</span><br><span class="line">  </span><br><span class="line">                  &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;</span><br><span class="line">                    &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;</span><br><span class="line">                      &lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;</span><br><span class="line">                      &lt;/div&gt;</span><br><span class="line">                      &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">              &lt;div class=&quot;col-md-4&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;</span><br><span class="line">                  &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;</span><br><span class="line">  </span><br><span class="line">                  &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;</span><br><span class="line">                    &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;</span><br><span class="line">                      &lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;</span><br><span class="line">                      &lt;/div&gt;</span><br><span class="line">                      &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;col-md-4&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;</span><br><span class="line">                  &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;</span><br><span class="line">  </span><br><span class="line">                  &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;</span><br><span class="line">                    &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;</span><br><span class="line">                      &lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;</span><br><span class="line">                      &lt;/div&gt;</span><br><span class="line">                      &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;col-md-4&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;</span><br><span class="line">                  &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;</span><br><span class="line">  </span><br><span class="line">                  &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;</span><br><span class="line">                    &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;</span><br><span class="line">                      &lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;</span><br><span class="line">                      &lt;/div&gt;</span><br><span class="line">                      &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">      &lt;/main&gt;</span><br><span class="line">      &lt;footer class=&quot;text-muted&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">          &lt;p class=&quot;float-right&quot;&gt;</span><br><span class="line">            &lt;a href=&quot;#&quot;&gt;Back to top&lt;/a&gt;</span><br><span class="line">          &lt;/p&gt;</span><br><span class="line">          &lt;p&gt;Album example is &amp;copy; Bootstrap, but please download and customize it for yourself!&lt;/p&gt;</span><br><span class="line">          &lt;p&gt;New to Bootstrap? &lt;a href=&quot;/&quot;&gt;Visit the homepage&lt;/a&gt; or read our &lt;a href=&quot;/docs/getting-started/introduction/&quot;&gt;getting started guide&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/footer&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>在增加一个album.css</p></li><li><p>&#96;&#96;&#96;css<br>.jumbotron {<br>padding-top: 3rem;<br>padding-bottom: 3rem;<br>margin-bottom: 0;<br>background-color: #fff;<br>}<br>@media (min-width: 768px) {<br>.jumbotron {<br>    padding-top: 6rem;<br>    padding-bottom: 6rem;<br>}<br>}</p><p>.jumbotron p:last-child {<br>margin-bottom: 0;<br>}</p><p>.jumbotron h1 {<br>font-weight: 300;<br>}</p><p>.jumbotron .container {<br>max-width: 40rem;<br>}</p><p>footer {<br>padding-top: 3rem;<br>padding-bottom: 3rem;<br>}</p><p>footer p {<br>margin-bottom: .25rem;<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**顶部组件和底部组件提取**</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>1.网站开发，将顶部提取成the-header和the-footer组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 小提示：在父组件中打入子组件的标签名，会自动引入子组件。</span><br><span class="line"></span><br><span class="line">- 在组件中先增加一个the-header，就是将header复制过来</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      &lt;div class=&quot;collapse bg-dark&quot; id=&quot;navbarHeader&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;col-sm-8 col-md-7 py-4&quot;&gt;</span><br><span class="line">              &lt;h4 class=&quot;text-white&quot;&gt;About1&lt;/h4&gt;</span><br><span class="line">              &lt;p class=&quot;text-muted&quot;&gt;Add some information about the album below, the author, or any other background context. Make it a few sentences long so folks can pick up some informative tidbits. Then, link them off to some social networking sites or contact information.&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;col-sm-4 offset-md-1 py-4&quot;&gt;</span><br><span class="line">              &lt;h4 class=&quot;text-white&quot;&gt;Contact&lt;/h4&gt;</span><br><span class="line">              &lt;ul class=&quot;list-unstyled&quot;&gt;</span><br><span class="line">                &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;text-white&quot;&gt;Follow on Twitter&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;text-white&quot;&gt;Like on Facebook&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;text-white&quot;&gt;Email me&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">              &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;navbar navbar-dark bg-dark shadow-sm&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;container d-flex justify-content-between&quot;&gt;</span><br><span class="line">          &lt;a href=&quot;#&quot; class=&quot;navbar-brand d-flex align-items-center&quot;&gt;</span><br><span class="line">            &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; stroke-width=&quot;2&quot; aria-hidden=&quot;true&quot; class=&quot;mr-2&quot; viewBox=&quot;0 0 24 24&quot; focusable=&quot;false&quot;&gt;&lt;path d=&quot;M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z&quot;/&gt;&lt;circle cx=&quot;12&quot; cy=&quot;13&quot; r=&quot;4&quot;/&gt;&lt;/svg&gt;</span><br><span class="line">            &lt;strong&gt;Album&lt;/strong&gt;</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">          &lt;button class=&quot;navbar-toggler&quot; type=&quot;button&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#navbarHeader&quot; aria-controls=&quot;navbarHeader&quot; aria-expanded=&quot;false&quot; aria-label=&quot;Toggle navigation&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;navbar-toggler-icon&quot;&gt;&lt;/span&gt;</span><br><span class="line">          &lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">      name:&#x27;theHeader&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>在组件中先增加一个the-footer，就是将footer复制过来</p></li><li><p>&#96;&#96;&#96;vue</p><template>  <footer class="text-muted">    <div class="container">      <p class="float-right">        <a href="#">Back to top</a>      </p>      <p>Album example is &copy; Bootstrap, but please download and customize it for yourself!</p>      <p>New to Bootstrap? <a href="/">Visit the homepage</a> or read our <a href="/docs/getting-started/introduction/">getting started guide</a>.</p>    </div>  </footer></template><script>export default {  name:'theFooter',}</script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 最后在app.vue</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;the-header&gt;&lt;/the-header&gt;</span><br><span class="line">      &lt;main role=&quot;main&quot;&gt;</span><br><span class="line">  </span><br><span class="line">        &lt;section class=&quot;jumbotron text-center&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">            &lt;h1&gt;Album example&lt;/h1&gt;</span><br><span class="line">            &lt;p class=&quot;lead text-muted&quot;&gt;Something short and leading about the collection below—its contents, the creator, etc. Make it short and sweet, but not too short so folks don’t simply skip over it entirely.&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">              &lt;a href=&quot;#&quot; class=&quot;btn btn-primary my-2&quot;&gt;Main call to action&lt;/a&gt;</span><br><span class="line">              &lt;a href=&quot;#&quot; class=&quot;btn btn-secondary my-2&quot;&gt;Secondary action&lt;/a&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/section&gt;</span><br><span class="line">  </span><br><span class="line">        &lt;div class=&quot;album py-5 bg-light&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">  </span><br><span class="line">            &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;col-md-4&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;</span><br><span class="line">                  &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;</span><br><span class="line">  </span><br><span class="line">                  &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;</span><br><span class="line">                    &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;</span><br><span class="line">                      &lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;</span><br><span class="line">                      &lt;/div&gt;</span><br><span class="line">                      &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;col-md-4&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;</span><br><span class="line">                  &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;</span><br><span class="line">  </span><br><span class="line">                  &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;</span><br><span class="line">                    &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;</span><br><span class="line">                      &lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;</span><br><span class="line">                      &lt;/div&gt;</span><br><span class="line">                      &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;col-md-4&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;</span><br><span class="line">                  &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;</span><br><span class="line">  </span><br><span class="line">                  &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;</span><br><span class="line">                    &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;</span><br><span class="line">                      &lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;</span><br><span class="line">                      &lt;/div&gt;</span><br><span class="line">                      &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">              &lt;div class=&quot;col-md-4&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;</span><br><span class="line">                  &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;</span><br><span class="line">  </span><br><span class="line">                  &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;</span><br><span class="line">                    &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;</span><br><span class="line">                      &lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;</span><br><span class="line">                      &lt;/div&gt;</span><br><span class="line">                      &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;col-md-4&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;</span><br><span class="line">                  &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;</span><br><span class="line">  </span><br><span class="line">                  &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;</span><br><span class="line">                    &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;</span><br><span class="line">                      &lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;</span><br><span class="line">                      &lt;/div&gt;</span><br><span class="line">                      &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;col-md-4&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;</span><br><span class="line">                  &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;</span><br><span class="line">  </span><br><span class="line">                  &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;</span><br><span class="line">                    &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;</span><br><span class="line">                      &lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;</span><br><span class="line">                      &lt;/div&gt;</span><br><span class="line">                      &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">              &lt;div class=&quot;col-md-4&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;</span><br><span class="line">                  &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;</span><br><span class="line">  </span><br><span class="line">                  &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;</span><br><span class="line">                    &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;</span><br><span class="line">                      &lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;</span><br><span class="line">                      &lt;/div&gt;</span><br><span class="line">                      &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;col-md-4&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;</span><br><span class="line">                  &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;</span><br><span class="line">  </span><br><span class="line">                  &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;</span><br><span class="line">                    &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;</span><br><span class="line">                      &lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;</span><br><span class="line">                      &lt;/div&gt;</span><br><span class="line">                      &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;div class=&quot;col-md-4&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;</span><br><span class="line">                  &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;</span><br><span class="line">  </span><br><span class="line">                  &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;</span><br><span class="line">                    &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;</span><br><span class="line">                      &lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;</span><br><span class="line">                      &lt;/div&gt;</span><br><span class="line">                      &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">      &lt;/main&gt;</span><br><span class="line">      &lt;the-footer&gt;&lt;/the-footer&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  import TheHeader from &quot;@/components/the-header&quot;;</span><br><span class="line">  import TheFooter from &quot;@/components/the-footer&quot;;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123;TheFooter, TheHeader&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="13-3-首页开发-1"><a href="#13-3-首页开发-1" class="headerlink" title="13-3 首页开发-1"></a>13-3 首页开发-1</h2><p><strong>路由配置与文案修改</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.网站开发，增加路由配置router.js，增加网站首页index.vue</span><br></pre></td></tr></table></figure><ul><li><p>首先增加一个router.js</p></li><li><pre><code class="js">import Vue from &quot;vue&quot;import Router from &quot;vue-router&quot;import Index from &quot;./view/index&quot;Vue.use(Router);export default new Router(&#123;    mode: &quot;history&quot;,    base: process.env.BASE_URL,    routes: [&#123;        path: &quot;*&quot;,        redirect: &quot;/index&quot;,    &#125;, &#123;        path: &quot;/index&quot;,        component: Index    &#125;]&#125;)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后再mian.js中使用</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  import Vue from &#x27;vue&#x27;</span><br><span class="line">  import App from &#x27;./app.vue&#x27;</span><br><span class="line">  import router from &#x27;./router&#x27;//这个新增</span><br><span class="line">  </span><br><span class="line">  Vue.config.productionTip = false</span><br><span class="line">  </span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    router,//还有这个新增</span><br><span class="line">    render: h =&gt; h(App),</span><br><span class="line">  &#125;).$mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后我们把app.vue的main部分复制到新建再src&#x2F;view里的index</p></li><li><p>&#96;&#96;&#96;vue</p><template>  <main role="main"><pre><code>&lt;section class=&quot;jumbotron text-center&quot;&gt;  &lt;div class=&quot;container&quot;&gt;    &lt;h1&gt;Album example&lt;/h1&gt;    &lt;p class=&quot;lead text-muted&quot;&gt;Something short and leading about the collection below—its contents, the creator, etc. Make it short and sweet, but not too short so folks don’t simply skip over it entirely.&lt;/p&gt;    &lt;p&gt;      &lt;a href=&quot;#&quot; class=&quot;btn btn-primary my-2&quot;&gt;Main call to action&lt;/a&gt;      &lt;a href=&quot;#&quot; class=&quot;btn btn-secondary my-2&quot;&gt;Secondary action&lt;/a&gt;    &lt;/p&gt;  &lt;/div&gt;&lt;/section&gt;&lt;div class=&quot;album py-5 bg-light&quot;&gt;  &lt;div class=&quot;container&quot;&gt;    &lt;div class=&quot;row&quot;&gt;      &lt;div class=&quot;col-md-4&quot;&gt;        &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;          &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;          &lt;div class=&quot;card-body&quot;&gt;            &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;            &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;              &lt;div class=&quot;btn-group&quot;&gt;                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;              &lt;/div&gt;              &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;            &lt;/div&gt;          &lt;/div&gt;        &lt;/div&gt;      &lt;/div&gt;      &lt;div class=&quot;col-md-4&quot;&gt;        &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;          &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;          &lt;div class=&quot;card-body&quot;&gt;            &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;            &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;              &lt;div class=&quot;btn-group&quot;&gt;                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;              &lt;/div&gt;              &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;            &lt;/div&gt;          &lt;/div&gt;        &lt;/div&gt;      &lt;/div&gt;      &lt;div class=&quot;col-md-4&quot;&gt;        &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;          &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;          &lt;div class=&quot;card-body&quot;&gt;            &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;            &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;              &lt;div class=&quot;btn-group&quot;&gt;                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;              &lt;/div&gt;              &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;            &lt;/div&gt;          &lt;/div&gt;        &lt;/div&gt;      &lt;/div&gt;      &lt;div class=&quot;col-md-4&quot;&gt;        &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;          &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;          &lt;div class=&quot;card-body&quot;&gt;            &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;            &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;              &lt;div class=&quot;btn-group&quot;&gt;                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;              &lt;/div&gt;              &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;            &lt;/div&gt;          &lt;/div&gt;        &lt;/div&gt;      &lt;/div&gt;      &lt;div class=&quot;col-md-4&quot;&gt;        &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;          &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;          &lt;div class=&quot;card-body&quot;&gt;            &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;            &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;              &lt;div class=&quot;btn-group&quot;&gt;                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;              &lt;/div&gt;              &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;            &lt;/div&gt;          &lt;/div&gt;        &lt;/div&gt;      &lt;/div&gt;      &lt;div class=&quot;col-md-4&quot;&gt;        &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;          &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;          &lt;div class=&quot;card-body&quot;&gt;            &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;            &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;              &lt;div class=&quot;btn-group&quot;&gt;                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;              &lt;/div&gt;              &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;            &lt;/div&gt;          &lt;/div&gt;        &lt;/div&gt;      &lt;/div&gt;      &lt;div class=&quot;col-md-4&quot;&gt;        &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;          &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;          &lt;div class=&quot;card-body&quot;&gt;            &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;            &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;              &lt;div class=&quot;btn-group&quot;&gt;                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;              &lt;/div&gt;              &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;            &lt;/div&gt;          &lt;/div&gt;        &lt;/div&gt;      &lt;/div&gt;      &lt;div class=&quot;col-md-4&quot;&gt;        &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;          &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;          &lt;div class=&quot;card-body&quot;&gt;            &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;            &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;              &lt;div class=&quot;btn-group&quot;&gt;                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;              &lt;/div&gt;              &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;            &lt;/div&gt;          &lt;/div&gt;        &lt;/div&gt;      &lt;/div&gt;      &lt;div class=&quot;col-md-4&quot;&gt;        &lt;div class=&quot;card mb-4 shadow-sm&quot;&gt;          &lt;svg class=&quot;bd-placeholder-img card-img-top&quot; width=&quot;100%&quot; height=&quot;225&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; aria-label=&quot;Placeholder: Thumbnail&quot; preserveAspectRatio=&quot;xMidYMid slice&quot; focusable=&quot;false&quot;&gt;&lt;title&gt;Placeholder&lt;/title&gt;&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;#55595c&quot;/&gt;&lt;text x=&quot;50%&quot; y=&quot;50%&quot; fill=&quot;#eceeef&quot; dy=&quot;.3em&quot;&gt;Thumbnail&lt;/text&gt;&lt;/svg&gt;          &lt;div class=&quot;card-body&quot;&gt;            &lt;p class=&quot;card-text&quot;&gt;This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.&lt;/p&gt;            &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;              &lt;div class=&quot;btn-group&quot;&gt;                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;                &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;              &lt;/div&gt;              &lt;small class=&quot;text-muted&quot;&gt;9 mins&lt;/small&gt;            &lt;/div&gt;          &lt;/div&gt;        &lt;/div&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;</code></pre>  </main></template><script>  export default {    name:'index',  }</script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 没有使用route-view的话，就没有路由效果，因此我们再app.vue里进行替换</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;the-header&gt;&lt;/the-header&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;//替换的</span><br><span class="line">      &lt;the-footer&gt;&lt;/the-footer&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  import TheHeader from &quot;@/components/the-header&quot;;</span><br><span class="line">  import TheFooter from &quot;@/components/the-footer&quot;;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123;TheFooter, TheHeader&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.网站开发，导航条改为bootstrap导航条组件，文档:https://v4.bootcss.com/docs/components/navbar/</span><br></pre></td></tr></table></figure><ul><li><p>将代码复制到the-header.vue</p></li><li><p>&#96;&#96;&#96;vue</p><template>  <header>    <nav class="navbar navbar-expand-lg navbar-light bg-light">      <a class="navbar-brand" href="#">Navbar</a>      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">        <span class="navbar-toggler-icon"></span>      </button><pre><code>  &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;navbarSupportedContent&quot;&gt;    &lt;ul class=&quot;navbar-nav mr-auto&quot;&gt;      &lt;li class=&quot;nav-item active&quot;&gt;        &lt;a class=&quot;nav-link&quot; href=&quot;#&quot;&gt;Home &lt;span class=&quot;sr-only&quot;&gt;(current)&lt;/span&gt;&lt;/a&gt;      &lt;/li&gt;      &lt;li class=&quot;nav-item&quot;&gt;        &lt;a class=&quot;nav-link&quot; href=&quot;#&quot;&gt;Link&lt;/a&gt;      &lt;/li&gt;      &lt;li class=&quot;nav-item dropdown&quot;&gt;        &lt;a class=&quot;nav-link dropdown-toggle&quot; href=&quot;#&quot; id=&quot;navbarDropdown&quot; role=&quot;button&quot; data-toggle=&quot;dropdown&quot; aria-expanded=&quot;false&quot;&gt;          Dropdown        &lt;/a&gt;        &lt;div class=&quot;dropdown-menu&quot; aria-labelledby=&quot;navbarDropdown&quot;&gt;          &lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;Action&lt;/a&gt;          &lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;Another action&lt;/a&gt;          &lt;div class=&quot;dropdown-divider&quot;&gt;&lt;/div&gt;          &lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;Something else here&lt;/a&gt;        &lt;/div&gt;      &lt;/li&gt;      &lt;li class=&quot;nav-item&quot;&gt;        &lt;a class=&quot;nav-link disabled&quot;&gt;Disabled&lt;/a&gt;      &lt;/li&gt;    &lt;/ul&gt;    &lt;form class=&quot;form-inline my-2 my-lg-0&quot;&gt;      &lt;input class=&quot;form-control mr-sm-2&quot; type=&quot;search&quot; placeholder=&quot;Search&quot; aria-label=&quot;Search&quot;&gt;      &lt;button class=&quot;btn btn-outline-success my-2 my-sm-0&quot; type=&quot;submit&quot;&gt;Search&lt;/button&gt;    &lt;/form&gt;  &lt;/div&gt;&lt;/nav&gt;</code></pre>  </header></template><script>  export default {    name:'theHeader',  }</script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>3.网站开发，导航条美化:菜单名称修改；增加container布局；样式改为dark；<br>4.集成fontawesome图标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- fontawesome是一个图标库，可以到官网注册后，获取自己的cdn链接</span><br><span class="line"></span><br><span class="line">- 在上面的the-header基础上进行修改</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      &lt;nav class=&quot;navbar navbar-expand-lg navbar-dark bg-dark&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;</span><br><span class="line">          &lt;i class=&quot;fa fa-video-camera&quot;&gt;&lt;/i&gt;&amp;nbsp;小方课程</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;button class=&quot;navbar-toggler&quot; type=&quot;button&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#navbarSupportedContent&quot; aria-controls=&quot;navbarSupportedContent&quot; aria-expanded=&quot;false&quot; aria-label=&quot;Toggle navigation&quot;&gt;</span><br><span class="line">          &lt;span class=&quot;navbar-toggler-icon&quot;&gt;&lt;/span&gt;</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">  </span><br><span class="line">        &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;navbarSupportedContent&quot;&gt;</span><br><span class="line">          &lt;ul class=&quot;navbar-nav mr-auto&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;nav-item active&quot;&gt;</span><br><span class="line">              &lt;a class=&quot;nav-link&quot; href=&quot;#&quot;&gt;主页 &lt;span class=&quot;sr-only&quot;&gt;(current)&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;nav-item active&quot;&gt;</span><br><span class="line">              &lt;a class=&quot;nav-link&quot; href=&quot;#&quot;&gt;全部课程&lt;/a&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;nav-item dropdown active&quot;&gt;</span><br><span class="line">              &lt;a class=&quot;nav-link dropdown-toggle&quot; href=&quot;#&quot; id=&quot;navbarDropdown&quot; role=&quot;button&quot; data-toggle=&quot;dropdown&quot; aria-expanded=&quot;false&quot;&gt;</span><br><span class="line">                更多</span><br><span class="line">              &lt;/a&gt;</span><br><span class="line">              &lt;div class=&quot;dropdown-menu&quot; aria-labelledby=&quot;navbarDropdown&quot;&gt;</span><br><span class="line">                &lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;关于我们&lt;/a&gt;</span><br><span class="line">                &lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;渠道合作&lt;/a&gt;</span><br><span class="line">                &lt;div class=&quot;dropdown-divider&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;更多信息&lt;/a&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">            &lt;span class=&quot;text-white&quot;&gt;欢迎：&lt;/span&gt;</span><br><span class="line">            &lt;button class=&quot;btn btn-outline-light my-2 my-sm-0&quot; type=&quot;submit&quot;&gt;登录/注册&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/nav&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">      name:&#x27;theHeader&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5.网站开发，底部文案修改</span><br></pre></td></tr></table></figure><ul><li><p>就是修改the-footer</p></li><li><p>&#96;&#96;&#96;vue</p><template>  <footer class="text-muted">    <div class="container">      <p class="float-right">        <a href="#">回到顶部</a>      </p>      <p>欢迎来到小方视频售卖中心，第一次项目</p>      <p>2021&nbsp;leaning.com</p>    </div>  </footer></template><script>export default {  name:'theFooter',}</script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>6.网站开发，大屏文案修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 一样就是修改index.vue</span><br><span class="line"></span><br><span class="line">**最新上线与好课推荐**</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.网站开发，增加【新上好课】后端接口测试地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 以后web模块的请求全会放到web包下，将admin请求和web请求分开，方便做权限控制（business中controller），新建文件CourseController</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.course.business.controller.web;</span><br><span class="line">  </span><br><span class="line">  import com.course.server.dto.CourseDto;</span><br><span class="line">  import com.course.server.dto.PageDto;</span><br><span class="line">  import com.course.server.dto.ResponseDto;</span><br><span class="line">  import com.course.server.service.CourseService;</span><br><span class="line">  import org.slf4j.Logger;</span><br><span class="line">  import org.slf4j.LoggerFactory;</span><br><span class="line">  import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">  import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">  import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">  </span><br><span class="line">  import javax.annotation.Resource;</span><br><span class="line">  import java.util.List;</span><br><span class="line">  </span><br><span class="line">  @RestController(&quot;webCourseController&quot;)</span><br><span class="line">  @RequestMapping(&quot;/web/course&quot;)</span><br><span class="line">  public class CourseController &#123;</span><br><span class="line">  </span><br><span class="line">      private static final Logger LOG = LoggerFactory.getLogger(CourseController.class);</span><br><span class="line">      public static final String BUSINESS_NAME = &quot;课程&quot;;</span><br><span class="line">  </span><br><span class="line">      @Resource</span><br><span class="line">      private CourseService courseService;</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 列表查询，查询最新的3门已发布的课程</span><br><span class="line">       */</span><br><span class="line">      @GetMapping(&quot;/list-new&quot;)</span><br><span class="line">      public ResponseDto listNew() &#123;</span><br><span class="line">          PageDto pageDto = new PageDto();</span><br><span class="line">          pageDto.setPage(1);</span><br><span class="line">          pageDto.setSize(3);</span><br><span class="line">          ResponseDto responseDto = new ResponseDto();</span><br><span class="line">          List&lt;CourseDto&gt; courseDtoList = courseService.listNew(pageDto);</span><br><span class="line">          responseDto.setContent(courseDtoList);</span><br><span class="line">          return responseDto;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p>最后在CourseService添加方法</p></li><li><p>&#96;&#96;&#96;<br>&#x2F;**</p><ul><li>新课列表查询，只查询已发布的，按创建日期倒序</li></ul><p> *&#x2F;<br>public List<CourseDto> listNew(PageDto pageDto) {<br>    PageHelper.startPage(pageDto.getPage(), pageDto.getSize());<br>    CourseExample courseExample &#x3D; new CourseExample();<br>    courseExample.createCriteria().andStatusEqualTo(CourseStatusEnum.PUBLISH.getCode());<br>    courseExample.setOrderByClause(“created_at desc”);<br>    List<Course> courseList &#x3D; courseMapper.selectByExample(courseExample);<br>    return CopyUtil.copyList(courseList, CourseDto.class);<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>2.网站首页开发，首页显示新上好课真实数据<br>bootstrap4图片自适应：使用img-fluid<br>安装axios：npm install axios –save<br>3.初始user表，test&#x2F;test</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 前后端交互，使用axios，也可以用jquery</span><br><span class="line"></span><br><span class="line">- 我们首先npm install axios --save，然后修改main.js将axios 加进来</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  import axios from &quot;axios&quot;</span><br><span class="line">  Vue.prototype.$ajax = axios;</span><br></pre></td></tr></table></figure><ul><li><p>然后修改index.vue</p></li><li><p>&#96;&#96;&#96;vue<br>&#x2F;&#x2F;新增<br>data: function () {<br>  return {<br>news: [],<br>  }<br>},<br>mounted() {<br>  let _this &#x3D; this;<br>  _this.listNew();<br>},<br>methods: {<br>  &#x2F;**</p><ul><li>查询新上好课</li></ul><p>   *&#x2F;<br>  listNew() {<br>    let _this &#x3D; this;<br>    _this.$ajax.get(process.env.VUE_APP_SERVER + ‘&#x2F;business&#x2F;web&#x2F;course&#x2F;list-new’).then((response)&#x3D;&gt;{<br>      console.log(“查询新上好课结果：”, response);<br>      let resp &#x3D; response.data;<br>      if (resp.success) {<br>        _this.news &#x3D; resp.content;<br>      }<br>    }).catch((response)&#x3D;&gt;{<br>      console.log(“error：”, response);<br>    })<br>  },<br>&#x2F;&#x2F;修改<br> <div v-for="o in news" v-bind:key="o" class="col-md-4"><br>            <div class="card mb-4 shadow-sm"><br>              <img  class="img-fluid" v-bind:                     lazyload                     src="/images/loading.svg"                     data-src="o.image"                                     ><br>              <div class="card-body"><br>                <h4 class=""></h4><br>                <p class="card-text"></p><br>                <div class="d-flex justify-content-between align-items-center"><br>                  <div class="btn-group"><br>                    <button type="button" class="btn btn-sm btn-outline-secondary">View</button><br>                    <button type="button" class="btn btn-sm btn-outline-secondary">Edit</button><br>                  </div><br>                  <div class="text-muted"><br>                    <span class="badge badge-info"><i class="fa fa-yen" aria-hidden="true"></i>&amp;nbsp;</span>&amp;nbsp;<br>                    <span class="badge badge-info"><i class="fa fa-yen" aria-hidden="true"></i>&amp;nbsp;</span>&amp;nbsp;<br>                  </div><br>                </div><br>              </div><br>            </div><br>          </div></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 13-4 首页开发-2</span><br><span class="line"></span><br><span class="line">**最新上线与好课推荐**</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.网站首页开发<br>课程card美化<br>增加【最新上线】和【好课推荐】，【好课推荐】和【最新上线】使用的一样数据<br>响应式的页面，使用rem代替px<br>2.增加vue校验配置.eslintrc.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 如果设置html标签的font-size=16px，则1rem=16px，0.5rer=8px后续所有字体，边距都可以用rem作为单位</span><br><span class="line"></span><br><span class="line">- 首先在public的static中新建style.css，记得在index.html中引用</span><br><span class="line"></span><br><span class="line">- ```css</span><br><span class="line">  html&#123;</span><br><span class="line">      font-size: 16px;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p>然后把admin的.eslintrc.js复制到web</p></li><li><pre><code class="js">module.exports = &#123;    root: true,    env: &#123;        node: true    &#125;,    &#39;extends&#39;: [        &#39;plugin:vue/essential&#39;,        &#39;eslint:recommended&#39;    ],    rules: &#123;        &#39;no-console&#39;: &#39;off&#39;,        &#39;no-debugger&#39;: process.env.NODE_ENV === &#39;production&#39; ? &#39;error&#39; : &#39;off&#39;,        &#39;no-undef&#39;: &#39;off&#39;,        &#39;vue/no-unused-vars&#39;: &#39;off&#39;,        &#39;vue/require-v-for-key&#39;: &#39;off&#39;,        &#39;no-unused-vars&#39;: &#39;off&#39;,        &#39;vue/no-unused-components&#39;: &#39;off&#39;    &#125;,    parserOptions: &#123;        parser: &#39;babel-eslint&#39;    &#125;&#125;;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后我们把index.vue最新上线部分直接复制一下就变成了好课推荐</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;div class =&quot;title1&quot;&gt;好课推荐&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">    &lt;div v-for=&quot;o in news&quot;  class=&quot;col-md-4&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;card mb-4 shadow-sm course&quot;&gt;</span><br><span class="line">        &lt;img class=&quot;img-fluid&quot; v-bind:src=&quot;o.image&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">          &lt;h4 class=&quot;&quot;&gt;&#123;&#123;o.name&#125;&#125;&lt;/h4&gt;</span><br><span class="line">          &lt;p class=&quot;card-text&quot;&gt;&#123;&#123;o.summary&#125;&#125;&lt;/p&gt;</span><br><span class="line">          &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">              &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;</span><br><span class="line">              &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;text-muted&quot;&gt;</span><br><span class="line">              &lt;span class=&quot;badge badge-info&quot;&gt;&lt;i class=&quot;fa fa-yen&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&amp;nbsp;&#123;&#123;o.price&#125;&#125;&lt;/span&gt;&amp;nbsp;</span><br><span class="line">              &lt;span class=&quot;badge badge-info&quot;&gt;&lt;i class=&quot;fa fa-yen&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&amp;nbsp;&#123;&#123;o.enroll&#125;&#125;&lt;/span&gt;&amp;nbsp;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>可以百度搜css3标题样式，有很多别人共享的样式，我们在index.vue加上样式</p></li><li><p>&#96;&#96;&#96;vue</p><style>  .title1{    margin-bottom: 2rem;    color: #fafafa;    letter-spacing: 0;    text-shadow: 0px 1px 0px #999, 0px 2px 0px #888, 0px 3px 0px #777, 0px 4px 0px #666, 0px 5px 0px #555, 0px 6px 0px #444, 0px 7px 0px #333, 0px 8px 7px #001135;    font-size: 2rem;  }  .title2{    margin-bottom: 2rem;    color: transparent;    -webkit-text-stroke: 1px black;    letter-spacing: 0.04em;    font-size: 2rem;  }</style><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**课程信息组件提取**</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.网站首页开发：增加课程card组件the-course</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 首先增加组件the-course</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;card mb-4 shadow-sm course&quot;&gt;</span><br><span class="line">      &lt;img class=&quot;img-fluid&quot; v-bind:src=&quot;course.image&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">        &lt;h4 class=&quot;&quot;&gt;&#123;&#123;course.name&#125;&#125;&lt;/h4&gt;</span><br><span class="line">        &lt;p class=&quot;card-text&quot;&gt;&#123;&#123;course.summary&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;div class=&quot;d-flex justify-content-between align-items-center&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">            &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;View&lt;/button&gt;</span><br><span class="line">            &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-secondary&quot;&gt;Edit&lt;/button&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;text-muted&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;badge badge-info&quot;&gt;&lt;i class=&quot;fa fa-yen&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&amp;nbsp;&#123;&#123;course.price&#125;&#125;&lt;/span&gt;&amp;nbsp;</span><br><span class="line">            &lt;span class=&quot;badge badge-info&quot;&gt;&lt;i class=&quot;fa fa-yen&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&amp;nbsp;&#123;&#123;course.enroll&#125;&#125;&lt;/span&gt;&amp;nbsp;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;the-course&#x27;,</span><br><span class="line">    props:&#123;</span><br><span class="line">      course:&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data:function ()&#123;</span><br><span class="line">      return &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;style&gt;</span><br><span class="line">  .course h4 &#123;</span><br><span class="line">    font-size: 1.25rem;</span><br><span class="line">    margin: 15px 0;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .course .text-muted .badge &#123;</span><br><span class="line">    font-size: 1rem;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li><p>然后修改index.vue使用</p></li><li><p>&#96;&#96;&#96;vue</p><div class="row">  <div v-for="o in news" class="col-md-4">    <the-course v-bind:course="o"></the-course>  </div></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>2.网站首页开发：课程card组件增加等级显示<br>3，增加过滤器Filter.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 我们首先增加一个枚举，需要在EnumGenerator.java改下路径</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  static String path = &quot;web\\public\\static\\js\\enums.js&quot;;</span><br></pre></td></tr></table></figure><ul><li><p>生成完enums.js后需要在index.html引用</p></li><li><pre><code class="html">&lt;script src=&quot;&lt;%= BASE_URL %&gt;static/js/enums.js&quot;&gt;&lt;/script&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后我们在admin中将filter.js拷过来</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  /**</span><br><span class="line">   * 数组过滤器 例如：这也是两个大括号包住SECTION_CHARGE | option..KV(section.charge)</span><br><span class="line">   * @param object 例如：&#123;CHARGE:&#123;key:&quot;C&quot;, value:&quot;收费&quot;&#125;,FREE:&#123;key:&quot;F&quot;, value:&quot;免费&quot;&#125;&#125;</span><br><span class="line">   * @param key 例如：C</span><br><span class="line">   * @returns &#123;string&#125; 例如：收费</span><br><span class="line">   */</span><br><span class="line">  let option..KV = (object, key) =&gt;  &#123;</span><br><span class="line">      if (!object || !key) &#123;</span><br><span class="line">          return &quot;&quot;;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          let result = &quot;&quot;;</span><br><span class="line">          for(let enums in object)&#123;</span><br><span class="line">              if (key === object[enums][&quot;key&quot;]) &#123;</span><br><span class="line">                  result = object[enums][&quot;value&quot;];</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          return result;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  /**</span><br><span class="line">   * 时长格式化</span><br><span class="line">   * @param value 例如：36000</span><br><span class="line">   * @returns &#123;string&#125; 例如：10:00:00</span><br><span class="line">   */</span><br><span class="line">  let format..Second = (value) =&gt; &#123;</span><br><span class="line">      value = value || 0;</span><br><span class="line">      let second = parseInt(value, 10); // 秒</span><br><span class="line">      let minute = 0; // 分</span><br><span class="line">      let hour = 0; // 小时</span><br><span class="line">      if (second &gt;= 60) &#123;</span><br><span class="line">          // 当大于60秒时，才需要做转换</span><br><span class="line">          minute = Math.floor(second / 60);</span><br><span class="line">          second = Math.floor(second % 60);</span><br><span class="line">          if (minute &gt;= 60) &#123;</span><br><span class="line">              hour = Math.floor(minute / 60);</span><br><span class="line">              minute = Math.floor(minute % 60);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          // 小于60秒时，直接显示，不需要处理</span><br><span class="line">      &#125;</span><br><span class="line">      let result = &quot;&quot; + PrefixInteger(second, 2) + &quot;&quot;;</span><br><span class="line">      // 拼上分钟</span><br><span class="line">      result = &quot;&quot; + PrefixInteger(minute, 2) + &quot;:&quot; + result;</span><br><span class="line">      // 拼上小时</span><br><span class="line">      result = &quot;&quot; + PrefixInteger(hour, 2) + &quot;:&quot; + result;</span><br><span class="line">      return result;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  /**</span><br><span class="line">   * 格式化指定长度，前面补0</span><br><span class="line">   */</span><br><span class="line">  function PrefixInteger(num, length) &#123;</span><br><span class="line">      return (Array(length).join(&#x27;0&#x27;) + num).slice(-length);</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 格式化文件大小</span><br><span class="line">   * @param value</span><br><span class="line">   * @returns &#123;string&#125;</span><br><span class="line">   */</span><br><span class="line">  </span><br><span class="line">  let formatFileSize = (value) =&gt; &#123;</span><br><span class="line">      value = value || 0;</span><br><span class="line">      let result;</span><br><span class="line">      if (value &gt; 100 * 1024) &#123;</span><br><span class="line">          result = Math.round((value / 1024 / 1024) * 100) / 100 + &quot;MB&quot;;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          result = Math.round((value / 1024) * 100) / 100 + &quot;KB&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">      return result;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  export default &#123;</span><br><span class="line">      option..KV,</span><br><span class="line">      format..Second,</span><br><span class="line">      formatFileSize</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>在main.js中定义</p></li><li><p>&#96;&#96;&#96;js<br>import filter from “.&#x2F;filter&#x2F;filter”</p><p>&#x2F;&#x2F;全局过滤器<br>Object.keys(filter).forEach(key&#x3D;&gt;{<br>  Vue.filter(key,filter[key])<br>});</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 最后在the-course</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;span class=&quot;badge badge-info&quot;&gt;&lt;i class=&quot;fa fa-yen&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&amp;nbsp;&#123;&#123;course.price&#125;&#125;&lt;/span&gt;&amp;nbsp;</span><br><span class="line">  &lt;span class=&quot;badge badge-info&quot;&gt;&lt;i class=&quot;fa fa-yen&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&amp;nbsp;&#123;&#123;course.enroll&#125;&#125;&lt;/span&gt;&amp;nbsp;</span><br><span class="line">  &lt;span class=&quot;badge badge-info&quot;&gt;&#123;&#123;COURSE_LEVEL|option..KV(course.level)&#125;&#125;&lt;/span&gt;//新增的</span><br><span class="line">  //data返回</span><br><span class="line">   data:function ()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        COURSE_LEVEL:COURSE_LEVEL</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></li></ul><h2 id="13-5-课程列表页面开发"><a href="#13-5-课程列表页面开发" class="headerlink" title="13-5 课程列表页面开发"></a>13-5 课程列表页面开发</h2><p><strong>课程列表数据显示</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.网站首页开发，增加课程列表页【全部课程】，并增加路由</span><br></pre></td></tr></table></figure><ul><li><p>首先在views中新加一个list.vue</p></li><li><pre><code class="vue">&lt;template&gt;  &lt;main role=&quot;main&quot;&gt;    &lt;div class=&quot;album py-5 bg-light&quot;&gt;      &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;row&quot;&gt;          &lt;div v-for=&quot;o in courses&quot; class=&quot;col-md-4&quot;&gt;            &lt;the-course v-bind:course=&quot;o&quot;&gt;&lt;/the-course&gt;          &lt;/div&gt;          &lt;h3 v-show=&quot;courses.length === 0&quot;&gt;课程还未上架&lt;/h3&gt;        &lt;/div&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/main&gt;&lt;/template&gt;&lt;script&gt;  import TheCourse from &quot;../components/the-course&quot;;  export default &#123;    components: &#123;TheCourse&#125;,    name: &#39;list&#39;,    data: function () &#123;      return &#123;        courses: [],      &#125;    &#125;,    mounted() &#123;      let _this = this;      _this.listCourse();    &#125;,    methods: &#123;      /**       * 查询课程列表       */      listCourse() &#123;        let _this = this;      &#125;,    &#125;  &#125;&lt;/script&gt;&lt;style&gt;&lt;/style&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后再router.js中加一个路由</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  , &#123;</span><br><span class="line">      path: &quot;/list&quot;,</span><br><span class="line">      component: List</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>接下来在index.vue中使用</p></li><li><p>&#96;&#96;&#96;vue</p><p>  <router-link to="/list" class="btn btn-primary my-2 p-3 font-weight-bold">点击进入所有课程</router-link></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 同样在the-header中也使用</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;li class=&quot;nav-item active&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/&quot; class=&quot;nav-link&quot; href=&quot;#&quot;&gt;主页 &lt;span class=&quot;sr-only&quot;&gt;(current)&lt;/span&gt;&lt;/router-link&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;nav-item active&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/list&quot; class=&quot;nav-link&quot; href=&quot;#&quot;&gt;全部课程&lt;/router-link&gt;</span><br><span class="line">  &lt;/li&gt;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.网站首页开发，课程列表页调用后端接口显示真实数据</span><br></pre></td></tr></table></figure><ul><li><p>Ctrl+Alt+L格式化</p></li><li><p>首先在CourseController中增加方法</p></li><li><p>&#96;&#96;&#96;java<br>&#x2F;**</p><ul><li>列表查询</li></ul><p> *&#x2F;<br>@PostMapping(“&#x2F;list”)<br>public ResponseDto list(@RequestBody PageDto pageDto) {<br>    ResponseDto responseDto &#x3D; new ResponseDto();<br>    courseService.list(pageDto);<br>    responseDto.setContent(pageDto);<br>    return responseDto;<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后再list中完善方法</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  /**</span><br><span class="line">   * 查询课程列表</span><br><span class="line">   */</span><br><span class="line">  listCourse(page) &#123;</span><br><span class="line">    let _this = this;</span><br><span class="line">    _this.$ajax.post(process.env.VUE_APP_SERVER+&#x27;/business/web/course/list&#x27;,&#123;</span><br><span class="line">      page:page,</span><br><span class="line">      size:3,</span><br><span class="line">    &#125;).then((response)=&gt;&#123;</span><br><span class="line">      let resp = response.data;</span><br><span class="line">      if (resp.sucess)&#123;</span><br><span class="line">        _this.courses = resp.content.list;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).catch((response)=&gt;&#123;</span><br><span class="line">      console.log(&quot;error&quot;,response);</span><br><span class="line">    &#125;)</span><br><span class="line">  </span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.课程列表页面开发，后端接口只能查询已发布的课程</span><br></pre></td></tr></table></figure><ul><li><p>如果列表查询接口的请求参数，只有分页相关的参数，可以使用PageDto作为传参的类。如果请求参数包含其他参数，则需要建立一个类CoursePageDto，集成PageDto，来传递更多的参数。因从我们加了CoursePageDto</p></li><li><pre><code class="java">package com.course.server.dto;public class CoursePageDto extends PageDto &#123;    private String status;    public String getStatus() &#123;        return status;    &#125;    public void setStatus(String status) &#123;        this.status = status;    &#125;    @Override    public String toString() &#123;        final StringBuffer sb = new StringBuffer(&quot;CoursePageDto&#123;&quot;);        sb.append(&quot;status=&#39;&quot;).append(status).append(&#39;\&#39;&#39;);        sb.append(&quot;, page=&quot;).append(page);        sb.append(&quot;, size=&quot;).append(size);        sb.append(&quot;, total=&quot;).append(total);        sb.append(&quot;, list=&quot;).append(list);        sb.append(&#39;&#125;&#39;);        return sb.toString();    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后我们再web的CourseController中将参数替换了</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  public ResponseDto list(@RequestBody CoursePageDto pageDto) &#123;//参数替换</span><br><span class="line">      ResponseDto responseDto = new ResponseDto();</span><br><span class="line">      pageDto.setStatus(CourseStatusEnum.PUBLISH.getCode());//新增</span><br><span class="line">      courseService.list(pageDto);</span><br><span class="line">      responseDto.setContent(pageDto);</span><br><span class="line">      return responseDto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>这时CourseService中的list参数也得换，由于status查询条件不是必须的，控台接口进来就不需要这个条件，网站接口进来的有这个条件，所以增加一个status条件判断</p></li><li><p>&#96;&#96;&#96;java<br>public void list(CoursePageDto pageDto){&#x2F;&#x2F;参数<br>CourseExample.Criteria criteria &#x3D; courseExample.createCriteria();&#x2F;&#x2F;都是新增<br>if(!StringUtils.isEmpty(pageDto.getStatus())){<br>    criteria.andStatusEqualTo(pageDto.getStatus());<br>}<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 最后admin的coursecontroller也得将list参数进行修改</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>4.课程列表页面开发，前端分页<br>5.增加分页组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 直接再admin中复制分页组件进行稍微修改</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;pagination&quot; role=&quot;group&quot; aria-label=&quot;分页&quot;&gt;</span><br><span class="line">      &lt;button type=&quot;button&quot; class=&quot;btn btn-outline-dark&quot;</span><br><span class="line">              v-bind:disabled=&quot;page === 1&quot;</span><br><span class="line">              v-on:click=&quot;selectPage(1)&quot;&gt;</span><br><span class="line">        1</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">      &lt;button type=&quot;button&quot; class=&quot;btn btn-outline-dark&quot;</span><br><span class="line">              v-bind:disabled=&quot;page === 1&quot;</span><br><span class="line">              v-on:click=&quot;selectPage(page - 1)&quot;&gt;</span><br><span class="line">        上一页</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">      &lt;button v-for=&quot;p in pages&quot; v-bind:id=&quot;&#x27;page-&#x27; + p&quot;</span><br><span class="line">              type=&quot;button&quot; class=&quot;btn btn-outline-dark&quot;</span><br><span class="line">              v-bind:class=&quot;&#123;&#x27;btn-primary active&#x27;:page == p&#125;&quot;</span><br><span class="line">              v-on:click=&quot;selectPage(p)&quot;&gt;</span><br><span class="line">        &#123;&#123;p&#125;&#125;</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">      &lt;button type=&quot;button&quot; class=&quot;btn btn-outline-dark&quot;</span><br><span class="line">              v-bind:disabled=&quot;page === pageTotal&quot;</span><br><span class="line">              v-on:click=&quot;selectPage(page + 1)&quot;&gt;</span><br><span class="line">        下一页</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">      &lt;button type=&quot;button&quot; class=&quot;btn btn-outline-dark&quot;</span><br><span class="line">              v-bind:disabled=&quot;page === pageTotal&quot;</span><br><span class="line">              v-on:click=&quot;selectPage(pageTotal)&quot;&gt;</span><br><span class="line">        &#123;&#123;pageTotal||1&#125;&#125;</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">      &amp;nbsp;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;pagination&#x27;,</span><br><span class="line">    props: &#123;</span><br><span class="line">      list: &#123;</span><br><span class="line">        type: Function,</span><br><span class="line">        default: null</span><br><span class="line">      &#125;,</span><br><span class="line">      itemCount: Number // 显示的页码数，比如总共有100页，只显示10页，其它用省略号表示</span><br><span class="line">    &#125;,</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        total: 0, // 总行数</span><br><span class="line">        size: 10, // 每页条数</span><br><span class="line">        page: 0, // 当前页码</span><br><span class="line">        pageTotal: 0, // 总页数</span><br><span class="line">        pages: [], // 显示的页码数组</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      /**</span><br><span class="line">       * 渲染分页组件</span><br><span class="line">       * @param page</span><br><span class="line">       * @param total</span><br><span class="line">       */</span><br><span class="line">      render(page, total) &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        _this.page = page;</span><br><span class="line">        _this.total = total;</span><br><span class="line">        _this.pageTotal = Math.ceil(total / _this.size);</span><br><span class="line">        _this.pages = _this.getPageItems(_this.pageTotal, page, _this.itemCount || 5);</span><br><span class="line">      &#125;,</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 查询某一页</span><br><span class="line">       * @param page</span><br><span class="line">       */</span><br><span class="line">      selectPage(page) &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        if (page &lt; 1) &#123;</span><br><span class="line">          page = 1;</span><br><span class="line">        &#125;</span><br><span class="line">        if (page &gt; _this.pageTotal) &#123;</span><br><span class="line">          page = _this.pageTotal;</span><br><span class="line">        &#125;</span><br><span class="line">        if (this.page !== page) &#123;</span><br><span class="line">          _this.page = page;</span><br><span class="line">          if (_this.list) &#123;</span><br><span class="line">            _this.list(page);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 当前要显示在页面上的页码</span><br><span class="line">       * @param total</span><br><span class="line">       * @param current</span><br><span class="line">       * @param length</span><br><span class="line">       * @returns &#123;Array&#125;</span><br><span class="line">       */</span><br><span class="line">      getPageItems(total, current, length) &#123;</span><br><span class="line">        let items = [];</span><br><span class="line">        if (length &gt;= total) &#123;</span><br><span class="line">          for (let i = 1; i &lt;= total; i++) &#123;</span><br><span class="line">            items.push(i);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          let base = 0;</span><br><span class="line">          // 前移</span><br><span class="line">          if (current - 0 &gt; Math.floor((length - 1) / 2)) &#123;</span><br><span class="line">            // 后移</span><br><span class="line">            base = Math.min(total, current - 0 + Math.ceil((length - 1) / 2)) - length;</span><br><span class="line">          &#125;</span><br><span class="line">          for (let i = 1; i &lt;= length; i++) &#123;</span><br><span class="line">            items.push(base + i);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return items;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;style scoped&gt;</span><br><span class="line">  .pagination &#123;</span><br><span class="line">    vertical-align: middle !important;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    margin-top: 0;</span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .pagination button &#123;</span><br><span class="line">    margin-right: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .btn-primary.active &#123;</span><br><span class="line">    background-color: #2f7bba !important;</span><br><span class="line">    border-color: #27689d !important;</span><br><span class="line">    color: white !important;</span><br><span class="line">    font-weight: 600;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  /*.pagination select &#123;*/</span><br><span class="line">  /*vertical-align: middle !important;*/</span><br><span class="line">  /*font-size: 16px;*/</span><br><span class="line">  /*margin-top: 0;*/</span><br><span class="line">  /*&#125;*/</span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li><p>然后在list进行修改</p></li><li><p>&#96;&#96;&#96;vue<br>&#x2F;&#x2F;分页组件使用</p><div class="row">  <div class="col-md-12">    <pagination ref="pagination" v-bind:list="listCourse"></pagination>  </div>  </div><br>//初始化mounted() { _this.$refs.pagination.size = 1;}//在这个方法中进行渲染listCourse(page) {        _this.$ajax.post(process.env.VUE_APP_SERVER+'/business/web/course/list',{          size:_this.$refs.pagination.size,//新增参数        }).then((response)=>{          if (resp.sucess){            _this.$refs.pagination.render(page,resp.content.total);//增加得渲染          }<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 13-6 分类筛选功能开发</span><br><span class="line"></span><br><span class="line">**分类筛选功能开发**</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.课程列表页面开发，加载所有分类<br>2.增加axios接口访问日志拦截器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 先增加日志拦截器，修改main.js</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  // 解决每次ajax请求，对应的sessionId不一致的问题</span><br><span class="line">  axios.defaults.withCredentials = true;</span><br><span class="line">  </span><br><span class="line">  /**</span><br><span class="line">   * axias拦截器</span><br><span class="line">   */</span><br><span class="line">  axios.interceptors.request.use(function (config)&#123;</span><br><span class="line">    console.log(&quot;请求:&quot;,config);</span><br><span class="line">    return config;</span><br><span class="line">  &#125;,error =&gt; &#123;&#125;);</span><br><span class="line">  axios.interceptors.request.use(function (response)&#123;</span><br><span class="line">    console.log(&quot;返回结果:&quot;,response);</span><br><span class="line">    return response;</span><br><span class="line">  &#125;,error =&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>tool.js同样也拷过来</p></li><li><pre><code class="js">Tool = &#123;    /**     * 空校验 null或&quot;&quot;都返回true     */    isEmpty: function (obj) &#123;        if ((typeof obj == &#39;string&#39;)) &#123;            return !obj || obj.replace(/\s+/g, &quot;&quot;) == &quot;&quot;        &#125; else &#123;            return (!obj || JSON.stringify(obj) === &quot;&#123;&#125;&quot; || obj.length === 0);        &#125;    &#125;,    /**     * 非空校验     */    isNotEmpty: function (obj) &#123;        return !this.isEmpty(obj);    &#125;,    /**     * 长度校验     */    isLength: function (str, min, max) &#123;        return $.trim(str).length &gt;= min &amp;&amp; $.trim(str).length &lt;= max;    &#125;,    /**     * 时间格式化，date为空时取当前时间     */    dateFormat: function (format, date) &#123;        let result;        if (!date) &#123;            date = new Date();        &#125;        const option = &#123;            &quot;y+&quot;: date.getFullYear().toString(),        // 年            &quot;M+&quot;: (date.getMonth() + 1).toString(),     // 月            &quot;d+&quot;: date.getDate().toString(),            // 日            &quot;h+&quot;: date.getHours().toString(),           // 时            &quot;m+&quot;: date.getMinutes().toString(),         // 分            &quot;s+&quot;: date.getSeconds().toString()          // 秒        &#125;;        for (let i in option) &#123;            result = new RegExp(&quot;(&quot; + i + &quot;)&quot;).exec(format);            if (result) &#123;                format = format.replace(result[1], (result[1].length == 1) ? (option[i]) : (option[i].padStart(result[1].length, &quot;0&quot;)))            &#125;        &#125;        return format;    &#125;,    /**     * 移除对象数组中的对象     * @param array     * @param obj     * @returns &#123;number&#125;     */    removeObj: function (array, obj) &#123;        let index = -1;        for (let i = 0; i &lt; array.length; i++) &#123;            if (array[i] === obj) &#123;                array.splice(i, 1);                index = i;                break;            &#125;        &#125;        return index;    &#125;,    /**     * 10进制转62进制     * @param number     * @returns &#123;string&#125;     * @private     */    _10to62: function (number) &#123;        let chars = &#39;0123456789abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ&#39;;        let radix = chars.length;        let arr = [];        do &#123;            let mod = number % radix;            number = (number - mod) / radix;            arr.unshift(chars[mod]);        &#125; while (number);        return arr.join(&#39;&#39;);    &#125;,    /**     * 保存登录信息     * @param loginUser     */    setLoginUser:function (loginUser)&#123;        SessionStorage.set(SESSION_KEY_LOGIN_USER,loginUser);    &#125;,    /**     * 获取登录信息     * @param loginUser     * @returns &#123;any|&#123;&#125;&#125;     */    getLoginUser:function ()&#123;        return SessionStorage.get(SESSION_KEY_LOGIN_USER) ||&#123;&#125;;    &#125;,    /**     * 随机生成[len]长度的[radix]进制数     * @param len     * @param radix 默认62     * @returns &#123;string&#125;     */    uuid: function (len, radix) &#123;        let chars = &#39;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#39;.split(&#39;&#39;);        let uuid = [];        radix = radix || chars.length;        for (let i = 0; i &lt; len; i++) &#123;            uuid[i] = chars[0 | Math.random() * radix];        &#125;        return uuid.join(&#39;&#39;);    &#125;,    /**     * 查找是否有权限     * @param id 资源id     */    hasResource: function (id) &#123;        let _this = this;        let resources = _this.getLoginUser().resources;        if (_this.isEmpty(resources)) &#123;            return false;        &#125;        for (let i = 0; i &lt; resources.length; i++) &#123;            if (id === resources[i].id) &#123;                return true;            &#125;        &#125;        return false;    &#125;&#125;;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 修改list.vue</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  //data中增加两个层级</span><br><span class="line">  level1:[],</span><br><span class="line">  level2:[],</span><br><span class="line">  //mounted初始化</span><br><span class="line">    _this.allCategory();</span><br><span class="line">  //增加方法</span><br><span class="line">  </span><br><span class="line">        /**</span><br><span class="line">         * 所有分类查询</span><br><span class="line">         */</span><br><span class="line">        allCategory() &#123;</span><br><span class="line">          let _this = this;</span><br><span class="line">          _this.$ajax.post(process.env.VUE_APP_SERVER + &#x27;/business/web/category/all&#x27;).then((response)=&gt;&#123;</span><br><span class="line">            let resp = response.data;</span><br><span class="line">            let categorys = resp.content;</span><br><span class="line">  </span><br><span class="line">            // 将所有记录格式化成树形结构</span><br><span class="line">            _this.level1 = [];</span><br><span class="line">            for (let i = 0; i &lt; categorys.length; i++) &#123;</span><br><span class="line">              let c = categorys[i];</span><br><span class="line">              if (c.parent === &#x27;00000000&#x27;) &#123;</span><br><span class="line">                _this.level1.push(c);</span><br><span class="line">                for(let j =0;j&lt;categorys.level;j++)&#123;</span><br><span class="line">                  let child = categorys[j];</span><br><span class="line">                  if (child.parent ===c.id)&#123;</span><br><span class="line">                    if(Tool.isEmpty(c.children))&#123;</span><br><span class="line">                      c.children = [];</span><br><span class="line">                    &#125;</span><br><span class="line">                    c.children.push(child);</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                _this.level2.push(c);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure></code></pre></li><li><p>当然这时我们要在business&#x2F;web增加一个CategoryController</p></li><li><p>&#96;&#96;&#96;java<br>package com.course.business.controller.web;</p><p>import com.course.server.dto.CategoryDto;<br>import com.course.server.dto.ResponseDto;<br>import com.course.server.service.CategoryService;<br>import org.slf4j.Logger;<br>import org.slf4j.LoggerFactory;<br>import org.springframework.web.bind.annotation.PostMapping;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RestController;</p><p>import javax.annotation.Resource;<br>import java.util.List;</p><p>@RestController(“webCategoryController”)<br>@RequestMapping(“&#x2F;web&#x2F;category”)<br>public class CategoryController {</p><pre><code>private static final Logger LOG = LoggerFactory.getLogger(CategoryController.class);public static final String BUSINESS_NAME = &quot;分类&quot;;@Resourceprivate CategoryService categoryService;/** * 列表查询 */@PostMapping(&quot;/all&quot;)public ResponseDto all() &#123;    ResponseDto responseDto = new ResponseDto();    List&lt;CategoryDto&gt; categoryDtoList = categoryService.all();    responseDto.setContent(categoryDtoList);    return responseDto;&#125;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>2.课程列表页面开发，两级分类访问慕课网显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 修改list.vue</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;div class=&quot;header-nav&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;clearfix&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;col-12&quot;&gt;</span><br><span class="line">            &lt;a v-on:click=&quot;onClickLevel1(&#x27;00000000&#x27;)&quot; id=&quot;category-00000000&quot; href=&quot;javascript:;&quot; class=&quot;cur&quot;&gt;全部&lt;/a&gt;</span><br><span class="line">            &lt;a v-for=&quot;o in level1&quot; v-on:click=&quot;onClickLevel1(o.id)&quot; v-bind:id=&quot;&#x27;category-&#x27; + o.id&quot; href=&quot;javascript:;&quot;&gt;&#123;&#123;o.name&#125;&#125;&lt;/a&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;skill clearfix&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;col-12&quot;&gt;</span><br><span class="line">          &lt;a v-on:click=&quot;onClickLevel2(&#x27;11111111&#x27;)&quot; id=&quot;category-11111111&quot; href=&quot;javascript:;&quot; class=&quot;on&quot;&gt;不限&lt;/a&gt;</span><br><span class="line">          &lt;a v-for=&quot;o in level2&quot; v-on:click=&quot;onClickLevel2(o.id)&quot; v-bind:id=&quot;&#x27;category-&#x27; + o.id&quot; href=&quot;javascript:;&quot;&gt;&#123;&#123;o.name&#125;&#125;&lt;/a&gt;</span><br><span class="line">  </span><br><span class="line">          &lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  //增加两个方法</span><br><span class="line">    /**</span><br><span class="line">         * 点击一级分类时</span><br><span class="line">         * @param level1Id</span><br><span class="line">         */</span><br><span class="line">        onClickLevel1(level1Id) &#123;</span><br><span class="line">          let _this = this;</span><br><span class="line">        &#125;,</span><br><span class="line">        /**</span><br><span class="line">         * 点击二级分类时</span><br><span class="line">         * @param level1Id</span><br><span class="line">         */</span><br><span class="line">        onClickLevel2(level2Id) &#123;</span><br><span class="line">          let _this = this;</span><br><span class="line">        &#125;,</span><br><span class="line">  //增加两个样式</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    /* 头部 一级分类 */</span><br><span class="line">  .header-nav &#123;</span><br><span class="line">    height: auto;</span><br><span class="line">    background: #fff;</span><br><span class="line">    box-shadow: 0 8px 16px 0 rgba(28,31,33,.1);</span><br><span class="line">    padding: 16px 0;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    position: relative;</span><br><span class="line">    z-index: 1;</span><br><span class="line">    /*background-color: #d6e9c6;*/</span><br><span class="line">  &#125;</span><br><span class="line">  .header-nav&gt;div &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    padding-left: 12px;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    margin-left: auto;</span><br><span class="line">    margin-right: auto;</span><br><span class="line">    /*background-color: #B4D5AC;*/</span><br><span class="line">  &#125;</span><br><span class="line">  .header-nav a &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    color: #07111b;</span><br><span class="line">    line-height: 50px;</span><br><span class="line">    height: 45px;</span><br><span class="line">    position: relative;</span><br><span class="line">    margin-right: 46px;</span><br><span class="line">    font-weight: 700;</span><br><span class="line">  &#125;</span><br><span class="line">  .header-nav a:hover &#123;</span><br><span class="line">    color: #c80;</span><br><span class="line">  &#125;</span><br><span class="line">  .header-nav a.cur &#123;</span><br><span class="line">    color: #c80;</span><br><span class="line">  &#125;</span><br><span class="line">  .header-nav a.cur:before &#123;</span><br><span class="line">    display: block;</span><br><span class="line">  &#125;</span><br><span class="line">  .header-nav a:before &#123;</span><br><span class="line">    display: none;</span><br><span class="line">    content: &#x27; &#x27;;</span><br><span class="line">    position: absolute;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    background: #c80;</span><br><span class="line">    width: 16px;</span><br><span class="line">    height: 3px;</span><br><span class="line">    left: 50%;</span><br><span class="line">    margin-left: -8px;</span><br><span class="line">  &#125;</span><br><span class="line">  /* 二级分类 */</span><br><span class="line">  .skill &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    padding: 24px 0 0;</span><br><span class="line">    position: relative;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">  &#125;</span><br><span class="line">  .skill a.on &#123;</span><br><span class="line">    color: #c80;</span><br><span class="line">    background: rgba(204,136,0,.1);</span><br><span class="line">  &#125;</span><br><span class="line">  .skill a &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    margin-right: 20px;</span><br><span class="line">    padding: 0 12px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    color: #4d555d;</span><br><span class="line">    line-height: 32px;</span><br><span class="line">    border-radius: 6px;</span><br><span class="line">    margin-bottom: 12px;</span><br><span class="line">  &#125;</span><br><span class="line">  .skill a:hover &#123;</span><br><span class="line">    background: #d9dde1;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.课程列表页面开发，点击一级分类时显示激活状态，并显示对应的二级分类，如果点击的是全部，则显示所有的二级分类</span><br></pre></td></tr></table></figure><ul><li><p>只修改list.vue</p></li><li><p>&#96;&#96;&#96;vue<br>&#x2F;&#x2F;data中增加总分类<br>categorys:[],<br>&#x2F;&#x2F;然后再allCategory中加上<br>_this.categorys &#x3D; categorys;<br> &#x2F;**<br>   * 点击一级分类时<br>   * @param level1Id<br>   *&#x2F;<br>  onClickLevel1(level1Id) {<br>    let _this &#x3D; this;<br>    &#x2F;&#x2F; 点击一级分类时，显示激活状态<br>    $(“#category-“ + level1Id).siblings(“a”).removeClass(“cur”);<br>    $(“#category-“ + level1Id).addClass(“cur”);<br><br>    &#x2F;&#x2F; 点击一级分类时，二级分类【无限】按钮要设置激活状态<br>    $(“#category-11111111”).siblings(“a”).removeClass(“on”);<br>    $(“#category-11111111”).addClass(“on”);<br><br>    &#x2F;&#x2F; 注意：要先把level2中所有的值清空，再往里放<br>    _this.level2 &#x3D; [];<br>    let categorys &#x3D; _this.categorys;<br>    &#x2F;&#x2F; 如果点击的是【全部】，则显示所有的二级分类<br>    if (level1Id &#x3D;&#x3D;&#x3D; ‘00000000’) {<br>      for (let i &#x3D; 0; i &lt; categorys.length; i++) {<br>        let c &#x3D; categorys[i];<br>        if (c.parent !&#x3D;&#x3D; “00000000”) {<br>          _this.level2.push(c);<br>        }<br>      }<br>    }<br>    &#x2F;&#x2F; 如果点击的是某个一级分类，则显示该一级分类下的二级分类<br>    if (level1Id !&#x3D;&#x3D; ‘00000000’) {<br>      for (let i &#x3D; 0; i &lt; categorys.length; i++) {<br>        let c &#x3D; categorys[i];<br>        if (c.parent &#x3D;&#x3D;&#x3D; level1Id) {<br>          _this.level2.push(c);<br>        }<br>      }<br>    }<br>  },</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>4.课程列表页面开发，点击二级分类时显示激活状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 也是修改list.vue</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  /**</span><br><span class="line">   * 点击二级分类时</span><br><span class="line">   * @param level1Id</span><br><span class="line">   */</span><br><span class="line">  onClickLevel2(level2Id) &#123;</span><br><span class="line">    let _this = this;</span><br><span class="line">    $(&quot;#category-&quot; + level2Id).siblings(&quot;a&quot;).removeClass(&quot;on&quot;);</span><br><span class="line">    $(&quot;#category-&quot; + level2Id).addClass(&quot;on&quot;);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5.课程列表页面开发，根据点击的分类进行课程筛选，动态sql不仅可以进行动态列查询，也可以进行动态表关联</span><br></pre></td></tr></table></figure><ul><li><p>一级分类的全部激活时，level1id清空，二级分类的不限激活时，level2id清空，这样categoryid这个参数就是空的，即查询全部课程</p></li><li><p>前端我们修改list.vue</p></li><li><pre><code class="vue">//data中增加两个要传入后端的参数level1Id: &quot;&quot;,level2Id: &quot;&quot;,//listCourse的传入后端的参数中加入categoryId: _this.level2Id || _this.level1Id || &quot;&quot;, // 优先取level2Id//再onClickLevel1中添加// 点击一级分类时，设置变量，用于课程筛选// 二级分类id为空，// 如果点击的是【全部】，则一级分类id为空_this.level2Id = null;_this.level1Id = level1Id;if (level1Id === &quot;00000000&quot;) &#123;    _this.level1Id = null;&#125; // 最后重新加载课程列表_this.listCourse(1);//在onClickLevel2中// 点击二级分类时，设置变量，用于课程筛选// 如果点击的是【无限】，则二级分类id为空if (level2Id === &quot;11111111&quot;) &#123;    _this.level2Id = null;&#125; else &#123;    _this.level2Id = level2Id;&#125;// 重新加载课程列表_this.listCourse(1);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 下面开始修改后端首先MyCourseMapper.java</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  List&lt;CourseDto&gt; list(@Param(&quot;pageDto&quot;) CoursePageDto pageDto);</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后再CoursePageDto中新增字段</p></li><li><pre><code class="java">private String categoryId;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 课程表+课程分类关联表两张表关联。多表关联查询，需要写自定义sql，这时修改MyCourseMapper.xml</span><br><span class="line"></span><br><span class="line">- ```xml</span><br><span class="line">  &lt;!-- web端【全部课程】页面，查询课程列表 --&gt;</span><br><span class="line">  &lt;select id=&quot;list&quot; resultType=&quot;com.course.server.dto.CourseDto&quot;&gt;</span><br><span class="line">      select c.id, c.name, c.summary, time, price, image, level,</span><br><span class="line">      charge, status, enroll, sort, created_at as createdAt,</span><br><span class="line">      updated_at as updatedAt, teacher_id as teacherId</span><br><span class="line">      from `course` c</span><br><span class="line">      &lt;if test=&quot;pageDto.categoryId != null and pageDto.categoryId != &#x27;&#x27;&quot;&gt;</span><br><span class="line">          , course_category cc</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      where 1 = 1</span><br><span class="line">      &lt;if test=&quot;pageDto.categoryId != null and pageDto.categoryId != &#x27;&#x27;&quot;&gt;</span><br><span class="line">          and c.id = cc.course_id</span><br><span class="line">          and cc.category_id = #&#123;pageDto.categoryId&#125;</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;pageDto.status != null and pageDto.status != &#x27;&#x27;&quot;&gt;</span><br><span class="line">          and c.status = #&#123;pageDto.status&#125;</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      order by c.sort asc</span><br><span class="line">  &lt;/select&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>最后我们修改CourseService，将其全部替换</p></li><li><p>&#96;&#96;&#96;java<br>&#x2F;**</p><ul><li>列表查询：关联课程分类表</li><li>@param pageDto</li></ul><p> *&#x2F;<br>public void list(CoursePageDto pageDto) {<br>    PageHelper.startPage(pageDto.getPage(), pageDto.getSize());<br>    List<CourseDto> courseDtoList &#x3D; myCourseMapper.list(pageDto);<br>    PageInfo<CourseDto> pageInfo &#x3D; new PageInfo&lt;&gt;(courseDtoList);<br>    pageDto.setTotal(pageInfo.getTotal());<br>    pageDto.setList(courseDtoList);<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 13-7 课程详情页面开发</span><br><span class="line"></span><br><span class="line">**新增详情页面并配置路由**</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.课程列表页面开发，新增详情页面并配置路由<br>2.课程报名数显示真实数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 首先再views中增加detail.vue</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">    &lt;main role=&quot;main&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;album py-5 bg-light&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;h3&gt;课程详情&lt;/h3&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &lt;/main&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  </span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;detail&#x27;,</span><br><span class="line">  </span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">  </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">  </span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>然后增加路由</p></li><li><pre><code class="js">, &#123;    path: &quot;/detail&quot;,    component: Detail&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 最后在the-course中增加</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;router-link v-bind:to=&quot;&#x27;/detail?id=&#x27; + course.id&quot; class=&quot;btn btn-outline-secondary&quot;&gt;课程详情&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>还有那个报名人数之间就加了</p></li><li><p>&#96;&#96;&#96;vue<br><span class="badge badge-info"><i class="fa fa-yen" aria-hidden="true"></i>&amp;nbsp;</span>&amp;nbsp;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**增加后端课程详情接口**</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.课程列表页面开发，增加后端课程详情接口,只能查询已发布的课程，包括内容、讲师、大章、小节信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 首先修改CourseDto增加字段</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  private List&lt;ChapterDto&gt; chapters;</span><br><span class="line">  </span><br><span class="line">  private List&lt;SectionDto&gt; sections;</span><br><span class="line">  </span><br><span class="line">  private String content;</span><br><span class="line">  </span><br><span class="line">  private TeacherDto teacher;</span><br></pre></td></tr></table></figure><ul><li><p>然后增加CourseController</p></li><li><pre><code class="java">@GetMapping(&quot;/find/&#123;id&#125;&quot;)public ResponseDto findCourse(@PathVariable String id) &#123;    LOG.info(&quot;查找课程开始：&#123;&#125;&quot;, id);    ResponseDto responseDto = new ResponseDto();    CourseDto courseDto = courseService.findCourse(id);    responseDto.setContent(courseDto);    LOG.info(&quot;查找课程结束：&#123;&#125;&quot;, responseDto);    return responseDto;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 接下来修改CourseService</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  @Resource</span><br><span class="line">  private TeacherService teacherService;</span><br><span class="line">  </span><br><span class="line">  @Resource</span><br><span class="line">  private ChapterService chapterService;</span><br><span class="line">  </span><br><span class="line">  @Resource</span><br><span class="line">  private SectionService sectionService;</span><br><span class="line">   /**</span><br><span class="line">       * 查找某一课程，供web模块用，只能查已发布的</span><br><span class="line">       * @param id</span><br><span class="line">       * @return</span><br><span class="line">       */</span><br><span class="line">      public CourseDto findCourse(String id) &#123;</span><br><span class="line">          Course course = courseMapper.selectByPrimaryKey(id);</span><br><span class="line">          if (course == null || !CourseStatusEnum.PUBLISH.getCode().equals(course.getStatus())) &#123;</span><br><span class="line">              return null;</span><br><span class="line">          &#125;</span><br><span class="line">          CourseDto courseDto = CopyUtil.copy(course, CourseDto.class);</span><br><span class="line">  </span><br><span class="line">          // 查询内容</span><br><span class="line">          CourseContent content = courseContentMapper.selectByPrimaryKey(id);</span><br><span class="line">          if (content != null) &#123;</span><br><span class="line">              courseDto.setContent(content.getContent());</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          // 查找讲师信息</span><br><span class="line">          TeacherDto teacherDto = teacherService.findById(courseDto.getTeacherId());</span><br><span class="line">          courseDto.setTeacher(teacherDto);</span><br><span class="line">  </span><br><span class="line">          // 查找章信息</span><br><span class="line">          List&lt;ChapterDto&gt; chapterDtoList = chapterService.listByCourse(id);</span><br><span class="line">          courseDto.setChapters(chapterDtoList);</span><br><span class="line">  </span><br><span class="line">          // 查找节信息</span><br><span class="line">          List&lt;SectionDto&gt; sectionDtoList = sectionService.listByCourse(id);</span><br><span class="line">          courseDto.setSections(sectionDtoList);</span><br><span class="line">  </span><br><span class="line">          return courseDto;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>接下来针对findCourse中的三个查找信息，修改teacherService，chapterService，sectionService</p></li><li><p>&#96;&#96;&#96;java<br>&#x2F;**</p><ul><li>查找</li><li>@param id</li></ul><p> <em>&#x2F;<br>public TeacherDto findById(String id) {<br>    Teacher teacher &#x3D; teacherMapper.selectByPrimaryKey(id);<br>    return CopyUtil.copy(teacher, TeacherDto.class);<br>}<br>  &#x2F;</em>*<br>     * 查询某一课程下的所有章<br>     <em>&#x2F;<br>    public List<ChapterDto> listByCourse(String courseId) {<br>        ChapterExample example &#x3D; new ChapterExample();<br>        example.createCriteria().andCourseIdEqualTo(courseId);<br>        List<Chapter> chapterList &#x3D; chapterMapper.selectByExample(example);<br>        List<ChapterDto> chapterDtoList &#x3D; CopyUtil.copyList(chapterList, ChapterDto.class);<br>        return chapterDtoList;<br>    }<br>  &#x2F;</em>*<br>     * 查询某一课程下的所有节<br>     *&#x2F;<br>    public List<SectionDto> listByCourse(String courseId) {<br>        SectionExample example &#x3D; new SectionExample();<br>        example.createCriteria().andCourseIdEqualTo(courseId);<br>        List<Section> sectionList &#x3D; sectionMapper.selectByExample(example);<br>        List<SectionDto> sectionDtoList &#x3D; CopyUtil.copyList(sectionList, SectionDto.class);<br>        return sectionDtoList;<br>    }</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**前端界面显示课程信息**</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.课程列表页面开发，增加课程信息显示，可以使用@media(max-width:700px)来精细控制不同分辨率的显示样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 如果地址是xxx？id=a。那在vue代码里要获取id的值的话，可以使用this.$router.query.id</span><br><span class="line"></span><br><span class="line">- 修改detail.vue</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">    &lt;main role=&quot;main&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;album py-5 bg-light&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;row course-head&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;col-sm-6&quot; id=&quot;cover-video-div&quot;&gt;</span><br><span class="line">              &lt;img class=&quot;img-fluid&quot; v-bind:src=&quot;course.image&quot;&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;col-sm-6&quot;&gt;</span><br><span class="line">              &lt;h1&gt;&#123;&#123;course.name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">              &lt;p class=&quot;course-head-item&quot;&gt;</span><br><span class="line">                &lt;span&gt;&lt;i class=&quot;fa fa-clock-o&quot;&gt;&lt;/i&gt; &#123;&#123;(course.time) | format..Second&#125;&#125;&lt;/span&gt;</span><br><span class="line">                &lt;span&gt;&#123;&#123;COURSE_LEVEL | option..KV(course.level)&#125;&#125;&lt;/span&gt;</span><br><span class="line">                &lt;span&gt;&lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt; &#123;&#123;course.enroll&#125;&#125;&lt;/span&gt;</span><br><span class="line">              &lt;/p&gt;</span><br><span class="line">              &lt;p class=&quot;course-head-desc&quot;&gt;&#123;&#123;course.summary&#125;&#125;&lt;/p&gt;</span><br><span class="line">              &lt;p class=&quot;course-head-price&quot;&gt;</span><br><span class="line">                &lt;span class=&quot;price-now text-danger&quot;&gt;&lt;i class=&quot;fa fa-yen&quot;&gt;&lt;/i&gt;&amp;nbsp;&#123;&#123;course.price&#125;&#125;&amp;nbsp;&amp;nbsp;&lt;/span&gt;</span><br><span class="line">              &lt;/p&gt;</span><br><span class="line">              &lt;p class=&quot;course-head-button-links&quot;&gt;</span><br><span class="line">                &lt;a  class=&quot;btn btn-lg btn-primary btn-shadow&quot; href=&quot;javascript:;&quot;&gt;立即报名&lt;/a&gt;</span><br><span class="line">              &lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &lt;/main&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  </span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;detail&#x27;,</span><br><span class="line">  </span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        id: &quot;&quot;,</span><br><span class="line">        course: &#123;&#125;,</span><br><span class="line">        teacher: &#123;&#125;,</span><br><span class="line">        chapters: [],</span><br><span class="line">        sections: [],</span><br><span class="line">        COURSE_LEVEL: COURSE_LEVEL,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      let _this = this;</span><br><span class="line">      _this.id = _this.$route.query.id;</span><br><span class="line">      _this.findCourse();</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      findCourse() &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        _this.$ajax.get(process.env.VUE_APP_SERVER + &#x27;/business/web/course/find/&#x27; + _this.id).then((response) =&gt; &#123;</span><br><span class="line">          let resp = response.data;</span><br><span class="line">          _this.course = resp.content;</span><br><span class="line">          _this.teacher = _this.course.teacher || &#123;&#125;;</span><br><span class="line">          _this.chapters = _this.course.chapters || [];</span><br><span class="line">          _this.sections = _this.course.sections || [];</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">  /* 课程信息 */</span><br><span class="line">  .course-head &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  .course-head h1 &#123;</span><br><span class="line">    font-size: 2rem;</span><br><span class="line">    margin-bottom: 1.5rem;</span><br><span class="line">  &#125;</span><br><span class="line">  .course-head-item span &#123;</span><br><span class="line">    margin-right: 1rem;</span><br><span class="line">  &#125;</span><br><span class="line">  .course-head-desc &#123;</span><br><span class="line">    font-size: 1rem;</span><br><span class="line">    color: #555</span><br><span class="line">  &#125;</span><br><span class="line">  .course-head a &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  .course-head-price &#123;</span><br><span class="line">    font-size: 2rem;</span><br><span class="line">  &#125;</span><br><span class="line">  @media (max-width: 700px) &#123;</span><br><span class="line">    .course-head h1 &#123;</span><br><span class="line">      font-size: 1.5rem;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.课程列表页面开发，增加课程内容显示</span><br></pre></td></tr></table></figure><ul><li><p>在detail.vue中添加</p></li><li><p>&#96;&#96;&#96;vue</p><div class="row">  <!-- 课程内容 & 大章小节 -->  <div class="col-md-9">    <!-- Nav tabs -->    <ul class="nav nav-tabs">      <li class="nav-item">        <a class="nav-link active" href="#info" data-toggle="tab">课程介绍</a>      </li>      <li class="nav-item">        <a class="nav-link" href="#chapter" data-toggle="tab">章节目录</a>      </li>    </ul><pre><code>&lt;br&gt;&lt;!-- Tab panes --&gt;&lt;div class=&quot;tab-content&quot;&gt;  &lt;div class=&quot;tab-pane active&quot; id=&quot;info&quot; v-html=&quot;course.content&quot;&gt;  &lt;/div&gt;  &lt;div class=&quot;tab-pane&quot; id=&quot;chapter&quot;&gt;  &lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;</code></pre>  <!-- 讲师信息 -->  <div class="col-md-3">  </div></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>3.课程列表页面开发，增加讲师信息显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 同样在detail.vue的讲师部分增加代码</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;div class=&quot;col-md-3&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;card&quot; style=&quot;width: 18rem;&quot;&gt;</span><br><span class="line">      &lt;img v-bind:src=&quot;teacher.image&quot; class=&quot;card-img-top&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">        &lt;h5 class=&quot;card-title&quot;&gt;&#123;&#123;teacher.name&#125;&#125;&lt;/h5&gt;</span><br><span class="line">        &lt;p class=&quot;card-text&quot;&gt;&#123;&#123;teacher.motto&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p class=&quot;card-text&quot;&gt;&#123;&#123;teacher.intro&#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="13-8-章节显示与视频播放"><a href="#13-8-章节显示与视频播放" class="headerlink" title="13-8 章节显示与视频播放"></a>13-8 章节显示与视频播放</h2><p><strong>大章和小节的分组显示</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.课程详情页面开发，增加大章小节显示</span><br><span class="line">使用d-none d-sm-inline组合：超小屏时隐藏，其它显示</span><br><span class="line">v-for的第二变量是索引号</span><br></pre></td></tr></table></figure><ul><li><p>第一个变量是遍历的每一个实体，第二变量是数组索引，从0开始</p></li><li><p>d-none就是display:none，隐藏元素</p></li><li><p>修改detail.vue</p></li><li><p>&#96;&#96;&#96;vue<br>&#x2F;&#x2F;给 <!-- Tab panes -->中增加小节</p><div class="tab-pane" id="chapter">  <div v-for="chapter in chapters" class="chapter">    <div  class="chapter-chapter">      <span class="folded-button"></span>    </div>    <div >      <table class="table table-striped">        <tr v-for="(s, j) in chapter.sections" class="chapter-section-tr">          <td class="col-sm-8 col-xs-12">            <div  class="section-title">              <i class="fa fa-video-camera d-none d-sm-inline"></i>&nbsp;&nbsp;              <span class="d-none d-sm-inline">第NaN节&nbsp;&nbsp;</span>                            <span v-show="s.charge !== SECTION_CHARGE.CHARGE.key" class="badge badge-primary hidden-xs">免费</span>            </div>          </td>          <td class="col-sm-1 text-right">            <span class="badge badge-primary">两个大括号包住s.time | format..Second</span>          </td>        </tr>      </table>    </div>  </div></div>//在data中增加上面使用的字段SECTION_CHARGE: SECTION_CHARGE//在findCourse中加循环// 将所有的节放入对应的章中        for (let i = 0; i < _this.chapters.length; i++) {          let c = _this.chapters[i];          c.sections = [];          for (let j = 0; j < _this.sections.length; j++) {            let s = _this.sections[j];            if (c.id === s.chapterId) {              c.sections.push(s);            }          }        }//增加css样式/* 章节列表 */.chapter {  padding-bottom: 1.25rem;}.chapter-chapter {  font-size: 1.25rem;  padding: 1.25rem;  background-color: #23527c;  color: white;  cursor: pointer;}.chapter-section-tr {  font-size: 1rem;}.chapter-section-tr td{  padding: 1rem 1.25rem;  vertical-align: middle;}/*鼠标手势*/.chapter-section-tr td .section-title{  color: #555;}.chapter-section-tr td .section-title:hover{  color: #23527c;  font-weight: bolder;  cursor: pointer;}/*行头小图标*/.chapter-section-tr td .section-title i{  color: #2a6496;}@media (max-width: 700px) {  .chapter-chapter {    font-size: 1.2rem;  }  .chapter-section-tr {    font-size: 0.9rem;  }}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>2.课程详情页面开发，增加大章小节收缩和展开<br>注意：在v-for里写v-show.只修改属性不起作用，需要$set</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 从后端加载出来的大章数据，是没有folded属性的，相当于chapter.folded=false</span><br><span class="line"></span><br><span class="line">- 注意：v-for里面，如果用到了v-show，且v-show里面的控制属性值是随着界面操作而变化的，此时只修改属性值是不生效的，vue监听不到数组里的某个元素的值的变化。需要用到$set</span><br><span class="line"></span><br><span class="line">- 修改detail.vue</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;div v-for=&quot;(chapter, i) in chapters&quot; class=&quot;chapter&quot;&gt;</span><br><span class="line">    &lt;div  v-on:click=&quot;doFolded(chapter, i)&quot; class=&quot;chapter-chapter&quot;&gt;</span><br><span class="line">      &lt;span &gt;&#123;&#123;chapter.name&#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;span class=&quot;pull-right&quot;&gt;</span><br><span class="line">        &lt;i v-show=&quot;chapter.folded&quot; class=&quot;fa fa-plus-square&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;i v-show=&quot;!chapter.folded&quot; class=&quot;fa fa-minus-square&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div v-show=&quot;!chapter.folded&quot;&gt;</span><br><span class="line">     /**</span><br><span class="line">       * 展开/收缩一个章节</span><br><span class="line">       * @param chapter</span><br><span class="line">       */</span><br><span class="line">      doFolded (chapter, i) &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        chapter.folded = !chapter.folded;</span><br><span class="line">        // 在v-for里写v-show，只修改属性不起作用，需要$set</span><br><span class="line">        _this.$set(_this.chapters, i, chapter);</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.课程详情页面开发，增加视频播放功能</span><br></pre></td></tr></table></figure><ul><li><p>首先将admin里面player.vue组件复制过来，修改接口</p></li><li><pre><code class="vue">&lt;template&gt;  &lt;div v-bind:id=&quot;playerId&quot;&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;  export  default &#123;    name:&#39;player&#39;,    props:&#123;      playerId:&#123;        default:&quot;player-div&quot;      &#125;,    &#125;,    data: function ()&#123;      return&#123;        aliPlayer:&#123;&#125;,//播放器实例      &#125;    &#125;,    methods:&#123;      playUrl(url)&#123;        let _this=this;        console.log(&quot;开始播放:&quot;,url);        //如果已经有播放器了，则将播放器的div删除        if (_this.aliPlayer)&#123;          _this.aliPlayer=null;          $(&quot;#&quot;+_this.playerId+&#39;-player&#39;).remove();        &#125;        //初始播放器        $(&quot;#&quot;+_this.playerId).append(&quot;&lt;div class=\&quot;prism-player\&quot; id=\&quot;&quot;+_this.playerId+&quot;-player\&quot;&gt;&lt;/div&gt;&quot;);        _this.aliPlayer = new Aliplayer(&#123;          id: _this.playerId+&#39;-player&#39;,          width: &#39;100%&#39;,          autoplay:false,          source:url,          cover:&#39;https://s2.loli.net/2022/03/01/6wagXDIZQGcebUt.png&#39;,        &#125;,function(player)&#123;          console.log(&#39;播放器创建好了&#39;)        &#125;);      &#125;,      playVod (vod) &#123;        let _this = this;        Loading.show();          //下面admin改为了web        _this.$ajax.get(process.env.VUE_APP_SERVER + &#39;/file/web/get-auth/&#39; + vod).then((response)=&gt;&#123;          Loading.hide();          let resp = response.data;          if (resp.success) &#123;            //如果已经有播放器了，则将播放器div删除            if (_this.aliPlayer) &#123;              _this.aliPlayer = null;              $(&quot;#&quot; + _this.playerId + &#39;-player&#39;).remove();            &#125;            // 初始化播放器            $(&quot;#&quot; + _this.playerId).append(&quot;&lt;div class=\&quot;prism-player\&quot; id=\&quot;&quot; + _this.playerId + &quot;-player\&quot;&gt;&lt;/div&gt;&quot;);            _this.aliPlayer = new Aliplayer(&#123;              id: _this.playerId + &#39;-player&#39;,              width: &#39;100%&#39;,              autoplay: false,              vid: vod,              playauth: resp.content,              cover: &#39;http://liveroom-img.oss-cn-qingdao.aliyuncs.com/logo.png&#39;,              encryptType:1, //当播放私有加密流时需要设置。            &#125;,function(player)&#123;              console.log(&#39;播放器创建好了。&#39;)            &#125;);          &#125; else &#123;            Toast.warning(&#39;播放错误。&#39;)          &#125;        &#125;)      &#125;    &#125;  &#125;&lt;/script&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 同样modal-play.vue不做任何修改</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;player-modal&quot; class=&quot;modal&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;modal-dialog&quot; role=&quot;document&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;modal-content&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;modal-body&quot;&gt;</span><br><span class="line">            &lt;player v-bind:player-id=&quot;&#x27;modal-player-div&#x27;&quot;</span><br><span class="line">                    ref=&quot;player&quot;&gt;&lt;/player&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    import Player from &quot;./player&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">      name: &#x27;modal-player&#x27;,</span><br><span class="line">      components: &#123;Player&#125;,</span><br><span class="line">      data: function () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          aliPlayer: &#123;&#125;, // 播放器实例</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        playUrl(url) &#123;</span><br><span class="line">          let _this = this;</span><br><span class="line">          _this.$refs.player.playUrl(url);</span><br><span class="line">        &#125;,</span><br><span class="line">  </span><br><span class="line">        playVod(vod) &#123;</span><br><span class="line">          let _this = this;</span><br><span class="line">          _this.$refs.player.playVod(vod);</span><br><span class="line">          $(&quot;#player-modal&quot;).modal(&quot;show&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;style scoped&gt;</span><br><span class="line">    #player-modal .modal-body &#123;</span><br><span class="line">      padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后再index.html中引入css和js</p></li><li><pre><code class="html">&lt;!--  阿里云播放器--&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://g.alicdn.com/de/prismplayer/2.9.19/skins/default/aliplayer-min.css&quot; /&gt;&lt;!--  阿里云播放器--&gt;&lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://g.alicdn.com/de/prismplayer/2.9.19/aliplayer-min.js&quot;&gt;&lt;/script&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 接下来把file文件包下面的VodController复制一份，保存到同文件包下新建的web文件包</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.course.file.controller.web;</span><br><span class="line">  </span><br><span class="line">  import com.alibaba.fastjson.JSON;</span><br><span class="line">  import com.alibaba.fastjson.JSONObject;</span><br><span class="line">  import com.aliyun.oss.OSSClient;</span><br><span class="line">  import com.aliyuncs.DefaultAcsClient;</span><br><span class="line">  import com.aliyuncs.exceptions.ClientException;</span><br><span class="line">  import com.aliyuncs.vod.model.v20170321.CreateUploadVideoResponse;</span><br><span class="line">  import com.aliyuncs.vod.model.v20170321.GetMezzanineInfoResponse;</span><br><span class="line">  import com.aliyuncs.vod.model.v20170321.GetVideoPlayAuthResponse;</span><br><span class="line">  import com.course.server.dto.FileDto;</span><br><span class="line">  import com.course.server.dto.ResponseDto;</span><br><span class="line">  import com.course.server.enums.FileUseEnum;</span><br><span class="line">  import com.course.server.service.FileService;</span><br><span class="line">  import com.course.server.util.Base64ToMultipartFile;</span><br><span class="line">  import com.course.server.util.VodUtil;</span><br><span class="line">  import org.apache.commons.codec.binary.Base64;</span><br><span class="line">  import org.slf4j.Logger;</span><br><span class="line">  import org.slf4j.LoggerFactory;</span><br><span class="line">  import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">  import org.springframework.web.bind.annotation.*;</span><br><span class="line">  import org.springframework.web.multipart.MultipartFile;</span><br><span class="line">  </span><br><span class="line">  import javax.annotation.Resource;</span><br><span class="line">  import java.io.File;</span><br><span class="line">  import java.io.IOException;</span><br><span class="line">  @RestController(&quot;webVodController&quot;)</span><br><span class="line">  @RequestMapping(&quot;/web&quot;)</span><br><span class="line">  </span><br><span class="line">  public class VodController &#123;</span><br><span class="line">  </span><br><span class="line">      private static final Logger LOG = LoggerFactory.getLogger(VodController.class);</span><br><span class="line">  </span><br><span class="line">      public static final String BUSINESS_NAME = &quot;文件上传&quot;;</span><br><span class="line">  </span><br><span class="line">      @Value(&quot;$&#123;vod.accessKeyId&#125;&quot;)</span><br><span class="line">      private String accessKeyId;</span><br><span class="line">  </span><br><span class="line">      @Value(&quot;$&#123;vod.accessKeySecret&#125;&quot;)</span><br><span class="line">      private String accessKeySecret;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">      @Resource</span><br><span class="line">      private FileService fileService;</span><br><span class="line">  </span><br><span class="line">     @PostMapping(&quot;/vod&quot;)</span><br><span class="line">      public ResponseDto fileUpload(@RequestBody FileDto fileDto) throws IOException &#123;</span><br><span class="line">         LOG.info(&quot;上传文件开始&quot;);</span><br><span class="line">         String use = fileDto.getUse();</span><br><span class="line">         String key = fileDto.getKey();</span><br><span class="line">         String suffix = fileDto.getSuffix();</span><br><span class="line">         Integer shardIndex = fileDto.getShardIndex();</span><br><span class="line">         Integer shardSize = fileDto.getShardSize();</span><br><span class="line">         String shardBase64 = fileDto.getShard();</span><br><span class="line">         MultipartFile shard = Base64ToMultipartFile.base64ToMultipart(shardBase64);</span><br><span class="line">  </span><br><span class="line">         // 保存文件到本地</span><br><span class="line">         FileUseEnum useEnum = FileUseEnum.getByCode(use);</span><br><span class="line">  </span><br><span class="line">         //如果文件夹不存在则创建</span><br><span class="line">         String dir = useEnum.name().toLowerCase();</span><br><span class="line">  </span><br><span class="line">         String path = new StringBuffer(dir)</span><br><span class="line">                 .append(File.separator)</span><br><span class="line">                 .append(key)</span><br><span class="line">                 .append(&quot;.&quot;)</span><br><span class="line">                 .append(suffix)</span><br><span class="line">                 .toString();</span><br><span class="line">  </span><br><span class="line">         String vod =&quot;&quot;;</span><br><span class="line">         String fileUrl = &quot;&quot;;</span><br><span class="line">         try &#123;</span><br><span class="line">             // 初始化VOD客户端并获取上传地址和凭证</span><br><span class="line">             DefaultAcsClient vodClient = VodUtil.initVodClient(accessKeyId, accessKeySecret);</span><br><span class="line">             CreateUploadVideoResponse createUploadVideoResponse = VodUtil.createUploadVideo(vodClient,path);</span><br><span class="line">             // 执行成功会返回VideoId、UploadAddress和UploadAuth</span><br><span class="line">             vod = createUploadVideoResponse.getVideoId();</span><br><span class="line">  </span><br><span class="line">             JSONObject uploadAuth = JSONObject.parseObject(</span><br><span class="line">                     Base64.decodeBase64(createUploadVideoResponse.getUploadAuth()),JSONObject.class);</span><br><span class="line">             JSONObject uploadAddress = JSONObject.parseObject(</span><br><span class="line">                     Base64.decodeBase64(createUploadVideoResponse.getUploadAddress()),JSONObject.class);</span><br><span class="line">  </span><br><span class="line">             // 使用UploadAuth和UploadAddress初始化OSS客户端</span><br><span class="line">             OSSClient ossClient = VodUtil.initOssClient(uploadAuth, uploadAddress);</span><br><span class="line">             // 上传文件，注意是同步上传会阻塞等待，耗时与文件大小和网络上行带宽有关</span><br><span class="line">             VodUtil.uploadLocalFile(ossClient, uploadAddress, shard.getInputStream());</span><br><span class="line">             System.out.println(&quot;视频上传成功, VideoId : &quot; + vod);</span><br><span class="line">             GetMezzanineInfoResponse response =  VodUtil.getMezzanineInfo(vodClient,vod);</span><br><span class="line">             System.out.println(&quot;获取视频信息,response : &quot;+ JSON.toJSONString(response));</span><br><span class="line">             fileUrl = response.getMezzanine().getFileURL();</span><br><span class="line">             ossClient.shutdown();</span><br><span class="line">         &#125; catch (Exception e) &#123;</span><br><span class="line">             System.out.println(&quot;文件上传失败, ErrorMessage : &quot; + e.getLocalizedMessage());</span><br><span class="line">         &#125;</span><br><span class="line">  </span><br><span class="line">         LOG.info(&quot;保存文件记录开始&quot;);</span><br><span class="line">         fileDto.setPath(path);</span><br><span class="line">         fileDto.setVod(vod);</span><br><span class="line">         fileService.save(fileDto);</span><br><span class="line">  </span><br><span class="line">         ResponseDto responseDto = new ResponseDto();</span><br><span class="line">         fileDto.setPath(fileUrl);//返回给前端的需要一个可播放的地址，为了自动获取时长</span><br><span class="line">         responseDto.setContent(fileDto);</span><br><span class="line">  </span><br><span class="line">         return responseDto;</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">      @RequestMapping(value = &quot;/get-auth/&#123;vod&#125;&quot;, method = RequestMethod.GET)</span><br><span class="line">      public ResponseDto getAuth(@PathVariable String vod) throws ClientException, ClientException, ClientException &#123;</span><br><span class="line">          LOG.info(&quot;获取播放授权开始: &quot;);</span><br><span class="line">          ResponseDto responseDto = new ResponseDto();</span><br><span class="line">          DefaultAcsClient client = VodUtil.initVodClient(accessKeyId, accessKeySecret);</span><br><span class="line">          GetVideoPlayAuthResponse response = new GetVideoPlayAuthResponse();</span><br><span class="line">          try &#123;</span><br><span class="line">              response = VodUtil.getVideoPlayAuth(client, vod);</span><br><span class="line">              LOG.info(&quot;授权码 = &#123;&#125;&quot;, response.getPlayAuth());</span><br><span class="line">              responseDto.setContent(response.getPlayAuth());</span><br><span class="line">              //VideoMeta信息</span><br><span class="line">              LOG.info(&quot;VideoMeta = &#123;&#125;&quot;, JSON.toJSONString(response.getVideoMeta()));</span><br><span class="line">          &#125; catch (Exception e) &#123;</span><br><span class="line">              System.out.print(&quot;ErrorMessage = &quot; + e.getLocalizedMessage());</span><br><span class="line">          &#125;</span><br><span class="line">          LOG.info(&quot;获取播放授权结束&quot;);</span><br><span class="line">          return responseDto;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>最后修改detail.vue</p></li><li><p>&#96;&#96;&#96;vue<br>&#x2F;&#x2F;再这添加on：click事件</p>  <div v-on:click="play(s)" class="section-title">//再html的最后添加    <modal-player ref="modalPlayer"></modal-player>    </main>//导入    import ModalPlayer from "../components/modal-player";    components: {ModalPlayer},//写方法 /**     * 播放视频     * @param section     */    play(section) {      let _this = this;      _this.$refs.modalPlayer.playVod(section.vod);    },<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>4.课程详情页面开发，对每个大章里面的小节进行排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 我们现在web的Tool.js添加方法</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  /**</span><br><span class="line">   * 对象数组按key对应的值排序</span><br><span class="line">   * @param array</span><br><span class="line">   * @param key</span><br><span class="line">   * @returns &#123;*&#125;</span><br><span class="line">   */</span><br><span class="line">  sortAsc: function (array, key) &#123;</span><br><span class="line">      return array.sort(function (obj1, obj2) &#123;</span><br><span class="line">          let val1 = obj1[key];</span><br><span class="line">          let val2 = obj2[key];</span><br><span class="line">          if (val1 &lt; val2) &#123;</span><br><span class="line">              return -1;</span><br><span class="line">          &#125; else if (val1 &gt; val2) &#123;</span><br><span class="line">              return 1;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">              return 0;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p>然后再detail.vue中使用</p></li><li><p>&#96;&#96;&#96;<br>在大章循环最后使用<br>findCourse() {<br>&#x2F;&#x2F; 将所有的节放入对应的章中<br>for (let i &#x3D; 0; i &lt; _this.chapters.length; i++) {<br>  Tool.sortAsc(c.sections,”sort”);<br>}<br> }</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>5.课程详情页面开发，只有免费的视频才可直接播放，收费视频需要登录后才能播放   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 首先把toast.js复制过来</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  Toast = &#123;</span><br><span class="line">      success:function (message)&#123;</span><br><span class="line">          Swal.fire(&#123;</span><br><span class="line">              position: &#x27;top-end&#x27;,</span><br><span class="line">              icon: &#x27;success&#x27;,</span><br><span class="line">              title:message,</span><br><span class="line">              showConfirmButton: false,</span><br><span class="line">              timer: 3000</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      error:function (message)&#123;</span><br><span class="line">          Swal.fire(&#123;</span><br><span class="line">              position: &#x27;top-end&#x27;,</span><br><span class="line">              icon: &#x27;error&#x27;,</span><br><span class="line">              title: message,</span><br><span class="line">              showConfirmButton: false,</span><br><span class="line">              timer: 3000</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      warning:function (message)&#123;</span><br><span class="line">          Swal.fire(&#123;</span><br><span class="line">              position: &#x27;top-end&#x27;,</span><br><span class="line">              icon: &#x27;warning&#x27;,</span><br><span class="line">              title: message,</span><br><span class="line">              showConfirmButton: false,</span><br><span class="line">              timer: 3000</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><ul><li><p>然后index.html引入</p></li><li><p>&#96;&#96;&#96;</p><!--确认框和提示框--><script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script><script src="<%= BASE_URL %>static/js/toast.js"></script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 最后在detail.vue使用</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  /**</span><br><span class="line">   * 播放视频</span><br><span class="line">   * @param section</span><br><span class="line">   */</span><br><span class="line">  play(section) &#123;</span><br><span class="line">    let _this = this;</span><br><span class="line">    if (section.charge === _this.SECTION_CHARGE.CHARGE.key ) &#123;</span><br><span class="line">      Toast.warning(&quot;请先登录&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      _this.$refs.modalPlayer.playVod(section.vod);</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li></ul><h2 id="13-9-增加会员注册功能"><a href="#13-9-增加会员注册功能" class="headerlink" title="13-9 增加会员注册功能"></a>13-9 增加会员注册功能</h2><p><strong>控台增加会员管理功能</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.增加会员管理页面，新增member表，在之前代码生成器的步骤后面，加上以下步骤：</span><br><span class="line">1）在resource.json中增加新资源</span><br><span class="line">2）在【资源管理】页面，配置最新的resource.json</span><br><span class="line">3）在【角色管理】页面，为相应的角色配置新的资源</span><br><span class="line">4）重新登录控台</span><br><span class="line">自从控台加入权限管理功能后，新作的页面，需要增加这四部，配置相应的权限，才能使用新表的管理功能</span><br></pre></td></tr></table></figure><ul><li><p>首先写sql，然后代码生成器一顿操作，记得后端和前端要改成business</p></li><li><pre><code class="sql"># 会员drop table if exists `member`;create table `member`(                       `id` char(8) not null default &#39;&#39; comment &#39;id&#39;,                       `mobile` varchar(11) not null comment &#39;手机号&#39;,                       `password` char(32) not null comment &#39;密码&#39;,                       `name` varchar(50)  comment &#39;昵称&#39;,                       `photo` varchar(200)  comment &#39;头像url&#39;,                       `register_time` datetime(3)  comment &#39;注册时间&#39;,                       primary key (`id`),                       unique key `mobile_unique`(`mobile`))engine =innodb default charset=utf8mb4 comment=&#39;会员&#39;;insert into `member` (id,mobile,password,name,photo,register_time) values (&#39;00000000&#39;,&#39;12345678901&#39;,&#39;10000000&#39;,&#39;测试&#39;,null,now());<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后给admin的左侧菜单增加</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;li v-show=&quot;hasResource(&#x27;0204&#x27;)&quot; class=&quot;&quot; id=&quot;business-member-sidebar&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/business/member&quot;&gt;</span><br><span class="line">      &lt;i class=&quot;menu-icon fa fa-caret-right&quot;&gt;&lt;/i&gt;</span><br><span class="line">      会员管理</span><br><span class="line">    &lt;/router-link&gt;</span><br><span class="line">    &lt;b class=&quot;arrow&quot;&gt;&lt;/b&gt;</span><br><span class="line">  &lt;/li&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>接着增加一个路由</p></li><li><p>&#96;&#96;&#96;js<br>,{<br>path: “business&#x2F;member”,<br>name:”business&#x2F;member”,<br>component: Member,<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 到目前为止，跟我们前面介绍的制作表单功能的流程一样。但是由于加入权限功能，所以需要配置权限后才能看到页面。</span><br><span class="line"></span><br><span class="line">- 这给在resource.json中增加新资源，剩下的得再控台操作</span><br><span class="line"></span><br><span class="line">- ```json</span><br><span class="line">  ,&#123;</span><br><span class="line">    &quot;id&quot;:&quot;0204&quot;,&quot;name&quot;:&quot;会员管理&quot;,&quot;page&quot;:&quot;business/member&quot;,</span><br><span class="line">    &quot;children&quot;:[</span><br><span class="line">      &#123;&quot;id&quot;:&quot;020401&quot;,&quot;name&quot;:&quot;增删改查&quot;,&quot;request&quot;:[&quot;/business/admin/member&quot;]&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.增加会员管理页面，控台的会员管理，不能新增，修改·删除·可以查看会员信息·重置密码·报表统计等操作</span><br></pre></td></tr></table></figure><ul><li>将MemberController得save和delete方法删除</li><li>然后对于member.vue该删删</li></ul><p><strong>网站增加会员注册功能</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.会员登录注册功能开发，增加登录注册模态框，增加注册功能</span><br></pre></td></tr></table></figure><ul><li><p>登录表单、注册表单、忘记密码表单放在同一模态框中</p></li><li><p>首先我们进行web得MemberController增加，密码两层加密，传输加密+保存加密</p></li><li><pre><code class="java">package com.course.business.controller.web;import com.course.server.dto.MemberDto;import com.course.server.dto.ResponseDto;import com.course.server.service.MemberService;import com.course.server.util.ValidatorUtil;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.util.DigestUtils;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import javax.annotation.Resource;@RestController(&quot;webMemberController&quot;)@RequestMapping(&quot;/web/member&quot;)public class MemberController &#123;    private static final Logger LOG = LoggerFactory.getLogger(MemberController.class);    public static final String BUSINESS_NAME = &quot;会员&quot;;    @Resource    private MemberService memberService;    /**     * 保存，id有值时更新，无值时新增     */    @PostMapping(&quot;/register&quot;)    public ResponseDto register(@RequestBody MemberDto memberDto) &#123;        // 保存校验        ValidatorUtil.require(memberDto.getMobile(), &quot;手机号&quot;);        ValidatorUtil.length(memberDto.getMobile(), &quot;手机号&quot;, 11, 11);        ValidatorUtil.require(memberDto.getPassword(), &quot;密码&quot;);        ValidatorUtil.length(memberDto.getName(), &quot;昵称&quot;, 1, 50);        ValidatorUtil.length(memberDto.getPhoto(), &quot;头像url&quot;, 1, 200);        // 密码加密        memberDto.setPassword(DigestUtils.md5DigestAsHex(memberDto.getPassword().getBytes()));        ResponseDto responseDto = new ResponseDto();        memberService.save(memberDto);        responseDto.setContent(memberDto);        return responseDto;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后我们修改MemberService.java里面的insert方法</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  /**</span><br><span class="line">   * 插入</span><br><span class="line">   */</span><br><span class="line">  private void insert(Member member)&#123;</span><br><span class="line">              Date now = new Date();</span><br><span class="line">              member.setId(UuidUtil.getShortUuid());</span><br><span class="line">              //下面这句是新增得</span><br><span class="line">              member.setRegisterTime(now);</span><br><span class="line">              memberMapper.insert(member);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>因为前端用到了加密，所以我们把md5.js拷过来</p></li><li><pre><code class="js">var KEY = &quot;!@#QWERT&quot;;/* * Configurable variables. You may need to tweak these to be compatible with * the server-side, but the defaults work in most cases. */var hexcase = 0;  /* hex output format. 0 - lowercase; 1 - uppercase        */var b64pad  = &quot;&quot;; /* base-64 pad character. &quot;=&quot; for strict RFC compliance   */var chrsz   = 8;  /* bits per input character. 8 - ASCII; 16 - Unicode      *//* * These are the functions you&#39;ll usually want to call * They take string arguments and return either hex or base-64 encoded strings */function hex_md5(s)&#123; return binl2hex(core_md5(str2binl(s), s.length * chrsz));&#125;function b64_md5(s)&#123; return binl2b64(core_md5(str2binl(s), s.length * chrsz));&#125;function str_md5(s)&#123; return binl2str(core_md5(str2binl(s), s.length * chrsz));&#125;function hex_hmac_md5(key, data) &#123; return binl2hex(core_hmac_md5(key, data)); &#125;function b64_hmac_md5(key, data) &#123; return binl2b64(core_hmac_md5(key, data)); &#125;function str_hmac_md5(key, data) &#123; return binl2str(core_hmac_md5(key, data)); &#125;/* * Perform a simple self-test to see if the VM is working */function md5_vm_test()&#123;  return hex_md5(&quot;abc&quot;) == &quot;900150983cd24fb0d6963f7d28e17f72&quot;;&#125;/* * Calculate the MD5 of an array of little-endian words, and a bit length */function core_md5(x, len)&#123;  /* append padding */  x[len &gt;&gt; 5] |= 0x80 &lt;&lt; ((len) % 32);  x[(((len + 64) &gt;&gt;&gt; 9) &lt;&lt; 4) + 14] = len;  var a =  1732584193;  var b = -271733879;  var c = -1732584194;  var d =  271733878;  for(var i = 0; i &lt; x.length; i += 16)  &#123;    var olda = a;    var oldb = b;    var oldc = c;    var oldd = d;    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);    a = safe_add(a, olda);    b = safe_add(b, oldb);    c = safe_add(c, oldc);    d = safe_add(d, oldd);  &#125;  return Array(a, b, c, d);&#125;/* * These functions implement the four basic operations the algorithm uses. */function md5_cmn(q, a, b, x, s, t)&#123;  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);&#125;function md5_ff(a, b, c, d, x, s, t)&#123;  return md5_cmn((b &amp; c) | ((~b) &amp; d), a, b, x, s, t);&#125;function md5_gg(a, b, c, d, x, s, t)&#123;  return md5_cmn((b &amp; d) | (c &amp; (~d)), a, b, x, s, t);&#125;function md5_hh(a, b, c, d, x, s, t)&#123;  return md5_cmn(b ^ c ^ d, a, b, x, s, t);&#125;function md5_ii(a, b, c, d, x, s, t)&#123;  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);&#125;/* * Calculate the HMAC-MD5, of a key and some data */function core_hmac_md5(key, data)&#123;  var bkey = str2binl(key);  if(bkey.length &gt; 16) bkey = core_md5(bkey, key.length * chrsz);  var ipad = Array(16), opad = Array(16);  for(var i = 0; i &lt; 16; i++)  &#123;    ipad[i] = bkey[i] ^ 0x36363636;    opad[i] = bkey[i] ^ 0x5C5C5C5C;  &#125;  var hash = core_md5(ipad.concat(str2binl(data)), 512 + data.length * chrsz);  return core_md5(opad.concat(hash), 512 + 128);&#125;/* * Add integers, wrapping at 2^32. This uses 16-bit operations internally * to work around bugs in some JS interpreters. */function safe_add(x, y)&#123;  var lsw = (x &amp; 0xFFFF) + (y &amp; 0xFFFF);  var msw = (x &gt;&gt; 16) + (y &gt;&gt; 16) + (lsw &gt;&gt; 16);  return (msw &lt;&lt; 16) | (lsw &amp; 0xFFFF);&#125;/* * Bitwise rotate a 32-bit number to the left. */function bit_rol(num, cnt)&#123;  return (num &lt;&lt; cnt) | (num &gt;&gt;&gt; (32 - cnt));&#125;/* * Convert a string to an array of little-endian words * If chrsz is ASCII, characters &gt;255 have their hi-byte silently ignored. */function str2binl(str)&#123;  var bin = Array();  var mask = (1 &lt;&lt; chrsz) - 1;  for(var i = 0; i &lt; str.length * chrsz; i += chrsz)    bin[i&gt;&gt;5] |= (str.charCodeAt(i / chrsz) &amp; mask) &lt;&lt; (i%32);  return bin;&#125;/* * Convert an array of little-endian words to a string */function binl2str(bin)&#123;  var str = &quot;&quot;;  var mask = (1 &lt;&lt; chrsz) - 1;  for(var i = 0; i &lt; bin.length * 32; i += chrsz)    str += String.fromCharCode((bin[i&gt;&gt;5] &gt;&gt;&gt; (i % 32)) &amp; mask);  return str;&#125;/* * Convert an array of little-endian words to a hex string. */function binl2hex(binarray)&#123;  var hex_tab = hexcase ? &quot;0123456789ABCDEF&quot; : &quot;0123456789abcdef&quot;;  var str = &quot;&quot;;  for(var i = 0; i &lt; binarray.length * 4; i++)  &#123;    str += hex_tab.charAt((binarray[i&gt;&gt;2] &gt;&gt; ((i%4)*8+4)) &amp; 0xF) +           hex_tab.charAt((binarray[i&gt;&gt;2] &gt;&gt; ((i%4)*8  )) &amp; 0xF);  &#125;  return str;&#125;/* * Convert an array of little-endian words to a base-64 string */function binl2b64(binarray)&#123;  var tab = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;;  var str = &quot;&quot;;  for(var i = 0; i &lt; binarray.length * 4; i += 3)  &#123;    var triplet = (((binarray[i   &gt;&gt; 2] &gt;&gt; 8 * ( i   %4)) &amp; 0xFF) &lt;&lt; 16)                | (((binarray[i+1 &gt;&gt; 2] &gt;&gt; 8 * ((i+1)%4)) &amp; 0xFF) &lt;&lt; 8 )                |  ((binarray[i+2 &gt;&gt; 2] &gt;&gt; 8 * ((i+2)%4)) &amp; 0xFF);    for(var j = 0; j &lt; 4; j++)    &#123;      if(i * 8 + j * 6 &gt; binarray.length * 32) str += b64pad;      else str += tab.charAt((triplet &gt;&gt; 6*(3-j)) &amp; 0x3F);    &#125;  &#125;  return str;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在index.html中引入md5</span><br><span class="line"></span><br><span class="line">- ```html</span><br><span class="line">  &lt;!--  md5工具类--&gt;</span><br><span class="line">  &lt;script src=&quot;&lt;%= BASE_URL %&gt;static/js/md5.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>我们新建一个组件login.vue，用于注册登录</p></li><li><p>&#96;&#96;&#96;vue</p><template>  <div id="login-modal" class="modal fade" tabindex="-1" role="dialog">    <div class="modal-dialog modal-login" role="document">      <div class="modal-content">        <div class="modal-body">          <div class="register-div" >            <h3>注&nbsp;&nbsp;册</h3>            <div class="form-group">              <input id="register-mobile" v-model="memberRegister.mobile"                     class="form-control" placeholder="手机号">            </div>            <div class="form-group">              <div class="input-group">                <input id="register-mobile-code" class="form-control"                       placeholder="手机验证码" v-model="memberRegister.code">                <div class="input-group-append">                  <button class="btn btn-outline-secondary" id="register-send-code-btn"                          v-on:click="sendSmsForRegister()">发送验证码                  </button>                </div>              </div>            </div>            <div class="form-group">              <input id="register-name" v-model="memberRegister.name"                     class="form-control" placeholder="昵称">            </div>            <div class="form-group">              <input id="register-password" v-model="memberRegister.passwordOriginal"                     class="form-control" placeholder="密码" type="password">            </div>            <div class="form-group">              <input id="register-confirm-password" v-model="memberRegister.confirm"                     class="form-control" placeholder="确认密码"                     name="memberRegisterConfirm" type="password">            </div>            <div class="form-group">              <button class="btn btn-primary btn-block submit-button" v-on:click="register()">                注&nbsp;&nbsp;册              </button>            </div>            <div class="form-group to-login-div">              <a class="link"   href="javascript:;"  >我要登录<i class="fas fa-external-link-alt"></i></a>            </div>          </div>        </div>      </div><!-- /.modal-content -->    </div><!-- /.modal-dialog -->  </div><!-- /.modal --></template><script>export default {  name: 'the-login',  data: function () {    return {      memberRegister: {},      remember: true, // 记住密码      imageCodeToken: "",    }  },  mounted() {    let _this = this;  },  methods: {    /**     * 打开登录注册窗口     */    openLoginModal() {      let _this = this;      $("#login-modal").modal("show");    },    register() {      let _this = this;      _this.memberRegister.password = hex_md5(_this.memberRegister.passwordOriginal + KEY);      // 调服务端注册接口      _this.$ajax.post(process.env.VUE_APP_SERVER + '/business/web/member/register', _this.memberRegister).then((response) => {        let resp = response.data;        if (resp.success) {          Toast.success("注册成功");        } else {          Toast.warning(resp.message);        }      })    },  }}</script><style scoped>/* 登录框 */.login-div .input-group-addon {  padding: 0;  border: 0;}#login-modal h3 {  text-align: center;  margin-bottom: 20px;}#login-modal .modal-login {  max-width: 400px;}#login-modal input:not(.remember) {  height: 45px;  font-size: 16px;}#login-modal .submit-button {  height: 50px;  font-size: 20px;}#login-modal .to-login-div {  text-align: center;}</style><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后我们在the-header中使用</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">   &lt;span class=&quot;text-white&quot;&gt;欢迎：&lt;/span&gt;</span><br><span class="line">   //新增一个click时间</span><br><span class="line">    &lt;button v-on:click=&quot;openLoginModal()&quot; class=&quot;btn btn-outline-light my-2 my-sm-0&quot; type=&quot;submit&quot;&gt;登录/注册&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/nav&gt;</span><br><span class="line">    //在这里使用组件</span><br><span class="line">    &lt;the-login ref=&quot;loginComponent&quot;&gt;&lt;/the-login&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">  //导入组件</span><br><span class="line">  import TheLogin from &quot;./login&quot;;</span><br><span class="line">  components: &#123;TheLogin&#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">      /**</span><br><span class="line">      * 打开登录注册窗口</span><br><span class="line">      */</span><br><span class="line">  openLoginModal() &#123;</span><br><span class="line">          let _this = this;</span><br><span class="line">          _this.$refs.loginComponent.openLoginModal();</span><br><span class="line">  &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="13-10-增加登录与退出登录功能"><a href="#13-10-增加登录与退出登录功能" class="headerlink" title="13-10 增加登录与退出登录功能"></a>13-10 增加登录与退出登录功能</h2><p><strong>登录、注册、忘记密码之间的切换</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.会员登录注册功能开发·增加登录框和忘记密码框·并实现登录框、注册框·忘记密码框切换，默认显示登录框</span><br></pre></td></tr></table></figure><ul><li><p>我们修改login.vue</p></li><li><p>&#96;&#96;&#96;vue<br>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;增加登录</p><div class="login-div" v-show="MODAL_STATUS === STATUS_LOGIN">  <h3>登&nbsp;&nbsp;录</h3>  <div class="form-group">    <input v-model="member.mobile" class="form-control" placeholder="手机号">  </div>  <div class="form-group">    <input class="form-control" type="password" placeholder="密码" v-model="member.password">  </div>  <div class="form-group">    <div class="input-group">      <input id="image-code-input" class="form-control" type="text" placeholder="验证码"             v-model="member.imageCode">      <div class="input-group-addon" id="image-code-addon">        <img id="image-code" alt="验证码" v-on:click="loadImageCode()"/>      </div>    </div>  </div>  <div class="form-group">    <button  class="btn btn-primary btn-block submit-button">      登&nbsp;&nbsp;录    </button>  </div>  <div class="form-group">    <div class="checkbox">      <label>        <input type="checkbox" class="remember" v-model="remember"> 记住密码      </label>      <div class="pull-right">        <a class="link"   href="javascript:;"  v-on:click="toForgetDiv()">忘记密码<i class="fas fa-external-link-alt"></i></a>&nbsp;        <a class="link"   href="javascript:;"  v-on:click="toRegisterDiv()">我要注册<i class="fas fa-external-link-alt"></i></a>      </div>    </div>  </div>  <div class="form-group to-register-div">  </div></div>//////////////////////////////////////////////////修改下注册的div和我要登陆那增加事件<div class="register-div" v-show="MODAL_STATUS === STATUS_REGISTER" ><div class="form-group to-login-div">    <a class="link"   href="javascript:;"  v-on:click="toLoginDiv()">我要登录<i class="fas fa-external-link-alt"></i></a></div><p>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;增加忘记密码<br>      <div class="forget-div" v-show="MODAL_STATUS === STATUS_FORGET"><br>        <h3>忘记密码</h3><br>        <div class="form-group"><br>          <input id="forget-mobile" v-model="memberForget.mobile"                 class="form-control" placeholder="手机号"><br>        </div><br>        <div class="form-group"><br>          <div class="input-group"><br>            <input id="forget-mobile-code" class="form-control"                   placeholder="手机验证码" v-model="memberForget.smsCode"><br>            <div class="input-group-append"><br>              <button class="btn btn-outline-secondary" id="forget-send-code-btn"><br>                发送验证码<br>              </button><br>            </div><br>          </div><br>        </div><br>        <div class="form-group"><br>          <input id="forget-password" v-model="memberForget.passwordOriginal"                 class="form-control" placeholder="密码" type="password"><br>        </div><br>        <div class="form-group"><br>          <input id="forget-confirm-password" v-model="memberForget.confirm"                 class="form-control" placeholder="确认密码" type="password"><br>        </div><br>        <div class="form-group"><br>          <button  class="btn btn-primary btn-block submit-button"><br>            重&amp;nbsp;&amp;nbsp;置<br>          </button><br>        </div><br>        <div class="form-group to-login-div"><br>          <a class="link"   href="javascript:;"  v-on:click="toLoginDiv()">我要登录<i class="fas fa-external-link-alt"></i></a><br>        </div><br>      </div><br>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;data中增加<br>data: function () {<br>return {<br>  &#x2F;&#x2F; 模态框内容切换：登录、注册、忘记密码<br>  STATUS_LOGIN: “STATUS_LOGIN”,<br>  STATUS_REGISTER: “STATUS_REGISTER”,<br>  STATUS_FORGET: “STATUS_FORGET”,<br>  MODAL_STATUS: “”,<br><br>  member: {},<br>  memberForget: {},<br>}<br>}<br>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;初始化时增加<br>mounted() {<br>let _this &#x3D; this;<br>_this.toLoginDiv();<br>  },<br> &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;—————登录框、注册框、忘记密码框切换—————–<br>toLoginDiv() {<br>  let _this &#x3D; this;<br>  _this.MODAL_STATUS &#x3D; _this.STATUS_LOGIN<br>},<br>toRegisterDiv() {<br>  let _this &#x3D; this;<br>  _this.MODAL_STATUS &#x3D; _this.STATUS_REGISTER<br>},<br>toForgetDiv() {<br>  let _this &#x3D; this;<br>  _this.MODAL_STATUS &#x3D; _this.STATUS_FORGET<br>},</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**增加登录验证码功能**</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.会员登录注册功能开发·登录框显示验证码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在business/web下拷贝复制过来的KaptchaController</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.course.business.controller.web;</span><br><span class="line">  </span><br><span class="line">  import com.google.code.kaptcha.impl.DefaultKaptcha;</span><br><span class="line">  import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">  import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">  import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">  import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">  import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">  import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">  import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">  </span><br><span class="line">  import javax.annotation.Resource;</span><br><span class="line">  import javax.imageio.ImageIO;</span><br><span class="line">  import javax.servlet.ServletOutputStream;</span><br><span class="line">  import javax.servlet.http.HttpServletRequest;</span><br><span class="line">  import javax.servlet.http.HttpServletResponse;</span><br><span class="line">  import java.awt.image.BufferedImage;</span><br><span class="line">  import java.io.ByteArrayOutputStream;</span><br><span class="line">  import java.util.concurrent.TimeUnit;</span><br><span class="line">  </span><br><span class="line">  @RestController</span><br><span class="line">  @RequestMapping(&quot;/web/kaptcha&quot;)</span><br><span class="line">  public class KaptchaController &#123;</span><br><span class="line">  </span><br><span class="line">      @Qualifier(&quot;getDefaultKaptcha&quot;)</span><br><span class="line">      @Autowired</span><br><span class="line">      DefaultKaptcha defaultKaptcha;</span><br><span class="line">  </span><br><span class="line">      @Resource</span><br><span class="line">      public RedisTemplate redisTemplate;</span><br><span class="line">  </span><br><span class="line">      @GetMapping(&quot;/image-code/&#123;imageCodeToken&#125;&quot;)</span><br><span class="line">      public void imageCode(@PathVariable(value = &quot;imageCodeToken&quot;) String imageCodeToken, HttpServletRequest request, HttpServletResponse httpServletResponse) throws Exception&#123;</span><br><span class="line">          ByteArrayOutputStream jpegOutputStream = new ByteArrayOutputStream();</span><br><span class="line">          try &#123;</span><br><span class="line">              // 生成验证码字符串</span><br><span class="line">              String createText = defaultKaptcha.createText();</span><br><span class="line">  </span><br><span class="line">              // 将生成的验证码放入会话缓存中，后续验证的时候用到</span><br><span class="line">  //             request.getSession().setAttribute(imageCodeToken, createText);</span><br><span class="line">              //将生成的验证码放入redis缓存中后续验证的时候用到</span><br><span class="line">              redisTemplate.opsForValue().set(imageCodeToken,createText,300, TimeUnit.SECONDS);</span><br><span class="line">              // 使用验证码字符串生成验证码图片</span><br><span class="line">              BufferedImage challenge = defaultKaptcha.createImage(createText);</span><br><span class="line">              ImageIO.write(challenge, &quot;jpg&quot;, jpegOutputStream);</span><br><span class="line">          &#125; catch (IllegalArgumentException e) &#123;</span><br><span class="line">              httpServletResponse.sendError(HttpServletResponse.SC_NOT_FOUND);</span><br><span class="line">              return;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          // 定义response输出类型为image/jpeg类型，使用response输出流输出图片的byte数组</span><br><span class="line">          byte[] captchaChallengeAsJpeg = jpegOutputStream.toByteArray();</span><br><span class="line">          httpServletResponse.setHeader(&quot;Cache-Control&quot;, &quot;no-store&quot;);</span><br><span class="line">          httpServletResponse.setHeader(&quot;Pragma&quot;, &quot;no-cache&quot;);</span><br><span class="line">          httpServletResponse.setDateHeader(&quot;Expires&quot;, 0);</span><br><span class="line">          httpServletResponse.setContentType(&quot;image/jpeg&quot;);</span><br><span class="line">          ServletOutputStream responseOutputStream = httpServletResponse.getOutputStream();</span><br><span class="line">          responseOutputStream.write(captchaChallengeAsJpeg);</span><br><span class="line">          responseOutputStream.flush();</span><br><span class="line">          responseOutputStream.close();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p>接下来修改login.vue</p></li><li><p>&#96;&#96;&#96;vue<br>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;增加刷新验证码功能<br>toLoginDiv() {<br>  &#x2F;&#x2F;显示登录框时就刷新一次验证码<br>  _this.loadImageCode();<br>},<br>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;<br>  &#x2F;**<br> * 加载图形验证码<br> *&#x2F;<br>loadImageCode: function () {<br>  let _this &#x3D; this;<br>  _this.imageCodeToken &#x3D; Tool.uuid(8);<br>  $(‘#image-code’).attr(‘src’, process.env.VUE_APP_SERVER + ‘&#x2F;business&#x2F;web&#x2F;kaptcha&#x2F;image-code&#x2F;‘ + _this.imageCodeToken);<br>},</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>2.会员登录注册功能开发，增加登录功能，包含图片验证码，将控台用户登录功能相关代码拷贝到会员登录，并将user替换成member</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 直接将admin的local-storage和session-storage拷贝到web。记得引入</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  LOCAL_KEY_REMEMBER_MEMBER = &quot;LOCAL_KEY_REMEMBER_MEMBER&quot;; // 记住我</span><br><span class="line">  LocalStorage = &#123;</span><br><span class="line">      get: function (key) &#123;</span><br><span class="line">          let v = localStorage.getItem(key);</span><br><span class="line">          if (v &amp;&amp; typeof(v) !== &quot;undefined&quot; &amp;&amp; v !== &quot;undefined&quot;) &#123;</span><br><span class="line">              return JSON.parse(v);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      set: function (key, data) &#123;</span><br><span class="line">          localStorage.setItem(key, JSON.stringify(data));</span><br><span class="line">      &#125;,</span><br><span class="line">      remove: function (key) &#123;</span><br><span class="line">          localStorage.removeItem(key);</span><br><span class="line">      &#125;,</span><br><span class="line">      clearAll: function () &#123;</span><br><span class="line">          localStorage.clear();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><ul><li><pre><code class="js">SESSION_KEY_LOGIN_MEMBER = &quot;SESSION_KEY_LOGIN_MEMBER&quot;; // 登录信息SessionStorage = &#123;    get: function (key) &#123;        let v = sessionStorage.getItem(key);        if (v &amp;&amp; typeof(v) !== &quot;undefined&quot; &amp;&amp; v !== &quot;undefined&quot;) &#123;            return JSON.parse(v);        &#125;    &#125;,    set: function (key, data) &#123;        sessionStorage.setItem(key, JSON.stringify(data));    &#125;,    remove: function (key) &#123;        sessionStorage.removeItem(key);    &#125;,    clearAll: function () &#123;        sessionStorage.clear();    &#125;&#125;;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 接下来修改tool.js，将User改为Member</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  /**</span><br><span class="line">   * 保存登录信息</span><br><span class="line">   * @param loginUser</span><br><span class="line">   */</span><br><span class="line">  setLoginMember:function (loginMember)&#123;</span><br><span class="line">      SessionStorage.set(SESSION_KEY_LOGIN_MEMBER,loginMember);</span><br><span class="line">  &#125;,</span><br><span class="line">  /**</span><br><span class="line">   * 获取登录信息</span><br><span class="line">   * @param loginUser</span><br><span class="line">   * @returns &#123;any|&#123;&#125;&#125;</span><br><span class="line">   */</span><br><span class="line">  getLoginMember:function ()&#123;</span><br><span class="line">      return SessionStorage.get(SESSION_KEY_LOGIN_MEMBER) ||&#123;&#125;;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后修改index.vue</p></li><li><pre><code class="vue">//增加点击事件&lt;div class=&quot;form-group&quot;&gt;  &lt;button v-on:click=&quot;login()&quot; class=&quot;btn btn-primary btn-block submit-button&quot;&gt;    登&amp;nbsp;&amp;nbsp;录  &lt;/button&gt;//增加方法//---------------登录框-----------------    login () &#123;      let _this = this;      // 如果密码是从缓存带出来的，则不需要重新加密      let md5 = hex_md5(_this.member.password);      let rememberMember = LocalStorage.get(LOCAL_KEY_REMEMBER_MEMBER) || &#123;&#125;;      if (md5 !== rememberMember.md5) &#123;        _this.member.password = hex_md5(_this.member.password + KEY);      &#125;      _this.member.imageCodeToken = _this.imageCodeToken;      _this.$ajax.post(process.env.VUE_APP_SERVER + &#39;/business/web/member/login&#39;, _this.member).then((response)=&gt;&#123;        let resp = response.data;        if (resp.success) &#123;          console.log(&quot;登录成功：&quot;, resp.content);          let loginMember = resp.content;          Tool.setLoginMember(resp.content);          // 判断“记住我”          if (_this.remember) &#123;            // 如果勾选记住我，则将用户名密码保存到本地缓存            // 这里保存密码密文，并保存密文md5，用于检测密码是否被重新输入过            let md5 = hex_md5(_this.member.password);            LocalStorage.set(LOCAL_KEY_REMEMBER_MEMBER, &#123;              mobile: loginMember.mobile,              password: _this.member.password,              md5: md5            &#125;);          &#125; else &#123;            // 没有勾选“记住我”时，要把本地缓存清空，否则下次显示登录框时会自动显示用户名密码            LocalStorage.set(LOCAL_KEY_REMEMBER_MEMBER, null);          &#125;          // 登录成功 TODO        &#125; else &#123;          Toast.warning(resp.message);          _this.member.password = &quot;&quot;;          _this.loadImageCode();        &#125;      &#125;);    &#125;,<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 接下来我们看后端，修改business.controller的ControllerExceptionHandler增加统一业务异常处理</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  @ExceptionHandler(value = BusinessException.class)</span><br><span class="line">  @ResponseBody</span><br><span class="line">  public ResponseDto businessExceptionHandler(BusinessException e) &#123;</span><br><span class="line">      ResponseDto responseDto = new ResponseDto();</span><br><span class="line">      responseDto.setSuccess(false);</span><br><span class="line">      LOG.error(&quot;业务异常：&#123;&#125;&quot;, e.getCode().getDesc());</span><br><span class="line">      responseDto.setMessage(e.getCode().getDesc());</span><br><span class="line">      return responseDto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后我们修改business.controller.web.MemberController</p></li><li><pre><code class="java">////////////////////////////////////////////////////注入@Resource(name = &quot;redisTemplate&quot;)private RedisTemplate redisTemplate;///////////////////////////////////////////////////////**     * 登录     */    @PostMapping(&quot;/login&quot;)    public ResponseDto login(@RequestBody MemberDto memberDto) &#123;        LOG.info(&quot;用户登录开始&quot;);        memberDto.setPassword(DigestUtils.md5DigestAsHex(memberDto.getPassword().getBytes()));        ResponseDto responseDto = new ResponseDto();        // 根据验证码token去获取缓存中的验证码，和用户输入的验证码是否一致        String imageCode = (String) redisTemplate.opsForValue().get(memberDto.getImageCodeToken());        LOG.info(&quot;从redis中获取到的验证码：&#123;&#125;&quot;, imageCode);        if (StringUtils.isEmpty(imageCode)) &#123;            responseDto.setSuccess(false);            responseDto.setMessage(&quot;验证码已过期&quot;);            LOG.info(&quot;用户登录失败，验证码已过期&quot;);            return responseDto;        &#125;        if (!imageCode.toLowerCase().equals(memberDto.getImageCode().toLowerCase())) &#123;            responseDto.setSuccess(false);            responseDto.setMessage(&quot;验证码不对&quot;);            LOG.info(&quot;用户登录失败，验证码不对&quot;);            return responseDto;        &#125; else &#123;            // 验证通过后，移除验证码            redisTemplate.delete(memberDto.getImageCodeToken());        &#125;        LoginMemberDto loginMemberDto = memberService.login(memberDto);        String token = UuidUtil.getShortUuid();        loginMemberDto.setToken(token);        redisTemplate.opsForValue().set(token, JSON.toJSONString(loginMemberDto), 3600, TimeUnit.SECONDS);        responseDto.setContent(loginMemberDto);        return responseDto;    &#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后我们在server.dto增加LoginMemberDto。控台保存登录用户信息用的是LoginUserDto，网站保存会员信息用的是LoginMemberDto</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.course.server.dto;</span><br><span class="line">  </span><br><span class="line">  public class LoginMemberDto &#123;</span><br><span class="line">  </span><br><span class="line">      private String id;</span><br><span class="line">  </span><br><span class="line">      private String mobile;</span><br><span class="line">  </span><br><span class="line">      private String name;</span><br><span class="line">  </span><br><span class="line">      private String token;</span><br><span class="line">  </span><br><span class="line">      private String photo;</span><br><span class="line">  </span><br><span class="line">      public String getId() &#123;</span><br><span class="line">          return id;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void setId(String id) &#123;</span><br><span class="line">          this.id = id;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public String getName() &#123;</span><br><span class="line">          return name;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void setName(String name) &#123;</span><br><span class="line">          this.name = name;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public String getMobile() &#123;</span><br><span class="line">          return mobile;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void setMobile(String mobile) &#123;</span><br><span class="line">          this.mobile = mobile;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public String getToken() &#123;</span><br><span class="line">          return token;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void setToken(String token) &#123;</span><br><span class="line">          this.token = token;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public String getPhoto() &#123;</span><br><span class="line">          return photo;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void setPhoto(String photo) &#123;</span><br><span class="line">          this.photo = photo;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      public String toString() &#123;</span><br><span class="line">          final StringBuffer sb = new StringBuffer(&quot;LoginMemberDto&#123;&quot;);</span><br><span class="line">          sb.append(&quot;id=&#x27;&quot;).append(id).append(&#x27;\&#x27;&#x27;);</span><br><span class="line">          sb.append(&quot;, name=&#x27;&quot;).append(name).append(&#x27;\&#x27;&#x27;);</span><br><span class="line">          sb.append(&quot;, mobile=&#x27;&quot;).append(mobile).append(&#x27;\&#x27;&#x27;);</span><br><span class="line">          sb.append(&quot;, token=&#x27;&quot;).append(token).append(&#x27;\&#x27;&#x27;);</span><br><span class="line">          sb.append(&quot;, photo=&#x27;&quot;).append(photo).append(&#x27;\&#x27;&#x27;);</span><br><span class="line">          sb.append(&#x27;&#125;&#x27;);</span><br><span class="line">          return sb.toString();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>接下来给server.dto的MemberDto增加两个字段</p></li><li><pre><code class="java">/** * 图片验证码 */private String imageCode;/** * 图片验证码token */private String imageCodeToken;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后我们修改server.exception中的BusinessExceptionCode</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  //两个字段</span><br><span class="line">  LOGIN_USER_ERROR(&quot;用户名或密码错误&quot;),</span><br><span class="line">  LOGIN_MEMBER_ERROR(&quot;手机号不存在或密码错误&quot;),</span><br></pre></td></tr></table></figure></code></pre></li><li><p>修改MemberService，登录的时候要验证这个手机号是不是存在；控台验证时需要验证登录名是否存在，原理一样</p></li><li><p>&#96;&#96;&#96;java<br>&#x2F;**</p><ul><li>按手机号查找</li><li>@param mobile</li><li>@return</li></ul><p> *&#x2F;<br>public Member selectByMobile(String mobile) {<br>    if (StringUtils.isEmpty(mobile)) {<br>        return null;<br>    }<br>    MemberExample example &#x3D; new MemberExample();<br>    example.createCriteria().andMobileEqualTo(mobile);<br>    List<Member> memberList &#x3D; memberMapper.selectByExample(example);<br>    if (memberList &#x3D;&#x3D; null || memberList.size() &#x3D;&#x3D; 0) {<br>        return null;<br>    } else {<br>        return memberList.get(0);<br>    }</p><p>}<br>&#x2F;**</p><ul><li>登录</li><li>@param memberDto</li></ul><p> *&#x2F;<br>public LoginMemberDto login(MemberDto memberDto) {<br>    Member member &#x3D; selectByMobile(memberDto.getMobile());<br>    if (member &#x3D;&#x3D; null) {<br>        LOG.info(“手机号不存在, {}”, memberDto.getMobile());<br>        throw new BusinessException(BusinessExceptionCode.LOGIN_MEMBER_ERROR);<br>    } else {<br>        if (member.getPassword().equals(memberDto.getPassword())) {<br>            &#x2F;&#x2F; 登录成功<br>            LoginMemberDto loginMemberDto &#x3D; CopyUtil.copy(member, LoginMemberDto.class);<br>            return loginMemberDto;<br>        } else {<br>            LOG.info(“密码不对, 输入密码：{}, 数据库密码：{}”, memberDto.getPassword(), member.getPassword());<br>            throw new BusinessException(BusinessExceptionCode.LOGIN_MEMBER_ERROR);<br>        }<br>    }<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 修改UserService，因为把之前的BusinessExceptionCode中的字段修改了，所以也要把这里的字段也修改</span><br><span class="line"></span><br><span class="line">- 我们还给system.controller的ControllerExceptionHandler增加校验异常</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  @ExceptionHandler(value = ValidatorException.class)</span><br><span class="line">  @ResponseBody</span><br><span class="line">  public ResponseDto validatorExceptionHandler(ValidatorException e) &#123;</span><br><span class="line">      ResponseDto responseDto = new ResponseDto();</span><br><span class="line">      responseDto.setSuccess(false);</span><br><span class="line">      LOG.warn(e.getMessage());</span><br><span class="line">      responseDto.setMessage(&quot;请求参数异常！&quot;);</span><br><span class="line">      return responseDto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.会员登录注册功能开发，完善【记住我】功能，会员登录名是mobile，不是loginName</span><br></pre></td></tr></table></figure><ul><li><p>修改login.vue</p></li><li><p>&#96;&#96;&#96;vue<br>&#x2F;&#x2F;toLoginDiv中增加下面代码<br>toLoginDiv() {<br>  &#x2F;&#x2F; 从缓存中获取记住的用户名密码，如果获取不到，说明上一次没有勾选“记住我”<br>  let rememberMember &#x3D; LocalStorage.get(LOCAL_KEY_REMEMBER_MEMBER);<br>  if (rememberMember) {<br>_this.member &#x3D; rememberMember;<br>  }<br> }</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>3.会员登录注册功能开发，登录成功后，头部导航显示会员昵称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 首先修改the-header.vue</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  //显示昵称</span><br><span class="line">  &lt;span v-show=&quot;loginMember.id&quot; class=&quot;text-white pr-3&quot;&gt;您好：&#123;&#123;loginMember.name&#125;&#125;&lt;/span&gt;</span><br><span class="line">  ///////////////////////////////////////////////////增加 </span><br><span class="line">  data: function () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          loginMember: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      mounted() &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        _this.loginMember = Tool.getLoginMember();</span><br><span class="line">      &#125;,</span><br><span class="line">  //设置方法</span><br><span class="line">   setLoginMember(loginMember) &#123;</span><br><span class="line">          let _this = this;</span><br><span class="line">          _this.loginMember = loginMember;</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><ul><li><p>接下来使用setLoginMember方法在login.vue</p></li><li><p>&#96;&#96;&#96;<br>&#x2F;&#x2F; 登录成功，在子组件里调用父组件的xxx方法，可以使用this.$parent.xxx<br>_this.$parent.setLoginMember(loginMember);<br>$(“#login-modal”).modal(“hide”);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>4.会员登录注册功能开发，增加退出登录功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 我们先给business.controller.web的MemberController增加退出登录方法</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  /**</span><br><span class="line">   * 退出登录</span><br><span class="line">   */</span><br><span class="line">  @GetMapping(&quot;/logout/&#123;token&#125;&quot;)</span><br><span class="line">  public ResponseDto logout(@PathVariable String token) &#123;</span><br><span class="line">      ResponseDto responseDto = new ResponseDto();</span><br><span class="line">      redisTemplate.delete(token);</span><br><span class="line">      LOG.info(&quot;从redis中删除token:&#123;&#125;&quot;, token);</span><br><span class="line">      return responseDto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p>然后我们在修改the-header</p></li><li><p>&#96;&#96;&#96;vue<br>&#x2F;&#x2F;退出登录和登录是互斥的<br><span v-show="loginMember.id" class="text-white pr-3">您好：</span><br><button v-show="loginMember.id" v-on:click="logout()" class="btn btn-outline-light my-2 my-sm-0">退出登录</button><br><button v-show="!loginMember.id" v-on:click="openLoginModal()" class="btn btn-outline-light my-2 my-sm-0">登录&#x2F;注册</button><br>&#x2F;&#x2F;增加退出方法<br>logout () {<br>    let _this &#x3D; this;<br>    _this.$ajax.get(process.env.VUE_APP_SERVER + ‘&#x2F;business&#x2F;web&#x2F;member&#x2F;logout&#x2F;‘ + _this.loginMember.token).then((response)&#x3D;&gt;{<br>      let resp &#x3D; response.data;<br>      if (resp.success) {<br>        Tool.setLoginMember(null);<br>        _this.loginMember &#x3D; {};<br>        Toast.success(“退出登录成功”);<br>        _this.$router.push(“&#x2F;“);<br>      } else {<br>        Toast.warning(resp.message);<br>      }<br>    });<br>  },</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 13-11 增加发送短信验证码功能</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.会员登录注册功能开发，增加短信管理，生成代码后需要配置资源权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 首先增加sql</span><br><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  # 短信验证码</span><br><span class="line">  drop table if exists `sms`;</span><br><span class="line">  create table `sms`(</span><br><span class="line">                         `id` char(8) not null default &#x27;&#x27; comment &#x27;id&#x27;,</span><br><span class="line">                         `mobile` varchar(50) not null comment &#x27;手机号&#x27;,</span><br><span class="line">                         `code` char(6) not null comment &#x27;验证码&#x27;,</span><br><span class="line">                         `use` char(1)  not null comment &#x27;用途|枚举[SmsUseEnum]:REGISTER(&quot;R&quot;,&quot;注册&quot;),FORGET(&quot;F&quot;,&quot;忘记密码&quot;)&#x27;,</span><br><span class="line">                         `at` datetime(3)  comment &#x27;生成时间&#x27;,</span><br><span class="line">                         `status` char(1)  not null comment &#x27;状态|枚举[SmsStatusEnum]:USED(&quot;U&quot;,&quot;已使用&quot;),NOT_USED(&quot;N&quot;,&quot;未使用&quot;)&#x27;,</span><br><span class="line">                         primary key (`id`)</span><br><span class="line">  )engine =innodb default charset=utf8mb4 comment=&#x27;短信验证码&#x27;;</span><br></pre></td></tr></table></figure><ul><li><p>然后我们给server.enums增加两个枚举SmsUseEnum和SmsStatusEnum</p></li><li></li><li><pre><code class="java">package com.course.server.enums;public enum SmsUseEnum &#123;    REGISTER(&quot;R&quot;, &quot;注册&quot;),    FORGET(&quot;F&quot;, &quot;忘记密码&quot;);    private String code;    private String desc;    SmsUseEnum(String code, String desc) &#123;        this.code = code;        this.desc = desc;    &#125;    public String getCode() &#123;        return code;    &#125;    public void setCode(String code) &#123;        this.code = code;    &#125;    public void setDesc(String desc) &#123;        this.desc = desc;    &#125;    public String getDesc() &#123;        return desc;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.course.server.enums;</span><br><span class="line">  </span><br><span class="line">  public enum SmsStatusEnum &#123;</span><br><span class="line">  </span><br><span class="line">      USED(&quot;U&quot;, &quot;已使用&quot;),</span><br><span class="line">      NOT_USED(&quot;N&quot;, &quot;未使用&quot;);</span><br><span class="line">  </span><br><span class="line">      private String code;</span><br><span class="line">  </span><br><span class="line">      private String desc;</span><br><span class="line">  </span><br><span class="line">      SmsStatusEnum(String code, String desc) &#123;</span><br><span class="line">          this.code = code;</span><br><span class="line">          this.desc = desc;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public String getCode() &#123;</span><br><span class="line">          return code;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void setCode(String code) &#123;</span><br><span class="line">          this.code = code;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void setDesc(String desc) &#123;</span><br><span class="line">          this.desc = desc;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public String getDesc() &#123;</span><br><span class="line">          return desc;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后我们经过各种代码生成器，对了还要改下EnumGenerator到admin，在增加以下代码</p></li><li><pre><code class="java">toJson(SmsUseEnum.class, bufferObject, bufferArray);toJson(SmsStatusEnum.class, bufferObject, bufferArray);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后我们在admin.vue增加菜单</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;/li&gt; &lt;li v-show=&quot;hasResource(&#x27;0205&#x27;)&quot; class=&quot;&quot; id=&quot;business-sms-sidebar&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/business/sms&quot;&gt;</span><br><span class="line">      &lt;i class=&quot;menu-icon fa fa-caret-right&quot;&gt;&lt;/i&gt;</span><br><span class="line">      短信管理</span><br><span class="line">    &lt;/router-link&gt;</span><br><span class="line">    &lt;b class=&quot;arrow&quot;&gt;&lt;/b&gt;</span><br><span class="line">  &lt;/li&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>接下来增加路由</p></li><li><p>&#96;&#96;&#96;js<br>,{<br>path: “business&#x2F;sms”,<br>name:”business&#x2F;sms”,<br>component: Sms,<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 当然resource.json也要加资源</span><br><span class="line"></span><br><span class="line">- ```json</span><br><span class="line">  ,&#123;</span><br><span class="line">    &quot;id&quot;:&quot;0205&quot;,&quot;name&quot;:&quot;短信管理&quot;,&quot;page&quot;:&quot;business/sms&quot;,</span><br><span class="line">    &quot;children&quot;:[</span><br><span class="line">      &#123;&quot;id&quot;:&quot;020501&quot;,&quot;name&quot;:&quot;增删改查&quot;,&quot;request&quot;:[&quot;/business/admin/sms&quot;]&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.会员登录注册功能开发，短信管理只能查看</span><br></pre></td></tr></table></figure><ul><li>就是前端后端删删删</li></ul><p><strong>增加发送验证码功能</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.会员登录注册功能开发，增加发送短信验证码功能，同手机号同操作1分钟内不能重复发送短信</span><br></pre></td></tr></table></figure><ul><li><p>一分钟内发送一次注册验证码和忘记密码验证码，是可以的。但是发两次注册验证码或者忘记密码验证码，是不可以的。</p></li><li><p>我们首先给business.controller.web新建一个SmsController</p></li><li><pre><code class="java">package com.course.business.controller.web;import com.course.server.dto.ResponseDto;import com.course.server.dto.SmsDto;import com.course.server.service.SmsService;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RestController;import javax.annotation.Resource;@RestController(&quot;webSmsController&quot;)@RequestMapping(&quot;/web/sms&quot;)public class SmsController &#123;    private static final Logger LOG = LoggerFactory.getLogger(SmsController.class);    public static final String BUSINESS_NAME = &quot;短信验证码&quot;;    @Resource    private SmsService smsService;    @RequestMapping(value = &quot;/send&quot;, method = RequestMethod.POST)    public ResponseDto send(@RequestBody SmsDto smsDto) &#123;        LOG.info(&quot;发送短信请求开始: &#123;&#125;&quot;, smsDto);        ResponseDto responseDto = new ResponseDto();        smsService.sendCode(smsDto);        LOG.info(&quot;发送短信请求结束&quot;);        return responseDto;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后在smsService中增加方法</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  /**</span><br><span class="line">   * 发送短信验证码</span><br><span class="line">   * 同手机号同操作1分钟内不能重复发送短信</span><br><span class="line">   * @param smsDto</span><br><span class="line">   */</span><br><span class="line">  public void sendCode(SmsDto smsDto) &#123;</span><br><span class="line">      SmsExample example = new SmsExample();</span><br><span class="line">      SmsExample.Criteria criteria = example.createCriteria();</span><br><span class="line">      // 查找1分钟内有没有同手机号同操作发送记录且没被用过</span><br><span class="line">      criteria.andMobileEqualTo(smsDto.getMobile())</span><br><span class="line">              .andUseEqualTo(smsDto.getUse())</span><br><span class="line">              .andStatusEqualTo(SmsStatusEnum.NOT_USED.getCode())</span><br><span class="line">              .andAtGreaterThan(new Date(new Date().getTime() - 1 * 60 * 1000));</span><br><span class="line">      List&lt;Sms&gt; smsList = smsMapper.selectByExample(example);</span><br><span class="line">  </span><br><span class="line">      if (smsList == null || smsList.size() == 0) &#123;</span><br><span class="line">          saveAndSend(smsDto);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          LOG.warn(&quot;短信请求过于频繁, &#123;&#125;&quot;, smsDto.getMobile());</span><br><span class="line">          throw new BusinessException(BusinessExceptionCode.MOBILE_CODE_TOO_FREQUENT);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 保存并发送短信验证码</span><br><span class="line">   * @param smsDto</span><br><span class="line">   */</span><br><span class="line">  private void saveAndSend(SmsDto smsDto) &#123;</span><br><span class="line">      // 生成6位数字</span><br><span class="line">      String code = String.valueOf((int)(((Math.random() * 9) + 1) * 100000));</span><br><span class="line">      smsDto.setAt(new Date());</span><br><span class="line">      smsDto.setStatus(SmsStatusEnum.NOT_USED.getCode());</span><br><span class="line">      smsDto.setCode(code);</span><br><span class="line">      this.save(smsDto);</span><br><span class="line">  </span><br><span class="line">      // TODO 调第三方短信接口发送短信</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>短信验证码可以接阿里云短信服务，在阿里云控台配置短信模板，然后再代码里配置模板id，再调用阿里云jar包里的发送短信方法就可以了，收费是0.045元&#x2F;条。</p></li><li><p>给BusinessExceptionCode增加一个</p></li><li><p>&#96;&#96;&#96;java<br>MOBILE_CODE_TOO_FREQUENT(“短信请求过于平凡”),</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 最后修改login.vue，增加两个方法</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  /**</span><br><span class="line">   * 发送注册短信</span><br><span class="line">   */</span><br><span class="line">  sendSmsForRegister() &#123;</span><br><span class="line">    let _this = this;</span><br><span class="line">  </span><br><span class="line">    let sms = &#123;</span><br><span class="line">      mobile: _this.memberRegister.mobile,</span><br><span class="line">      use: SMS_USE.REGISTER.key</span><br><span class="line">    &#125;;</span><br><span class="line">        // 调服务端发送短信接口</span><br><span class="line">        _this.sendSmsCode(sms);</span><br><span class="line">  &#125;,</span><br><span class="line">  /**</span><br><span class="line">   * 发送短信</span><br><span class="line">   */</span><br><span class="line">  sendSmsCode(sms) &#123;</span><br><span class="line">    let _this = this;</span><br><span class="line">  </span><br><span class="line">    // 调服务端发短信接口</span><br><span class="line">    _this.$ajax.post(process.env.VUE_APP_SERVER + &#x27;/business/web/sms/send&#x27;, sms).then((res)=&gt; &#123;</span><br><span class="line">      let response = res.data;</span><br><span class="line">      if (response.success) &#123;</span><br><span class="line">        Toast.success(&quot;短信已发送&quot;);</span><br><span class="line">  </span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        Toast.warning(response.message);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.会员登录注册功能开发，增加发送短信验证码倒计时功能，可修改countdown参数进行调试</span><br></pre></td></tr></table></figure><ul><li><p>点击发送按钮后，按钮变成不可点击，且显示倒计时</p></li><li><p>修改login.vue</p></li><li><pre><code class="vue">//修改参数，增加id参数sendSmsForRegister() &#123;      // 调服务端发送短信接口  _this.sendSmsCode(sms, &quot;register-send-code-btn&quot;);&#125;,/////////////////////////////////////////////////////////////发送成功时调用倒计时 /**     * 发送短信     */    sendSmsCode(sms, btnId) &#123;//增加参数           if (response.success) &#123;          // 开始倒计时          _this.countdown = 60;          _this.setTime(btnId);       &#125;    &#125;,////////////////////////////////////////////////////////////////增加倒计时方法    /**     * 倒计时     * @param btnId     */    setTime(btnId) &#123;      let _this = this;      let btn = $(&quot;#&quot; + btnId);      if (_this.countdown === 0) &#123;        btn.removeAttr(&quot;disabled&quot;);        btn.text(&quot;获取验证码&quot;);        return;      &#125; else &#123;        btn.attr(&quot;disabled&quot;, true);        btn.text(&quot;重新发送(&quot; + _this.countdown + &quot;)&quot;);        _this.countdown--;      &#125;      setTimeout(function () &#123;        _this.setTime(btnId);      &#125;, 1000);    &#125;,<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 13-12 完善登录注册校验功能</span><br><span class="line"></span><br><span class="line">**增加手机号后端校验**</span><br><span class="line"></span><br><span class="line">- 前端就修改login的sendSmsForRegister方法，增加如下：</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  _this.$ajax.get(process.env.VUE_APP_SERVER + &#x27;/business/web/member/is-mobile-exist/&#x27; + _this.memberRegister.mobile).then((res)=&gt;&#123;</span><br><span class="line">    let response = res.data;</span><br><span class="line">    if (response.success) &#123;</span><br><span class="line">      Toast.warning(&quot;手机号已被注册&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // 调服务端发送短信接口</span><br><span class="line">      _this.sendSmsCode(sms, &quot;register-send-code-btn&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></code></pre></li><li><p>我们修改business.controller.web的MemberController，增加方法</p></li><li><p>&#96;&#96;&#96;java<br>&#x2F;**</p><ul><li>校验手机号是否存在</li><li>存在则success&#x3D;true，不存在则success&#x3D;false</li></ul><p> *&#x2F;<br>@GetMapping(value &#x3D; “&#x2F;is-mobile-exist&#x2F;{mobile}”)<br>public ResponseDto isMobileExist(@PathVariable(value &#x3D; “mobile”) String mobile) throws BusinessException {<br>    LOG.info(“查询手机号是否存在开始”);<br>    ResponseDto responseDto &#x3D; new ResponseDto();<br>    MemberDto memberDto &#x3D; memberService.findByMobile(mobile);<br>    if (memberDto &#x3D;&#x3D; null) {<br>        responseDto.setSuccess(false);<br>    } else {<br>        responseDto.setSuccess(true);<br>    }<br>    return responseDto;<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 对应的MemberService也增加方法</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  /**</span><br><span class="line">   * 按手机号查找</span><br><span class="line">   * @param mobile</span><br><span class="line">   * @return</span><br><span class="line">   */</span><br><span class="line">  public MemberDto findByMobile(String mobile) &#123;</span><br><span class="line">      Member member = this.selectByMobile(mobile);</span><br><span class="line">      return CopyUtil.copy(member, MemberDto.class);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>增加前端正则校验</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.会员登录注册功能开发，注册时发送验证码前，增加手机号校验，手机号输入框失去焦点时，检验手机号</span><br><span class="line">2.增加正则表达式校验工具类</span><br></pre></td></tr></table></figure><ul><li><p>Pattern里面都是一些常用的正则表达式校验，再js中加入</p></li><li><pre><code class="js">Pattern = &#123;  // 用户名正则，2到16位（字母，数字，下划线）  loginNamePattern: /^[a-zA-Z0-9_]&#123;6,16&#125;$/,  // 昵称正则，6到20位中文，字母，数字，下划线  namePattern: /^[\w\u4e00-\u9fa5]&#123;2,20&#125;$/,  // 强密码强度正则，最少8位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符  passwordStrongPattern: /^.*(?=.&#123;8,&#125;)(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$/,  // 弱密码强度正则，最少6位，包括至少1字母，1个数字  passwordWeakPattern: /^.*(?=.&#123;6,&#125;)(?=.*\d)(?=.*[A-Za-z]).*$/,  // 手机号正则，11位数字，1开头  mobilePattern: /^1\d&#123;10&#125;$/,  // 图片验证码正则，4位字母，数字  imageCodePattern: /^[a-zA-Z0-9]&#123;4&#125;$/,  // 手机验证码正则，6位数字  mobileCodePattern: /^[0-9]&#123;6&#125;$/,  validateLoginName: function (str) &#123;    if (Tool.isEmpty(str)) &#123;      return false;    &#125;    return this.loginNamePattern.test(str);  &#125;,  validateName: function (str) &#123;    if (Tool.isEmpty(str)) &#123;      return false;    &#125;    return this.namePattern.test(str);  &#125;,  validatePasswordStrong: function (str) &#123;    if (Tool.isEmpty(str)) &#123;      return false;    &#125;    return this.passwordStrongPattern.test(str);  &#125;,  validatePasswordWeak: function (str) &#123;    if (Tool.isEmpty(str)) &#123;      return false;    &#125;    return this.passwordWeakPattern.test(str);  &#125;,  validateMobile: function (str) &#123;    if (Tool.isEmpty(str)) &#123;      return false;    &#125;    return this.mobilePattern.test(str);  &#125;,  validateImageCode: function (str) &#123;    if (Tool.isEmpty(str)) &#123;      return false;    &#125;    return this.imageCodePattern.test(str);  &#125;,  validateMobileCode: function (str) &#123;    if (Tool.isEmpty(str)) &#123;      return false;    &#125;    return this.mobileCodePattern.test(str);  &#125;&#125;;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- index中引入</span><br><span class="line"></span><br><span class="line">- ```html</span><br><span class="line">  &lt;!--正则表达式校验--&gt;</span><br><span class="line">  &lt;script src=&quot;&lt;%= BASE_URL %&gt;static/js/pattern.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>最后就是修改login.vue</p></li><li><p>&#96;&#96;&#96;vue<br>&#x2F;&#x2F;增加点击事件，再增加一个v-show。blur事件，当文本框失去焦点会触发blur事件</p><h3>注&nbsp;&nbsp;册</h3><div class="form-group">  <input  v-on:blur="onRegisterMobileBlur()"          v-bind:class="registerMobileValidateClass"          id="register-mobile" v-model="memberRegister.mobile"          class="form-control" placeholder="手机号">  <span v-show="registerMobileValidate === false" class="text-danger">手机号11位数字，且不能重复</span></div>/////////////////////////////////////////////////////////再data中增加组件变量// 注册框显示错误信息registerMobileValidate: null,////////////////////////////////////////////computed，可以根据一个或多个组件变量，计算结果 computed: {    registerMobileValidateClass: function () {      return {        'border-success': this.registerMobileValidate === true,        'border-danger': this.registerMobileValidate === false,      }    },//再sendSmsForRegister方法中也要校验一次  if (!_this.onRegisterMobileBlur()) {        return false;      }  //-------------------------------- 注册框校验 ----------------------------<pre><code>onRegisterMobileBlur () &#123;  let _this = this;  _this.registerMobileValidate = Pattern.validateMobile(_this.memberRegister.mobile);  return _this.registerMobileValidate;&#125;,</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>2.会员登录注册功能开发，完善注册输入框校验</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 依旧是修改login.vue</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  //每个部分都加校验</span><br><span class="line">  &lt;input v-on:blur=&quot;onRegisterMobileCodeBlur()&quot;</span><br><span class="line">         v-bind:class=&quot;registerMobileCodeValidateClass&quot;</span><br><span class="line">         id=&quot;register-mobile-code&quot; class=&quot;form-control&quot;</span><br><span class="line">         placeholder=&quot;手机验证码&quot; v-model=&quot;memberRegister.code&quot;&gt;</span><br><span class="line">  &lt;span v-show=&quot;registerMobileCodeValidate === false&quot; class=&quot;text-danger&quot;&gt;请输入短信6位验证码&lt;/span&gt;</span><br><span class="line">  ///////////////////////////////////////////////////////</span><br><span class="line">  &lt;input  v-on:blur=&quot;onRegisterNameBlur()&quot;</span><br><span class="line">          v-bind:class=&quot;registerNameValidateClass&quot;</span><br><span class="line">          id=&quot;register-name&quot; v-model=&quot;memberRegister.name&quot;</span><br><span class="line">          class=&quot;form-control&quot; placeholder=&quot;昵称&quot;&gt;</span><br><span class="line">  &lt;span v-show=&quot;registerNameValidate === false&quot; class=&quot;text-danger&quot;&gt;昵称2到20位中文，字母，数字，下划线组合&lt;/span&gt;</span><br><span class="line">  ///////////////////////////////////////////////////////</span><br><span class="line">  &lt;input v-on:blur=&quot;onRegisterPasswordBlur()&quot;</span><br><span class="line">          v-bind:class=&quot;registerPasswordValidateClass&quot;</span><br><span class="line">          id=&quot;register-password&quot; v-model=&quot;memberRegister.passwordOriginal&quot;</span><br><span class="line">          class=&quot;form-control&quot; placeholder=&quot;密码&quot; type=&quot;password&quot;&gt;</span><br><span class="line">  &lt;span v-show=&quot;registerPasswordValidate === false&quot; class=&quot;text-danger&quot;&gt;密码最少6位，包含至少1字母和1个数字&lt;/span&gt;</span><br><span class="line">  ///////////////////////////////////////////////////////    </span><br><span class="line">  &lt;input v-on:blur=&quot;onRegisterConfirmPasswordBlur()&quot;</span><br><span class="line">          v-bind:class=&quot;registerConfirmPasswordValidateClass&quot;</span><br><span class="line">          id=&quot;register-confirm-password&quot; v-model=&quot;memberRegister.confirm&quot;</span><br><span class="line">          class=&quot;form-control&quot; placeholder=&quot;确认密码&quot;</span><br><span class="line">          name=&quot;memberRegisterConfirm&quot; type=&quot;password&quot;&gt;</span><br><span class="line">  &lt;span v-show=&quot;registerConfirmPasswordValidate === false&quot; class=&quot;text-danger&quot;&gt;确认密码和密码一致&lt;/span&gt;</span><br><span class="line">  /////////////////////////////////////////////////////////data中增加</span><br><span class="line">  registerMobileCodeValidate: null,</span><br><span class="line">  registerPasswordValidate: null,</span><br><span class="line">  registerNameValidate: null,</span><br><span class="line">  registerConfirmPasswordValidate: null,</span><br><span class="line">  /////////////////////////////////////////////////////////////////computed增加</span><br><span class="line">   registerMobileCodeValidateClass: function () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          &#x27;border-success&#x27;: this.registerMobileCodeValidate === true,</span><br><span class="line">          &#x27;border-danger&#x27;: this.registerMobileCodeValidate === false,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      registerPasswordValidateClass: function () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          &#x27;border-success&#x27;: this.registerPasswordValidate === true,</span><br><span class="line">          &#x27;border-danger&#x27;: this.registerPasswordValidate === false,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      registerNameValidateClass: function () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          &#x27;border-success&#x27;: this.registerNameValidate === true,</span><br><span class="line">          &#x27;border-danger&#x27;: this.registerNameValidate === false,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      registerConfirmPasswordValidateClass: function () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          &#x27;border-success&#x27;: this.registerConfirmPasswordValidate === true,</span><br><span class="line">          &#x27;border-danger&#x27;: this.registerConfirmPasswordValidate === false,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      //-------------------------------- 注册框校验 ----------------------------</span><br><span class="line">  onRegisterMobileCodeBlur () &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        _this.registerMobileCodeValidate = Pattern.validateMobileCode(_this.memberRegister.smsCode);</span><br><span class="line">        return _this.registerMobileValidate;</span><br><span class="line">      &#125;,</span><br><span class="line">  </span><br><span class="line">      onRegisterNameBlur () &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        _this.registerNameValidate = Pattern.validateName(_this.memberRegister.name);</span><br><span class="line">        return _this.registerMobileValidate;</span><br><span class="line">      &#125;,</span><br><span class="line">  </span><br><span class="line">      onRegisterPasswordBlur () &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        _this.registerPasswordValidate = Pattern.validatePasswordWeak(_this.memberRegister.passwordOriginal);</span><br><span class="line">        return _this.registerMobileValidate;</span><br><span class="line">      &#125;,</span><br><span class="line">  </span><br><span class="line">      onRegisterConfirmPasswordBlur () &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        let confirmPassword = $(&quot;#register-confirm-password&quot;).val();</span><br><span class="line">        if (Tool.isEmpty(confirmPassword)) &#123;</span><br><span class="line">          return _this.registerConfirmPasswordValidate = false;</span><br><span class="line">        &#125;</span><br><span class="line">        return _this.registerConfirmPasswordValidate = (confirmPassword === _this.memberRegister.passwordOriginal);</span><br><span class="line">      &#125;,    </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.会员登录注册功能开发，提交注册之前，先校验所有注册输入框，当有一个输入框校验为false时，其他不校验</span><br></pre></td></tr></table></figure><ul><li><p>修改login的register方法，增加如下代码</p></li><li><p>&#96;&#96;&#96;vue<br>&#x2F;&#x2F; 提交之前，先校验所有输入框<br>&#x2F;&#x2F; 注意：当有一个文本框校验为false时，其它不校验<br>let validateResult &#x3D; _this.onRegisterMobileBlur() &amp;&amp;<br>_this.onRegisterMobileCodeBlur() &amp;&amp;<br>_this.onRegisterNameBlur() &amp;&amp;<br>_this.onRegisterPasswordBlur() &amp;&amp;<br>_this.onRegisterConfirmPasswordBlur();<br>if (!validateResult) {<br>  return;<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**增加短信验证码校验**</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.会员登录注册功能开发，注册时增加短信验证码校验功能,短信验证码5分钟内有效，只能验证一次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 我们给MemberDto增加字段</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  /**</span><br><span class="line">   * 短信验证码</span><br><span class="line">   */</span><br><span class="line">  private String smsCode;</span><br></pre></td></tr></table></figure><ul><li><p>接下来我们修改MemberController</p></li><li><pre><code class="Java">///////////////////////////////////////////////////////////注入@Resourceprivate SmsService smsService;////////////////////////////////////////////////////////在register方法中加入// 校验短信验证码SmsDto smsDto = new SmsDto();smsDto.setMobile(memberDto.getMobile());smsDto.setCode(memberDto.getSmsCode());smsDto.setUse(SmsUseEnum.REGISTER.getCode());smsService.validCode(smsDto);LOG.info(&quot;短信验证码校验通过&quot;);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后我们修改SmsService</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  /**</span><br><span class="line">   * 验证码5分钟内有效，且操作类型要一致</span><br><span class="line">   * @param smsDto</span><br><span class="line">   */</span><br><span class="line">  public void validCode(SmsDto smsDto) &#123;</span><br><span class="line">      SmsExample example = new SmsExample();</span><br><span class="line">      SmsExample.Criteria criteria = example.createCriteria();</span><br><span class="line">      // 查找5分钟内同手机号同操作发送记录</span><br><span class="line">      criteria.andMobileEqualTo(smsDto.getMobile()).andUseEqualTo(smsDto.getUse()).andAtGreaterThan(new Date(new Date().getTime() - 5 * 60 * 1000));</span><br><span class="line">      List&lt;Sms&gt; smsList = smsMapper.selectByExample(example);</span><br><span class="line">  </span><br><span class="line">      if (smsList != null &amp;&amp; smsList.size() &gt; 0) &#123;</span><br><span class="line">          Sms smsDb = smsList.get(0);</span><br><span class="line">          if (!smsDb.getCode().equals(smsDto.getCode())) &#123;</span><br><span class="line">              LOG.warn(&quot;短信验证码不正确&quot;);</span><br><span class="line">              throw new BusinessException(BusinessExceptionCode.MOBILE_CODE_ERROR);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">              smsDb.setStatus(SmsStatusEnum.USED.getCode());</span><br><span class="line">              smsMapper.updateByPrimaryKey(smsDb);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          LOG.warn(&quot;短信验证码不存在或已过期，请重新发送短信&quot;);</span><br><span class="line">          throw new BusinessException(BusinessExceptionCode.MOBILE_CODE_EXPIRED);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>最后我们再BusinessExceptionCode增加字段</p></li><li><p>&#96;&#96;&#96;java<br>MOBILE_CODE_ERROR(“短信验证码不正确”),<br>MOBILE_CODE_EXPIRED(“短信验证码不存在或已过期，请重新发送短信”),</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**增加忘记密码功能**</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.会员登录注册功能开发，增加忘记密码功能，包含短信验证，输入框校验等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 我们先修改login</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  /////////////////////////////////////////忘记密码部分</span><br><span class="line">  &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;input v-on:blur=&quot;onForgetMobileBlur()&quot;</span><br><span class="line">           v-bind:class=&quot;forgetMobileValidateClass&quot;</span><br><span class="line">           id=&quot;forget-mobile&quot; v-model=&quot;memberForget.mobile&quot;</span><br><span class="line">           class=&quot;form-control&quot; placeholder=&quot;手机号&quot;&gt;</span><br><span class="line">    &lt;span v-show=&quot;forgetMobileValidate === false&quot; class=&quot;text-danger&quot;&gt;手机号11位数字，且必须已注册&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  ////////////////////////////////////////////////</span><br><span class="line">  &lt;input v-on:blur=&quot;onForgetMobileCodeBlur()&quot;</span><br><span class="line">          v-bind:class=&quot;forgetMobileCodeValidateClass&quot;</span><br><span class="line">          id=&quot;forget-mobile-code&quot; class=&quot;form-control&quot;</span><br><span class="line">          placeholder=&quot;手机验证码&quot; v-model=&quot;memberForget.smsCode&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;input-group-append&quot;&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;sendSmsForForget()&quot; class=&quot;btn btn-outline-secondary&quot; id=&quot;forget-send-code-btn&quot;&gt;</span><br><span class="line">  发送验证码</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">  &lt;span v-show=&quot;forgetMobileCodeValidate === false&quot; class=&quot;text-danger&quot;&gt;请输入短信6位验证码&lt;/span&gt;</span><br><span class="line">   /////////////////////////////////////////////////////</span><br><span class="line">    &lt;input v-on:blur=&quot;onForgetPasswordBlur()&quot;</span><br><span class="line">                       v-bind:class=&quot;forgetPasswordValidateClass&quot;</span><br><span class="line">                       id=&quot;forget-password&quot; v-model=&quot;memberForget.passwordOriginal&quot;</span><br><span class="line">                       class=&quot;form-control&quot; placeholder=&quot;密码&quot; type=&quot;password&quot;&gt;</span><br><span class="line">  &lt;span v-show=&quot;forgetPasswordValidate === false&quot; class=&quot;text-danger&quot;&gt;密码最少6位，包含至少1字母和1个数字&lt;/span&gt;</span><br><span class="line">  ///////////////////////////////////////////////////////////////////</span><br><span class="line">  &lt;input v-on:blur=&quot;onForgetConfirmPasswordBlur()&quot;</span><br><span class="line">                       v-bind:class=&quot;forgetConfirmPasswordValidateClass&quot;</span><br><span class="line">                       id=&quot;forget-confirm-password&quot; v-model=&quot;memberForget.confirm&quot;</span><br><span class="line">                       class=&quot;form-control&quot; placeholder=&quot;确认密码&quot; type=&quot;password&quot;&gt;</span><br><span class="line">  &lt;span v-show=&quot;forgetConfirmPasswordValidate === false&quot; class=&quot;text-danger&quot;&gt;确认密码和密码一致&lt;/span&gt;</span><br><span class="line">  &lt;button  v-on:click=&quot;resetPassword()&quot; class=&quot;btn btn-primary btn-block submit-button&quot;&gt;</span><br><span class="line">                  重&amp;nbsp;&amp;nbsp;置</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">  /////////////////////////////////////////////////再data增加</span><br><span class="line">   // 忘记密码框显示错误信息</span><br><span class="line">   forgetMobileValidate: null,</span><br><span class="line">   forgetMobileCodeValidate: null,</span><br><span class="line">   forgetPasswordValidate: null,</span><br><span class="line">   forgetConfirmPasswordValidate: null,</span><br><span class="line">  ////////////////////////////////////////////再computed增加</span><br><span class="line">  forgetMobileValidateClass: function () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          &#x27;border-success&#x27;: this.forgetMobileValidate === true,</span><br><span class="line">          &#x27;border-danger&#x27;: this.forgetMobileValidate === false,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      forgetMobileCodeValidateClass: function () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          &#x27;border-success&#x27;: this.forgetMobileCodeValidate === true,</span><br><span class="line">          &#x27;border-danger&#x27;: this.forgetMobileCodeValidate === false,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      forgetPasswordValidateClass: function () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          &#x27;border-success&#x27;: this.forgetPasswordValidate === true,</span><br><span class="line">          &#x27;border-danger&#x27;: this.forgetPasswordValidate === false,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      forgetConfirmPasswordValidateClass: function () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          &#x27;border-success&#x27;: this.forgetConfirmPasswordValidate === true,</span><br><span class="line">          &#x27;border-danger&#x27;: this.forgetConfirmPasswordValidate === false,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">  ////////////////////////////////////////////增加方法</span><br><span class="line">   /**</span><br><span class="line">       * 发送忘记密码短信</span><br><span class="line">       */</span><br><span class="line">      sendSmsForForget() &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        if (!_this.onForgetMobileBlur()) &#123;</span><br><span class="line">          return false;</span><br><span class="line">        &#125;</span><br><span class="line">        let sms = &#123;</span><br><span class="line">          mobile: _this.memberForget.mobile,</span><br><span class="line">          use: SMS_USE.FORGET.key</span><br><span class="line">        &#125;;</span><br><span class="line">  </span><br><span class="line">        _this.$ajax.get(process.env.VUE_APP_SERVER + &#x27;/business/web/member/is-mobile-exist/&#x27; + _this.memberForget.mobile).then((res)=&gt;&#123;</span><br><span class="line">          let response = res.data;</span><br><span class="line">          if (response.success) &#123;</span><br><span class="line">            _this.forgetMobileValidate = true;</span><br><span class="line">            _this.sendSmsCode(sms, &quot;forget-send-code-btn&quot;);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            _this.forgetMobileValidate = false;</span><br><span class="line">            Toast.warning(&quot;手机号未注册&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">  </span><br><span class="line">      resetPassword() &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">  </span><br><span class="line">        // 提交之前，先校验所有输入框</span><br><span class="line">        // 注意：当有一个文本框校验为false时，其它不校验</span><br><span class="line">        let validateResult = _this.onForgetMobileBlur() &amp;&amp;</span><br><span class="line">            _this.onForgetMobileCodeBlur() &amp;&amp;</span><br><span class="line">            _this.onForgetPasswordBlur() &amp;&amp;</span><br><span class="line">            _this.onForgetConfirmPasswordBlur();</span><br><span class="line">        if (!validateResult) &#123;</span><br><span class="line">          return;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        _this.memberForget.password = hex_md5(_this.memberForget.passwordOriginal + KEY);</span><br><span class="line">  </span><br><span class="line">        // 调服务端密码重置接口</span><br><span class="line">        _this.$ajax.post(process.env.VUE_APP_SERVER + &#x27;/business/web/member/reset-password&#x27;, _this.memberForget).then((res)=&gt;&#123;</span><br><span class="line">          let response = res.data;</span><br><span class="line">          if (response.success) &#123;</span><br><span class="line">            Toast.success(&quot;密码重置成功&quot;);</span><br><span class="line">            _this.toLoginDiv();</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            Toast.warning(response.message);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).catch((response)=&gt;&#123;</span><br><span class="line">          console.log(&quot;error：&quot;, response);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">       //-------------------------------- 忘记密码框校验 ----------------------------</span><br><span class="line">  </span><br><span class="line">      onForgetMobileBlur () &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        return _this.forgetMobileValidate = Pattern.validateMobile(_this.memberForget.mobile);</span><br><span class="line">      &#125;,</span><br><span class="line">  </span><br><span class="line">      onForgetMobileCodeBlur () &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        return _this.forgetMobileCodeValidate = Pattern.validateMobileCode(_this.memberForget.smsCode);</span><br><span class="line">      &#125;,</span><br><span class="line">  </span><br><span class="line">      onForgetPasswordBlur () &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        return _this.forgetPasswordValidate = Pattern.validatePasswordWeak(_this.memberForget.passwordOriginal);</span><br><span class="line">      &#125;,</span><br><span class="line">  </span><br><span class="line">      onForgetConfirmPasswordBlur () &#123;</span><br><span class="line">        let _this = this;</span><br><span class="line">        let forgetPassword = $(&quot;#forget-confirm-password&quot;).val();</span><br><span class="line">        if (Tool.isEmpty(forgetPassword)) &#123;</span><br><span class="line">          return _this.forgetConfirmPasswordValidate = false;</span><br><span class="line">        &#125;</span><br><span class="line">        return _this.forgetConfirmPasswordValidate = (forgetPassword === _this.memberForget.passwordOriginal);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><ul><li><p>修改MemberController</p></li><li><pre><code class="java">@PostMapping(&quot;/reset-password&quot;)public ResponseDto resetPassword(@RequestBody MemberDto memberDto) throws BusinessException &#123;    LOG.info(&quot;会员密码重置开始:&quot;);    memberDto.setPassword(DigestUtils.md5DigestAsHex(memberDto.getPassword().getBytes()));    ResponseDto&lt;MemberDto&gt; responseDto = new ResponseDto();    // 校验短信验证码    SmsDto smsDto = new SmsDto();    smsDto.setMobile(memberDto.getMobile());    smsDto.setCode(memberDto.getSmsCode());    smsDto.setUse(SmsUseEnum.FORGET.getCode());    smsService.validCode(smsDto);    LOG.info(&quot;短信验证码校验通过&quot;);    // 重置密码    memberService.resetPassword(memberDto);    return responseDto;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 修改MemberService</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  /**</span><br><span class="line">   * 重置密码</span><br><span class="line">   */</span><br><span class="line">  public void resetPassword(MemberDto memberDto) throws BusinessException &#123;</span><br><span class="line">      Member memberDb = this.selectByMobile(memberDto.getMobile());</span><br><span class="line">      if (memberDb == null) &#123;</span><br><span class="line">          throw new BusinessException(BusinessExceptionCode.MEMBER_NOT_EXIST);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          Member member = new Member();</span><br><span class="line">          member.setId(memberDb.getId());</span><br><span class="line">          member.setPassword(memberDto.getPassword());</span><br><span class="line">          memberMapper.updateByPrimaryKeySelective(member);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>最后再BusinessExceptionCode中增加字段</p></li><li><p>&#96;&#96;&#96;java<br>MEMBER_NOT_EXIST(“会员不存在”),</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 13-13 增加立即报名功能</span><br><span class="line"></span><br><span class="line">**新增报名表并生成基本代码**</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.会员报名课程功能开发，新增报名表，生成服务端和持久层代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 首先增加sql,然后就可以代码生成器了</span><br><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  # 会员课程报名</span><br><span class="line">  drop table if exists `member_course`;</span><br><span class="line">  create table `member_course`(</span><br><span class="line">                         `id` char(8) not null default &#x27;&#x27; comment &#x27;id&#x27;,</span><br><span class="line">                         `member_id` char(8) not null comment &#x27;会员id&#x27;,</span><br><span class="line">                         `course_id` char(8) not null comment &#x27;课程id&#x27;,</span><br><span class="line">                         `at` datetime(3) not null comment &#x27;报名时间&#x27;,</span><br><span class="line">                         primary key (`id`),</span><br><span class="line">                         unique key `member_course_unique`(`member_id`,`course_id`)</span><br><span class="line">  </span><br><span class="line">  )engine =innodb default charset=utf8mb4 comment=&#x27;会员课程报名&#x27;;</span><br></pre></td></tr></table></figure><p><strong>登录后可报名课程</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.会员报名课程功能开发，登录后可报名课程</span><br></pre></td></tr></table></figure><ul><li><p>报名功能就是保存会员课程关联表，相当于生成的save方法</p></li><li><p>我们再business.controller.web路径下新增一个MemberCourseController</p></li><li><pre><code class="Java">package com.course.business.controller.web;import com.course.server.dto.MemberCourseDto;import com.course.server.dto.ResponseDto;import com.course.server.service.MemberCourseService;import com.course.server.util.ValidatorUtil;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.web.bind.annotation.*;import javax.annotation.Resource;@RestController(&quot;webMemberCourseController&quot;)@RequestMapping(&quot;/web/member-course&quot;)public class MemberCourseController &#123;    private static final Logger LOG = LoggerFactory.getLogger(MemberCourseController.class);    public static final String BUSINESS_NAME = &quot;会员课程报名&quot;;    @Resource    private MemberCourseService memberCourseService;    /**     * 保存，id有值时更新，无值时新增     */    @PostMapping(&quot;/enroll&quot;)    public ResponseDto enroll(@RequestBody MemberCourseDto memberCourseDto) &#123;        // 保存校验        ValidatorUtil.require(memberCourseDto.getMemberId(), &quot;会员id&quot;);        ValidatorUtil.require(memberCourseDto.getCourseId(), &quot;课程id&quot;);        ResponseDto responseDto = new ResponseDto();        memberCourseDto = memberCourseService.enroll(memberCourseDto);        responseDto.setContent(memberCourseDto);        return responseDto;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后我们看下MemberCourseService，真实项目中，报名时需要对接第三方支付，比如支付宝，还要另外做一个支付回调接口，让支付宝告诉你会员是否支付成功，如果支付成功，再插入报名表</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  private void insert(MemberCourse memberCourse)&#123;</span><br><span class="line">              Date now = new Date();</span><br><span class="line">              memberCourse.setId(UuidUtil.getShortUuid());</span><br><span class="line">              memberCourse.setAt(now);//增加这一行</span><br><span class="line">              memberCourseMapper.insert(memberCourse);</span><br><span class="line">  &#125;</span><br><span class="line">  //////////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class="line">    /**</span><br><span class="line">       * 报名，先判断是否已报名</span><br><span class="line">       * @param memberCourseDto</span><br><span class="line">       */</span><br><span class="line">      public MemberCourseDto enroll(MemberCourseDto memberCourseDto) &#123;</span><br><span class="line">          MemberCourse memberCourseDb = this.select(memberCourseDto.getMemberId(), memberCourseDto.getCourseId());</span><br><span class="line">          if (memberCourseDb == null) &#123;</span><br><span class="line">              MemberCourse memberCourse = CopyUtil.copy(memberCourseDto, MemberCourse.class);</span><br><span class="line">              this.insert(memberCourse);</span><br><span class="line">              // 将数据库信息全部返回，包括id, at</span><br><span class="line">              return CopyUtil.copy(memberCourse, MemberCourseDto.class);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">              // 如果已经报名，则直接返回已报名的信息</span><br><span class="line">              return CopyUtil.copy(memberCourseDb, MemberCourseDto.class);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      /**</span><br><span class="line">       * 根据memberId和courseId查询记录</span><br><span class="line">       */</span><br><span class="line">      public MemberCourse select(String memberId, String courseId) &#123;</span><br><span class="line">          MemberCourseExample example = new MemberCourseExample();</span><br><span class="line">          example.createCriteria()</span><br><span class="line">                  .andCourseIdEqualTo(courseId)</span><br><span class="line">                  .andMemberIdEqualTo(memberId);</span><br><span class="line">          List&lt;MemberCourse&gt; memberCourseList = memberCourseMapper.selectByExample(example);</span><br><span class="line">          if (CollectionUtils.isEmpty(memberCourseList)) &#123;</span><br><span class="line">              return null;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">              return memberCourseList.get(0);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后我们看下detail.vue页面</p></li><li><p>&#96;&#96;&#96;vue<br>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;再一次增加互斥显示</p><p class="course-head-button-links">  <a class="link"  v-show="!memberCourse.id" v-on:click="enroll()" class="btn btn-lg btn-primary btn-shadow"  href="javascript:;" >立即报名<i class="fas fa-external-link-alt"></i></a>  <a v-show="memberCourse.id" href="#" class="btn btn-lg btn-success btn-shadow disabled">您已报名</a></p>///////////////////////////////////////////////////data中增加memberCourse:{},/////////////////////////////////////////////////////////////增加方法/**     * 报名     */    enroll() {      let _this = this;      let loginMember = Tool.getLoginMember();      if (Tool.isEmpty(loginMember)) {        Toast.warning("请先登录");        return;      }      _this.$ajax.post(process.env.VUE_APP_SERVER + '/business/web/member-course/enroll', {        courseId: _this.course.id,        memberId: loginMember.id      }).then((response)=>{        let resp = response.data;        if (resp.success) {          _this.memberCourse = resp.content;          Toast.success("报名成功！");        } else {          Toast.warning(resp.message);        }      });    },<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**已报名的才可播放收费视频**</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.会员报名课程功能开发，已报名的才可播放收费视频</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 修改detail.vue</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  /**</span><br><span class="line">   * 播放视频</span><br><span class="line">   * @param section</span><br><span class="line">   */</span><br><span class="line">  play(section) &#123;</span><br><span class="line">    let _this = this;</span><br><span class="line">    if (section.charge === _this.SECTION_CHARGE.CHARGE.key ) &#123;</span><br><span class="line">  ////////////////////////////////////////////////////////////</span><br><span class="line">      let loginMember = Tool.getLoginMember();</span><br><span class="line">      if (Tool.isEmpty(loginMember)) &#123;</span><br><span class="line">  ///////////////////////////////////////////////////////////</span><br><span class="line">      Toast.warning(&quot;请先登录&quot;);</span><br><span class="line">      return;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">  //////////////////////////////////////////////////////////</span><br><span class="line">        if (Tool.isEmpty(_this.memberCourse)) &#123;</span><br><span class="line">          Toast.warning(&quot;请先报名&quot;);</span><br><span class="line">          return;</span><br><span class="line">        &#125;</span><br><span class="line">  //////////////////////////////////////////////////////////</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    _this.$refs.modalPlayer.playVod(section.vod);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><strong>进入课程详情页面时显示加载报名信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.会员报名课程功能开发，加载完课程信后，如果一登陆，则加载报名信息</span><br></pre></td></tr></table></figure><ul><li><p>现在刷新页面会导致前端报名信息丢失</p></li><li><p>首先修改detail.vue</p></li><li><pre><code>//////////////////////////////////////////再findCourse中加入//获取报名信息_this.getEnroll();///////////////////////////////////////////写方法  /**     * 获取报名     */    getEnroll() &#123;      let _this = this;      let loginMember = Tool.getLoginMember();      if (Tool.isEmpty(loginMember)) &#123;        console.log(&quot;未登录&quot;);        return;      &#125;      _this.$ajax.post(process.env.VUE_APP_SERVER + &#39;/business/web/member-course/get-enroll&#39;, &#123;        courseId: _this.course.id,        memberId: loginMember.id      &#125;).then((response)=&gt;&#123;        let resp = response.data;        if (resp.success) &#123;          _this.memberCourse = resp.content || &#123;&#125;;        &#125;      &#125;);    &#125;,<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后我们修改web的MemberCourseController，增加</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  /**</span><br><span class="line">   * 保存，id有值时更新，无值时新增</span><br><span class="line">   */</span><br><span class="line">  @PostMapping(&quot;/get-enroll&quot;)</span><br><span class="line">  public ResponseDto getEnroll(@RequestBody MemberCourseDto memberCourseDto) &#123;</span><br><span class="line">      ResponseDto responseDto = new ResponseDto();</span><br><span class="line">      memberCourseDto = memberCourseService.getEnroll(memberCourseDto);</span><br><span class="line">      responseDto.setContent(memberCourseDto);</span><br><span class="line">      return responseDto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>最后修改MemberCourseService</p></li><li><p>&#96;&#96;&#96;<br>&#x2F;**</p><ul><li>获取报名信息</li></ul><p> *&#x2F;<br>public MemberCourseDto getEnroll(MemberCourseDto memberCourseDto) {<br>    MemberCourse memberCourse &#x3D; this.select(memberCourseDto.getMemberId(), memberCourseDto.getCourseId());<br>    return CopyUtil.copy(memberCourse, MemberCourseDto.class);<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 第14章 项目优化</span><br><span class="line"></span><br><span class="line">至此整个项目的主框架和主业务都开发完成了，这一章将对项目做一些优化，比如控台报表显示，spring boot多环境配置，缓存的使用等。</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">## 14-1 项目初始化</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.增加readme.md，添加项目介绍<br>2.修改初始化sql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- readme.md是用来写一些项目描述信息，git远程仓库可以自动识别该页面，并显示到仓库首页下方</span><br><span class="line">- 有一个现象：sql初始化后，登录控台时，日志显示登录成功，但是页面一直在登录页面，没有跳到欢迎页面</span><br><span class="line">- 修改sql，增加一个00欢迎，并且将0101和0102和0103的page的开头/去掉![image-20220331094831861](https://s2.loli.net/2022/03/31/zUDHXLEWaTMkGdI.png)</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line"># 角色-资源关联表增加这一行</span><br><span class="line">insert into `role_resource` values (&#x27;00000009&#x27;,&#x27;00000000&#x27;,&#x27;00&#x27;);</span><br></pre></td></tr></table></figure><ul><li><p>还有一个现象：点击大章时，跳到登录页面。原因是：大章显示不显示再侧边栏，但是它也是一个单独的页面，也有路由，所以需要配置资源，同样还有小节页面，课程内容页面</p></li><li><p>&#96;&#96;&#96;json<br>,{<br>  “id”:”0206”,”name”:”大章管理”,”page”:”business&#x2F;chapter”,<br>  “children”:[<br>{“id”:”020601”,”name”:”增删改查”,”request”:[“&#x2F;business&#x2F;admin&#x2F;chapter”]}<br>  ]<br>},{<br>  “id”:”0207”,”name”:”小节管理”,”page”:”business&#x2F;section”,<br>  “children”:[<br>{“id”:”020701”,”name”:”增删改查”,”request”:[“&#x2F;business&#x2F;admin&#x2F;section”]}<br>  ]<br>},{<br>  “id”:”0208”,”name”:”内容管理”,”page”:”business&#x2F;content”,<br>  “children”:[<br>{“id”:”020801”,”name”:”增删改查”,”request”:[“&#x2F;business&#x2F;admin&#x2F;course”,”&#x2F;business&#x2F;admin&#x2F;course-content-file”]}<br>  ]<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 14-2 控台欢迎页开发</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.控台欢迎页面开发，增加顶部统计</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 修改welcome.vue</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;space-12&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;col-xs-12&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;text-center&quot;&gt;</span><br><span class="line">          &lt;span class=&quot;btn btn-app btn-sm btn-light no-hover&quot;&gt;</span><br><span class="line">              &lt;span class=&quot;line-height-1 bigger-170 blue&quot;&gt; 518 &lt;/span&gt;</span><br><span class="line">              &lt;br&gt;</span><br><span class="line">              &lt;span class=&quot;line-height-1 smaller-90&quot;&gt; 课程 &lt;/span&gt;</span><br><span class="line">          &lt;/span&gt;</span><br><span class="line">          &lt;span class=&quot;btn btn-app btn-sm btn-yellow no-hover&quot;&gt;</span><br><span class="line">              &lt;span class=&quot;line-height-1 bigger-170&quot;&gt; 6,321 &lt;/span&gt;</span><br><span class="line">  </span><br><span class="line">              &lt;br&gt;</span><br><span class="line">              &lt;span class=&quot;line-height-1 smaller-90&quot;&gt; 大章 &lt;/span&gt;</span><br><span class="line">          &lt;/span&gt;</span><br><span class="line">  </span><br><span class="line">          &lt;span class=&quot;btn btn-app btn-sm btn-pink no-hover&quot;&gt;</span><br><span class="line">              &lt;span class=&quot;line-height-1 bigger-170&quot;&gt; 4,182 &lt;/span&gt;</span><br><span class="line">  </span><br><span class="line">              &lt;br&gt;</span><br><span class="line">              &lt;span class=&quot;line-height-1 smaller-90&quot;&gt; 小节 &lt;/span&gt;</span><br><span class="line">          &lt;/span&gt;</span><br><span class="line">  </span><br><span class="line">          &lt;span class=&quot;btn btn-app btn-sm btn-success no-hover&quot;&gt;</span><br><span class="line">              &lt;span class=&quot;line-height-1 bigger-170&quot;&gt; 5.23 &lt;/span&gt;</span><br><span class="line">  </span><br><span class="line">              &lt;br&gt;</span><br><span class="line">              &lt;span class=&quot;line-height-1 smaller-90&quot;&gt; 会员(万) &lt;/span&gt;</span><br><span class="line">          &lt;/span&gt;</span><br><span class="line">  </span><br><span class="line">          &lt;span class=&quot;btn btn-app btn-sm btn-primary no-hover&quot;&gt;</span><br><span class="line">              &lt;span class=&quot;line-height-1 bigger-170&quot;&gt; 12.76 &lt;/span&gt;</span><br><span class="line">  </span><br><span class="line">              &lt;br&gt;</span><br><span class="line">              &lt;span class=&quot;line-height-1 smaller-90&quot;&gt; 报名(万) &lt;/span&gt;</span><br><span class="line">          &lt;/span&gt;</span><br><span class="line">  </span><br><span class="line">          &lt;span class=&quot;btn btn-app btn-sm btn-grey no-hover&quot;&gt;</span><br><span class="line">              &lt;span class=&quot;line-height-1 bigger-170&quot;&gt; 32.96 &lt;/span&gt;</span><br><span class="line">  </span><br><span class="line">              &lt;br&gt;</span><br><span class="line">              &lt;span class=&quot;line-height-1 smaller-90&quot;&gt; 评论(万) &lt;/span&gt;</span><br><span class="line">          &lt;/span&gt;</span><br><span class="line">  </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">        &lt;div class=&quot;space-12&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.控台欢迎页面开发，增加了新增评论，新增注册会员，课程报名统计显示</span><br></pre></td></tr></table></figure><ul><li><p>问题：代码时两块分别占满12格的div，正常情况下是上下显示的，但是现在显示出来是有重叠部分。布局显示错乱，大概率是多个css样式冲突了，不同的css文件里起了相同的名字</p></li><li><p>我们经常通过在element窗口修改html或css，来调试显示效果，之后将最终的html或css样式复制到项目代码里</p></li><li><p>在上面修改之后增加</p></li><li><p>&#96;&#96;&#96;vue</p>  <div class="hr hr2 hr-double"></div>  <div class="space-12"></div></div><div class="col-sm-12 infobox-container">  <div class="infobox infobox-green">    <div class="infobox-icon">      <i class="ace-icon fa fa-comments"></i>    </div><pre><code>&lt;div class=&quot;infobox-data&quot;&gt;  &lt;span class=&quot;infobox-data-number&quot;&gt;332&lt;/span&gt;  &lt;div class=&quot;infobox-content&quot;&gt;新增评论&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;stat stat-success&quot;&gt;8%&lt;/div&gt;</code></pre>  </div>  <div class="infobox infobox-blue">    <div class="infobox-icon">      <i class="ace-icon fa fa-twitter"></i>    </div><pre><code>&lt;div class=&quot;infobox-data&quot;&gt;  &lt;span class=&quot;infobox-data-number&quot;&gt;58&lt;/span&gt;  &lt;div class=&quot;infobox-content&quot;&gt;新增注册会员&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;badge badge-success&quot;&gt;  +10%  &lt;i class=&quot;ace-icon fa fa-arrow-up&quot;&gt;&lt;/i&gt;&lt;/div&gt;</code></pre>  </div>  <div class="infobox infobox-pink">    <div class="infobox-icon">      <i class="ace-icon fa fa-shopping-cart"></i>    </div><pre><code>&lt;div class=&quot;infobox-data&quot;&gt;  &lt;span class=&quot;infobox-data-number&quot;&gt;108&lt;/span&gt;  &lt;div class=&quot;infobox-content&quot;&gt;课程报名&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;stat stat-important&quot;&gt;4%&lt;/div&gt;</code></pre>  </div>  <div class="space-12"></div>  <div class="hr hr2 hr-double"></div>  <div class="space-12"></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>3.控台欢迎页面开发，增加销售量报表统计显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 图表可以使用jqery插件，这里ace模板用到的jquery.flot插件</span><br><span class="line"></span><br><span class="line">- 在上面之后增加</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;div class=&quot;col-sm-12&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;widget-box transparent&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;widget-header widget-header-flat&quot;&gt;</span><br><span class="line">        &lt;h4 class=&quot;widget-title lighter&quot;&gt;</span><br><span class="line">          &lt;i class=&quot;ace-icon fa fa-signal&quot;&gt;&lt;/i&gt;</span><br><span class="line">          销售量</span><br><span class="line">        &lt;/h4&gt;</span><br><span class="line">  </span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">      &lt;div class=&quot;widget-body&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;widget-main padding-4&quot;&gt;</span><br><span class="line">          &lt;div id=&quot;sales-charts&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;&lt;!-- /.widget-main --&gt;</span><br><span class="line">      &lt;/div&gt;&lt;!-- /.widget-body --&gt;</span><br><span class="line">    &lt;/div&gt;&lt;!-- /.widget-box --&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;div class=&quot;space-12&quot;&gt;&lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;div class=&quot;hr hr2 hr-double&quot;&gt;&lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;div class=&quot;space-12&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;&lt;!-- /.col --&gt;</span><br><span class="line">  ////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class="line">  mounted:function () &#123;</span><br><span class="line">      let _this = this;</span><br><span class="line">      _this.drawSaleChart();</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      drawSaleChart() &#123;</span><br><span class="line">        // 生成随机两组数据</span><br><span class="line">        let d1 = [];</span><br><span class="line">        for (let i = 0; i &lt; 30; i += 1) &#123;</span><br><span class="line">          d1.push([i + 1, 2000 + Math.floor((Math.random()*100)+1)]);</span><br><span class="line">        &#125;</span><br><span class="line">        let d2 = [];</span><br><span class="line">        for (let i = 0; i &lt; 30; i += 1) &#123;</span><br><span class="line">          d2.push([i + 1, 1900 + Math.floor((Math.random()*100)+1)]);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        let sales_charts = $(&#x27;#sales-charts&#x27;).css(&#123;&#x27;width&#x27;:&#x27;100%&#x27; , &#x27;height&#x27;:&#x27;220px&#x27;&#125;);</span><br><span class="line">        $.plot(&quot;#sales-charts&quot;, [</span><br><span class="line">          &#123; label: &quot;最近30天&quot;, data: d1 &#125;,</span><br><span class="line">          &#123; label: &quot;上一周期&quot;, data: d2 &#125;,</span><br><span class="line">        ], &#123;</span><br><span class="line">          hoverable: true,</span><br><span class="line">          shadowSize: 0,</span><br><span class="line">          series: &#123;</span><br><span class="line">            lines: &#123; show: true &#125;,</span><br><span class="line">            points: &#123; show: true &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          xaxis: &#123;</span><br><span class="line">            tickLength: 0</span><br><span class="line">          &#125;,</span><br><span class="line">          yaxis: &#123;</span><br><span class="line">            tickLength: 0</span><br><span class="line">          &#125;,</span><br><span class="line">          grid: &#123;</span><br><span class="line">            backgroundColor: &#123; colors: [ &quot;#fff&quot;, &quot;#fff&quot; ] &#125;,</span><br><span class="line">            borderWidth: 1,</span><br><span class="line">            borderColor:&#x27;#555&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5.控台欢迎页面开发，增加课程销售排名和分类销售排名统计显示</span><br></pre></td></tr></table></figure><ul><li><p>接着上面的修改</p></li><li><p>&#96;&#96;&#96;vue</p><div class="col-sm-6">  <div class="widget-box transparent">    <div class="widget-header widget-header-flat">      <h4 class="widget-title lighter">        <i class="ace-icon fa fa-star orange"></i>        课程销售排名      </h4><pre><code>&lt;/div&gt;&lt;div class=&quot;widget-body&quot;&gt;  &lt;div class=&quot;widget-main no-padding&quot;&gt;    &lt;table class=&quot;table table-bordered table-striped&quot;&gt;      &lt;thead class=&quot;thin-border-bottom&quot;&gt;      &lt;tr&gt;        &lt;th&gt;          &lt;i class=&quot;ace-icon fa fa-caret-right blue&quot;&gt;&lt;/i&gt;课程名称        &lt;/th&gt;        &lt;th&gt;          &lt;i class=&quot;ace-icon fa fa-caret-right blue&quot;&gt;&lt;/i&gt;价格        &lt;/th&gt;        &lt;th&gt;          &lt;i class=&quot;ace-icon fa fa-caret-right blue&quot;&gt;&lt;/i&gt;购买数        &lt;/th&gt;      &lt;/tr&gt;      &lt;/thead&gt;      &lt;tbody&gt;      &lt;tr&gt;        &lt;td&gt;开发工具IDEA从入门到爱不释手&lt;/td&gt;        &lt;td&gt;          &lt;b class=&quot;green&quot;&gt;￥299.00&lt;/b&gt;        &lt;/td&gt;        &lt;td&gt;          &lt;span class=&quot;label label-warning arrowed arrowed-right&quot;&gt;5,132&lt;/span&gt;        &lt;/td&gt;      &lt;/tr&gt;      &lt;tr&gt;        &lt;td&gt;开发工具IDEA从入门到爱不释手&lt;/td&gt;        &lt;td&gt;          &lt;b class=&quot;red&quot;&gt;￥388.00&lt;/b&gt;        &lt;/td&gt;        &lt;td&gt;          &lt;span class=&quot;label label-warning arrowed arrowed-right&quot;&gt;3,132&lt;/span&gt;        &lt;/td&gt;      &lt;/tr&gt;      &lt;tr&gt;        &lt;td&gt;开发工具IDEA从入门到爱不释手&lt;/td&gt;        &lt;td&gt;          &lt;b class=&quot;green&quot;&gt;￥199.00&lt;/b&gt;        &lt;/td&gt;        &lt;td&gt;          &lt;span class=&quot;label label-warning arrowed arrowed-right&quot;&gt;2,132&lt;/span&gt;        &lt;/td&gt;      &lt;/tr&gt;      &lt;tr&gt;        &lt;td&gt;开发工具IDEA从入门到爱不释手&lt;/td&gt;        &lt;td&gt;          &lt;b class=&quot;green&quot;&gt;￥299.00&lt;/b&gt;        &lt;/td&gt;        &lt;td&gt;          &lt;span class=&quot;label label-success arrowed arrowed-right&quot;&gt;1,654&lt;/span&gt;        &lt;/td&gt;      &lt;/tr&gt;      &lt;tr&gt;        &lt;td&gt;开发工具IDEA从入门到爱不释手&lt;/td&gt;        &lt;td&gt;          &lt;b class=&quot;green&quot;&gt;￥199.00&lt;/b&gt;        &lt;/td&gt;        &lt;td&gt;          &lt;span class=&quot;label label-success arrowed arrowed-right&quot;&gt;1,254&lt;/span&gt;        &lt;/td&gt;      &lt;/tr&gt;      &lt;/tbody&gt;    &lt;/table&gt;  &lt;/div&gt;&lt;!-- /.widget-main --&gt;&lt;/div&gt;&lt;!-- /.widget-body --&gt;</code></pre>  </div><!-- /.widget-box --></div><!-- /.col --><div class="col-sm-6">  <div class="widget-box transparent">    <div class="widget-header widget-header-flat">      <h4 class="widget-title lighter">        <i class="ace-icon fa fa-star orange"></i>        分类销售排名      </h4><pre><code>&lt;/div&gt;&lt;div class=&quot;widget-body&quot;&gt;  &lt;div class=&quot;widget-main&quot;&gt;    &lt;div id=&quot;piechart-placeholder&quot;&gt;&lt;/div&gt;  &lt;/div&gt;&lt;!-- /.widget-main --&gt;&lt;/div&gt;&lt;!-- /.widget-body --&gt;</code></pre>  </div><!-- /.widget-box --></div><!-- /.col -->////////////////////////////////////////////////////////////////////////////mounted增加一个 _this.drawPieChart(); //////////////////////////////////////////////////////////////////////////methods增加一个     drawPieChart() {      let placeholder = $('#piechart-placeholder').css({'width':'90%' , 'min-height':'180px'});      let data = [        { label: "Java",  data: 38.7, color: "#68BC31"},        { label: "Python",  data: 24.5, color: "#2091CF"},        { label: "Android",  data: 18.6, color: "#DA5430"},        { label: "其它",  data: 10, color: "#FEE074"},      ];      $.plot(placeholder, data, {        series: {          pie: {            show: true,            tilt:0.8,            highlight: {              opacity: 0.25            },            stroke: {              color: '#fff',              width: 2            },            startAngle: 2          }        },        legend: {          show: true,          position: "ne",          labelBoxBorderColor: null,          margin:[-30,15]        }        ,        grid: {          hoverable: true,          clickable: true        }      })    }<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 其实还需要引入图标的插件，但是我们之前就把所有的插件都复制过来了，所以这里不修改</span><br><span class="line"></span><br><span class="line">## 14-3 前后端多环境配置</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1，springboot多环境配置<br>使用application-xxx.propertie来设置不同环境的配置，xxx表示环境名称<br>公共模块要打包，不能带spring-boot-maven-plugin插件<br>springboot.jar包启动命令：java -jar aaa.jar –spring.profiles.active&#x3D;xxx，xxx表示环境名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 常见的环境有以下这些：开发、测试、集成、联调、准备生成、灰度、生产</span><br><span class="line">- 问题：发布生产时，端口号和本地开发的不一样。需要根据不同的环境配置不同的端口，我们以system为例</span><br><span class="line">- application-xxx.properties，xxx就是环境名，可自定义，可以叫dev也可以叫development</span><br><span class="line">- 我们将system的application.properties复制一份重命名为application-dev.properties，里面就放要修改的比如端口号server.port=19001，怎么让他生效呢，我们只需要如下图所示，在有效配置文件写上dev即可![image-20220331103702681](https://s2.loli.net/2022/03/31/d682hCE7KrzRLYq.png)</span><br><span class="line"></span><br><span class="line">- 通过在启动命令里增加spring.profiles.active的变量值，达到支持多环境的效果</span><br><span class="line"></span><br><span class="line">- 问题：本地和生产的数据库配置肯定是不一样的，ip、端口、用户名、密码等都不一样。需要根据不同的环境配置不同的数据库连接。数据库配置是放到server模块的，然后操作跟上面一样。</span><br><span class="line"></span><br><span class="line">- 问题：项目怎么打包？</span><br><span class="line"></span><br><span class="line">- 在父模块中增加了spring-boot-maven-plugin，那么打包时，所以子模块都会按这个插件来打包，但是server模块并不需要启动，不需要这个插件。</span><br><span class="line"></span><br><span class="line">- 我们只需要将所有需要启动的模块，都加上spring-boot-maven-plugin插件,同时将course根目录的这段插件删除</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  &lt;build&gt;</span><br><span class="line">     &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">     &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br></pre></td></tr></table></figure><ul><li><p>然后如图所示instalinstall下，就是打包了<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/31/rImFp9EAxtUKJZ2.png"                      alt="image-20220331105728732"                ></p></li><li><p>那么我们打包后的文件去了哪？先找到maven的本地仓库，然后就可以在文件夹中看到了<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/03/31/h3w5vrJC4fzq1A2.png"                      alt="image-20220331105929614"                ></p></li><li><p>问题：打好的jar包咋用？</p></li><li><p>我们在命令行进入想使用的jar包的文件夹target，然后输入java -jar xxx.jar；如果想在生产上使用java -jar xxx.jar –spring.profiles.active&#x3D;dev</p></li></ul><h2 id="14-4-前后端缓存的使用"><a href="#14-4-前后端缓存的使用" class="headerlink" title="14-4 前后端缓存的使用"></a>14-4 前后端缓存的使用</h2><ul><li><p>高频查询，低频修改的数据，特别适合使用缓存，我们以web的index.vue为例</p></li><li><p>&#96;&#96;&#96;vue<br>&#x2F;**</p><ul><li>查询新上好课</li></ul><p> *&#x2F;<br>listNew() {<br>  let _this &#x3D; this;<br>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;<br>  &#x2F;&#x2F; 新上好课不经常变，又经常被访问，适合用缓存<br>  &#x2F;&#x2F; 判断是否有缓存<br>  let news &#x3D; SessionStorage.get(“news”);<br>  if (!Tool.isEmpty(news)) {<br>    _this.news &#x3D; news;<br>    return;<br>  }<br>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;<br>  _this.$ajax.get(process.env.VUE_APP_SERVER + ‘&#x2F;business&#x2F;web&#x2F;course&#x2F;list-new’).then((response)&#x3D;&gt;{<br>    console.log(“查询新上好课结果：”, response);<br>    let resp &#x3D; response.data;<br>    if (resp.success) {<br>      _this.news &#x3D; resp.content;<br>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;<br>      &#x2F;&#x2F; 保存到缓存<br>      SessionStorage.set(“news”, _this.news);<br>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;<br>    }<br>  }).catch((response)&#x3D;&gt;{<br>    console.log(“error：”, response);<br>  })<br>},</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 控台管理的缓存使用思路：可以使用LocalStorags最大程度的减少请求，配合主动清除缓存来处理过期数据</span><br><span class="line">- 主动清除缓存来处理过期数据：在右上角菜单中增加【清除分类缓存】【清楚除资源缓存】或【清除全部缓存】，点击的时候，清除相应的缓存。</span><br><span class="line"></span><br><span class="line"># 第15章 课程总结</span><br><span class="line"></span><br><span class="line">本章将带大家回顾总结课程重点难点</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">**环境的搭建**</span><br><span class="line"></span><br><span class="line">**代码生成器**</span><br><span class="line"></span><br><span class="line">**文件上传和视频播放**</span><br><span class="line"></span><br><span class="line">**通用权限设计**</span><br><span class="line"></span><br><span class="line"># 第16章 项目功能升级</span><br><span class="line"></span><br><span class="line">本章是对课程做的升级，核心是对部分功能升级优化，比如优化验证码的清晰度，优化登录token超时的问题，关闭播放器模态框时停止播放，还会分享学习Vue事件总线、Vue新增属性的数据绑定等新的技能。</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">## 16-1 已提交的代码讲解</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.将gateway中的路由配置改为IP，用lb:&#x2F;&#x2F;时，有时候会有延迟，需要等一会才能访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 后续介绍生产发布时，会将eureak换成nacos，既是注册中心，又是配置中心，解决不同环境使用不同配置。开发环境用ip.port，生产环境用lb。修改gateway的application.properties</span><br><span class="line"></span><br><span class="line">- ```properties</span><br><span class="line">  spring.cloud.gateway.routes[1].uri=http://192.168.0.105:9002</span><br><span class="line">  #spring.cloud.gateway.routes[1].uri=lb://business</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.BUG修复，文件上传改为OSS后，文件检查check方法中，应该拼上OSS地址</span><br></pre></td></tr></table></figure><ul><li><p>我们修改UploadController</p></li><li><p>&#96;&#96;&#96;<br>@Value(“${oss.domain}”)<br>private String OSS_DOMAIN;<br>&#x2F;&#x2F;在check方法中使用OSS_DOMAIN<br>if (StringUtils.isEmpty(fileDto.getVod())){<br>fileDto.setPath(OSS_DOMAIN+fileDto.getPath());<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>3.修改redis地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 遇到的问题：把redis地址改成了自己的redis，结果存进去后，取不到值。这是因为修改redis地址只改了一个，要两个都改，server和gateway的application.properties</span><br><span class="line"></span><br><span class="line">- ```properties</span><br><span class="line">  spring.redis.host=127.0.0.1</span><br><span class="line">  spring.redis.port=6379</span><br><span class="line">  spring.redis.password=Redis000</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4.BUG修复：注册时，验证码校验通过后，短信记录未变成已使用</span><br></pre></td></tr></table></figure><ul><li>在SmsService中的validCode方法，自始至终都用的smsDb这个，从数据库里直接取。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5.解决侧边栏收缩按钮不起作用的BUG</span><br></pre></td></tr></table></figure><ul><li><p>window.open是js原生方法，用于打开某个页面，我们修改admin的login.vue的login()方法修改</p></li><li><p>&#96;&#96;&#96;vue<br>&#x2F;&#x2F; _this.$router.push(“&#x2F;welcome”);<br>window.open(“&#x2F;welcome”, “_self”);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 因为我们现在使用的是js原生的跳转，这是admin.vue的这个就可以注释了</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  // $.getScript(&#x27;/ace/assets/js/ace.min.js&#x27;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="16-2-验证码图片清晰度优化"><a href="#16-2-验证码图片清晰度优化" class="headerlink" title="16-2 验证码图片清晰度优化"></a>16-2 验证码图片清晰度优化</h2><ul><li><p>我们在com.course.server.util增加NoWaterRipple.java</p></li><li><p>&#96;&#96;&#96;java<br>package com.course.server.util;</p><p>import com.google.code.kaptcha.GimpyEngine;<br>import com.google.code.kaptcha.util.Configurable;</p><p>import java.awt.*;<br>import java.awt.image.BufferedImage;<br>import java.awt.image.ImageObserver;</p><p>public class NoWaterRipple extends Configurable implements GimpyEngine {<br>  public NoWaterRipple(){}<br><br>  @Override<br>  public BufferedImage getDistortedImage(BufferedImage baseImage) {<br>     &#x2F;&#x2F;NoiseProducer noiseProducer &#x3D; this.getConfig().getNoiseImpl();<br>     BufferedImage distortedImage &#x3D; new BufferedImage(baseImage.getWidth(), baseImage.getHeight(), 2);<br>     Graphics2D graphics &#x3D; (Graphics2D)distortedImage.getGraphics();<br>     &#x2F;&#x2F;RippleFilter rippleFilter &#x3D; new RippleFilter();<br>     &#x2F;&#x2F;rippleFilter.setWaveType(0);<br>     &#x2F;&#x2F;rippleFilter.setXAmplitude(2.6F);<br>     &#x2F;&#x2F;rippleFilter.setYAmplitude(1.7F);<br>     &#x2F;&#x2F;rippleFilter.setXWavelength(15.0F);<br>     &#x2F;&#x2F;rippleFilter.setYWavelength(5.0F);<br>     &#x2F;&#x2F;rippleFilter.setEdgeAction(0);<br>     &#x2F;&#x2F;WaterFilter waterFilter &#x3D; new WaterFilter();<br>     &#x2F;&#x2F;waterFilter.setAmplitude(1.5F);<br>     &#x2F;&#x2F;waterFilter.setPhase(10.0F);<br>     &#x2F;&#x2F;waterFilter.setWavelength(2.0F);<br>     &#x2F;&#x2F;BufferedImage effectImage &#x3D; waterFilter.filter(baseImage, (BufferedImage)null);<br>     &#x2F;&#x2F;effectImage &#x3D; rippleFilter.filter(effectImage, (BufferedImage)null);<br>     graphics.drawImage(baseImage, 0, 0, (Color)null, (ImageObserver)null);<br>     graphics.dispose();<br>     &#x2F;&#x2F;noiseProducer.makeNoise(distortedImage, 0.1F, 0.1F, 0.25F, 0.25F);<br>     &#x2F;&#x2F;noiseProducer.makeNoise(distortedImage, 0.1F, 0.25F, 0.5F, 0.9F);<br>     return distortedImage;<br>  }<br>   }</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后将KaptchaConfig进行修改</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  //properties.setProperty(&quot;kaptcha.obscurificator.impl&quot;, &quot;com.google.code.kaptcha.impl.WaterRipple&quot;);</span><br><span class="line">  properties.setProperty(&quot;kaptcha.obscurificator.impl&quot;, &quot;com.course.server.util.NoWaterRipple&quot;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="16-3-Vue-CLI多环境编译"><a href="#16-3-Vue-CLI多环境编译" class="headerlink" title="16-3 Vue CLI多环境编译"></a>16-3 Vue CLI多环境编译</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.增加配置文件vue.config.js，作用类似于springboot的application.properties，参考文档时cli.vue.js的那部分</span><br><span class="line">2.修改BASE_URL改为相对路径，对应配置publicPath</span><br></pre></td></tr></table></figure><ul><li><p>修改package.json</p></li><li><pre><code class="json">&quot;build-dev&quot;: &quot;vue-cli-service build --mode dev&quot;,&quot;build-prod&quot;: &quot;vue-cli-service build --mode prod&quot;,<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后在npm编译，双击后，就会在admin模块出现dist目录，这就是编译后的结果。但是编译之后会把我们的BASE_URL变成/，这时我们在admin根目录下新增vue.config.js</span><br><span class="line">- ![image-20220331161109192](https://s2.loli.net/2022/03/31/bPmdr4Qs51MH7NT.png)</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  //本地开发使用绝对路径，生产开发使用相对路径</span><br><span class="line">  module.exports = &#123;</span><br><span class="line">    publicPath: process.env.NODE_ENV === &#x27;production&#x27;</span><br><span class="line">        ? &#x27;/&#x27;</span><br><span class="line">        : &#x27;/&#x27;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>要发布的话，就是将dist目录拷贝到服务器上，用nginx，tomcat，nodejs等容器启动</p></li></ul><h2 id="16-4-新增视频时没有触发绑定"><a href="#16-4-新增视频时没有触发绑定" class="headerlink" title="16-4 新增视频时没有触发绑定"></a>16-4 新增视频时没有触发绑定</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.两种方法解决新增讲师头像不能实时预览的问题</span><br></pre></td></tr></table></figure><ul><li><p>新增时，teacher是空对象，初始没有image属性，也就不会有对应的监听操作，所以即使js代码里为image赋值，也不不会渲染到页面上，而编辑时，teacher是从后端返回的，此时所有属性都会有，即使存的是空值。</p></li><li><p>原理大概是vue会为存在的属性生成set，get方法，在方法中做文章，如果初始空对象，没有任何属性，也就不会生成方法。</p></li><li><p>我们有两个方法，第一个就是初始化时就给teacher一个image属性（可以为null），在add方法中修改；方法二就是在afterUpload方法中强制渲染</p></li><li><pre><code class="vue">//新增讲师，上传头像后不能实时预览，解决方法一_this.teacher = &#123;  image:null&#125;;///////////////////////////////////////////////////// 新增讲师，上传头像后不能实时预览，解决方法二_this.$forceUpdate();<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 16-5 关闭播放器模态框时停止播放</span><br><span class="line"></span><br><span class="line">- 问题：关闭模态框时，视频还在播放</span><br><span class="line"></span><br><span class="line">- 正常功能：关闭模态框时，自动停止播放</span><br><span class="line"></span><br><span class="line">- 步骤一：找到关闭模态框的事件![image-20220331170249373](https://s2.loli.net/2022/03/31/5o7C2RhtLfrYGwJ.png)</span><br><span class="line"></span><br><span class="line">- 步骤二：找到视频播放器暂停的方法![image-20220331170502264](https://s2.loli.net/2022/03/31/AjpELvJHBOVFUaW.png)</span><br><span class="line"></span><br><span class="line">- 我们修改player.vue在methods中增加</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  pause() &#123;</span><br><span class="line">    let _this = this;</span><br><span class="line">    _this.aliPlayer.pause();</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后我们修改modal-player.vue，增加如下</p></li><li><pre><code class="vue">mounted() &#123;  let _this = this;  // 当关闭模态框时，暂停播放  $(&#39;#player-modal&#39;).on(&#39;hidden.bs.modal&#39;, function (e) &#123;    _this.$refs.player.pause();  &#125;)&#125;,<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">我们解决：修改fontawesome-cdn地址的问题</span><br></pre></td></tr></table></figure></code></pre></li><li><p>用CDN的好处，就是代码中不用加入各种依赖，只要引入cdn地址就可了并且加载的资源都不占用本地的带宽和流量。缺点就是受人牵制CDN可能失效，所以需要找稳定，当然也有付费的CDN。我们在index.html中重新引入</p></li><li><p>&#96;&#96;&#96;html</p><link href="https://cdn.bootcss.com/font-awesome/5.13.0/css/all.css" rel="stylesheet"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 16-6 登录token超时优化</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.登陆超时时，前端axios拦截器统一处理，跳到登录页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 正确的做法：登录超时时，跳回登录页面</span><br><span class="line"></span><br><span class="line">- 应该想办法统一的拦截超时请求，而不是对每个请求做超时判断</span><br><span class="line"></span><br><span class="line">- 我们修改admin里的main.js。error里加如下</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  axios.interceptors.request.use(function (response)&#123;</span><br><span class="line">    console.log(&quot;返回结果:&quot;,response);</span><br><span class="line">    return response;</span><br><span class="line">  &#125;,error =&gt; &#123;</span><br><span class="line">    console.log(&quot;返回拦截：&quot;, error.response);</span><br><span class="line">    let response = error.response;</span><br><span class="line">    const status = response.status;</span><br><span class="line">    if (status === 401) &#123;</span><br><span class="line">      // 判断状态码是401 跳转到登录</span><br><span class="line">      console.log(&quot;未登录，跳到登录页面&quot;);</span><br><span class="line">      Tool.setLoginUser(null);</span><br><span class="line">      router.push(&#x27;/login&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      data: &#123;</span><br><span class="line">        success: false,</span><br><span class="line">        message: &quot;请重新登录&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li><p>因为在刚才加的错误处理中，最后return时，只构造了success和message，所以这里的resp.content就是null，后面再加一个.list就会报错。这是我们修改user.vue，再list方法中加一个判断</p></li><li><p>&#96;&#96;&#96;vue<br>if (resp.success) {<br>  _this.users &#x3D; resp.content.list;<br>  _this.$refs.pagination.render(page, resp.content.total);<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>1.gateway每次登录验证成功，刷新登录token超时时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 超时时间指的是空闲时间，如果控台一直有操作，就应该不算超时，就应该刷新token超时时间</span><br><span class="line"></span><br><span class="line">- 只需要再LoginAdminGatewayFilter中加一行</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  LOG.info(&quot;已登录:&#123;&#125;&quot;,object);</span><br><span class="line">  // 增加权限校验，gateway里没有LoginUserDto，所以全部用JSON操作</span><br><span class="line">  LOG.info(&quot;接口权限校验，请求地址：&#123;&#125;&quot;, path);</span><br><span class="line">  boolean exist = false;</span><br><span class="line">  JSONObject loginUserDto = JSON.parseObject(String.valueOf(object));</span><br><span class="line">  /////////////////////////////////////////////////////////////////////////下面这一行</span><br><span class="line">  redisTemplate.opsForValue().set(token, JSON.toJSONString(loginUserDto), 3600,  TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><h2 id="16-7-Vue事件总线使用案例"><a href="#16-7-Vue事件总线使用案例" class="headerlink" title="16-7 Vue事件总线使用案例"></a>16-7 Vue事件总线使用案例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.增加事件总线，用于两个毫无关系的组件之间触发事件，代码不好跟踪，尽量少用</span><br><span class="line">2.前端调试可以要打断点的地方增一行：debugger</span><br></pre></td></tr></table></figure><ul><li><p>实现功能：点击播放小节视频时，如果需要登录，则直接弹出登录窗口</p></li><li><p>如何实现两个毫无关系的组件之间的方法调用？使用事件总线</p></li><li><p>功能第一步：定义一个全局的事件总线</p></li><li><p>首先在web的main.js添加</p></li><li><pre><code class="js">//事件总线EventBusVue.prototype.$event = new Vue();<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 事件总线的使用分为两步，1发送事件，2监听事件</span><br><span class="line"></span><br><span class="line">- 事件总线是全局的，所有组件都可以往总线里发送个事件，所有的组件都可以监听里面的事件。就像一根通往干家万户的电线一样。</span><br><span class="line"></span><br><span class="line">- 功能实现第二步：播放方法里，发送一个打开登录窗口事件，使用$emit触发一个事件，事件名称可自定义。</span><br><span class="line"></span><br><span class="line">- 我们在detail.vue的play方法中的判断是否是会员里添加</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  // Toast.warning(&quot;请先登录&quot;);</span><br><span class="line">  // 触发打开登录窗口事件，用到事件总线</span><br><span class="line">  _this.$event.$emit(&quot;openLoginModal&quot;, &quot;111&quot;);</span><br></pre></td></tr></table></figure></code></pre></li><li><p>功能实现第三步：在登陆组件中增加监听打开登录窗口的事件，打开登录窗口事件随时都有可能有，login组件不知道何时来，所以应该初始化的事件就开始监听。使用$on监听事件，监听的事件名称要和$emit的事件名称一致。同时给事件总线传参数。如果要传递多个参数：可以将多个参数变成json对象进行传递。</p></li><li><p>前端调试按巧：在要调试（打断点）的地方，加一行代码：debugger：注意：浏览器需要打开开发者工具（按F12才能生效）</p></li><li><p>我们修改login.vue，在初始化mounted加入如下代码</p></li><li><pre><code>// 监听事件总线，openLoginModal事件_this.$event.$on(&quot;openLoginModal&quot;, function (param) &#123;  console.log(param);  // 前端调试可以使用debugger。  // debugger;  _this.openLoginModal();&#125;)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 事件总线实际上就是空的vue组件</span><br><span class="line"></span><br><span class="line"># 第17章 生产打包与发布</span><br><span class="line"></span><br><span class="line">本章是对课程做的升级，核心是掌握如何将整个项目发布到生产环境，通过外网来访问</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">## 17-1 注册中心&amp;配置中心Nacos</span><br><span class="line"></span><br><span class="line">**注册中心**</span><br><span class="line"></span><br><span class="line">- 使用Nacos和使用Redis，MQ类似，要先下载并启动server端。Java代码中加入client端依赖去连接server端![image-20220401172702652](https://s2.loli.net/2022/04/01/OV2fjurYd4tLw5M.png)</span><br><span class="line"></span><br><span class="line">- 启动就点击如图所示：![image-20220401172826062](https://s2.loli.net/2022/04/01/excyLIQCv4UYfhJ.png)</span><br><span class="line"></span><br><span class="line">- 启动成功就会显示后台地址：![image-20220401211705438](https://s2.loli.net/2022/04/01/g8VqD7FsGjwbfnY.png)</span><br><span class="line"></span><br><span class="line">- 默认账号密码都是nacos</span><br><span class="line"></span><br><span class="line">- type =pom，可以理解为一组依赖，比如有10个Jar，只需要引入一个type=pom的依赖就可以了，不需要引入10个jar包依赖。我们给course的pom添加依赖</span><br><span class="line"></span><br><span class="line">- ```xml</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;2.2.1.RELEASE&lt;/version&gt;</span><br><span class="line">     &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">     &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>将system模块的注册中心，从eureka改为nacos</p></li><li><pre><code class="xml">&lt;!--        &lt;dependency&gt;--&gt;&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;&lt;!--            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;--&gt;&lt;!--        &lt;/dependency&gt;--&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;        &lt;/dependency&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 也要修改system的配置文件</span><br><span class="line"></span><br><span class="line">- ```properties</span><br><span class="line">  #eureka.client.service-url.defaultZone=http://localhost:8761/eureka/</span><br><span class="line">  spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后把system启动类的注释换成@EnableDiscoveryClient</p></li></ul><h2 id="17-2-注册中心-amp-配置中心Nacos2"><a href="#17-2-注册中心-amp-配置中心Nacos2" class="headerlink" title="17-2 注册中心&amp;配置中心Nacos2"></a>17-2 注册中心&amp;配置中心Nacos2</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.system连接nacos配置中心</span><br></pre></td></tr></table></figure><ul><li><p>因为将key写在源码里，容易泄露掉，所以这时候就需要一个配置中心，将特殊的配置梵高配置中心，而不是放到源码里</p></li><li><p>对于公司来说，开发人员能够看到所有生产的数据库地址、用户名、密码，是不安全的，为了避免程序员删库跑路，需要将生成配置放到配置中心，只有有权限的人才能登录配置中心修改配置。怎么配置的，看nacos文档。</p></li><li><p>下面我们新建一个配置<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/02/zQRw64xJhGK5Pi9.png"                      alt="image-20220402092636545"                ></p></li><li><p>客户端的使用需要增加一个依赖，哪里需要就在哪个pom.xml增加依赖</p></li><li><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;&lt;/dependency&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 官方使用是使用了applicationContext，我们可以跟正常使用application.properties的写法一样，用@Value注解</span><br><span class="line"></span><br><span class="line">- 在这之前， **必须使用 bootstrap.properties 配置文件来配置Nacos Server 地址**，Spring Boot中有两个上下文，一种是bootstrap，另一种是spplication，bootstrap是应用程序的父上下文，bootstrap的优先级高于application。bootstrap主要用于从额外的资源中加载配置文件。我们在system的resources中新建配置文件bootstrap.properties</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  spring.cloud.nacos.config.server-addr=127.0.0.1:8848</span><br></pre></td></tr></table></figure></code></pre></li><li><p>@Value注解需要记住，用法：@Value(“${xxx}”)，也可以使用带默认值的写法，比如@Value(“${system.test:TEST}”),当没有写system.test配置项时，就用”TEST”</p></li><li><p>接下来写一个测试请求TestController，用来读取配置中心岗配置好的system.test的值</p></li><li><p>&#96;&#96;&#96;java<br>package com.course.system.controller;</p><p>import com.course.server.dto.ResponseDto;<br>import org.springframework.beans.factory.annotation.Value;<br>import org.springframework.cloud.context.config.annotation.RefreshScope;<br>import org.springframework.web.bind.annotation.GetMapping;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RestController;</p><p>@RestController<br>@RequestMapping(“&#x2F;test”)<br>public class TestController {</p><pre><code>@Value(&quot;$&#123;system.test&#125;&quot;)private String systemTest;@GetMapping(&quot;/list&quot;)public ResponseDto list() &#123;    ResponseDto responseDto = new ResponseDto();    responseDto.setContent(systemTest);    return responseDto;&#125;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 实现功能：动态刷新配置。例如一些告警阈值配置，需要将阈值调低，立即生效，且不需要重启服务器</span><br><span class="line"></span><br><span class="line">- 方法一：客户端主动刷新：每30s会获取一次发生变化的配置值</span><br><span class="line"></span><br><span class="line">- 方法二：客户端被动监听：服务端有值发生变化时就主动告诉客户端拉取一次最新的值。两种方法同时存在，互补。防止某一方式因线程卡住等问题失效</span><br><span class="line"></span><br><span class="line">- 我们现在代码监听到了配置值发生变化，但是没有实时反应到程序的结果中.我们怎么做呢？就是在TestController增加一个注解@RefreshScope</span><br><span class="line"></span><br><span class="line">## 17-3 阿里云部署方案介绍</span><br><span class="line"></span><br><span class="line">- 首先RDS购买和配置，阿里云提供了musql、oracle等数据库服务，并且还有各种单机、集群方案，开箱即用，省去了我们大量的运维工作。</span><br><span class="line">- 接下来要初始化我们数据库，要在购买好的RDS上新那建项目实例，并执行初始化脚本。一个RDS可以创建多个实例，如果有多个学习项目，只需要购买一次RDS就可以了，减少学习成本</span><br><span class="line">- 接下来购买和配置ECS（就是一台虚拟机，可以选择windows或者linux，在其上安装各种应用程序）</span><br><span class="line">- 接下来安装SecureCRT(SecureCRT是ssh工具，主要用来远程执行命令，方便我们直接在本</span><br><span class="line">  地电脑运行ECS服务器的命令。程序员最常用来看生产日志。)和WinSCP（是sftp工具，用来传文件到RDS，比如把打包好的源码上传到服务器上）。之前我用的是Xftp和Xshell</span><br><span class="line">- 然后是JDK的安装和配置</span><br><span class="line">- 然后是Nacos安装和启动</span><br><span class="line">- 然后是Nginx安装与配置（前端VueCLI编译打包后，使用Nginx启动，也可以使用Tomcat,Apache、Nodejs等容器来启动）</span><br><span class="line">- 然后是前后端模块打包与发布</span><br><span class="line">- 最后就是域名配置</span><br><span class="line"></span><br><span class="line">## 17-4 RDS购买与配置</span><br><span class="line"></span><br><span class="line">- 这个页面点击立即购买，选择自己想要的![image-20220403102137659](https://s2.loli.net/2022/04/03/Z2xV4z5Kaqgfvty.png)</span><br><span class="line"></span><br><span class="line">- 专有网络，可以理解为搭建个虚拟的局域网，把相关的服务器、数据库都放到同一个专有网络。默认就行![image-20220403102310724](https://s2.loli.net/2022/04/03/d1rfeOkGDAWIqn9.png)</span><br><span class="line"></span><br><span class="line">- 购买成功后，我们进入RDS管理里面，设置下白名单![image-20220403102631225](https://s2.loli.net/2022/04/03/FX7UyJ6SlQ9bxYn.png)</span><br><span class="line"></span><br><span class="line">- 白名单用法一：选择内网ECS服务器，只能被某几台ECS使用，安全性能高</span><br><span class="line">- 白名单用法二：填入特定的白名单，为了方便，我选择全部IP都可以访问，填入0.0.0.0/0</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>接下来的内容：创建一个courseimooc的数据库实例，以及对应的用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 依旧是进入到管理里面，申请外网，这样内网地址和外网地址就都有了，在代码中配置数据库地址使用内网地址；通过本机客户端工具连接RDS、维护RDS，使用外网</span><br><span class="line">- 接下来先创建一个账号：![image-20220403103807595](https://s2.loli.net/2022/04/03/IC5lSsmqTw87f6t.png)</span><br><span class="line"></span><br><span class="line">- 然后我们在创建一个数据库![image-20220403103912468](https://s2.loli.net/2022/04/03/RyZscIkmOlbYiAT.png)</span><br><span class="line"></span><br><span class="line">- 然后我们就可以直接在管理的基本信息那登录数据库，登录的时候有个云资源授权，就是子账号（一般用作权限隔离。在企业中，不同的员工有不同的权限，可以通过子账号对员工划分权限）</span><br><span class="line">- 一般公司生产库不能通过外网连接，只能通过RDS控台来访问数据库。并且可以控制开发人员登录后只能查数据，不能修改表结构</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来我们要初始化我们数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 复制下外网地址，然后进入数据库连接，填入以下内容就行了![image-20220403104552636](https://s2.loli.net/2022/04/03/wG2PW9xe8qoKszf.png)</span><br><span class="line"></span><br><span class="line">## 17-5 ECS购买与配置</span><br><span class="line"></span><br><span class="line">- 这个页面点击立即购买，选择自己想要的，当选择可用区域我们要选择和数据库一样的可用区域，同样专有网络也要和RDS一样![image-20220403105638267](https://s2.loli.net/2022/04/03/cZNd9znavt1JV5S.png)</span><br><span class="line"></span><br><span class="line">- 突发性能型：会有一个性能基准线，平时低于基准线会累计积分，在高峰期高于基准线时会消耗积分。</span><br><span class="line">- 安全组就是控制外网对ECS的端口访问，及ECS对外的访问。只有勾选的端口才能被外网访问到，这里会自动创建一个安全组，后续在部署应用时，需要再次设置安全组，开放8848，9000等端口。</span><br><span class="line">- 到了系统配置那一步，会设置账号密码，后续的登录ECS需要用到这组用户名和密码</span><br><span class="line">- 配置完之后就可以进入到管理控台了，里面也有ECS的管理，点进去就能看到公网IP和私有IP，复制下公网IP，![](https://s2.loli.net/2022/04/03/mrs7qlYjtSeTJfP.png)</span><br><span class="line"></span><br><span class="line">- 然后我们使用SecureCRT工具，用于登录远程ECS并执行命令。![image-20220403111322097](https://s2.loli.net/2022/04/03/I7q9hWNJmpwnvgZ.png)</span><br><span class="line"></span><br><span class="line">- 作为开发人员需要熟悉一些常用的linux命令，生产部署主要是关于文件、文件夹的操作如cd lI rm tar等。生产运维就是关于进程、CPU、内存，如ps free top等，最常用的是查看日志，如grep tail等</span><br><span class="line"></span><br><span class="line">- WinSCP是sftp工具，用于上传和下载文件![image-20220403111947566](https://s2.loli.net/2022/04/03/whTqtVaOdXPLCEG.png)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">## 17-6 JDK安装与Nacos安装</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在ECS中安装JDK</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 首先在本电脑下载Java8版本，然后移到ECS中，或者直接使用SecureCRT使用wget+下载地址命令下载</span><br><span class="line">- 打文件名的前缀，再按Tab键，可以自动提取整个文件名</span><br><span class="line">- 重命名命令格式就是：mv 原名 现在名</span><br><span class="line">- 解压缩就是：tar -zxvf 文件名</span><br><span class="line">- ll命令是查看现在的文件夹</span><br><span class="line">- 我们配置JDK环境可以使用vim命令，编辑/etc/profile文件，加入JDK环境变量</span><br><span class="line">- 移动到文件最后，输入i，就进入编辑状态，新增下面三行，新增两个变量，JAVA_HOME和CLASSPATH</span><br><span class="line">  第三方应用会用到，例如Tomcat，Nacos,并将/bin目录加到PATH变量中，用于直接执行java，javac等命令</span><br><span class="line">- ![image-20220403145702487](https://s2.loli.net/2022/04/03/rlLhsIioG79f6yY.png)</span><br><span class="line"></span><br><span class="line">- 然后按ESC键，退出编辑状态，再输入“:wg”保存并退出</span><br><span class="line">- 让配置好的变量立即生效，使用source/etc/profile，然后输入java，然后java-version就能识别我们的版本号了</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在ECS中安装Nacos</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 首先把本电脑的nacos移动到ECS</span><br><span class="line">- 进入到nacos目录cd nacos ，cd bin ，ll就能看到本目录下所有的文件，然后就可以输入sh startup.sh运行</span><br><span class="line">- 然后我们可以用ps -ef是查看所有进程如果后面加”|”是管道符，可以在第一个指令的结果集里，再执行第二个指令，例如ps -ef | grep java，就是再第一个结果下查看java</span><br><span class="line">- linux环境启动nacos默认会失败，需要修改下nacos配置，linux的启动脚本配置的启动模式是集群，需要改成单机。</span><br><span class="line">  关于集群部署，有兴趣的可以按官方文档，自己操作下。</span><br><span class="line">- 我们直接使用WinSCP进入到nacos的bin目录，我们编辑两个启动文件，搜索MODE就可以看到window使用的是单机，而linux是集群，我们把单机复制过去</span><br><span class="line">- cluster和standalone是比较常见的单词，需要掌握。像缓存、消息队列等中间件，都会有单机和集群的部署方式。是属于偏架构师方向的知识</span><br><span class="line">- 回到命令窗口按上下键就可以找到之前使用的命令</span><br><span class="line">- curl命令可以用来发送get和post请求。发送get请求时，类似于在浏览器直接输入地址。增加-XPOST参数可</span><br><span class="line">  以用来发送post请求。这里就可以输入curl 127.0.0.1:8848查看是否成功</span><br><span class="line">- 由于之前配置ECS时没有打开8848端口，所以现在还不能访问。我们进入到实例，然后管理，然后本实例安全组，点击配置规则，配置完就能访问了![image-20220403153620154](https://s2.loli.net/2022/04/03/gP58SYTnUamLoz2.png)</span><br><span class="line"></span><br><span class="line">## 17-7 后台模块打包与发布1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本节内容：将4个java应用发布到ECS上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 我们使用course下的install，把其下面的maven项目全部打包。</span><br><span class="line"></span><br><span class="line">- 以system为例，就会在system下面生成一个target里面有system+版本号.jar，我们将这个jar包放到服务器上用java命令运行就行了。如果想这个jar包只显示模块名，我们可以再pom.xml中的&lt;build&gt;下增加</span><br><span class="line"></span><br><span class="line">- ```xml</span><br><span class="line">  &lt;finalName&gt;$&#123;artifactId&#125;&lt;/finalName&gt;</span><br></pre></td></tr></table></figure><ul><li><p>将jar包移动到ECS中，然后使用命令行java -jar jar包名。可能会报错记得配置nacos，和ECS的端口</p></li><li><p>为了安全，所有的后端Java应用，只有gateway允许被外部访问，其它应用都是内部应用，对外隐藏。否则别人通过外网直接system，那么权限控制就没用了。<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/03/ndbhIfQ1jxJZOKe.png"                      alt="image-20220403164414917"                ></p></li><li><p>由于我们到了生产环境，所以我们要修改配置中心，我们来看看server中application数据库连接和我们现在生产的配置RDS哪几个不一样，本机和生产的用户名密码都是courseimooc，所以不用配到配置中心。生产有特殊配置的，需要覆盖代码的配置的，才需要配到配置中。我们只需要将下面这行再nacos进行配置,将localhost换成内网地址</p></li><li><pre><code>spring.datasource.url=jdbc:mysql://localhost:3306/courseimooc?characterEncoding=UTF8&amp;autoReconnect=true<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 如果命令窗口出现中文乱码，只需要设置选项中会话选项里的外观的字符编码为UTF-8，但是这是一次性的，我们要永久解决这个问题，我们就修改配置文件在C:\Users\AppDate\Config\Sessions\Default.ini找到Output Transformer Name改为UTF-8</span><br><span class="line"></span><br><span class="line">## 17-8 后台模块打包与发布2</span><br><span class="line"></span><br><span class="line">- 直接用java命令启动，就会一直占用当前会话窗口，不能执行其他命令。我们使用下面这命令行意思是在后台运行，并且生产日志</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  nohup java -jar jar包名 &gt;/root/logs/名称.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>关闭进程 kill -9 pid</p></li><li><p>可题：SecureCRT一段时间不用的话就会自动断开可通过设置反空闲功能解决</p></li><li><p>解决步骤：点击选项的全局选项的默认会话，里面编辑默认设置，发送字符可以填一个空格<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/03/HUfDCAsFJpyRYxt.png"                      alt="image-20220403191751982"                ></p></li><li><p>命令行输入history就能查看曾经输入的命令</p></li><li><p>用tail命令查看最新日志，tail -200f error.log，查看最新的两百行，此时，会话窗口不能执行其他命令，正在实时等待最新日志，一旦有最新日志，就会实时显示到屏幕</p></li><li><p>用grep命令查找某段日志 ，（grep 未获取 error.log）就会获取包含未获取关键字的日志段。grep -c 10 未获取 error.log这命令就会获取 未获取关键字的上下十行</p></li><li><p>grep通过搜索日志ID，来查看某一次请求完整的日志，方便分析问题，</p></li><li><p>还可以通过搜索某个时间点的上下N行来分析问题，注意如果搜索的关键字包含空格，需要用“”包起来</p></li><li><p>当然不要忘要为business和file增加配置中心，修改数据库连接。注意：到这一步，business和file的代码并没有加配置中心的配置，所以实际上还没有连到配置中心。</p></li></ul><h2 id="17-9-Nginx安装与Vue项目发布"><a href="#17-9-Nginx安装与Vue项目发布" class="headerlink" title="17-9 Nginx安装与Vue项目发布"></a>17-9 Nginx安装与Vue项目发布</h2><ul><li><p>我们发布含有多个Vue项目：一种方法：通过配置不同的二级目录，来访问不同的模块，第二种就是：通过配置不同的域名，来访问不同的模块</p></li><li><p>命令行在线安装yum install xxx</p></li><li><p>我们命令行输入nginx -v就可以查看版本</p></li><li><p>怎么启动nginx呢？只需要输入service ngnix start</p></li><li><p>验证启动成功，就是输入公网ip，里面有东西就是启动成功</p></li><li><p>然后进入我们admin文件夹下的.env.prod就可以将公网ip进行替换了</p></li><li><pre><code>NODE_ENV=developmentVUE_APP_SERVER=公网ip<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后修改vue.config.js</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  module.exports = &#123;</span><br><span class="line">    publicPath: process.env.NODE_ENV === &#x27;production&#x27;</span><br><span class="line">        ? &#x27;/admin/&#x27;</span><br><span class="line">        : &#x27;/&#x27;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>之后就可以打包了</p></li><li><p>之后放到ECS种，配置nginx让他能够读到我们打包的vue，我们可以将自定义的配置放到&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;下，文件名xxx.conf。我们就写一个admin.conf文件<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/03/J48OwefvGrykijb.png"                      alt="image-20220403201646521"                ></p></li><li><p>当访问：47.103.86.218&#x2F;admin&#x2F;时，就会访问到服务器资源：&#x2F;root&#x2F;admin&#x2F;index.html</p></li><li><p>设置完我们需要重启nginx，命令就是nginx -s reload</p></li><li><p>安装完nginx后，会多一个nginx用户，并且默认以nginx用户启动，而admin相关的文件是用root用户上传的，这时nginx用户就没有权限去读admin相关的文件，所以访问时报错403，这时我们就要修改nginx.conf，将user nginx改为user root就行了，但是登录控台进去又报错是，是因为我们之前使用window.open（“&#x2F;welcome”），ip+端口后面的目录都会被去掉，而使用push，虽然也是&#x2F;welcome，但是因为是vue框架的绝对路径，所以会保留baseUrl的配置，即保留&#x2F;admin&#x2F;。这里还原成push写法</p></li><li><p>vue cli有个解决404的方法，就是将我画出的那行复制到admin.conf里<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/03/Vax2NFjDyPYULqE.png"                      alt="image-20220403205800267"                ></p></li><li><p>本节讲的是用二级目录配置会有很多问题</p></li></ul><h2 id="17-10-域名配置1"><a href="#17-10-域名配置1" class="headerlink" title="17-10 域名配置1"></a>17-10 域名配置1</h2><ul><li><p>以域名courseimooc.com为例</p></li><li><p>通过admin.courseimooc.com访问控台</p></li><li><p>通过<a class="link"   href="http://www.courseimooc.com访问web网站/" >www.courseimooc.com访问web网站<i class="fas fa-external-link-alt"></i></a></p></li><li><p>通过server.courseimooc.com来访问路由</p></li><li><p>注意：不是所有的域名都能备案，如果是要长期用的，可以选择.com，.cn等能备案的域名。不能备案的域名不能解析到国内ECS，只能买国外或香港的ECS，网络肯定不如国内的好</p></li><li><p>现在不能备案，但是我们要解析<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/03/sIrlTkwcZSvMDYH.png"                      alt="image-20220403214837963"                ></p></li><li><p>然后我们要更改ECS里的admin.conf，将server_name后面改为admin.courseimooc.com，然后因为2级目录也不需要了，所以location后一个&#x2F;就行了，然后我们刷新不需要&#x2F;admin了，就把try_files的&#x2F;admin去了，图片忘去了。<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/03/8pyhxonHNr6APBK.png"                      alt="image-20220403215010504"                ></p></li><li><p>因为是二级域名了，所以vue.config.js改回去</p></li><li><pre><code class="js">module.exports = &#123;  publicPath: process.env.NODE_ENV === &#39;production&#39;      ? &#39;./&#39;      : &#39;/&#39;&#125;;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 17-11 域名配置2</span><br><span class="line"></span><br></pre></td></tr></table></figure>通过server.courseimooc.com来访问路由<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 当我们进入页面，按F12会看到下面是通过ip和端口来访问的，我们需要将其改为域名![](https://s2.loli.net/2022/04/03/mYTAFcSNuvlhkxR.png)</span><br><span class="line"></span><br><span class="line">- 我们首先依旧是解析域名![image-20220403220224562](https://s2.loli.net/2022/04/03/s7v41zlFUEuyjrM.png)</span><br><span class="line"></span><br><span class="line">- 其次为了掩盖端口，我们要在nginx做文章，我们在nginx的conf.d目录下在新建一个server.conf，他和admin.conf不同在于，它使用了反向代理，反向代理，代理的是服务器，浏览器只知道访问了80端口，并不知道真实的服务端是9000端口。正向代理，代理的是客户端，如VPN，服务端只知道被VPN服务器访阅了，但不知道真实的客户端来自哪里</span><br><span class="line"></span><br><span class="line">- ![image-20220403220340115](https://s2.loli.net/2022/04/03/U4ivPHA3Ygeu9xd.png)</span><br><span class="line"></span><br><span class="line">- 我们修改.env.prod</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  NODE_ENV=development</span><br><span class="line">  VUE_APP_SERVER=http://server.courseimooc.com</span><br></pre></td></tr></table></figure></code></pre></li><li><p>改完这些<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/03/S1MlfiREPF3WKbj.png"                      alt="image-20220403221008771"                ></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过www.courseimooc.com访问web网站</span><br></pre></td></tr></table></figure><ul><li><p>同样需要解析域名</p></li><li><p>修改web的.env.prod</p></li><li><pre><code>NODE_ENV=developmentVUE_APP_SERVER=http://www.imooc.com</code></pre></li><li><p>我们在nginx的conf.d目录下在新建一个web.conf<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/03/tXcaugvhdkpWo79.png"                      alt="image-20220403221634910"                ></p></li><li><p>注意：使用了配置中心后，要把项目中，用到@Value的配置移动到bootstrap.properties，或者配置到nacos中。就是bootstrap.properties和nacos任意一个地方要有配置，以file为例，把这部分移到bootstrap.properties<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/03/IWhKgToRQ5VbDwB.png"                      alt="image-20220403222847138"                ></p><ul><li>在真实项目里，不会用这么暴力的kill-9，一般会搭配一些流量控制的功能，先将流量切断，等待当前所有的线程执行完，确认服务器日志没有再刷了，最后再kill-9</li><li>扩展：本项目演示只用了一台服务器。真实的项目中，一般一个应用放一台服务器，不要把鸡蛋放在一个篮子里。并且每个应用会配置多个节点，防止宕（dang）机</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第1章-配置环境&quot;&gt;&lt;a href=&quot;#第1章-配置环境&quot; class=&quot;headerlink&quot; title=&quot;第1章 配置环境&quot;&gt;&lt;/a&gt;第1章 配置环境&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在Spring官网中点进这个Initializr，配置你想要的。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="完整项目" scheme="http://example.com/tags/%E5%AE%8C%E6%95%B4%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>深度学习 day13深度卷积网络：实例探究</title>
    <link href="http://example.com/2021/08/21/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20day13%E6%B7%B1%E5%BA%A6%E5%8D%B7%E7%A7%AF%E7%BD%91%E7%BB%9C%EF%BC%9A%E5%AE%9E%E4%BE%8B%E6%8E%A2%E7%A9%B6/"/>
    <id>http://example.com/2021/08/21/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20day13%E6%B7%B1%E5%BA%A6%E5%8D%B7%E7%A7%AF%E7%BD%91%E7%BB%9C%EF%BC%9A%E5%AE%9E%E4%BE%8B%E6%8E%A2%E7%A9%B6/</id>
    <published>2021-08-21T12:29:29.000Z</published>
    <updated>2022-04-13T13:02:34.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-为什么要进行实例探究？"><a href="#01-为什么要进行实例探究？" class="headerlink" title="01 为什么要进行实例探究？"></a>01 为什么要进行实例探究？</h1><p>如果有人训练出擅长识别猫狗人的神经网络或者神经网络框架，而你的计算机视觉识别任务是构建一个自动驾驶汽车，你完全可以借鉴别人的神经网络框架来解决自己问题。</p><hr><ul><li>非常有效的神经网络范例：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/bZtxT7Rs2wE6jGF.png"                      alt="image-20210821103041810"                ></p><h1 id="02-经典网络"><a href="#02-经典网络" class="headerlink" title="02 经典网络"></a>02 经典网络</h1><ul><li>LeNet - 5的网络结构：大约有6万个参数</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/hZM7enoY1bFVl6c.png"                      alt="image-20210821113223201"                ></p><ul><li>AlexNet网络结构：大约有6000万个参数，AlexNet表现出色的原因有两个：一是当用于训练图像和数据集时，AlexNet能够处理非常相似的基本构造模块，这些模块往往包含大量的隐藏单元或数据；二是它使用了ReLU激活函数。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/PhfZkMzCrJGv4sE.png"                      alt="image-20210821113235155"                ></p><ul><li>VGG - 16的网络结构：没有那么多超参数，这是一种只需要专注于卷积层的简单网络。16这个数字代表这个网络包含16个卷积层和全连接层，是个很大的网络，总共包含约1.38亿个参数</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/iVJzELp3lbRdrvy.png"                      alt="image-20210821113246142"                ></p><h1 id="03-残差网络"><a href="#03-残差网络" class="headerlink" title="03 残差网络"></a>03 残差网络</h1><p>非常深的网络是很难训练的，因为存在梯度消失和梯度爆炸问题。跳远连接，它可以从某一网络层获取激活，然后迅速反馈给另外一层，甚至是神经网络的更深层，可以用跳远连接构建能够训练深度网络的ResNets。</p><hr><ul><li>ResNets是由残差块构建的。信息流从a[l]到a[l+2]需要经过线性激活-&gt;非线性ReLU激活-&gt;性激活-&gt;非线性ReLU激活这组神经网络的主路径。而在残差网络中有一点变化，我们将a[l]直接向后拷贝到神经网络深层（在线性激活之后，非线性ReLU激活前），这就意味这原来主路经的最后的等式去掉，用另一个ReLU非线性函数来代替。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/uCvAwSXlVozImGH.png"                      alt="image-20210821160810819"                ></p><ul><li>把下面普通网络变成ResNets的方法是加上所有的跳远连接，每两层增加一个捷径构成一个残差块。该图就是5个残差块。我们用一个优化算法来训练普通网络的话，训练误差实际上是先减小后增加，随着深度的增加用优化算法越难训练；但是有ResNets的话训练误差就是不断减小。对于x的激活或者这些中间的激活，能够达到网络的更深层，这种方法能有助于解决梯度消失和梯度爆炸问题。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/BzdwPr294LKUFbO.png"                      alt="image-20210821160844535"                ></p><h1 id="04-残差网络为什么有用？"><a href="#04-残差网络为什么有用？" class="headerlink" title="04 残差网络为什么有用？"></a>04 残差网络为什么有用？</h1><p>通常一个网络深度越深，它在训练集上训练网络的效率会有所减弱</p><hr><ul><li>如果使用L2正则化或权重衰减，那么它会压缩W[l+2]的值，同样对b应用权重衰退也一样。如果W[l+2]和b都为0，那么a[l+2] &#x3D; a[l]，所以给大型神经网络增加两层，无论是把残差块添加到神经网络的中间还是末端位置，都不会影响网络的表现。</li><li>残差网络起作用的主要原因是这些残差块学习恒等函数非常容易，能确定网络性能不会受到影响，甚至有时还会提高效率。</li><li>假设z[l+2]与a[l]具有相同维度，所以ResNets使用了许多相同卷积，使得a[l]的维度等于输出层的维度，因而实现了这个跳远连接，因为同一卷积保留了维度，所以很容易得出这个短连接，并输出这两个相同维度的向量；如果输入和输出有不同维度，假设输入是128维度，输出是256维度，就需要增加一个Ws（256×128），不需要对Ws做任何操作，它是网络通过学习得到的矩阵或参数，是一个固定矩阵，p&#x3D;0，用0填充a[l]，其维度为256。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/Dp8bOi3roFGUjQC.png"                      alt="image-20210821221101843"                ></p><ul><li>图片识别的普通和ResNet神经网络：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/iYR7ZnT2J1u6vxm.png"                      alt="image-20210821222902428"                ></p><ul><li>ResNet类似于其他很多神经网络，也会有很多卷积层，其中偶尔会有池化层或者类似池化层的层，不论这些层是什么类型，都需要调整矩阵Ws的维度。</li></ul><h1 id="05-网络中的网络以及1-×-1卷积"><a href="#05-网络中的网络以及1-×-1卷积" class="headerlink" title="05 网络中的网络以及1 × 1卷积"></a>05 网络中的网络以及1 × 1卷积</h1><ul><li>从图中可以看出对6×6×1的图使用1×1过滤器进行卷积效果不是很好，就是乘一个数；但是对6×6×32的使用1×1的过滤器进行卷积效果更好，具体来说1×1的过滤器的作用是遍历这36个单元格，计算左图中32个数字和过滤器中32个数字的元素智能乘积，然后应用ReLU非线性函数。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/WHA8X3hNvzCQPlp.png"                      alt="image-20210822210203888"                ></p><ul><li>1×1的卷积层实现一些重要功能：它给神经网络添加了一个非线性函数从而减小或保持输入层中的信道数量不变，当然也可以增加信道。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/PvNuAJIB984l6sz.png"                      alt="image-20210822210215346"                ></p><h1 id="06-谷歌-Inception-网络简介"><a href="#06-谷歌-Inception-网络简介" class="headerlink" title="06 谷歌 Inception 网络简介"></a>06 谷歌 Inception 网络简介</h1><p>Inception 网络的作用就是代替你来做决定：构建卷积层时，过滤器的大小或者要不要添加池化层</p><hr><ul><li>Inception 网络的核心内容：</li><li>5×5过滤器在该块中的计算成本：乘法运算的总次数为每个输出值所需的乘法运算次数乘以输出值的个数&#x3D;1.2亿。</li><li>1×1卷积的应用：为了降低计算成本，我们用计算成本除以因子10，将它从1.2亿减小到原来的十分之一</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-为什么要进行实例探究？&quot;&gt;&lt;a href=&quot;#01-为什么要进行实例探究？&quot; class=&quot;headerlink&quot; title=&quot;01 为什么要进行实例探究？&quot;&gt;&lt;/a&gt;01 为什么要进行实例探究？&lt;/h1&gt;&lt;p&gt;如果有人训练出擅长识别猫狗人的神经网络或者神</summary>
      
    
    
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>深度学习 day12卷积神经网络</title>
    <link href="http://example.com/2021/08/20/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20day12%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>http://example.com/2021/08/20/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20day12%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</id>
    <published>2021-08-20T15:42:29.000Z</published>
    <updated>2022-04-13T12:53:23.847Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-计算机视觉"><a href="#01-计算机视觉" class="headerlink" title="01 计算机视觉"></a>01 计算机视觉</h1><p>即使你在计算机视觉方面没有做出成果，希望你可以将所学的知识应用到其他算法和结构</p><hr><ul><li>计算机视觉的一些例子：图片识别（给出一张图片让计算机去分辨出这是一只猫）、目标检测（首先算出有哪些物体，然后用一些技术识别出他们在图片的位置）、图片风格迁移（就是你有一张满意的图片和一张风格图，你可以用神经网络将他们融合在一起，描绘出一张新的图片，整体轮廓来自左边，风格却是右边的）。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/c4AJBsUKf3TyjRw.png"                      alt="image-20210819152546875"                ></p><ul><li>在应用计算机视觉还有一个很大的挑战就是数据的输入可能会非常大，例如像素是1000×1000的，那么输入的数据就是三百万的数据量，你也许会有1000个隐藏单元，而所有的权值W，如果你使用的是标准的全连接网络，矩阵的大小也是（1000，三百万）也就是会有三十亿个参数。在参数量如此之大的情况下难以获取足够的数据来防止过拟合。如果想要也能计算大型图片就可以使用卷积运算。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/l5jndf4eCNRxEoT.png"                      alt="image-20210819152559336"                ></p><h1 id="02-边缘检测示例"><a href="#02-边缘检测示例" class="headerlink" title="02 边缘检测示例"></a>02 边缘检测示例</h1><p>卷积运算是卷积神经网络最基本的组成部分</p><hr><ul><li>给一张图片让电脑检测是什么物体，可能做的第一件事是检测图片中的垂直边缘，也可能想检测水平边缘。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/5AhQHvyPWOkowY1.png"                      alt="image-20210820092344753"                ></p><ul><li>那么如何在图像中检测这些边缘呢？下面是一个6×6的灰度图像，为了检测一个图像的垂直边缘可以构造一个3×3的矩阵（过滤器），卷积运算用*表示，该例中用3×3的过滤器对其进行卷积，输出4×4的矩阵（另一张图片）。4×4的矩阵的元素是将3×3的过滤器覆盖到6×6的灰度图像中，不断地平移得到。不同的语言使用不同的函数代表卷积。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/O78hn4qwLrCFRgB.png"                      alt="image-20210820092737334"                ></p><ul><li>在下面例子中输出图像中间区域的亮处，表示在图像中间有一个很明显的垂直边缘。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/armBpkl1hgHLofX.png"                      alt="image-20210820092445198"                ></p><h1 id="03-更多边缘检测内容"><a href="#03-更多边缘检测内容" class="headerlink" title="03 更多边缘检测内容"></a>03 更多边缘检测内容</h1><ul><li>通过不同的过滤器可以找出垂直或者水平的边缘。之前的图里面30是由10过渡到0得到的，所以就是由亮转暗；之前的 30 翻转成了-30，表明是由暗向亮过渡， 而不是由亮向暗过渡，因为看原图是从0到10，所以是从暗到亮的转化。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/PgaEqUfCLVsIhZv.png"                      alt="image-20210820101755312"                ></p><ul><li>水平边缘过滤器如下：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/i3ETomkwSYQXWe5.png"                      alt="image-20210820102053448"                ></p><ul><li>有多种过滤器：Sobel过滤器（增加了中间一行元素的权重）、Scharr过滤器、还有一种将九个数字都当成参数的思想（已经成为计算机视觉最为有效的思想之一）。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/QwdaMvGLxoAi39r.png"                      alt="image-20210820102114071"                ></p><h1 id="04-Padding"><a href="#04-Padding" class="headerlink" title="04 Padding"></a>04 Padding</h1><p>为了构建深度神经网络，需要学会使用卷积的基本操作Padding</p><hr><ul><li>可以用公式计算为什么输出是4×4，公式为（n-f+1）×（n-f+1），其中n×n代表原图大小，f×f代表过滤器大小。这样的话会有两个缺点：一是每次做卷积操作，你的图像就会缩小，二是那些在角落或者边缘区域的像素点在输出中采用较少，意味着丢掉了图像边缘位置的许多信息。为了解决这些问题，可以在卷积操作之前填充这幅画（沿着图像边缘再填充一层像素），习惯上可以用0来填充，如果p是填充的数量（该例中p&#x3D;1，因为周围都填充了一个像素点），输出就变成了（n+2p-f+1）×（n+2p-f+1）。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/bFtoevKHyMdOlJh.png"                      alt="image-20210820115241942"                ></p><ul><li>填充多少像素通常有两个选择：分别叫Valid卷积（不填充）和Same卷积（填充后你的输出大小和输入大小是一样的）。在计算机视觉中过滤器一般都是奇数维，因为如果f为偶数，那么你只能使用一些不对称填充，只有f为奇数时才会有自然填充；还有就是在奇数维中会有一个中心像素点，便于指出过滤器的位置。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/EzBZXkr31jLdFTJ.png"                      alt="image-20210820115253453"                ></p><h1 id="05-卷积步长"><a href="#05-卷积步长" class="headerlink" title="05 卷积步长"></a>05 卷积步长</h1><ul><li>步长为2，说明过滤器执行完一次后，平移两个格。输出格子公式：[(n+2p-f)&#x2F;s]+1 × [(n+2p-f)&#x2F;s]+1，如果不是一个整数的话就向下取整。按照惯例，过滤器必须完全处于图像中或者填充之后的图像区域内，才输出相应结果。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/nTuYINvzghmDj2A.png"                      alt="image-20210820152848282"                ></p><ul><li>总结下维度情况：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/INwQrlmeLn72Gi3.png"                      alt="image-20210820152914192"                ></p><ul><li>在有些定义中还有镜像翻转，对着对角线翻转，咱们这不用奥。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/u2wlxbph4PY1ejD.png"                      alt="image-20210820152957895"                ></p><h1 id="06-卷积为何有效"><a href="#06-卷积为何有效" class="headerlink" title="06 卷积为何有效"></a>06 卷积为何有效</h1><ul><li>假设我们想检测彩色图像的特征，那么对应的过滤器也应该有三层，对应红绿蓝三个通道。定义一下6×6×3这个形式：分别代表高、宽和通道数，并且图像的通道数必须和过滤器的通道数相等。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/ib4k1hsEtd8RfSL.png"                      alt="image-20210820155626710"                ></p><ul><li>下面来看下计算立体图像的细节：首先我们的过滤器画成一个三维的立方体，然后把这个过滤器放到最左上角的位置，最后把27个对应数相乘相加就得到了输出的第一个数。依次平移得到剩下的数字。通过设置过滤器每层不同的参数，就可以检测不同颜色通道里的边界（右下角那两个例子）。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/QiHenChouKUDxAc.png"                      alt="image-20210820155645064"                ></p><ul><li>我们想同时检测垂直和水平边缘还有45度倾斜的边缘还有70度倾斜的边缘该怎么做？（换句话说就是想同时用多个过滤器怎么办）就是用两个不同的过滤器，然后得到的结果依次进行叠加，得到一个立方体。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/xQcL36Dqa9fht4C.png"                      alt="image-20210820155718046"                ></p><h1 id="07-单层卷积网络"><a href="#07-单层卷积网络" class="headerlink" title="07 单层卷积网络"></a>07 单层卷积网络</h1><ul><li>通过不同的过滤器得到不同的输出后，通过python的广播机制给第一个矩阵这些元素都加上同一偏差，然后应用一个非线性激活函数ReLU；然后给第二个输出矩阵加上不同的偏差，同样也使用非线性激活函数ReLU，最后得到另一个4×4的矩阵，然后将两个矩阵叠加起来，就得到一个4×4×2的矩阵。</li><li>a[0]到a[1]的演变过程：首先执行线性函数，然后将所有元素相乘做卷积，再加上偏差，然后应用激活函数ReLU，最后通过神经网络的一层，将6×6×3的维度a[0]演化为一个4×4×2维度的a[1],这就是卷积神经网络的一层。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/6O1bW9fAUcXeJYp.png"                      alt="image-20210820195009232"                ></p><ul><li>举个例子，有十个过滤器，每个过滤器是3×3×3的，问这一层有多少参数？因为过滤器是3×3×3的，所以有27个参数，然后加一个偏差就是28个，然后是10个过滤器也就是一共280个参数。无论输入的图片有多大，参数始终是280个，这是卷积神经网络的一个特征叫做“避免过拟合”。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/bvrHws14CkLy5Te.png"                      alt="image-20210820195038745"                ></p><ul><li>总结下用于描述卷积神经网络中的一层的各种标记：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/1LapcKxJ53zPErq.png"                      alt="image-20210820200118875"                ></p><h1 id="08-简单卷积网络示例"><a href="#08-简单卷积网络示例" class="headerlink" title="08 简单卷积网络示例"></a>08 简单卷积网络示例</h1><ul><li>想做一个图像识别，输入x，然后判别图片中有没有猫（0&#x2F;1表示）。通过下面的不同卷积不断地进行，最终为图片提取出7×7×40个特征，然后对该卷积层进行处理处理，可以将其平滑或展开成1960个单元，平滑处理后输出一个向量，其填充内容是逻辑回归单元还是softmax回归单元完全取决于我们是想识别图片上有没有猫还是想识别K种不同对象中的一种用y^表示最终神经网络的预测输出。</li><li>随着神经网络计算深度不断加深，通常开始时的图像也要更大一些，高度和宽度会在一段时间内保持一致，然后随着深度的加深而逐渐减小，而信道数量在增加。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/aXEDsI9OtFM8wv5.png"                      alt="image-20210820204504429"                ></p><ul><li>一个典型的卷积神经网络通常有三层：卷积层（CONV）、池化层（POOL）、全连接层（FC）</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/wHGmsxnS5pruJNI.png"                      alt="image-20210820204517662"                ></p><h1 id="09-池化层"><a href="#09-池化层" class="headerlink" title="09 池化层"></a>09 池化层</h1><p>使用池化层来缩减模型的大小，提高计算速度，同时提高所提取特征的鲁棒性</p><hr><ul><li>在此用到的池化类型是最大池化，下面的例子相当于我们选用了一个规模为2、步幅为2的过滤器，然后选择其中最大值。最大化操作的功能就是只要在任何一个象限内提取到某个特征，他都会保留在最大池化的输出中，最大池化的实际作用就是在过滤器中提取某个特征，然后保留其最大值。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/t3yT2xeXg56VGp1.png"                      alt="image-20210820211745699"                ></p><ul><li>再看一个有若干超级参数的例子，每个信道都独立执行最大池化计算。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/Op5iKwShmoIeyGE.png"                      alt="image-20210820211821158"                ></p><ul><li>平均池化——就是取平均值</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/UjCruST7XD2ehvF.png"                      alt="image-20210820212010845"                ></p><ul><li>总结：池化的超级参数包括过滤器大小f和步幅s，大部分情况下p&#x3D;0</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/s5mfHBJPuqThVoL.png"                      alt="image-20210820211932204"                ></p><h1 id="10-卷积神经网络示例"><a href="#10-卷积神经网络示例" class="headerlink" title="10 卷积神经网络示例"></a>10 卷积神经网络示例</h1><ul><li>在卷积文献中，卷积有两种分类，一类卷积是一个卷积层和一个池化层一起作为一层（人们在计算神经网络有多少层时，通常只是统计具有权重和参数的层，因为池化层没有权重和参数，只有一些超参数，所以将两者当着一层Layer1）；另一类卷积是把卷积层作为一层，池化层单独作为一层。</li><li>我们针对识别数字例子，首先输入一个数字图片，通过两个神经网络的组合（卷积层+池化层），然后得到一个输出，将输出水平展开成向量，通过两个全连接层，最后用FC4的单元填充一个softmax单元，softmax会有十个输出。关于如何选定超级参数，常规做法是尽量不要自己设置，而是参考别人的文献采用了哪些超级参数，选择一个效果好的框架。在神经网络中另一种常见的模式是一个或多个卷积层后跟随一个池化层，然后一个或多个卷积层后再跟随一个池化层，然后是几个全连接层，最后是一个softmax。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/umNMPEZg5hIKvtC.png"                      alt="image-20210820230812377"                ></p><ul><li>神经网络激活值形状、激活值大小和参数数量。有几点注意：第一池化层和最大池化层没有参数；第二卷积层的参数相对较少，许多参数都存在于神经网络中的全连接层；第三随着神经网络的加深，激活值会逐渐减小（如果下降太快也会有所影响）。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/ARbxHeBP8Gmp1dw.png"                      alt="image-20210820230901334"                ></p><h1 id="11为什么使用卷积？"><a href="#11为什么使用卷积？" class="headerlink" title="11为什么使用卷积？"></a>11为什么使用卷积？</h1><ul><li>和只用全连接层相比卷积层的两个主要优势在于参数共享和稀疏连接。两个神经元相连会得到一个非常多的参数数量3072×4704，而使用卷积的话，一共才156个参数。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/onDqR5eY4ZCktcK.png"                      alt="image-20210820233215874"                ></p><ul><li>卷积网络映射这么少参数有两个原因：一是参数共享，一个特征检测器如垂直边缘检测器，用于检测图片左上角区域的特征，这个特征很可能也适用于右下角区域，因此在计算图片的左上和右下角区域时，不需要添加其他的特征检测器，假如有一个左上角和右下角可能有不同分布，但也可能很相似的数据集，整张图片共享特征检测器，提取效果也很好；二是稀疏连接，右图的输出单元仅与36个输入特征中的9个相连接，而其他像素值都不会对输出产生任何影响。神经网络通过这两种机制减少参数，以便我们用更小的训练集训练它，从而防止过拟合。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/gQbqWChjAzYfonG.png"                      alt="image-20210820233229584"                ></p><ul><li>要训练神经网络要做的就是使用梯度下降法，来优化神经网络中的所有参数，以及减小代价函数J的值。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/IH3dlqUafFPrDLt.png"                      alt="image-20210820233240036"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-计算机视觉&quot;&gt;&lt;a href=&quot;#01-计算机视觉&quot; class=&quot;headerlink&quot; title=&quot;01 计算机视觉&quot;&gt;&lt;/a&gt;01 计算机视觉&lt;/h1&gt;&lt;p&gt;即使你在计算机视觉方面没有做出成果，希望你可以将所学的知识应用到其他算法和结构&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>深度学习 day11 机器学习（ML）策略</title>
    <link href="http://example.com/2021/08/19/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20day11%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88ML%EF%BC%89%E7%AD%96%E7%95%A5/"/>
    <id>http://example.com/2021/08/19/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20day11%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88ML%EF%BC%89%E7%AD%96%E7%95%A5/</id>
    <published>2021-08-19T01:11:46.000Z</published>
    <updated>2022-04-13T12:04:25.279Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-进行误差分析"><a href="#01-进行误差分析" class="headerlink" title="01 进行误差分析"></a>01 进行误差分析</h1><p>人工检查你的算法错误，也许可以让你了解接下来应该做什么，这个过程就叫误差分析</p><hr><ul><li>同样是一个猫分类器，但是它的准确度只有90%，它会将一些狗的图片识别成猫，如果花费几个月的时间来开发专门研究狗的项目，那是大可不必，因为可能取不到效果。所以我们推荐使用误差分析：我们自己手动的观察100个错误标记的开发集例子，如果只有其中5个是狗的图片，那么就算把识别狗做的很好，误差也高达9.5%，如果其中有50个是狗的图片，这时我们在对识别狗进行完善就可以将误差减半到5%。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/yOIJjeVibLdG2nv.png"                      alt="image-20210817090520185"                ></p><ul><li><p>有时在做误差分析时，也可以同时并行评估几个想法，例如猫分类器：</p><ol><li>改善针对狗图的性能</li><li>解决针对于猫科动物看做成家猫的错误</li><li>提高画质</li></ol></li><li><p>针对于上面这三个想法我们可以将其记录成下面的表，统计出每个想法占的百分比，在以此判断是否应该提升哪个的性能，提升哪个性能上限比较高。</p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/3VTZdgPmMnoNipc.png"                      alt="image-20210817090534858"                ></p><ul><li>总结：进行误差分析应该找一组错误标记的例子，可能在开发集或者测试集里，观察错误标记的例子，看看假阳性和假阴性，统计属于不同错误类型的错误数量，可以帮助你发现哪些问题需要优先处理。</li></ul><h1 id="02-清楚标注错误的数据"><a href="#02-清楚标注错误的数据" class="headerlink" title="02 清楚标注错误的数据"></a>02 清楚标注错误的数据</h1><p>  监督学习问题的数据是由输入x和输出标签y组成，通过发现，得知有些输出标签y是错误的，是否值得花时间去修正这些标签呢？</p><hr><ul><li><p>y为1是猫，为0不是猫，这时发现倒数第二个是错误标签，该怎么办？</p><ol><li>如果是训练集，深度学习算法对于训练集中的随机误差是很宽容的，只要这些错误例子离随机误差不太远，误差足够随机，那么放着这些误差不管可能也没问题。只要总数据集足够大，实际误差可能不会太高。</li><li>如果担心开发集和测试集上标记出错的例子带来的影响，一般建议在误差分析的时候，添加一个额外的列来统计标签y错误的例子数。是否值得修正这6%标记出错的例子呢？如果这些错误标签严重影响了你在开发集上评估算法的能力，那么就应该花费时间去修正错误标签，反之不用。</li><li>建议看三个数字来确定是否值得去人工修正标记出错的数据：整体的开发集误差10%；错误标记引起的错误的数量或者百分比0.6%（10%的6%）；其他原因导致错误的百分比9.4%（10%-0.6%）。对于左边的错误标签没有严重影响了你在开发集上评估算法的能力，而左边的错误标签严重影响了你在开发集上评估算法的能力。</li></ol></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/ecOt4uxyNC1w536.png"                      alt="image-20210817110813946"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/4COHUKSuF3h6r1z.png"                      alt="image-20210817110828006"                ></p><ul><li>修正的建议：首先无论使用什么修正手段，都要同时作用到开发集和测试集上（开发集和测试集必须来自相同的分布，因为开发集确定了你的目标，当你击中目标后将算法推广到测试集中，这样你的团队才能更高效）来确保他们继续来自同一分布；其次要同时检验算法判断正确和判断错误的例子，如果你只修正算法出错的例子，你对算法的偏差估计可能会变大，修正错误的例子之后，一些改变可能使原本正确的例子也变成错误的了。但是我们通常不会这么做，因为如果你的分类器很准确，那么判断错的次数比判断正确的次数要小得多；如果你进入到一个开发集和测试集去修正部分标签，你不大可能去修正训练集的，因为训练集数据比开发集和测试集多的多，需要花费的时间也就多。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/f2yVLtO5Yraeg9n.png"                      alt="image-20210817110840750"                ></p><ul><li>总结：在构造实际系统时，通常需要更多的人工误差分析和人类见解，我们要看下犯错误的例子，这样可以帮助找到需要优先处理的任务。</li></ul><h1 id="03-快速搭建你的第一个系统，并进行迭代"><a href="#03-快速搭建你的第一个系统，并进行迭代" class="headerlink" title="03 快速搭建你的第一个系统，并进行迭代"></a>03 快速搭建你的第一个系统，并进行迭代</h1><ul><li>一般来说，对于几乎所有的机器学习程序，可能会有50个不同的方向可以前进，并且都是相对合理的可以改善系统，但挑战在于你如何选择一个方向集中精力处理。</li><li>如果你像搭建一个全新的机器学习程序，建议：首先快速设立开发集和测试集还有指标，决定了你的目标所在，如果错了可以在改，但是一定要设立；然后建议马上搭好一个机器学习系统原型（初始系统的全部意义在于有一个训练过的系统可以让你确定偏差和方差的范围，就知道下一步应该优先做什么，能够进行误差分析），然后找训练集进行训练，看效果。开始理解你的算法表现如何，在开发集测试集你的评估指标上表现如何；当你建立第一个系统后，你就可以马上用到偏差方差分析和误差分析。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/Z9lHt7LKDSn4aAx.png"                      alt="image-20210817120247822"                ></p><h1 id="04-在不同的划分上进行训练并测试"><a href="#04-在不同的划分上进行训练并测试" class="headerlink" title="04 在不同的划分上进行训练并测试"></a>04 在不同的划分上进行训练并测试</h1><ul><li>如果你有两个数据来源，一个较小，一个较大，那么该怎么分布？</li><li>第一条路：我们可以将来自互联网和用户的图片结合到一块，然后随机分配到训练、开发和测试集中，这样三个集的数据都来自同一分布，但是坏处在于，对于2500个开发集数据，其中很多图片都是来自网页下载，并不是真正关心的数据分布，真正要处理的是用户上传的，这样设立开发集导致团队针对不同于你实际关心的数据分布去优化。（不要用）</li><li>推荐第二条路：我们训练集是来自互联网的图片，如果需要的话，再加上5000张来自手机上传的图片，对于开发集和测试集都是手机图片，这样的好处在于你现在瞄准的目标就是你想要处理的目标。开发集全部数据都来自用户，可以告诉你的团队这是你真正关心的图片分布，试着搭建一个学习系统，让系统在处理用户图片分布时效果良好。缺点在于你的训练集和开发集、测试集不在一个分布</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/NLS1lv3rjyqkICM.png"                      alt="image-20210817152708400"                ></p><ul><li>以语音激活后视镜为例，对于训练集你可以使用你所拥有的所有语音数据；对于开发集和测试集来说可能要小的多，比如实际上来自语音激活后视镜的数据。按照上面推荐第二条路进行分配。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/tJPjAav1SkXbCwM.png"                      alt="image-20210817152719753"                ></p><h1 id="05-不匹配数据划分的偏差和方差"><a href="#05-不匹配数据划分的偏差和方差" class="headerlink" title="05 不匹配数据划分的偏差和方差"></a>05 不匹配数据划分的偏差和方差</h1><p>当你的训练集和你的开发集、测试集来自不同的分布时，分析偏差和方差的方式可能不一样</p><hr><ul><li>训练集误差为1，开发集误差为10。如果训练集和开发集来自同一分布，这就存在很大的方差问题，算法不能很好的从训练集出发泛化；但如果你的训练集和开发集来自不同的分布，这时就不能轻易下结论，可能没有方差问题，只不过反映了开发集包括更难准确分类的图片。</li><li>分析的问题在于当你看训练误差再看开发误差有有两件事变了：<ol><li>算法只见过训练集数据，没见过开发集数据</li><li>开发集数据来自不同的分布</li></ol></li><li>我们设置一个新的数据子集叫训练-开发集，从训练集的分布里随机打散训练集，但是不会用来训练网络。为了进行误差分析，你应该做的是看看分类器在训练集上的误差1%、训练-开发集上的误差9%还有开发集上的误差10%。而训练集和训练-开发集上的差异在于你的神经网络能看到第一部分数据（红色部分）并在上面做训练，但没有在训练-开发集上直接训练，这就告诉算法存在方差。因为训练集上和训练-开发集来自同一分布的数据测得，所以尽管你的神经网络在训练集中表现良好，但无法泛化到来自相同分布的训练-开发集中；又如这三个误差分别是1%、1.5%、10%，这时方差问题就很小了。因为从训练集到训练-开发集误差只上升了一点点，但转到开发集时误差就大了很多，所以这是数据不匹配问题；又如这三个误差分别是10%、11%、12%，这时就存在偏差问题了；又如这三个误差分别是10%、11%、20%，这就有两个问题了：可避免偏差相当高还有数据不匹配问题很大。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/jN4syq3G1InPhMd.png"                      alt="image-20210817231557467"                ></p><ul><li>一般的原则，我们要看的关键数据是人类水平误差、训练集误差、训练开发集误差、开发集误差。如果再加一个测试误差，那么测试误差和开发集误差的间距就是你对开发集过拟合的程度。当然也可能出现右边的情况，是因为开发测试集分布比你应用实际处理的数据要容易得多，那么误差可能真的就下降。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/lW2CvLJXFIAVxKT.png"                      alt="image-20210817231619845"                ></p><ul><li>我们以语音激活后视镜为例子，横轴是不同的数据集，竖轴是我们要标记处理数据不同的方式或算法，最后一行放不开了，所以放到了右边。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/fE1V3KePrOokyBw.png"                      alt="image-20210817231631551"                ></p><h1 id="06-定位数据不匹配"><a href="#06-定位数据不匹配" class="headerlink" title="06 定位数据不匹配"></a>06 定位数据不匹配</h1><ul><li>如果发现数据不匹配问题，通常会做误差分析。还是以语音激活后视镜为例，可能要听一下来自开发集的样本，尝试弄清楚开发集和训练集到底有什么不同（比如说开发集的噪音很多）。你可以尝试把训练数据变得更像开发集一点，或者也可以收集更多类似开发集和测试集的数据（比如说发现车辆背景噪音是主要的误差来源，那么就有意识的收集这些数据加到训练集中）。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/xvfHONQLCmIZiyp.png"                      alt="image-20210818105420142"                ></p><ul><li>如果你的目的是把训练数据变得更像开发集一点，可以使用人工合成数据技术，通过人工合成你可以快速制造更多的训练集。但是人工合成有一个潜在的问题，比如说你在安静的环境下录制了1000小时音频，在移动的车上只录制了1一个小时，当你重复的将这1小时的音频叠加到1000小时音频时，可能你的学习算法对这一小时汽车噪声过拟合。人工数据合成的挑战在于人耳对于1000小时听起来和1小时噪音听起来没什么区别，所以最后可能制造出这个原始数据很少的，在一个小得多的空间子集合成的训练数据。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/aocQR4YELhJHCkp.png"                      alt="image-20210818105431867"                ></p><ul><li>总结：如果你认为存在数据不匹配问题，建议做误差分析或者看看训练集和开发集，这两个数据分布到底有什么不同，然后尝试收集看起来像开发集数据做训练。当使用人工合成数据一定要谨慎，你有可能从所有可能性的空间只选了很小一部分去模拟数据。</li></ul><h1 id="07-迁移学习"><a href="#07-迁移学习" class="headerlink" title="07 迁移学习"></a>07 迁移学习</h1><p>深度学习中最强大的理念之一就是有时候神经网络可以从一个任务习得知识，并将这些知识应用到另一个独立的任务中，这就是迁移学习。</p><hr><ul><li>假设你已经训练好一个图像识别神经网络，然后将这个神经网络拿来让他适应不同的任务（比如放射科诊断），可以做的就是把神经网络最后的输出层和进入到最后一层的权重删掉，然后加上一层或者几层新层，然后为最后一层或几层重新赋予随机权重，然后让它在放射诊断数据上训练。在进行图像识别的训练阶段，可以训练神经网络的所有常用参数、所有权重、所有层，然后就得到了一个能够做图像识别的神经网络，这时要实现迁移学习你要做的就是把数据集换成放射科的（x,y）训练集，而y就是你想要预测的诊断。然后我们随机初始化最后一层的权重w和b。已有语音识别系统神经网络，然后搭建一个触发词（可以唤醒智能设备）的神经网络，过程都同上。</li><li>要用新的数据集重新训练神经网络有几种做法：<ol><li>如果你有一个小的数据集，就只训练输出层前的最后一层或者最后两层。</li><li>如果你有很多数据集，那么也许你可以重新训练网络中的所有参数。在图像识别数据的初期训练阶段（预训练），你在用图像识别数据预初始化，然后以后更新所有权重，在放射科数据上训练，有时这个过程叫微调。</li></ol></li><li>迁移学习起作用的场合是：迁移来源问题你有很多数据，但迁移目标问题你没有那么多数据。（例如图像识别有一百万样本，可以学习低层次特征，可以在神经网络的前几层学到如何识别有用的特征，放射科数据有一万样本，在已经学习特征的基础上加以训练）数据量反着来的话（例如图像识别有50样本，放射科数据有300样本），就没有太大的意义了。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/1M5Jg9GcvWof3Sp.png"                      alt="image-20210818204432468"                ></p><ul><li>假设从任务A学习并迁移一些知识到任务B，那么什么时候迁移学习有意义？<ol><li>当任务A和任务B都有同样的输入x（例如A和B输入都为图像）</li><li>当任务A数据比任务B数据多得多的时候</li><li>任务A的低层次特征可以帮助任务B的学习</li></ol></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/V3lMdz7LPbtcQaT.png"                      alt="image-20210818204444568"                ></p><h1 id="08-多任务学习"><a href="#08-多任务学习" class="headerlink" title="08 多任务学习"></a>08 多任务学习</h1><p>在迁移学习中，你的步骤是串行的（从A到B）；在多任务学习中，你可以同时开始学习，试图让单个神经网络同时做几件事，然后希望每个任务都能帮到其他所有任务</p><hr><ul><li>以无人驾驶为例，需要同时识别多个不同的物体，比如行人、车辆、停车标志还有交通灯，以这四个为例设计出Y。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/BmTu24altLnpVQx.png"                      alt="image-20210818215353005"                ></p><ul><li>现在就可以训练一个神经网络来预测这些y值，输入x，输出的是一个四维向量y。要训练这个神经网络，需要定义神经网络的损失函数，和之前分类猫的例子主要区别在于需要对j&#x3D;1到4求和；这与softmax回归的主要区别在于softmax将单个标签分配给单个样本，而这个例子一张图可以有很多不同标签（行人、车辆、停车标志还有交通灯），所以在该例中你不是只给图片一个标签，而是需要遍历不同类型，然后看看每个类型是否出现在图中。</li><li>如果你训练一个神经网络，并试图最小化这个成本函数，你做的就是多任务学习，由于神经网络早期的一些特征，在识别不同物体时都会用到，你发现训练一个神经网络做四件事会比训练四个完全独立的神经网络分别做四件事性能要更好。</li><li>多任务学习也可以处理图像只有部分物体被标记的情况（右下角Y的情况，不清楚标记？），你就只对带0和1标签的j值求和，如果有？你就在求和时忽略那个项。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/qQKAh6t3OLCHsJv.png"                      alt="image-20210818215407044"                ></p><ul><li>多任务学习什么时候有意义？当三件事为真时，他就是有意义的：<ol><li>如果你训练的一组任务可以共用低层次特征，比如无人驾驶例子，同时识别四个标签，因为这些都是道路上的特征。</li><li>不一定对哈，如果你专注于单项任务，想要从多任务学习得到很大性能提升，那么其他任务加起来必须要有比单个任务大得多的数据量或者每个任务的数据量很接近。</li><li>当你可以训练一个足够大的神经网络，同时做好所有的工作。多任务学习的替代方法是训练四个完全独立的神经网络，一个任务对应一个神经网络，如果神经网络足够大，就不用替代。</li></ol></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/DIRroy8ZjH5Jswx.png"                      alt="image-20210818215421479"                ></p><ul><li>总结：迁移学习用的多</li></ul><h1 id="09-什么是端对端的深度学习"><a href="#09-什么是端对端的深度学习" class="headerlink" title="09 什么是端对端的深度学习"></a>09 什么是端对端的深度学习</h1><p>深度学习中最令人振奋的最新动态之一就是端对端深度学习的兴起，以前有一些数据处理系统或者学习系统，他们需要多个阶段的处理，那么端对端深度学习就是忽略所有这些不同的阶段，用单个神经网络替代它</p><hr><ul><li>以语音识别为例，需要很多阶段的处理，首先会提取一些特征（MFCC用来从音频中提取一组特定的人工设计的特征），提取完低层次的特征后就可以应用机器学习算法在音频片段中找到音位，然后将音位串在一起构成独立的词，然后将这些词串起来构成音频片段的听写文本；端对端深度学习就是训练一个巨大的神经网络，输入一段音频，输出直接是听写文本。</li><li>端对端深度学习的挑战之一是你可能需要大量数据才能让系统表现良好。小数据集用传统的比较好（3000h）；大的数据集用端对端才好（10000h）；数据量适中也可以用中间件方法。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/pGC4uPD7JZhYWbI.png"                      alt="image-20210819082822446"                ></p><ul><li>搭建人脸识别门禁系统：第一件事是看看相机拍到的照片，你可以直接学习图像x到人物y身份的函数映射（这不是最好的方法，因为人可以从很多不同的角度接近门禁）；迄今为止最好的方法是多步方法，首先运行一个软件来检查人脸，所以第一个检测器找的是人脸位置，找到后裁剪图像使人脸居中，再喂到神经网络里去学习，将现拍的图片跟已存的图片进行对比。为什么两步法更好呢？一是你解决的两个问题，每个问题实际上要简单得多，二是两个子任务的训练数据都很多</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/jkFAYgCRI9S6wzQ.png"                      alt="image-20210819082835837"                ></p><ul><li>更多的例子：机器翻译，X扫描</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/ulDXp2LUSEbqzfO.png"                      alt="image-20210819082920805"                ></p><h1 id="10-是否要使用端对端的深度学习"><a href="#10-是否要使用端对端的深度学习" class="headerlink" title="10 是否要使用端对端的深度学习"></a>10 是否要使用端对端的深度学习</h1><ul><li>端对端学习的好处：<ol><li>只是让数据说话，让你的学习算法学习它想学习的任意表示方法，而不是强迫它使用特定的某种(音位)作为表示方法，其整体表现可能会更好。</li><li>所需手工设计的组件更少，不需要花太多时间去手工设计功能。</li></ol></li><li>端对端学习的缺点：<ol><li>要直接学x到y的映射，它可能需要大量的数据。</li><li>排除了可能有用的手工设计组件，当没办法从很小的训练集数据中获得洞察力，这时手工设计组件就可以把人类知识直接注入到算法。</li></ol></li><li>学习算法有两个主要知识来源：如果数据少就需要用组件，如果数据多就可能不需要<ol><li>数据</li><li>手工设计的任何东西（也可能强迫学习算法使用特定的某种(音位)作为表示方法）</li></ol></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/wBOdLi6jPtYhxeW.png"                      alt="image-20210819085149773"                ></p><ul><li>决定是否使用端对端的深度学习关键的问题是你有足够的数据能够直接学从x映射到y足够复杂的函数吗？</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/36ocdZPJhYsxNne.png"                      alt="image-20210819085536883"                ></p><ul><li>总之需要大量数据</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-进行误差分析&quot;&gt;&lt;a href=&quot;#01-进行误差分析&quot; class=&quot;headerlink&quot; title=&quot;01 进行误差分析&quot;&gt;&lt;/a&gt;01 进行误差分析&lt;/h1&gt;&lt;p&gt;人工检查你的算法错误，也许可以让你了解接下来应该做什么，这个过程就叫误差分析&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>深度学习 day10 机器学习（ML）策略</title>
    <link href="http://example.com/2021/08/16/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20day10%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88ML%EF%BC%89%E7%AD%96%E7%95%A5/"/>
    <id>http://example.com/2021/08/16/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20day10%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88ML%EF%BC%89%E7%AD%96%E7%95%A5/</id>
    <published>2021-08-15T22:54:24.000Z</published>
    <updated>2022-04-13T12:04:35.342Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-为什么是ML策略"><a href="#01-为什么是ML策略" class="headerlink" title="01 为什么是ML策略"></a>01 为什么是ML策略</h1><ul><li>当你尝试优化一个深度学习系统时，通常有很多想法可以去试。一些策略或者一些分析机器学习问题的方法可以指引你朝着最有希望的方向前进。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/V54kjvFlypodaI2.png"                      alt="image-20210814092245145"                ></p><h1 id="02-正交化"><a href="#02-正交化" class="headerlink" title="02 正交化"></a>02 正交化</h1><p>搭建机器学习系统的挑战之一是可以尝试和改变的东西太多太多（比如：有那么多超参数需要调整）</p><hr><ul><li>以左边电视为例，正交化指的是电视设计师设置不同的旋钮，使得每个旋钮只能调整一个性质，这样就可以将画面调整到合适的位置。又如右边的车，有方向盘、油门、刹车来分别控制性质，正交化就是这些控制互不影响，能够相互独立。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/zfOAKe6l3wEiIZD.png"                      alt="image-20210814105307415"                ></p><ul><li>要弄好一个监督学习系统，通常需要调节系统的旋钮来确保四件事：<ol><li>系统在训练集上得到的结果不错，训练集上 的表现必须通过某种评估达到能接受的程度。（如果你的算法在成本函数上不能很好的拟合训练集，你需要一个旋钮来确保可以调整你的算法，让他更好的拟合训练集，用来调试的旋钮可以训练更大的网络，或者切换到更好的优化算法。）</li><li>系统在开发集上有好的表现（如果发现算法对训练集很好，对开发集的拟合很差，那么就需要一个旋钮，在不影响训练集的同时，使算法更好的拟合开发集，增大训练集可以是另一个可用旋钮。）</li><li>系统在测试集上有好的表现（如果算法对开发集很好，对测试集很差，这就可能意味着对开发集过拟合了，需要往回退一步使用更大的开发集，增大开发集可以是另一个可用旋钮。）</li><li>系统在测试集上系统的成本函数在实际使用中表现令人满意（如果在测试集做的很好，但是无法给客户好的体验，这需要回去改变开发集或成本函数）</li></ol></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/S9VKQgdXJD5nc78.png"                      alt="image-20210814105322388"                ></p><h1 id="03-单一数字评估标准"><a href="#03-单一数字评估标准" class="headerlink" title="03 单一数字评估标准"></a>03 单一数字评估标准</h1><p>无论是调整超参数或者是尝试不同的学习算法亦或者是在搭建机器学习系统时尝试不同的手段，如果有一个单实数评估标准，它可以快速的告诉你新尝试的手段比之前的手段是好还是坏。</p><hr><ul><li>比如说识别猫的例子：如果我们用查准率和查全率来评估分类器（查准率：就是这个图是猫的可能性，查全率：实际为猫的图片中有多少被系统识别出来），那么将很难选择出哪个好，哪个不好，因此需要找到一个结合了查准率和查全率新的评估指标F1调和平均数。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/rao1ePuqELImjkT.png"                      alt="image-20210814114358167"                ></p><ul><li>在有个例子就是各个地方的上传误差，最终使用一个平均值来衡量多个分类器，误差越小越好。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/v7psUqLIaci4ldb.png"                      alt="image-20210814114410967"                ></p><h1 id="04-满足和优化指标"><a href="#04-满足和优化指标" class="headerlink" title="04 满足和优化指标"></a>04 满足和优化指标</h1><ul><li>在该例子中，即看重查准率也看重运行时间，这时就可以将查准率和运行时间组合成一个整体评估指标；你也可以选择一个分类器，能够最大限度提升准确度，但必须满足运行时间小于等于100ms，在这种情况下我们说准确度是一个优化指标（想让准确度最大化），运行时间是满足指标（只要达到要求就行，要求以内都一样），这时B就是很好的分类器；如果你要考虑N个指标，有时候选择其中一个指标作为优化指标是合理的，剩下的均为满足指标。右边就是个例子懂了就不用看。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/Kxhseauq2gcO4MW.png"                      alt="image-20210814215048347"                ></p><h1 id="05-训练-x2F-开发-x2F-测试集划分"><a href="#05-训练-x2F-开发-x2F-测试集划分" class="headerlink" title="05 训练 &#x2F; 开发 &#x2F; 测试集划分"></a>05 训练 &#x2F; 开发 &#x2F; 测试集划分</h1><ul><li>dev集也叫开发集有时称为保留交叉验证集。机器学习的工作流程是：你尝试很多思路，用训练集训练不同的模型，然后使用开发集来评估不同的思路，然后选择一个去不断地迭代来改善开发集的性能，得到一个满意的成本，然后用测试集去评估。开发集和优化指标构成了靶心，训练的目的就是向靶心靠拢，而设立训练集是加速靠近靶心的速度。</li><li>以一个猫分类器为例，在下面这些区域内运营：<ol><li>不推荐：你选择其中4个区域（可随机选取）的数据构成开发集，其他四个区域的数据构成测试集，因为开发集和测试集不在一个分布</li><li>推荐：让二者来源一个分布，将所有数据随机洗牌将其放入开发集和测试集，这样开发集和测试集都有来自八个地区的数据。</li></ol></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/2lQse4GKAd8vySI.png"                      alt="image-20210814221205577"                ></p><ul><li>在设置开发集和测试集，要选择能够反映你未来会得到的数据、认为很重要的数据、必须得到好结果的数据这样的。</li></ul><h1 id="06-开发集合测试集的大小"><a href="#06-开发集合测试集的大小" class="headerlink" title="06 开发集合测试集的大小"></a>06 开发集合测试集的大小</h1><ul><li>前两个是早期数据少的时候划分，最后一个是现在数据多的时候划分。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/yBSPL4FgAXQsifz.png"                      alt="image-20210815084825602"                ></p><ul><li>测试集的目的是完成系统开发之后，测试集可以帮你评估投产系统的性能。方针就是令你的测试集足够大以至于能够以高置信度评估系统整体性能。对于某些应用也许不需要对系统性能有置信度很高的评估，这时不单独分出一个测试集也是可以的，但是不建议，因为你可以使用这组不带偏差的数据来测量系统的性能。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/e9gZSE2tUr3V1kh.png"                      alt="image-20210815085143210"                ></p><h1 id="07-什么时候该改变开发-x2F-测试集和指标"><a href="#07-什么时候该改变开发-x2F-测试集和指标" class="headerlink" title="07 什么时候该改变开发 &#x2F; 测试集和指标"></a>07 什么时候该改变开发 &#x2F; 测试集和指标</h1><p>设置开发集和评估指标就像把目标定在某个位置，让你的团队瞄准</p><hr><ul><li>假设在构建一个猫分类器，使用的指标是分类误差，从图中看是A效果比较好，但是如果A会将色情图片看成猫的图片，用户是不接受的，而B不会将色情图片看成猫的图片，用户比较倾向于B，在这种情况下（原本的错误指标错误的预测算法A是更好的算法）就应该改变评估指标了或者改变开发集和测试集。可以将分类误差指标写成下面Error的形式，这个评估指标的问题是他对色情图片和非色情图片一视同仁，其中修改评估指标的方法是添加个权重w，图片x不是的话w为1，否则为10甚至100，如果希望归一化常数就是w(i)对所有i求和，这样误差仍然在0和1之间。在开发集和测试集中需要你自己将色情图片标记才能使用这个加权函数。评估指标的意义在于准确告诉你已知两个分类器哪一个更适合你的应用。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/Do3i1aNF8PcHqU9.png"                      alt="image-20210815200723853"                ></p><ul><li>这实际上就是个正交化的例子，你想处理机器学习问题时，应该把它切分成独立的步骤：第一步是弄清楚如何定义一个指标来衡量你想要做的事情的表现（就是设置目标），第二步也许就是学习算法针对某个成本函数优化，加入权重还可能要修改归一化常数（如何精确瞄准，命中目标）。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/sXZU7AH4vhxk3Mg.png"                      alt="image-20210815200734731"                ></p><ul><li>如果你当前的指标和当前用来评估数据和你真正关心必须做好的事情关系不大，那就应该改变指标或者你的开发测试集。（就好比下面这个图，你一直用网上下载下来的高质量图片训练，结果使用用户上传的质量层次不齐的图片，实际测试你就发现B比A效果好）</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/rz4jftMx8FZ9dTE.png"                      alt="image-20210815200748278"                ></p><ul><li>总结：不建议在没有评估指标和开发集时跑太久</li></ul><h1 id="08-为什么是人的表现"><a href="#08-为什么是人的表现" class="headerlink" title="08 为什么是人的表现"></a>08 为什么是人的表现</h1><ul><li><p>当你开始往人类水平努力时，进展很快；但过了一段时间，这个算法表现比人类更好时，那么进展和精确度的提升就变得更慢了，也许它还会越来越好，但是斜率也就越来越平缓。</p></li><li><p>贝叶斯最优误差一般认为理论上可能达到的最优误差：随着时间的推移，当您继续训练算法时，可能模型越来越大、数据越来越多，但性能无法超过某个理论上限。就是说没有任何办法设计出一个x到y的函数，让他能够超过一定的准确度。</p></li><li><p>为什么当超越人类表现后，进展就缓慢了？</p><ol><li>当超越人类表现后没有太多的空间继续改善了。</li><li>没超越之前可以使用一些工具提升性能，超越之后就没那么好用了。</li></ol></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/Ug5t17YhfXcsrpu.png"                      alt="image-20210815220342252"                ></p><ul><li>对于人类擅长的任务，只要你的机器学习算法比人类差，你就可以：让人帮助你标记数据，这样就有更多的数据可以给学习算法；人工误差分析：让人类看算法处理的例子，知道错误出在哪，并尝试了解为什么人能作对，算法做错；更好分析偏差和误差。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/n8ZHlcpmzuLNGsh.png"                      alt="image-20210815220403038"                ></p><h1 id="09-可避免偏差"><a href="#09-可避免偏差" class="headerlink" title="09 可避免偏差"></a>09 可避免偏差</h1><p>可避免偏差：贝叶斯误差或者对贝叶斯误差的估计和训练误差之间的差值</p><hr><ul><li>你的算法在训练集上的表现和人类水平的表现有很大差距的话，说明你的算法对训练集的拟合并不好，所以从减小偏差和方差的工具来看，重点是减小偏差，你需要做的是比如训练更大的神经网络或者跑久一点梯度下降。你的算法在训练集上的表现和人类水平的表现相近的话，但是开发集和训练集相差较大，就将重心放到减小方差上。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/vlx21D7m8bd4foJ.png"                      alt="image-20210815222311401"                ></p><h1 id="10-理解人的表现"><a href="#10-理解人的表现" class="headerlink" title="10 理解人的表现"></a>10 理解人的表现</h1><p>人类水平误差用来估计贝叶斯误差也就是理论上最低的误差，任何函数不管是现在还是将来能够到达的最低值。</p><hr><ul><li>医学图像分类的例子：下面是四个不同人的观察的误差值，那么应该如何界定人类水平误差呢？就是那个到达最低的值0.5。</li><li>在定义人类水平误差时，要弄清楚你的目标所在，如果要表明你可以超越单个人类，那么就有理由在某些场合使用1%部署你的系统，如果你的目标是代替贝叶斯误差，那么就使用0.5的比较合适。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/N1fx8vicVIdW52T.png"                      alt="image-20210815225133174"                ></p><ul><li>误差分析的例子：第一个无论以哪个为目标，都要减少偏差，技术可以培训更大的网络；第二个无论以哪个为目标，都要减少方差，技术可以使用正则化或者去获得更大的训练集；第三个就是接近人类水平误差，改善空间就比较小了。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/KC4oGA7PY1953bI.png"                      alt="image-20210815225321181"                ></p><h1 id="11-超过人的表现"><a href="#11-超过人的表现" class="headerlink" title="11 超过人的表现"></a>11 超过人的表现</h1><ul><li>如果你的误差已经比一群充分讨论辩论后的人类专家更低，那么依靠人类直觉来判断你的算法还能往什么方向优化就很难了（比如右边的，如果都已经过拟合了，这咋判断）。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/nf9wbJg7NkDWMSK.png"                      alt="image-20210815230714321"                ></p><ul><li>下面的结构化数据都是系统比人做的好的，都有一个数据库。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/ehvGZXPH1moRTyK.png"                      alt="image-20210815230723952"                ></p><h1 id="12-改善模型表现"><a href="#12-改善模型表现" class="headerlink" title="12  改善模型表现"></a>12  改善模型表现</h1><ul><li>提高学习算法性能的指导方针：想让一个监督学习算法达到适用要做到：<ol><li>你的算法对训练集的拟合很好（可避免偏差很低），可以训练更大的网络或者训练更长时间、使用更好的优化算法、寻找更好的新神经网络架构或者更好的超参数、改变激活函数或者层数或者隐藏单位数。</li><li>在训练集做的好推广到开发集和测试集也要好（方差不是太大），可以正则化或者收集更多训练数据、寻找更好的新神经网络架构</li></ol></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/NUF4uWVOPzIR3ey.png"                      alt="image-20210815232000368"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/KEdz1Tla4DOJtrU.png"                      alt="image-20210815232011048"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-为什么是ML策略&quot;&gt;&lt;a href=&quot;#01-为什么是ML策略&quot; class=&quot;headerlink&quot; title=&quot;01 为什么是ML策略&quot;&gt;&lt;/a&gt;01 为什么是ML策略&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;当你尝试优化一个深度学习系统时，通常有很多想法可以去试。</summary>
      
    
    
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>深度学习 day09 超参数调试、Batch 正则化和程序框架</title>
    <link href="http://example.com/2021/08/13/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20day09%E8%B6%85%E5%8F%82%E6%95%B0%E8%B0%83%E8%AF%95%E3%80%81Batch%20%E6%AD%A3%E5%88%99%E5%8C%96%E5%92%8C%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6/"/>
    <id>http://example.com/2021/08/13/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20day09%E8%B6%85%E5%8F%82%E6%95%B0%E8%B0%83%E8%AF%95%E3%80%81Batch%20%E6%AD%A3%E5%88%99%E5%8C%96%E5%92%8C%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6/</id>
    <published>2021-08-13T15:53:50.000Z</published>
    <updated>2022-04-13T12:04:42.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-调试处理"><a href="#01-调试处理" class="headerlink" title="01 调试处理"></a>01 调试处理</h1><p>系统地组织超参调试过程的技巧</p><hr><ul><li>学习速率是需要调试的最重要的超参数（红色），其次是momentum、mini-batch的大小及隐藏单元（黄色），重要性拍第三位的就是层数、学习率衰减、Adam算法（其余都是）</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/j32RWxhcJb9TyiU.png"                      alt="image-20210811090955591"                ></p><ul><li>如果要调整一些超参数，该如何选择调试值呢？<ol><li>在早一代的机器学习算法中（左图），如果有两个超参数，常见的作法是在网格中取样点，然后系统的研究这些数值，然后选择哪个参数效果最好。（参数的数量相对较少时）</li><li>在深度学习领域中（右图）推荐下面做法：随机选择点，然后用随机取的点试验超参数的效果，之所以这么做是因为你 很难提前知道哪个超参数最重要。</li></ol></li><li>就举两个极端的超参数，α和ε，无论ε取何值，结果基本都是一样的。对于左边的图来说25个样点，但是α只能尝试五个值，而对于右图，每个样点都是独立的也就是α可以取25个值。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/Fr7OSWuYZdbfUiV.png"                      alt="image-20210811091010777"                ></p><ul><li>当你给超参数取值时，另一个惯例就是采用由粗糙到精细的策略，也就是在整个的方格中进行粗略搜索后，发现某个点的效果最好，周围的点效果也不错，这时就可以聚集到这个点周围更小的方格中，在更小的方格中，更加密集的随机取点。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/oK5kFVN8J9aHnRe.png"                      alt="image-20210811091035843"                ></p><h1 id="02-为超参数选择合适的范围"><a href="#02-为超参数选择合适的范围" class="headerlink" title="02 为超参数选择合适的范围"></a>02 为超参数选择合适的范围</h1><p>随机取值并不是在有效范围内的随机均匀取值，而是选择合适的标尺用于探究这些超参数。</p><hr><ul><li>假设选取隐藏单元的数量n^ [l]，选择范围是从50到100中某点；如果要选取神经网络的层数L，选择范围是从2到4。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/ca6IO7ZVk3vhCr5.png"                      alt="image-20210811174621431"                ></p><ul><li>假设你在搜索超参数学习率α，取值范围是0.0001到1，如果沿其随机均匀取值那么90%的数值会落在0.1到1，这样看起来不对，反而用对数标尺搜索超参数的方式会更合理，因此这里不使用线性轴，而是分别依次取0.0001、0.001、0.01、0.1、1，在对数轴上随机均匀取点，这样每个数值之间都有更多的搜索资源可用。用python实现如下：将超参数设置为10^ r，r取值在a到b之间，其中a与b是通过对最小值和最大值进行对数运算得出。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/v489h5bowf7uGCi.png"                      alt="image-20210811174643052"                ></p><ul><li>另一个棘手的例子就是给β取值，用来计算指数的加权平均值，取0.9就相当于在10个值中取平均值，取0.999相当于在1000个值中取平均，如果想要在0.9到0.999之间进行搜索就不能用线性轴取值，我们要探究的应该是1-β，值在0.001到0.1区间，要做的就是在[-3,-1]里随即均匀的给r取值，就相当于给β取值。为什么不能用线性轴呢？因为β接近1时，任何细微的变化都会产生大影响（1-β），所以在β趋近于1的范围内需要密集的取值。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/c3ouXzgUYPvQqLd.png"                      alt="image-20210811174702165"                ></p><ul><li>即使标尺没有选对也没关系，只要数据足够就影响不大。</li></ul><h1 id="03-超参数训练的实践：Pandas-VS-Caviar"><a href="#03-超参数训练的实践：Pandas-VS-Caviar" class="headerlink" title="03 超参数训练的实践：Pandas VS Caviar"></a>03 超参数训练的实践：Pandas VS Caviar</h1><p>组织超参数搜索过程的建议和技巧</p><hr><ul><li>由于某些情况你的原来设定的超参数不好用了，建议就是每隔几个月至少一次重新测试或评估你的超参数来确保你对数值依然很满意。</li><li>关于如何搜索超参数的问题：<ol><li>照看一个模型，对其细心照料（通常是有庞大的数据组，但是没有许多计算资源或者足够的CPU和GPU的情况下），即使它在试验时也可以进行改良。因为没有足够的计算能力，不能在同一时间试验大量的模型，所以要观察它的表现，不断调整学习率。</li><li>同时试验多种模型，一视同仁：你设置一些超参数，就让他自己运行（蓝线），也可以开始一个有着不同超参数设定的不同模型，第二个模型（紫线），第三个模型（红色）等等，最后选择工作效果最好的那个。</li></ol></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/aXvHDeRQxm8Tl3j.png"                      alt="image-20210812091541070"                ></p><h1 id="04-正则化网络的激活函数"><a href="#04-正则化网络的激活函数" class="headerlink" title="04 正则化网络的激活函数"></a>04 正则化网络的激活函数</h1><p>Batch归一化会使你的参数搜索问题变得很容易，使神经网络对超参数的选择更稳定，超参数的范围会更庞大，工作效果也很好，也会很容易的训练深层网络。</p><hr><ul><li>对于逻辑回归和神经网络的归一化输入特征值来说，归一化输入特征是可以加速学习过程的。</li><li>对于深层网络来说：Batch归一化的作用是：对于任何一个隐藏层而言，能够归一化a值以更快速的训练w和b。严格的来说，我们真正归一化的不是a而是z。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/LceCvta7NpYzSx2.png"                      alt="image-20210812155916904"                ></p><ul><li>单一隐含层Batch归一化的使用方法：网络中已知有些中间值，如假设有一些隐藏单元值z^ (1)到z^ (m)，接下来要计算平均值，然后计算方差，然后取每个z^ (i)规范化，化为含平均值0和方差1（**(z^ (i)-均值)&#x2F;标准偏差**），为了确保数值稳定这里我们依旧加一个ε。因为隐藏单元有不同的分布可能会有意义（例如在sigmoid激活函数，我们不希望值都集中在线性那），因此我们不想隐藏单元总是含有平均值0和方差1，所以我们开始接下来计算ztilde，其中这里的γ和β是模型的学习参数，然后使用梯度下降算法等方法更新γ和β。如果γ&#x3D;z的分母、β&#x3D;u，那么他就可以精准的转化公式使得z&#x3D;ztilde。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/XaxQZP9BTtVmIFU.png"                      alt="image-20210812160006217"                ></p><ul><li>Batch归一化的作用是它适用的归一化过程不只是输入层，也适用于神经网络中的深度隐藏层。</li></ul><h1 id="05-将Batch-Norm拟合进神经网络"><a href="#05-将Batch-Norm拟合进神经网络" class="headerlink" title="05 将Batch Norm拟合进神经网络"></a>05 将Batch Norm拟合进神经网络</h1><ul><li>Batch归一化是发生在计算z和a之间的，与其应用没有规范过的z^ [i]，不如用经方差和均值归一后的ztilde^ [i]。而且这里的β与用在momentum、Adam、RMSprop里的β不同。可以用任何优化算法来更新参数β和γ，在TensorFlow框架中可以用右下角的函数来实现Batch归一化。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/FOZmSoJV3hD8rCT.png"                      alt="image-20210813110613549"                ></p><ul><li>在实践中，Batch归一化通常和训练集的mini-batch一起使用，应用Batch归一化的方式就是：用第一个mini-batch计算z^ [1]，然后在经Batch归一化得到ztilde^ [1]，再应用激活函数得到a^ [1]，然后再一直运行下去。再用第二个mini-batch，直到用完。值得注意的一点：使用Batch归一化可以消除参数b，因为mini-batch中增加任何常数，数值都不会变，加上的任何常数都会被均值减法所抵消。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/ifCPauByoETeGbm.png"                      alt="image-20210813110626854"                ></p><ul><li>用Batch归一化来应用梯度下降法-&gt;假设你在使用mini-batch梯度下降法：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/idhWQlyICB3pojP.png"                      alt="image-20210813110640100"                ></p><h1 id="06-Batch-Norm为什么奏效？"><a href="#06-Batch-Norm为什么奏效？" class="headerlink" title="06 Batch Norm为什么奏效？"></a>06 Batch Norm为什么奏效？</h1><ul><li>batch归一化有效的第一个原因是它不仅仅针对输入值，还针对隐藏单元的值，将那一层所有的值通过归一化得到类似范围的值，可加速学习。第二个原因是它可以使权重比你的神经网络更滞后或者更深层（比如第十层相比于第一层的权重更能经受得住变化）。即使存在运行都很好的同一个函数，但你不会希望你的学习算法去发现绿色的决策边界，只看左边的数据的话，可能使得你产生数据改变分布的想法（covariate shift），正如x到y的映射一样，改变下，y也随之改变。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/NcqRdVIZGsQ8J6g.png"                      alt="image-20210813160313036"                ></p><ul><li>batch归一化做的是它减小了这些隐藏值分布变化的数量，就以z^ [2] _1与z^ [2] _1为例，即使它的值改变了，至少他们的均值和方差也会是均值0和方差1，亦或者是由β和γ决定的其他均值与方差。直观来说batch归一化减弱了前层参数的作用与后层参数的作用之间的联系，它使得网络每层都可以自己学习，稍稍独立于其他层，有利于加速整个网络的学习。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/q3zdSCKryb1JPYe.png"                      alt="image-20210813160357980"                ></p><ul><li>batch归一化另一个作用就是他有轻微的正则化效果，因为在mini-batch上计算的均值和方差，均值和方差都会有一些小噪音；缩放过程从z^ [l]到ztilde^ [l]也会有些噪音，因为它是用有噪音的均值和方差计算得出的，所以和dropout相似，他往每个隐藏层的激活值上增加了噪音，dropout含几重噪音是因为它以一定概率乘以0或1，batch归一化含几重噪音是因为标准差的缩放和减去均值带来的额外噪音。因为给隐藏单元添加了噪音，迫使后面单元不过分依赖任何一个隐藏单元，因为噪音很小，所以不是巨大的正则化效果，可以将batch归一化和dropout一块使用；dropout的一个特性是mini-batch越大，正则化效果越弱。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/51r9HwFJRZxgYut.png"                      alt="image-20210813160415039"                ></p><ul><li>注意：batch归一化一次只能处理一个mini-batch数据</li></ul><h1 id="07-测试时的-Batch-Norm"><a href="#07-测试时的-Batch-Norm" class="headerlink" title="07 测试时的 Batch Norm"></a>07 测试时的 Batch Norm</h1><p>Batch归一化将数据以mini-batch的形式逐一处理，但是在测试时，需要对每一个样本逐一处理</p><hr><ul><li>我们用m来表示一个mini-batch中的样本数量，在测试过程中不可能将一个mini-batch中所有样本同时处理，所以需要用其他方法得到u和σ^ 2。为了将神经网络应用于测试就需要单独估算u和σ^ 2。在这里我们用指数加权平均来估算（这个平均数涵盖了所有mini-batch），训练l层的每一个mini-batch都会得到一个u值。可以用指数加权平均来追踪在这一层所有mini-batch中所见的σ^ 2的值，也可以用来追踪均值向量的最新平均值，因此在用不同的mini-batch训练神经网络的同时，能够得到你所查看的每一层的u和σ^ 2的平均数的实时数值。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/23w9QiHnZLKWoFl.png"                      alt="image-20210813164723790"                ></p><ul><li>总结：在训练时u和σ^ 2是在整个mini-batch上计算出来的，但在测试时需要逐一处理样本，方法是根据你的训练集通过运用指数加权平均估算出u和σ^ 2，然后用测试中的u和σ^ 2来进行你所需的隐藏单元z值得调整。</li></ul><h1 id="08-Softmax回归"><a href="#08-Softmax回归" class="headerlink" title="08 Softmax回归"></a>08 Softmax回归</h1><p>Softmax回归能让你在试图识别某一分类时做出预测（识别多种分类）</p><hr><ul><li>我们用C来表示有几个种类，我们想要输出层单元的数字告诉我们这四种类型中每一个的概率有多大，最后输出一个4*1矩阵。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/DiGeqdKOB3ocluV.png"                      alt="image-20210813222931774"                ></p><ul><li>让网络做到这一点的标准模型要用到Softmax层以及输出层来生成输出。算出z之后就需要应用Softmax激活函数（这个激活函数对于Softmax层而言有些不同）：首先计算一个适用于每个元素的临时变量t&#x3D;e的z^ [l]次方,然后经过计算得到a^ [l]（t经过归一化使和为1），举例右边：之前我们的激活函数都是接受单行数值输入（例如Sigmoid和ReLU激活函数输入一个实数输出一个实数），Softmax激活函数因为需要将所有可能的输出归一化，所以就需要输入一个向量，最后再输出一个向量。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/FLs8xhBNSy12TKd.png"                      alt="image-20210813222806913"                ></p><ul><li>Softmax分类器在没有隐藏层的情况下能后做到的事–线性决策边界，更深层的网络可以学习更复杂的非线性决策边界。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/d7smV56SUWEOupP.png"                      alt="image-20210813223008277"                ></p><h1 id="09-训练一个Softmax分类器"><a href="#09-训练一个Softmax分类器" class="headerlink" title="09 训练一个Softmax分类器"></a>09 训练一个Softmax分类器</h1><ul><li>hard max函数将概率最大的变为1，其他变为0。soft max函数相对比较柔和，该是多少概率就是多少。值得注意的是：如果C&#x3D;2，那么Softmax实际就变回了逻辑回归。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/jIJhzRxtGpUDVY4.png"                      alt="image-20210813230021529"                ></p><ul><li>怎样训练带有Softmax输出层的神经网络？我们应首先定义损失函数（左边是单个训练样本的损失，右边是整个训练集的损失J），下方是使用向量化实现矩阵大写Y。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/takqvK1x2SNzc7s.png"                      alt="image-20210813230234480"                ></p><ul><li>在有Softmax输出层时实现梯度下降法：输出层会计算出z^ [l] ( C * 1维)，然后用Softmax激活函数得到a^ [l]，然后由此算出损失。初始化反向传播所需的关键步骤或者说关键方程是dz那个表达式</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/mdCWRnMUXJ83N7T.png"                      alt="image-20210813230338115"                ></p><h1 id="10-深度学习框架"><a href="#10-深度学习框架" class="headerlink" title="10 深度学习框架"></a>10 深度学习框架</h1><ul><li>深度学习的一些框架及选择框架的标准：一个重要的标准就是便于编程（神经网络的开发、迭代、为产品进行配置），第二个标准是运行速度（特别是训练大数据集），第三个标准是这个框架是否真的开放(长时间开源)。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/sDO47ZFPSxvqw2V.png"                      alt="image-20210813231615002"                ></p><h1 id="11-TensorFlow"><a href="#11-TensorFlow" class="headerlink" title="11 TensorFlow"></a>11 TensorFlow</h1><ul><li>假设有一个J需要最小化，来使用TensorFlow将其最小化：第一行和第二行是引入库，接下来是将w初始化为0，然后定义损失函数，然后定义train为学习算法（用梯度下降优化器使损失函数最小化），下面的两行是惯用的表达，开启了一个TensorFlow session，接下来是初始化全局变量，然后用TensorFlow评估一个变量，然后运行梯度下降法再输出w。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/iKahp71CP6eMcG2.png"                      alt="image-20210813232819815"                ></p><ul><li>现在我们运行梯度下降1000次迭代，然后输出w</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/8yfqhuVizGYnNQR.png"                      alt="image-20210813233207951"                ></p><ul><li>TensorFlow中的placeholder是之后会赋值的变量，这种方法便于将训练数据加入损失方程（feed_dict函数）</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/w2MnhjgvREylsfI.png"                      alt="image-20210813233854025"                ></p><ul><li>TensorFlow已经内置了所有必要的反向函数，通过内置函数来计算前向函数，它就能自动用反向函数实现反向传播。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/NuJjvPUFgW4YG26.png"                      alt="image-20210813234621008"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-调试处理&quot;&gt;&lt;a href=&quot;#01-调试处理&quot; class=&quot;headerlink&quot; title=&quot;01 调试处理&quot;&gt;&lt;/a&gt;01 调试处理&lt;/h1&gt;&lt;p&gt;系统地组织超参调试过程的技巧&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;学习速率是需要调试的最重要的超参数</summary>
      
    
    
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>改善深层神经网络：超参数调试、正则化以及优化第二周检测</title>
    <link href="http://example.com/2021/08/10/%E6%94%B9%E5%96%84%E6%B7%B1%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%9A%E8%B6%85%E5%8F%82%E6%95%B0%E8%B0%83%E8%AF%95%E3%80%81%E6%AD%A3%E5%88%99%E5%8C%96%E4%BB%A5%E5%8F%8A%E4%BC%98%E5%8C%96%E7%AC%AC%E4%BA%8C%E5%91%A8%E6%A3%80%E6%B5%8B/"/>
    <id>http://example.com/2021/08/10/%E6%94%B9%E5%96%84%E6%B7%B1%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%9A%E8%B6%85%E5%8F%82%E6%95%B0%E8%B0%83%E8%AF%95%E3%80%81%E6%AD%A3%E5%88%99%E5%8C%96%E4%BB%A5%E5%8F%8A%E4%BC%98%E5%8C%96%E7%AC%AC%E4%BA%8C%E5%91%A8%E6%A3%80%E6%B5%8B/</id>
    <published>2021-08-10T13:13:38.000Z</published>
    <updated>2022-04-13T12:01:48.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="答案见下方"><a href="#答案见下方" class="headerlink" title="答案见下方"></a>答案见下方</h1><hr><h2 id="1-当输入从第8个mini-batch的第7个的例子的时候，你会用哪种符号表示第3层的激活？"><a href="#1-当输入从第8个mini-batch的第7个的例子的时候，你会用哪种符号表示第3层的激活？" class="headerlink" title="1.当输入从第8个mini-batch的第7个的例子的时候，你会用哪种符号表示第3层的激活？"></a>1.当输入从第8个mini-batch的第7个的例子的时候，你会用哪种符号表示第3层的激活？</h2><p>A.a^ [3]{8}(7)</p><p>B.a^ [8]{7}(3)</p><p>C.a^ [8]{3}(7)</p><p>D.a^ [3]{7}(8)</p><h2 id="2-关于mini-batch的说法哪个是正确的？"><a href="#2-关于mini-batch的说法哪个是正确的？" class="headerlink" title="2. 关于mini-batch的说法哪个是正确的？"></a>2. 关于mini-batch的说法哪个是正确的？</h2><p>A.mini-batch迭代一次（计算1个mini-batch），要比批量梯度下降迭代一次快</p><p>B.用mini-batch训练完整个数据集一次，要比批量梯度下降训练完整个数据集一次快</p><p>C.在不同的mini-batch下，不需要显式地进行循环，就可以实现mini-batch梯度下降，从而使算法同时处理所有的数据（矢量化）</p><h2 id="3-为什么最好的mini-batch的大小通常不是1也不是m，而是介于两者之间？"><a href="#3-为什么最好的mini-batch的大小通常不是1也不是m，而是介于两者之间？" class="headerlink" title="3.为什么最好的mini-batch的大小通常不是1也不是m，而是介于两者之间？"></a>3.为什么最好的mini-batch的大小通常不是1也不是m，而是介于两者之间？</h2><p>A.如果mini-batch的大小是1，那么在你取得进展前，你需要遍历整个训练集</p><p>B.如果mini-batch的大小是m，就会变成批量梯度下降。在你取得进展前，你需要遍历整个训练集</p><p>C.如果mini-batch的大小是1，那么你将失去mini-batch将数据矢量化带来的的好处</p><p>D.如果mini-batch的大小是m，就会变成随机梯度下降，而这样做经常会比mini-batch慢</p><h2 id="4-如果你的模型的成本J随着迭代次数的增加，绘制出来的图如下，那么："><a href="#4-如果你的模型的成本J随着迭代次数的增加，绘制出来的图如下，那么：" class="headerlink" title="4.如果你的模型的成本J随着迭代次数的增加，绘制出来的图如下，那么："></a>4.如果你的模型的成本J随着迭代次数的增加，绘制出来的图如下，那么：</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.kesci.com/upload/image/q48rj172dh.png?imageView2/0/w/960/h/960"                      alt="Image Name"                ></p><p>A.如果你正在使用mini-batch梯度下降，那可能有问题；而如果你在使用批量梯度下降，那是合理的</p><p>B.如果你正在使用mini-batch梯度下降，那看上去是合理的；而如果你在使用批量梯度下降，那可能有问题</p><p>C.无论你在使用mini-batch还是批量梯度下降，看上去都是合理的</p><p>D.无论你在使用mini-batch还是批量梯度下降，都可能有问题</p><h2 id="5-假设一月的前三天卡萨布兰卡的气温是一样的：一月第一天-θ1-x3D-10"><a href="#5-假设一月的前三天卡萨布兰卡的气温是一样的：一月第一天-θ1-x3D-10" class="headerlink" title="5.假设一月的前三天卡萨布兰卡的气温是一样的：一月第一天: θ1&#x3D;10"></a>5.假设一月的前三天卡萨布兰卡的气温是一样的：一月第一天: θ1&#x3D;10</h2><p>一月第二天: θ2&#x3D;10,假设您使用β&#x3D;0.5的指数加权平均来跟踪温度：v0&#x3D;0,vt&#x3D;βv_t−1+(1−β)θ_t。如果v2是在没有偏差修正的情况下计算第2天后的值，并且v2corrected是您使用偏差修正计算的值。 这些下面的值是正确的是？</p><p>A.v2&#x3D;10,v2corrected&#x3D;10</p><p>B.v2&#x3D;10,v2corrected&#x3D;7.5</p><p>C.v2&#x3D;7.5,v2corrected&#x3D;7.5</p><p>D.v2&#x3D;7.5,v2corrected&#x3D;10</p><h2 id="6-下面哪一个不是比较好的学习率衰减方法？"><a href="#6-下面哪一个不是比较好的学习率衰减方法？" class="headerlink" title="6.下面哪一个不是比较好的学习率衰减方法？"></a>6.下面哪一个不是比较好的学习率衰减方法？</h2><p>A.α&#x3D;1&#x2F;(1+2∗t) α0</p><p>B.α&#x3D;1&#x2F;sqrt(t) α0</p><p>C.α&#x3D;0.95^ t α0</p><p>D.α&#x3D;e^ t α0</p><h2 id="7-您在伦敦温度数据集上使用指数加权平均，-使用以下公式来追踪温度：vt-x3D-βv-t−1-1−β-θt。下图中红线使用的是β-x3D-0-9来计算的。当你改变β时，你的红色曲线会怎样变化？（选出所有正确项）"><a href="#7-您在伦敦温度数据集上使用指数加权平均，-使用以下公式来追踪温度：vt-x3D-βv-t−1-1−β-θt。下图中红线使用的是β-x3D-0-9来计算的。当你改变β时，你的红色曲线会怎样变化？（选出所有正确项）" class="headerlink" title="7.您在伦敦温度数据集上使用指数加权平均， 使用以下公式来追踪温度：vt&#x3D;βv_t−1+(1−β)θt。下图中红线使用的是β&#x3D;0.9来计算的。当你改变β时，你的红色曲线会怎样变化？（选出所有正确项）"></a>7.您在伦敦温度数据集上使用指数加权平均， 使用以下公式来追踪温度：vt&#x3D;βv_t−1+(1−β)θt。下图中红线使用的是β&#x3D;0.9来计算的。当你改变β时，你的红色曲线会怎样变化？（选出所有正确项）</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.kesci.com/upload/image/q4c2nyuibb.png?imageView2/0/w/960/h/960"                      alt="Image Name"                ></p><p>A.减小β，红色线会略微右移<br>B.增加β，红色线会略微右移<br>C.减小β，红线会更加震荡<br>D.增加β，红线会更加震荡</p><h2 id="8-下图中的曲线是由：梯度下降，动量梯度下降（β-x3D-0-5）和动量梯度下降（β-x3D-0-9）。哪条曲线对应哪种算法？"><a href="#8-下图中的曲线是由：梯度下降，动量梯度下降（β-x3D-0-5）和动量梯度下降（β-x3D-0-9）。哪条曲线对应哪种算法？" class="headerlink" title="8.下图中的曲线是由：梯度下降，动量梯度下降（β&#x3D;0.5）和动量梯度下降（β&#x3D;0.9）。哪条曲线对应哪种算法？"></a>8.下图中的曲线是由：梯度下降，动量梯度下降（β&#x3D;0.5）和动量梯度下降（β&#x3D;0.9）。哪条曲线对应哪种算法？</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn.kesci.com/upload/image/q4c3gp9w4.png?imageView2/0/w/960/h/960"                      alt="Image Name"                ></p><p>A.(1)是梯度下降；(2)是动量梯度下降（β&#x3D;0.9）；(3)是动量梯度下降（β&#x3D;0.5）</p><p>B.(1)是梯度下降；(2)是动量梯度下降（β&#x3D;0.5）；(3)是动量梯度下降（β&#x3D;0.9）</p><p>C.(1)是动量梯度下降（β&#x3D;0.5）；(2)是动量梯度下降（β&#x3D;0.9）；(3)是梯度下降</p><p>D.(1)是动量梯度下降（β&#x3D;0.5）；(2)是梯度下降；(3)是动量梯度下降（β&#x3D;0.9）</p><h2 id="9-假设在一个深度学习网络中，批量梯度下降花费了大量时间时来找到一组参数值，使成本函数J-W-1-b-1-…-W-L-b-L-小。以下哪些方法可以帮助找到J值较小的参数值？"><a href="#9-假设在一个深度学习网络中，批量梯度下降花费了大量时间时来找到一组参数值，使成本函数J-W-1-b-1-…-W-L-b-L-小。以下哪些方法可以帮助找到J值较小的参数值？" class="headerlink" title="9.假设在一个深度学习网络中，批量梯度下降花费了大量时间时来找到一组参数值，使成本函数J(W[1],b[1],…,W[L],b[L])小。以下哪些方法可以帮助找到J值较小的参数值？"></a>9.假设在一个深度学习网络中，批量梯度下降花费了大量时间时来找到一组参数值，使成本函数J(W[1],b[1],…,W[L],b[L])小。以下哪些方法可以帮助找到J值较小的参数值？</h2><p>A.令所有权重值初始化为0</p><p>B.尝试调整学习率</p><p>C.尝试mini-batch梯度下降</p><p>D.尝试对权重进行更好的随机初始化</p><p>E.尝试使用 Adam 算法</p><h2 id="10-关于Adam算法，下列哪一个陈述是错误的？"><a href="#10-关于Adam算法，下列哪一个陈述是错误的？" class="headerlink" title="10.关于Adam算法，下列哪一个陈述是错误的？"></a>10.关于Adam算法，下列哪一个陈述是错误的？</h2><p>A.Adam结合了Rmsprop和动量的优点</p><p>B.Adam中的学习率超参数α通常需要调整</p><p>C.我们经常使用超参数的“默认”值β1&#x3D;0,9,β2&#x3D;0.999,ϵ&#x3D;10−8</p><p>D.Adam应该用于批梯度计算，而不是用于mini-batch</p><hr><h2 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h2><ol><li>A</li><li>C</li><li>BC</li><li>B</li><li>D</li><li>D</li><li>BC</li><li>B</li><li>BCDE</li><li>D</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;答案见下方&quot;&gt;&lt;a href=&quot;#答案见下方&quot; class=&quot;headerlink&quot; title=&quot;答案见下方&quot;&gt;&lt;/a&gt;答案见下方&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-当输入从第8个mini-batch的第7个的例子的时候，你会用哪种符号表示第3层的激活？&quot;&gt;</summary>
      
    
    
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>改善深层神经网络：超参数调试、正则化以及优化第一周检测</title>
    <link href="http://example.com/2021/08/10/%E6%94%B9%E5%96%84%E6%B7%B1%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%9A%E8%B6%85%E5%8F%82%E6%95%B0%E8%B0%83%E8%AF%95%E3%80%81%E6%AD%A3%E5%88%99%E5%8C%96%E4%BB%A5%E5%8F%8A%E4%BC%98%E5%8C%96%E7%AC%AC%E4%B8%80%E5%91%A8%E6%A3%80%E6%B5%8B/"/>
    <id>http://example.com/2021/08/10/%E6%94%B9%E5%96%84%E6%B7%B1%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%9A%E8%B6%85%E5%8F%82%E6%95%B0%E8%B0%83%E8%AF%95%E3%80%81%E6%AD%A3%E5%88%99%E5%8C%96%E4%BB%A5%E5%8F%8A%E4%BC%98%E5%8C%96%E7%AC%AC%E4%B8%80%E5%91%A8%E6%A3%80%E6%B5%8B/</id>
    <published>2021-08-10T09:37:24.000Z</published>
    <updated>2022-04-13T12:01:23.833Z</updated>
    
    <content type="html"><![CDATA[<h2 id="答案见下方"><a href="#答案见下方" class="headerlink" title="答案见下方"></a>答案见下方</h2><hr><h2 id="1-如果你有10-000-000个例子，你会如何划分训练-x2F-开发-x2F-测试集？"><a href="#1-如果你有10-000-000个例子，你会如何划分训练-x2F-开发-x2F-测试集？" class="headerlink" title="1.如果你有10,000,000个例子，你会如何划分训练&#x2F;开发&#x2F;测试集？"></a>1.如果你有10,000,000个例子，你会如何划分训练&#x2F;开发&#x2F;测试集？</h2><p>A.33%训练，33%开发，33%测试</p><p>B.60%训练，20%开发，20%测试</p><p>C.98%训练，1%开发，1%测试</p><h2 id="2-开发和测试集应该："><a href="#2-开发和测试集应该：" class="headerlink" title="2.开发和测试集应该："></a>2.开发和测试集应该：</h2><p>A.来自同一分布</p><p>B.来自不同分布</p><p>C.完全相同（一样的(x, y)对）</p><p>D.数据数量应该相同</p><h2 id="3-如果你的神经网络方差很高，下列哪个尝试是可能解决问题的？"><a href="#3-如果你的神经网络方差很高，下列哪个尝试是可能解决问题的？" class="headerlink" title="3.如果你的神经网络方差很高，下列哪个尝试是可能解决问题的？"></a>3.如果你的神经网络方差很高，下列哪个尝试是可能解决问题的？</h2><p>A.添加正则项</p><p>B.获取更多测试数据</p><p>C.增加每个隐藏层的神经元数量</p><p>D.用更深的神经网络</p><p>E.用更多的训练数据</p><h2 id="4-你正在为苹果，香蕉和橘子制作分类器。-假设您的分类器在训练集上有0-5％的错误，以及开发集上有7％的错误。-以下哪项尝试是有希望改善你的分类器的分类效果的？"><a href="#4-你正在为苹果，香蕉和橘子制作分类器。-假设您的分类器在训练集上有0-5％的错误，以及开发集上有7％的错误。-以下哪项尝试是有希望改善你的分类器的分类效果的？" class="headerlink" title="4.你正在为苹果，香蕉和橘子制作分类器。 假设您的分类器在训练集上有0.5％的错误，以及开发集上有7％的错误。 以下哪项尝试是有希望改善你的分类器的分类效果的？"></a>4.你正在为苹果，香蕉和橘子制作分类器。 假设您的分类器在训练集上有0.5％的错误，以及开发集上有7％的错误。 以下哪项尝试是有希望改善你的分类器的分类效果的？</h2><p>A.增大正则化参数λ</p><p>B.减小正则化参数λ</p><p>C.获取更多训练数据</p><p>D.用更大的神经网络</p><h2 id="5-什么是权重衰减？"><a href="#5-什么是权重衰减？" class="headerlink" title="5.什么是权重衰减？"></a>5.什么是权重衰减？</h2><p>A.正则化技术（例如L2正则化）导致梯度下降在每次迭代时权重收缩</p><p>B.在训练过程中逐渐降低学习率的过程</p><p>C.如果神经网络是在噪声数据下训练的，那么神经网络的权值会逐渐损坏</p><p>D.通过对权重值设置上限来避免梯度消失的技术</p><h2 id="6-当你增大正则化的超参数λ时会发生什么？"><a href="#6-当你增大正则化的超参数λ时会发生什么？" class="headerlink" title="6.当你增大正则化的超参数λ时会发生什么？"></a>6.当你增大正则化的超参数λ时会发生什么？</h2><p>A.权重变小（接近0）</p><p>B.权重变大（远离0）</p><p>C.2倍的λ导致2倍的权重</p><p>D.每次迭代，梯度下降采取更大的步距（与λ成正比）</p><h2 id="7-在测试时候使用dropout："><a href="#7-在测试时候使用dropout：" class="headerlink" title="7.在测试时候使用dropout："></a>7.在测试时候使用dropout：</h2><p>A.不随机关闭神经元，但保留1&#x2F;keep_brob因子</p><p>B.随机关闭神经元，保留1&#x2F;keep_brob因子</p><p>C.随机关闭神经元，但不保留1&#x2F;keep_brob因子</p><p>D.不随机关闭神经元，也不保留1&#x2F;keep_brob因子</p><h2 id="8-将参数keep-prob从（比如说）0-5增加到0-6可能会导致以下情况（选出所有正确项）："><a href="#8-将参数keep-prob从（比如说）0-5增加到0-6可能会导致以下情况（选出所有正确项）：" class="headerlink" title="8.将参数keep_prob从（比如说）0.5增加到0.6可能会导致以下情况（选出所有正确项）："></a>8.将参数keep_prob从（比如说）0.5增加到0.6可能会导致以下情况（选出所有正确项）：</h2><p>A.正则化效应被增强</p><p>B.正则化效应被减弱</p><p>C.训练集的误差会增加</p><p>D.训练集的误差会减小</p><h2 id="9-以下哪些技术可用于减少方差（减少过拟合）？（选出所有正确项）"><a href="#9-以下哪些技术可用于减少方差（减少过拟合）？（选出所有正确项）" class="headerlink" title="9.以下哪些技术可用于减少方差（减少过拟合）？（选出所有正确项）"></a>9.以下哪些技术可用于减少方差（减少过拟合）？（选出所有正确项）</h2><p>A.梯度消失</p><p>B.数据扩充</p><p>C.Dropout</p><p>D.梯度检查</p><p>E.Xavier初始化</p><p>F.L2正则化</p><p>G.梯度爆炸</p><h2 id="10-为什么要对输入x进行归一化？"><a href="#10-为什么要对输入x进行归一化？" class="headerlink" title="10.为什么要对输入x进行归一化？"></a>10.为什么要对输入x进行归一化？</h2><p>A.让参数初始化更快</p><p>B.让代价函数更快地优化</p><p>C.更容易做数据可视化</p><p>D.是另一种正则化——有助减少方差</p><hr><h2 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h2><ol><li>C</li><li>A</li><li>AE</li><li>AC</li><li>A</li><li>A</li><li>D(dropout只用在训练集上，目的是在每层添加噪声，降低对权重的依赖，从而防止过拟合。但是测试的时候不能用dropout，否则会影响评估.)</li><li>BD(在编写tensorflow程序的时候，会发现训练的时候dropout的参数keep_prob&#x3D;0.8（0.5,0.9等等），在测试的时候keep_prob&#x3D;1.0，即不进行dropout。)</li><li>BCF</li><li>B</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;答案见下方&quot;&gt;&lt;a href=&quot;#答案见下方&quot; class=&quot;headerlink&quot; title=&quot;答案见下方&quot;&gt;&lt;/a&gt;答案见下方&lt;/h2&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-如果你有10-000-000个例子，你会如何划分训练-x2F-开发-x2F-测试集？&quot;&gt;&lt;a</summary>
      
    
    
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>深度学习 day07 08 优化算法</title>
    <link href="http://example.com/2021/08/09/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20day07%2008%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2021/08/09/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20day07%2008%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/</id>
    <published>2021-08-09T13:34:16.000Z</published>
    <updated>2022-04-13T12:04:48.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-Mini-batch-梯度下降法"><a href="#01-Mini-batch-梯度下降法" class="headerlink" title="01 Mini-batch 梯度下降法"></a>01 Mini-batch 梯度下降法</h1><ul><li>X代表训练样本的集合，向量化能够相对较快地处理所有m个样本，但是如果m过大，处理速度仍然缓慢。在对整个训练集执行梯度下降法时，原本是需要处理完所有样本，才能进行一步梯度下降法，然后再重新处理所有样本，才能进行下一步梯度下降，但是如果在处理完所有样本之前，先让梯度下降法处理一部分，那么算法速度将会更快。因此我们可以将训练集分割为小一点地子集（子集就叫Mini-batch ），我们用X^ {t}代表第t个子集，当然Y也需要分割。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/4c3feUrkKyldG8t.png"                      alt="image-20210809115435646"                ></p><ul><li>在使用Mini-batch 梯度下降法时，同样要设有一个循环，这个循环是遍历所有的子训练集，同样的也要计算前向传播、代价函数J及执行后向传播来计算J^ {t}的梯度，只使用X^ {t}和Y^ {t}，然后更新权值。这只是遍历了一次训练集，如果还想多次遍历需要使用for或者while。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/NXuBdKUqezHTah3.png"                      alt="image-20210809115452369"                ></p><h1 id="02-理解-mini-batch-梯度下降法"><a href="#02-理解-mini-batch-梯度下降法" class="headerlink" title="02 理解 mini-batch 梯度下降法"></a>02 理解 mini-batch 梯度下降法</h1><ul><li>Batch梯度下降法：成本函数J会随着每次迭代而减小；mini-batch 梯度下降法：由于每次迭代都在训练不同的样本集（X^ {t}和Y^ {t}），所以成本函数J会产生波动，但是总体趋势是下降的。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/GVwbdzjuntBERpl.png"                      alt="image-20210809161351943"                ></p><ul><li><p>决定mini-batch的大小有两种极端的情况：</p><ol><li>mini-batch &#x3D; m（整个训练集）–&gt;Batch梯度下降法（如果m很大，则单次迭代耗时太长）</li><li>mini-batch &#x3D; 1–&gt;随机梯度下降法（会失去所有向量化带来的加速，效率过于低下，并且结果永远都不会收敛，会一直在最小值附近徘徊）</li></ol></li><li><p>在这两种极端情况下，成本函数的优化情况：蓝色（Batch梯度下降法），紫色（随机梯度下降法）</p></li><li><p>所以要选择不大不小的mini-batch尺寸，实际上学习速率达到最快：一方面得到大量向量化，另一方面不需要等待整个训练集被处理完，就可以开始进行后续工作了。当然mini-batch 梯度下降法的结果也都不会收敛，会一直在最小值附近徘徊，这时可以慢慢减小学习率。</p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/udjWegblTLxPzpk.png"                      alt="image-20210809161408930"                ></p><ul><li>那么该如何选择mini-batch尺寸呢：如果训练集较小，直接使用batch梯度下降（m&lt;2000）；如果训练集较大，mini-batch尺寸一般选择在64~512，经常将mini-batch尺寸设成2次方，这样代码会运行的比较快。最后要注意的是在mini-batch中X^ {t}和Y^ {t}要符合CPU&#x2F;GPU内存，如果不相符无论使用什么方法，算法都会表现得急转直下。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/hiESCG8g3uqxRJH.png"                      alt="image-20210809161425277"                ></p><h1 id="03-指数加权平均"><a href="#03-指数加权平均" class="headerlink" title="03 指数加权平均"></a>03 指数加权平均</h1><ul><li>计算下面温度散点图的趋势或者是温度的局部平均值或者说移动平均值：首先V_0&#x3D;0，然后运用公式：某天的V等于前一天的V的0.9倍加上当日温度的0.1倍，这样计算后用红线作图就得到了移动平均值&#x2F;每日温度的指数加权平均值。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/ZXuoW39PtdLc6y1.png"                      alt="image-20210809174303382"                ></p><ul><li>大体公式如下所示：在计算平均多少天温度时用1&#x2F;(1-b)来计算，如果b&#x3D;0.9将其带入该式子，可得10也就是十天的平均值，如果b为0.98就是绿色的线为50（平均过去50天的温度），如果b为0.5得到黄色线。b这个参数的大小决定了上一个值得权重。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/qdMmAVh8vtTr42j.png"                      alt="image-20210809174314626"                ></p><h1 id="04-理解指数加权平均"><a href="#04-理解指数加权平均" class="headerlink" title="04 理解指数加权平均"></a>04 理解指数加权平均</h1><ul><li><p>我们首先画一个每天温度得图（右上第一个），然后构建一个指数衰减函数（右上第二个）看sita的系数，sita99就是0.1×0.9、sita98就是0.1×(0.9)^ 2，以此类推画出图。计算V_100就是讲两个图对应的元素相乘然后求和。sita的系数加起来为1或者逼近1，我们称之为偏差修正，正是因为有偏差修正，这才是指数加权平均数。</p></li><li><p>那么到底需要平均多少天数呢：就是看几天后权重下降到不到当日权重的三分之一（设b等于一个数，他需要多少次方才能达到1&#x2F;e，多少次方用1&#x2F;(1-b)来计算）</p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/x7XF8Ed4S2QLvkH.png"                      alt="image-20210809203021545"                ></p><ul><li>如何在实际中执行：看右图就是初始化v，然后直接讲这个v带入公式来更新新的v，不断地更新。注意：左图是&#x3D;，右图是：&#x3D;</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/AQXmcBVMoUF8npT.png"                      alt="image-20210809203344689"                ></p><h1 id="05-指数加权平均的偏差修正"><a href="#05-指数加权平均的偏差修正" class="headerlink" title="05 指数加权平均的偏差修正"></a>05 指数加权平均的偏差修正</h1><ul><li>如果你在设置b为0.98时不是绿色的线而是起点低的紫色的曲线，那么我们就不要用V_t，而是用V_t&#x2F;(1-b^t)。假如t&#x3D;2，经过计算就是1号和2号数据的加权平均数并除去偏差，随着t的增加，b的t次方接近0，所以当t很大时，偏差修正几乎没有作用，因此当t很大时紫色线基本和绿色线重合了。如果关心初始时期的偏差，那么在刚开始计算指数加权移动平均数的时候，偏差修正能帮助在早期获得更好的估测。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/IaR6ms1nZdKeuYT.png"                      alt="image-20210809213123541"                ></p><h1 id="06-动量梯度下降法"><a href="#06-动量梯度下降法" class="headerlink" title="06 动量梯度下降法"></a>06 动量梯度下降法</h1><p>还有一种算法叫Momentum梯度下降法，运行速度几乎总是快于标准的梯度下降算法。基本思想是：计算梯度的指数加权平均数，并用该梯度更新权重。</p><hr><ul><li>Momentum梯度下降法在第t次迭代过程中，用现有的Mini-batch计算dW、db 。然后通过指数加权平均计算得到dw及db的移动平均数，最后重新赋值权重，这样就可以减缓梯度下降的幅度（即纵轴方向的摆动小了），也可以增加横轴方向的运动速度（红色线）。如果要最小化碗装函数，其中dW、db相当于为你从山上往下滚的球提供了加速度，V_dW、V_db相当于速度。由于β稍小于1，相当于有摩擦力，所以球不会无限的加速下去。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/6xOB9wFaWsrc2V5.png"                      alt="image-20210810094409383"                ></p><ul><li>最后我们看看具体如何计算：就用左边的公式包含1-β，因为右边的公式，如果你最后要调整超参数β，那么就会影响V_dW、V_db，也许还要修改学习率α（α要根据1&#x2F;(1-β)相应变化）。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/jv6ueB3X7aSFxsC.png"                      alt="image-20210810094341929"                ></p><h1 id="07-RMSprop（均方根）"><a href="#07-RMSprop（均方根）" class="headerlink" title="07 RMSprop（均方根）"></a>07 RMSprop（均方根）</h1><p>RMSprop也可以加速梯度下降，因为将微分进行平方，最后还使用了平方根所以叫均方根</p><hr><ul><li>分析这个纵轴幅度大，横轴向前推进的例子，假设纵轴代表参数b，横轴代表参数w，想要减缓b方向的学习同时推进横轴方向的学习，RMSprop算法可以将其实现。同样的RMSprop也会在第t次迭代中计算当下mini-batch的微分dW、db，接着通过计算得到(dw)^ 2及(db)^ 2的加权平均数，在更新参数时也做了些许改动，公式如下：从斜率可以看出纵轴的斜率比横轴的大（dW&gt;db）结果就变为绿色线。同样还可以用一个较大的学习率α来加快学习，而无须在纵轴上垂直方向偏离。为了保证数值能稳定一些，需要确保分母不为0，就要在分母上加一个很小很小的ε。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/Upy9rfWe7qEkcYD.png"                      alt="image-20210810110609785"                ></p><h1 id="08-Adam算法"><a href="#08-Adam算法" class="headerlink" title="08 Adam算法"></a>08 Adam算法</h1><p>Adam算法基本就是将Momentum和RMSprop结合在一起</p><hr><ul><li>使用Adam算法，首先要初始化，接着在第t次迭代中用当前的mini-batch计算dW、db，接下来计算momentum指数加权平均数，然后用RMSprop进行更新，相当于momentum更新了超参数β_1，RMSprop更新了β_2。一般使用Adam算法时要计算偏差修正，最后就可以更新权重了。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/kCNoc5eZ16HAnQT.png"                      alt="image-20210810115601945"                ></p><ul><li>其中有几个超参数：<ol><li>学习率α可以尝试一系列的值看哪个有效</li><li>β_1常用值为0.9，这是dW &#x2F; db的移动平均值也就是加权平均数</li><li>β_2常用值为0.999，这是(dW)^ 2 &#x2F; (db)^ 2的移动平均值也就是加权平均数</li><li>ε建议是10^ -8，但是没有必要设置</li></ol></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/thHVFCMTQx1paej.png"                      alt="image-20210810115615201"                ></p><h1 id="09-学习率衰退"><a href="#09-学习率衰退" class="headerlink" title="09 学习率衰退"></a>09 学习率衰退</h1><p>加快学习算法的一个办法就是随着时间慢慢减小学习率，我们称之为学习率衰退</p><hr><ul><li>蓝色的是使用同一学习率，而绿色的是随着时间慢慢减小学习率。慢慢减小学习率的本质在于：在学习初期你能承受较大的步伐，但当开始收敛时，小的学习率能让步伐小一些，不必在最小值范围内大幅度摆动。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/E865sAzXTqpdPtU.png"                      alt="image-20210810122936242"                ></p><ul><li>可以这样来进行学习率衰退：第一次遍历训练集叫做一代，第二次就是二代。可以将学习率设为（1&#x2F;(1+衰退率* 第几代）*α_0，α_0为初始学习率。如果想使用学习率衰退就需要不断地尝试参数α及超参数衰退率，找到合适的值。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/t4hUfm8nvbVrGxF.png"                      alt="image-20210810122952569"                ></p><ul><li>除了学习率衰减的公式，人们还使用指数衰减等其他公式：其中t代表mini-batch的数字。还会用离散下降，学习率一会减一半一会减一半。当然还可以手动调试学习率（在训练集小的时候）</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/pzARCWeoIQ2bfGu.png"                      alt="image-20210810123005014"                ></p><h1 id="10-局部最优的问题"><a href="#10-局部最优的问题" class="headerlink" title="10 局部最优的问题"></a>10 局部最优的问题</h1><ul><li>在高维度空间更有可能碰到右图的鞍点（导数为0的点），而不会碰到局部最优。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/rB4D2CGUapyLv9F.png"                      alt="image-20210810125524030"                ></p><ul><li>平稳段会减缓学习。慢慢下降到平稳段，然后在走出平稳段。</li><li>在训练较大的神经网络存在大量参数并且成本函数J被定义在较高的维度空间时，不大可能困在极差的局部最优中。</li><li>平稳段是一个问题，这样使得学习十分缓慢，这也是像Momentum或者是RMSprop或者是Adam这样的算法加快学习算法的地方，让你尽早走出平稳段。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/qQWz8PhG9vbgUM1.png"                      alt="image-20210810125537786"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-Mini-batch-梯度下降法&quot;&gt;&lt;a href=&quot;#01-Mini-batch-梯度下降法&quot; class=&quot;headerlink&quot; title=&quot;01 Mini-batch 梯度下降法&quot;&gt;&lt;/a&gt;01 Mini-batch 梯度下降法&lt;/h1&gt;&lt;ul&gt;
</summary>
      
    
    
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>深度学习 day06 深度学习的实用层面</title>
    <link href="http://example.com/2021/08/08/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20day06%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%AE%9E%E7%94%A8%E5%B1%82%E9%9D%A2/"/>
    <id>http://example.com/2021/08/08/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20day06%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%AE%9E%E7%94%A8%E5%B1%82%E9%9D%A2/</id>
    <published>2021-08-08T14:07:11.000Z</published>
    <updated>2022-04-13T12:04:54.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-训练-x2F-开发-x2F-测试集"><a href="#01-训练-x2F-开发-x2F-测试集" class="headerlink" title="01 训练 &#x2F; 开发 &#x2F; 测试集"></a>01 训练 &#x2F; 开发 &#x2F; 测试集</h1><ul><li>应用型机器学习是一个高度迭代的过程（想法-&gt;代码-&gt;实现），循环该过程的效率是决定项目进展速度的一个关键因素，创建高质量的训练集、验证集、测试集也有助于提高循环效率。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/DSxRVLuKpOgJNyd.png"                      alt="image-20210806161754138"                ></p><ul><li>随着数据量的不断增加（从1000个样本到1000000个样本），那么验证集和测试集占数据总量的比例会趋向于变得更小。如果数据有一百万，那么就可以选择一万条作验证集，一万条作测试集。因为验证集的目的就是验证不同的算法，检验哪种算法最有效，同样的根据最终选择的分类器，测试集的主要目的是正确评估分类器的性能，选择这么多数据就足够了。（训练集98%，验证集1%，测试集1%）</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/vtEC2qVdHk17o5Y.png"                      alt="image-20210806162107456"                ></p><ul><li>总结：现代深度学习的一个趋势：在训练和测试集分布不匹配的情况下进行训练（比如说训练集数据是从网上整下来的，验证集和测试集是用户上传的），针对于这种情况要确保验证集和测试集的数据来自同一分布。最后一点就是没有测试集也没关系（如果不需要无偏估计），如果只有验证集没有测试集，就应该在训练集上训练尝试不同的模型框架，在验证集上评估这些模型，然后迭代并选出合适的模型 。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/7fnzWmodxagwCYr.png"                      alt="image-20210806162137497"                ></p><h1 id="02-偏差-x2F-方差"><a href="#02-偏差-x2F-方差" class="headerlink" title="02 偏差 &#x2F; 方差"></a>02 偏差 &#x2F; 方差</h1><p>关于深度学习的误差问题就是要对偏差、方差的权衡。</p><hr><ul><li>分为欠拟合（高偏差） | 适度拟合 | 过度拟合（高方差）</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/EgIKkZJf4nYHLhO.png"                      alt="image-20210807102539471"                ></p><ul><li>理解偏差和方差的两个关键数据是训练集误差和验证集误差。下面分别是基于人眼误差为0的情况下，高方差 | 高偏差 | 高偏差+高方差 | 低偏差+低方差。（以上分析的前提都是假设基本误差很小，训练集和验证集来自相同分布）如果最优误差（贝叶斯误差）为15%，那么第二组数据就是低偏差+低方差。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/fjcuJr2yKGWPdTM.png"                      alt="image-20210807102555855"                ></p><ul><li>下面用紫色线画出的分类器具有高偏差和高方差，高偏差是因为它几乎是一条线性分类器，并未拟合数据，高方差是因为采用曲线函数或二次函数，灵活性太高以致拟合了这两个错误样本。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/u2ZcwayY7RUOT4P.png"                      alt="image-20210807102611204"                ></p><ul><li>总结：通过分析训练集和验证集验证算法产生的误差来诊断算法是否存在高偏差或者高方差，以此来决定接下来你要做什么</li></ul><h1 id="03-机器学习基础"><a href="#03-机器学习基础" class="headerlink" title="03 机器学习基础"></a>03 机器学习基础</h1><ul><li>首先检查偏差，如果偏差过高，甚至无法拟合训练集，那么就需要选择一个新网络（含有更多的隐层或者隐藏单元）；或者花费更多的时间来训练网络（花费更多的时间训练算法或者尝试更先进的优化算法）；或者从多种神经网络架构中选择一种，通常采用规模更大的网络都会有所帮助。不断地重复这些步骤，直到偏差降低到可接受范围。</li><li>一旦偏差降低到可接受的范围，检查下方差有没有问题（评估方差要查看验证集性能），如果方差过高，需要采用更多的数据也许会有帮助；或者通过正则化来减少过拟合；找到更合适的网络架构。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/ZOU1cMAfbrJiduz.png"                      alt="image-20210807154603673"                ></p><h1 id="04-正则化"><a href="#04-正则化" class="headerlink" title="04 正则化"></a>04 正则化</h1><ul><li>逻辑回归函数中的正则化：L2正则化是最常见的，还有L1正则化，如果使用L1正则化，w最终会是稀疏的（w向量中有很多0）。在python中我们使用lambd来代替lambda正则化参数。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/iTkZuKNzQcO5GfL.png"                      alt="image-20210808091957852"                ></p><ul><li>神经网络实现L2正则化：字母L代表神经网络的层数</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/8UyILZGqO6CvQwJ.png"                      alt="image-20210808092010146"                ></p><h1 id="05-为什么正则化可以减少过拟合？"><a href="#05-为什么正则化可以减少过拟合？" class="headerlink" title="05 为什么正则化可以减少过拟合？"></a>05 为什么正则化可以减少过拟合？</h1><ul><li>直观的理解就是lambda增加到足够大，w会接近于0，在这个过程中她会出现拟合正合适的情况，逐渐的会变成高偏差。直觉上我们会认为大量的隐藏单元被完全消除了，实际上依然存在，只是他们的影响变得更小了。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/zJQFSw4CqxYGt8B.png"                      alt="image-20210808095419078"                ></p><ul><li>假设我们用的是tanh()函数，z在很小的范围内，图像是呈线性的，如果z变得更大或者更小，图像将呈非线性。如果神经网络每层都是线性的，那么整个网络就是线性网络，最终我们只能计算线性函数，因此它不适合非常复杂的决策。总结：如果正则化参数变得很大，参数w很小，z也会相对变小，整个神经网络会计算离线性函数近的值，这个线性函数非常简单不会发生过拟合。</li><li>还有一点值得注意：为了调试梯度下降，一定要使用新定义的J函数，它包含了第二个正则化项，否则函数J可能不会在所有调幅范围内都单调递减。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/JKZaoeAkL5mnhfs.png"                      alt="image-20210808095442984"                ></p><h1 id="06-Dropout正则化"><a href="#06-Dropout正则化" class="headerlink" title="06 Dropout正则化"></a>06 Dropout正则化</h1><ul><li>Dropout（随机失活）工作流程：假设左图存在过拟合，dropout会遍历网络的每一层，并设置消除神经网络中节点的概率（每一个节点都以抛硬币的方式设置概率即每个节点得以保留和消除的概率都是0.5），我们在消除一些节点的同时也会删除该节点进出的连线，最后得到一个节点更少、规模更小的网络。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/Jrx6TVuDgXnk4S3.png"                      alt="image-20210808121838170"                ></p><ul><li>如何实施dropout：inverted dropout（反向随机失活）-&gt;首先定义一个向量d，d^ 3表示一个三层的dropout向量；然后看它是否小于某个数（keep-prob），keep-prob表示保留某个隐藏单元的概率，它的作用就是生成随机矩阵，这个d3就是个布尔类型的数组，值为1或者0；接下来是从第三层中获取激活函数（a3），a3等于上面的a3与d3元素相乘，它的作用就是过滤d3中所有等于0的元素，而各个元素等于0的概率只有20%；最后向外扩展a3，通过除以keep-prob来确保a3的期望值不变，假设预期a^ [3]预期减少20%，为了不影响z^ [4]的期望值，就需要用w^ [4]*a^ [3]除以0.8，它将会修正我们所需的那20%。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/CXtxvLIMOARTkQb.png"                      alt="image-20210808121710187"                ></p><ul><li>我们在测试阶段不使用dropout，因为在测试阶段我们不期望输出的结果是随机的。测试阶段不同于训练阶段，即使在测试阶段不执行dropout来调整数值范围，激活函数的预期结果也不会发生变化。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/2Bnb1patl4kzhcM.png"                      alt="image-20210808121649464"                ></p><h1 id="07-理解Dropout"><a href="#07-理解Dropout" class="headerlink" title="07 理解Dropout"></a>07 理解Dropout</h1><ul><li>左图中用紫色圈起来的单元，它不能依靠任何特征，因为特征（该单元的输入）都有可能被随机清除。通过为单元的四个输入增加一点权重，Dropout将产生收缩权重的平方范数的效果。实施Dropout的结果是会压缩权重并完成一些预防过拟合的外层正则化。Dropout的功能类似于L2正则化，与L2正则化不同的是：被应用的方式不同，Dropout也会有所不同，甚至更适用于不同的输入范围。为了预防矩阵的过拟合，对权重最大的矩阵（例如右图的w^ [2]&#x3D;7×7）的那一层，keep-prob值应该相对较低，而且每一层的keep-prob值都有可能不同，如果某一层keep-prob为1，那么就不对这层使用Dropout。</li><li>在计算机视觉领域由于通常没有足够的数据，所以一直存在过拟合，所以Dropout在这是很热门的。Dropout的一个大缺点就是代价函数J不被明确定义，为了绘制学习曲线确保每次迭代都是呈下降趋势，通常会关闭Dropout函数，然后运行代码确保J函数单调递减，最后在打开Dropout。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/jFPkWd2q4YLTwEH.png"                      alt="image-20210808153353102"                ></p><ul><li>总结：如果你担心某些层比其他层更加容易过拟合，那么就将某些层的keep-prob值设置相对较低，缺点是为了使用交叉验证，需要搜索更多的超级参数。另一种方案是一些层用Dropout，一些层不用，应用的层只含有一个超级参数就是keep-prob</li></ul><h1 id="08-其他正则化方法"><a href="#08-其他正则化方法" class="headerlink" title="08 其他正则化方法"></a>08 其他正则化方法</h1><ul><li>数据扩增可以作为正则化方法使用：对图片进行水平翻转，扩大裁剪，对数字进行扭曲等操作。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/5elauZS8y9sb7fT.png"                      alt="image-20210808162621924"                ></p><ul><li>early stopping代表提前停止训练神经网络。我们在绘制验证集误差时会发现。验证集误差通常会呈下降趋势，然后在某一节点开始上升，因此在迭代的过程中选择中间w的值（就是那个拐点），early stopping的优点是只运行一次坡度下降，就可以找到w的较小值、中间值和较大值，而无需尝试L2正则化超级参数lambda的很多值。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/kBOTQGpcFNbvr6g.png"                      alt="image-20210808162639281"                ></p><h1 id="09-正则化输入"><a href="#09-正则化输入" class="headerlink" title="09 正则化输入"></a>09 正则化输入</h1><p>训练神经网络，其中一个加速训练的方法就是归一化输入：归一化的目的就是让特征值保持在相似的范围内</p><hr><ul><li>归一化输入有两个步骤：第一步是零均值化（左下公式）变为第二个图，第二步是归一化方差（右下公式）变为第三个图，第二个图的x_1的方差明显比x_2的方差要大-&gt;第三个图x_1的方差和x_2的方差一样大。我们希望不论是训练数据还是测试数据都是通过相同的u和sita^ 2定义的相同数据转换，其中u和sita^ 2是由训练集数据计算得出的。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/RLjO2othmpvKud7.png"                      alt="image-20210808181124568"                ></p><ul><li>如果使用非归一化特征（特征值不在一个相似的范围内），会得到一个非常细长狭窄的代价函数（左图）并且需要的学习率也要小，如果归一化特征后（特征值处于相似范围内），代价函数看起来更加的对称（右图）而且设置的学习率可以较大。如果特征的范围都很相似，那么将对优化算法很有利（下方x的取值），否则不利（上方x的取值）。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/ZJQnVwRkijFsEYy.png"                      alt="image-20210808181137915"                ></p><ul><li>总结：如果特征值不在一个相似的范围内，那么归一化将会显得格外重要，如果特征值处于相似范围内，那么归一化就不是很重要了。</li></ul><h1 id="10-梯度消失与梯度爆炸"><a href="#10-梯度消失与梯度爆炸" class="headerlink" title="10 梯度消失与梯度爆炸"></a>10 梯度消失与梯度爆炸</h1><p>当你训练神经网络时，导数或者坡度有时会变得非常大或者非常小，甚至以指数方式变小，这加大了训练难度。我们应更加明智的选择随机初始化权重，从而避免这个问题。</p><hr><ul><li>该例子中g（z）&#x3D;z，b^ [l]&#x3D;0。当权重w只比1略大一点或者说比单位矩阵大一点，深度神经网络的激活函数将爆炸式增长，如果w比1略小一点，在神经网络中激活函数将以指数级递减。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/h6X38FCtTJ4VUzK.png"                      alt="image-20210808203127077"                ></p><h1 id="11-神经网络的权重初始化"><a href="#11-神经网络的权重初始化" class="headerlink" title="11 神经网络的权重初始化"></a>11 神经网络的权重初始化</h1><ul><li>神经单元权重初始化：为了防止z值过大或过小，当n越大你希望w_i越小，最合理的方法就是设置w_i&#x3D;1&#x2F;n，其中这里的n代表神经元的输入特征数量，实际上就是设置某层权重矩阵w。如果用的是Relu激活函数而不是1&#x2F;n，方差设置为2&#x2F;n更好。这里用n^ [l-1]是因为一般情况下l层的每个神经元都有n^ [l-1]个输入。</li><li>其他变体函数的公式：Tanh激活函数为右边第一个式子；Relu激活函数是左边画框的；有时也用右边第二个</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/AgKEYzaNMTPk3LB.png"                      alt="image-20210808205829700"                ></p><h1 id="12-梯度的数值逼近"><a href="#12-梯度的数值逼近" class="headerlink" title="12 梯度的数值逼近"></a>12 梯度的数值逼近</h1><p>梯度检验的作用是确保backprop正确实施</p><hr><ul><li>单边计算：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/alpyERwhz4Z18LG.png"                      alt="image-20210808210925721"                ></p><ul><li>使用双边误差的方法更逼近导数，双边计算出来是3.0001，而单边计算出来是3.0301，可以看出双边更加接近3。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/M2UcAmtYkE8ZOKR.png"                      alt="image-20210808210940411"                ></p><h1 id="13-梯度检验"><a href="#13-梯度检验" class="headerlink" title="13 梯度检验"></a>13 梯度检验</h1><ul><li>首先做些处理：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/QeZG3sbtj7Toyi5.png"                      alt="image-20210808213755158"                ></p><ul><li>为了实施梯度检验，要做的就是循环执行。先将J展开，然后进行循环，我们要验证的就是dsita_approx与dsita这两个向量是否真的接近，一般做下列运算：计算这两个向量的距离（dsita_approx-dsita的欧几里得范数，注意没有平方，它是误差平方之和，然后求平方根得到欧式距离），然后用向量长度做归一化，结果为||dsita_approx-dsita||&#x2F;||dsita_approx||+||dsita||。分母只是用来预防这些向量太小或太大，分母使这个方程式变成比率。如果计算方程式得到的值为10的-7次方甚至更小，这就很好；如果在10的-5次方就要小心了，检查这个向量所有的项确保没有一项误差过大；如果是10的-3那么就要担心是否存在bug了，看看是否有个具体的i值使得dsita_approx与dsita大不相同。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/nvMwEskfLJ9lxDm.png"                      alt="image-20210808213819586"                ></p><h1 id="14-关于梯度检验实现的注记"><a href="#14-关于梯度检验实现的注记" class="headerlink" title="14 关于梯度检验实现的注记"></a>14 关于梯度检验实现的注记</h1><p>如何在神经网络实现梯度检验的适用技巧和注意事项</p><hr><ul><li>不要在训练中适用梯度检验，它只用于调试</li><li>如果算法的梯度检验失败，要检查所有项，并试图找出bug：如果两个向量的值相差很大 ，我们要查找不同的i值，看看是哪个导致的。</li><li>在实施梯度检验时，如果使用正则化，请注意正则项</li><li>梯度检验不能与dropout同时使用：因为每次迭代过程中dropout会随机消除隐层单元的不同子集，难以计算dropout在梯度下降上的代价函数J</li><li>在随机初始化过程中，当w和b接近0时，梯度下降&#x2F;backprop的实施是正确的；但在运行梯度下降时w和b变得更大，也就越来越不准确。这时要做的就是在随机初始化过程中运行梯度检验，然后训练网络，w和b会有一段时间远离0，如果随机初始化值比较小，反复训练网络之后再重新运行梯度检验。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/OG8TsrDMlcpiyKz.png"                      alt="image-20210808214519694"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-训练-x2F-开发-x2F-测试集&quot;&gt;&lt;a href=&quot;#01-训练-x2F-开发-x2F-测试集&quot; class=&quot;headerlink&quot; title=&quot;01 训练 &amp;#x2F; 开发 &amp;#x2F; 测试集&quot;&gt;&lt;/a&gt;01 训练 &amp;#x2F; 开发 &amp;#x2</summary>
      
    
    
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>1编程作业：线性回归</title>
    <link href="http://example.com/2021/08/06/1%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%9A%EF%BC%9A%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    <id>http://example.com/2021/08/06/1%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%9A%EF%BC%9A%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</id>
    <published>2021-08-06T03:59:57.000Z</published>
    <updated>2022-04-13T04:20:14.559Z</updated>
    
    <content type="html"><![CDATA[<p>原任务是在Octave&#x2F;MATLAB实现，本次编程作业全部以python完成。</p><hr><h1 id="01-简单的练习"><a href="#01-简单的练习" class="headerlink" title="01 简单的练习"></a>01 简单的练习</h1><p>总结下题目：输出一个5*5的单位矩阵</p><hr><ul><li>在此我们用np.eye(<em>N</em>,<em>M&#x3D;None</em>, <em>k&#x3D;0</em>, <em>dtype&#x3D;&lt;type ‘float’&gt;</em>)，首先N代表的是输出方阵的维度，第二个参数不用设置默认M&#x3D;N，主要看第三个参数，默认是对角线为1，其余全为0；如果k为正数，则对角线往上第k个全为1，其余全为0；如果k为负数，则对角线往下第k个全为1，其余全为0。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.eye(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[[1. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 1. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 1. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 1. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0. 1.]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h1 id="02-单变量线性回归"><a href="#02-单变量线性回归" class="headerlink" title="02 单变量线性回归"></a>02 单变量线性回归</h1><p>根据这座城市的人口数量及该城市小吃店的利润，来预测开小吃店的利润。</p><hr><h2 id="2-1-绘制数据"><a href="#2-1-绘制数据" class="headerlink" title="2.1 绘制数据"></a>2.1 绘制数据</h2><ul><li>读入数据：在此我们引入pandas库，该库可以帮助我们从诸如 csv 类型的文件导入数据，并且可以用它快速的对数据进行转换和过滤的操作。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">path = <span class="string">&quot;machine-learning-ex1\machine-learning-ex1\ex1\ex1data1.txt&quot;</span></span><br><span class="line">data = pd.read_csv(path,header=<span class="literal">None</span>,names=[<span class="string">&#x27;Population&#x27;</span>,<span class="string">&#x27;Profit&#x27;</span>])<span class="comment">#header决定要不要原始的表头，name给出自定义的表头。</span></span><br><span class="line"><span class="built_in">print</span>(data.head())<span class="comment">#从头查询数据</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">   population   profit</span></span><br><span class="line"><span class="string">0      6.1101  17.5920</span></span><br><span class="line"><span class="string">1      5.5277   9.1302</span></span><br><span class="line"><span class="string">2      8.5186  13.6620</span></span><br><span class="line"><span class="string">3      7.0032  11.8540</span></span><br><span class="line"><span class="string">4      5.8598   6.8233</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li>数据可视化：在此我们引入matplotlib.pyplot库，使用plot函数画图。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">data.plot(kind=<span class="string">&#x27;scatter&#x27;</span>, x=<span class="string">&#x27;Population&#x27;</span>, y=<span class="string">&#x27;Profit&#x27;</span>, figsize=(<span class="number">12</span>,<span class="number">8</span>))<span class="comment">#生成图形，kind‘指定所画图的类型，figsize 指定图片大小。</span></span><br><span class="line">plt.show()<span class="comment">#显示图形</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/TExH9s13tMWIioB.png"                      alt="image-20210805080023050"                ></p><h2 id="2-2-梯度下降"><a href="#2-2-梯度下降" class="headerlink" title="2.2 梯度下降"></a>2.2 梯度下降</h2><p>这部分需要使用梯度下降将线性回归参数 θ 拟合到数据集上。</p><h3 id="2-21-公式"><a href="#2-21-公式" class="headerlink" title="2.21 公式"></a>2.21 公式</h3><ul><li>代价函数</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/3lprR9vik6M2dOG.png"                      alt="image-20210805112600247"                ></p><ul><li>假设函数</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/xYra86AfkZ14HcR.png"                      alt="image-20210805112723564"                ></p><ul><li>参数更新</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/vSkcFgEYuK1do4I.png"                      alt="image-20210805115411195"                ></p><ul><li>随着梯度下降不断地更新参数，参数也就越接近使代价函数最小的最优值</li></ul><h3 id="2-22-实现"><a href="#2-22-实现" class="headerlink" title="2.22 实现"></a>2.22 实现</h3><ul><li>我们要为我们之前读取的数据添加一列x，用来更新θ_0。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data.insert(<span class="number">0</span>, <span class="string">&#x27;Ones&#x27;</span>, <span class="number">1</span>) <span class="comment">#相当于在第0列，添加一个表头名为Ones，并且该列均为1</span></span><br><span class="line"><span class="built_in">print</span>(data.head())</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">   Ones  Population   Profit</span></span><br><span class="line"><span class="string">0     1      6.1101  17.5920</span></span><br><span class="line"><span class="string">1     1      5.5277   9.1302</span></span><br><span class="line"><span class="string">2     1      8.5186  13.6620</span></span><br><span class="line"><span class="string">3     1      7.0032  11.8540</span></span><br><span class="line"><span class="string">4     1      5.8598   6.8233</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li>分割X和y。使用pandas的iloc来进行选择训练集X和目标y</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分割X和y</span></span><br><span class="line">lists = data.shape[<span class="number">1</span>]<span class="comment">#输出列数</span></span><br><span class="line">X = data.iloc[:,:-<span class="number">1</span>]<span class="comment">#X是第一列到最后一列，但不包括最后一列，因为 python的范围/切片不包括终点</span></span><br><span class="line">y = data.iloc[:,lists-<span class="number">1</span>:lists]<span class="comment">#最后一列</span></span><br><span class="line"><span class="comment">#y = data.iloc[:,-1]#也是最后一列</span></span><br><span class="line"><span class="built_in">print</span>(X.head())</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">   Ones  Population</span></span><br><span class="line"><span class="string">0     1      6.1101</span></span><br><span class="line"><span class="string">1     1      5.5277</span></span><br><span class="line"><span class="string">2     1      8.5186</span></span><br><span class="line"><span class="string">3     1      7.0032</span></span><br><span class="line"><span class="string">4     1      5.8598</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(y.head())</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Profit</span></span><br><span class="line"><span class="string">0  17.5920</span></span><br><span class="line"><span class="string">1   9.1302</span></span><br><span class="line"><span class="string">2  13.6620</span></span><br><span class="line"><span class="string">3  11.8540</span></span><br><span class="line"><span class="string">4   6.8233</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li>我们还要将θ初始化为0，并将θ、X、y全部转化为矩阵</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">X = np.matrix(X.values)</span><br><span class="line">y = np.matrix(y.values)</span><br><span class="line">theta = np.matrix(np.array([<span class="number">0</span>,<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(X.shape)<span class="comment">#(97, 2)</span></span><br><span class="line"><span class="built_in">print</span>(y.shape)<span class="comment">#(97, 1)</span></span><br><span class="line"><span class="built_in">print</span>(theta.shape)<span class="comment">#(1, 2)</span></span><br></pre></td></tr></table></figure><h3 id="2-23-计算J-θ"><a href="#2-23-计算J-θ" class="headerlink" title="2.23 计算J(θ)"></a>2.23 计算J(θ)</h3><ul><li>计算代价函数来检测代价函数的收敛性。根据上面的公式我们写出代价函数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">computeCost</span>(<span class="params">X, y, theta</span>):</span><br><span class="line">    inner = np.power((X * theta.T)-y,<span class="number">2</span>)<span class="comment">#数组元素求n次方</span></span><br><span class="line">    <span class="keyword">return</span> np.<span class="built_in">sum</span>(inner) / (<span class="number">2</span> * <span class="built_in">len</span>(X))</span><br><span class="line"><span class="built_in">print</span>(computeCost(X, y, theta)) <span class="comment">#32.072733877455676</span></span><br></pre></td></tr></table></figure><h3 id="2-24-梯度下降"><a href="#2-24-梯度下降" class="headerlink" title="2.24 梯度下降"></a>2.24 梯度下降</h3><p>代价函数J(θ)的参数是由向量θ表示，假设你已经实现了梯度下降，如果计算正确，J(θ)的值不应该增加，而应该减小然后在算法结束时收敛到一个稳定值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gradientDescent</span>(<span class="params">X, y, theta, alpha, iters</span>):</span><br><span class="line">    temp = np.matrix(np.zeros(theta.shape))<span class="comment">#创建0矩阵[[0. 0.]]</span></span><br><span class="line">    parameters = <span class="built_in">int</span>(theta.ravel().shape[<span class="number">1</span>]) <span class="comment">#ravel()将多维数组转换为一维数组,.shape[1]是看列数为多少-2</span></span><br><span class="line">    cost = np.zeros(iters)<span class="comment">#初始化代价函数数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(iters):</span><br><span class="line">        error = (X * theta.T) - y</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(parameters):</span><br><span class="line">            term = np.multiply(error, X[:, j])</span><br><span class="line">            temp[<span class="number">0</span>, j] = theta[<span class="number">0</span>, j] - ((alpha / <span class="built_in">len</span>(X)) * np.<span class="built_in">sum</span>(term))<span class="comment">#更新参数</span></span><br><span class="line"></span><br><span class="line">        theta = temp</span><br><span class="line">        cost[i] = computeCost(X, y, theta)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> theta, cost</span><br><span class="line"></span><br><span class="line">alpha = <span class="number">0.01</span></span><br><span class="line">iters = <span class="number">1500</span></span><br><span class="line">g, cost = gradientDescent(X, y, theta, alpha, iters)</span><br><span class="line"><span class="built_in">print</span>(g)<span class="comment">#[[-3.63029144  1.16636235]]</span></span><br><span class="line">predict1 = [<span class="number">1</span>,<span class="number">3.5</span>]*g.T</span><br><span class="line"><span class="built_in">print</span>(predict1)<span class="comment">#[[0.45197679]]</span></span><br><span class="line">predict2 = [<span class="number">1</span>,<span class="number">7</span>]*g.T</span><br><span class="line"><span class="built_in">print</span>(predict2)<span class="comment">#[[4.53424501]]</span></span><br></pre></td></tr></table></figure><h3 id="2-3-调试"><a href="#2-3-调试" class="headerlink" title="2.3 调试"></a>2.3 调试</h3><ul><li>python可视化：原始数据以及拟合的直线</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在指定的间隔内返回均匀间隔的数字：从data.Population的最小值到最大的范围内，等间距的返回100个样本</span></span><br><span class="line">x = np.linspace(data.Population.<span class="built_in">min</span>(), data.Population.<span class="built_in">max</span>(), <span class="number">100</span>)</span><br><span class="line">f = g[<span class="number">0</span>, <span class="number">0</span>] + (g[<span class="number">0</span>, <span class="number">1</span>] * x)<span class="comment">#参数为最优值的直线</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">12</span>,<span class="number">8</span>))<span class="comment">#创建一个12*8的图即多维窗口</span></span><br><span class="line">ax.plot(x, f, <span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;Prediction&#x27;</span>) <span class="comment">#定义x, y, 颜色，图例上显示的东西</span></span><br><span class="line">ax.scatter(data.Population, data.Profit, label=<span class="string">&#x27;Traning Data&#x27;</span>)</span><br><span class="line">ax.legend(loc=<span class="number">2</span>)<span class="comment">#指定图例的位置</span></span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;Population&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;Profit&#x27;</span>)</span><br><span class="line">ax.set_title(<span class="string">&#x27;Predicted Profit vs. Population Size&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/v5wimh6HzINd8lE.png"                      alt="image-20210805233002972"                ></p><h1 id="03-多变量线性回归"><a href="#03-多变量线性回归" class="headerlink" title="03 多变量线性回归"></a>03 多变量线性回归</h1><p>根据ex1data2.txt里的数据建立模型，预测房屋的价格，其中第一列是房屋大小，第二列是卧室数量，第三列是房屋售价</p><hr><ul><li>第一步依旧是读入数据：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">&#x27;machine-learning-ex1\machine-learning-ex1\ex1\ex1data2.txt&#x27;</span></span><br><span class="line">data2 = pd.read_csv(path,header = <span class="literal">None</span>,names=[<span class="string">&#x27;Size&#x27;</span>, <span class="string">&#x27;Bedrooms&#x27;</span>, <span class="string">&#x27;Price&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(data2.head())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"> Size  Bedrooms   Price</span></span><br><span class="line"><span class="string">0  2104         3  399900</span></span><br><span class="line"><span class="string">1  1600         3  329900</span></span><br><span class="line"><span class="string">2  2400         3  369000</span></span><br><span class="line"><span class="string">3  1416         2  232000</span></span><br><span class="line"><span class="string">4  3000         4  539900</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="3-1-特征归一化"><a href="#3-1-特征归一化" class="headerlink" title="3.1 特征归一化"></a>3.1 特征归一化</h2><p>特征缩放的目的只是为了运行更快。使特征值比较接近，使图像变得比较圆。以至于梯度下降的速度更快，收敛所需要的迭代次数更少，收敛更快。</p><hr><ul><li>mean()函数功能：求取均值，std()函数是用来求标准差的（std &#x3D; sqrt(mean(abs(x - x.mean())**2))）。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data2 = (data2 - data2.mean()) / data2.std()</span><br><span class="line"><span class="built_in">print</span>(data2.head())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      Size  Bedrooms     Price</span></span><br><span class="line"><span class="string">0  0.130010 -0.223675  0.475747</span></span><br><span class="line"><span class="string">1 -0.504190 -0.223675 -0.084074</span></span><br><span class="line"><span class="string">2  0.502476 -0.223675  0.228626</span></span><br><span class="line"><span class="string">3 -0.735723 -1.537767 -0.867025</span></span><br><span class="line"><span class="string">4  1.257476  1.090417  1.595389</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-梯度下降"><a href="#3-2-梯度下降" class="headerlink" title="3.2 梯度下降"></a>3.2 梯度下降</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">data2.insert(<span class="number">0</span>, <span class="string">&#x27;Ones&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">cols = data2.shape[<span class="number">1</span>]</span><br><span class="line">X2 = data2.iloc[:,<span class="number">0</span>:cols-<span class="number">1</span>]</span><br><span class="line">y2 = data2.iloc[:,cols-<span class="number">1</span>:cols]</span><br><span class="line"></span><br><span class="line">X2 = np.matrix(X2.values)</span><br><span class="line">y2 = np.matrix(y2.values)</span><br><span class="line">theta2 = np.matrix(np.array([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">g2, cost2 = gradientDescent(X2, y2, theta2, alpha, iters)</span><br><span class="line"><span class="built_in">print</span>(g2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[-1.10898288e-16  8.84042349e-01 -5.24551809e-02]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="3-3-正规方程"><a href="#3-3-正规方程" class="headerlink" title="3.3 正规方程"></a>3.3 正规方程</h2><p>训练集特征矩阵为 X（包含了x_0&#x3D;1）训练集结果为向量 y，则利用正规方程解出向量:其中np.linalg.inv()：矩阵求逆。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/cAfMsjPdLED5gJB.png"                      alt="image-20210806114131781"                ></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">normalEqn</span>(<span class="params">X, y</span>):</span><br><span class="line">    theta = ((np.linalg.inv(X.T.dot(X))).dot(X.T)).dot(y)</span><br><span class="line">    <span class="comment"># theta = np.linalg.inv(X.T@X)@X.T@y</span></span><br><span class="line">    <span class="keyword">return</span> theta</span><br><span class="line">theta2=normalEqn(X2, y2)</span><br><span class="line"><span class="built_in">print</span>(theta2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[-7.11223170e-17]</span></span><br><span class="line"><span class="string"> [ 8.84765988e-01]</span></span><br><span class="line"><span class="string"> [-5.31788197e-02]]</span></span><br><span class="line"><span class="string"> &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="04-代码总结"><a href="#04-代码总结" class="headerlink" title="04 代码总结"></a>04 代码总结</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">path = <span class="string">&quot;machine-learning-ex1\machine-learning-ex1\ex1\ex1data1.txt&quot;</span></span><br><span class="line">data = pd.read_csv(path,header=<span class="literal">None</span>,names=[<span class="string">&#x27;Population&#x27;</span>,<span class="string">&#x27;Profit&#x27;</span>])<span class="comment">#header决定要不要原始的表头，name给出自定义的表头。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#data.plot(kind=&#x27;scatter&#x27;, x=&#x27;Population&#x27;, y=&#x27;Profit&#x27;, figsize=(12,8))#生成图形，kind‘指定所画图的类型，figsize 指定图片大小。</span></span><br><span class="line"><span class="comment"># plt.show()#显示图形</span></span><br><span class="line"><span class="comment">#==============================================================================</span></span><br><span class="line">data.insert(<span class="number">0</span>, <span class="string">&#x27;Ones&#x27;</span>, <span class="number">1</span>) <span class="comment">#相当于在第0列，添加一个表头名为Ones，并且该列均为1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割X和y</span></span><br><span class="line">lists = data.shape[<span class="number">1</span>]<span class="comment">#输出列数</span></span><br><span class="line">X = data.iloc[:,:-<span class="number">1</span>]<span class="comment">#X是第一列到最后一列，但不包括最后一列，因为 python的范围/切片不包括终点</span></span><br><span class="line">y = data.iloc[:,lists-<span class="number">1</span>:lists]<span class="comment">#最后一列</span></span><br><span class="line"><span class="comment">#y = data.iloc[:,-1]#也是最后一列</span></span><br><span class="line"></span><br><span class="line">X = np.matrix(X.values)</span><br><span class="line">y = np.matrix(y.values)</span><br><span class="line">theta = np.matrix(np.array([<span class="number">0</span>,<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">computeCost</span>(<span class="params">X, y, theta</span>):</span><br><span class="line">    inner = np.power((X * theta.T)-y,<span class="number">2</span>)<span class="comment">#数组元素求n次方</span></span><br><span class="line">    <span class="keyword">return</span> np.<span class="built_in">sum</span>(inner) / (<span class="number">2</span> * <span class="built_in">len</span>(X))</span><br><span class="line"><span class="comment"># print(computeCost(X, y, theta)) #32.072733877455676</span></span><br><span class="line"><span class="comment">#梯度下降算法如下：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gradientDescent</span>(<span class="params">X, y, theta, alpha, iters</span>):</span><br><span class="line">    temp = np.matrix(np.zeros(theta.shape))<span class="comment">#创建0矩阵[[0. 0.]]</span></span><br><span class="line">    parameters = <span class="built_in">int</span>(theta.ravel().shape[<span class="number">1</span>]) <span class="comment">#ravel()将多维数组转换为一维数组,.shape[1]是看列数为多少</span></span><br><span class="line">    cost = np.zeros(iters)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(iters):</span><br><span class="line">        error = (X * theta.T) - y</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(parameters):</span><br><span class="line">            term = np.multiply(error, X[:, j])</span><br><span class="line">            temp[<span class="number">0</span>, j] = theta[<span class="number">0</span>, j] - ((alpha / <span class="built_in">len</span>(X)) * np.<span class="built_in">sum</span>(term))</span><br><span class="line"></span><br><span class="line">        theta = temp</span><br><span class="line">        cost[i] = computeCost(X, y, theta)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> theta, cost</span><br><span class="line"></span><br><span class="line">alpha = <span class="number">0.01</span></span><br><span class="line">iters = <span class="number">1500</span></span><br><span class="line">g, cost = gradientDescent(X, y, theta, alpha, iters)</span><br><span class="line"><span class="comment">#print(g)#[[-3.63029144  1.16636235]]</span></span><br><span class="line">predict1 = [<span class="number">1</span>,<span class="number">3.5</span>]*g.T</span><br><span class="line"><span class="comment">#print(predict1)#[[0.45197679]]</span></span><br><span class="line">predict2 = [<span class="number">1</span>,<span class="number">7</span>]*g.T</span><br><span class="line"><span class="comment">#print(predict2)#[[4.53424501]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在指定的间隔内返回均匀间隔的数字：从data.Population的最小值到最大的范围内，等间距的返回100个样本</span></span><br><span class="line">x = np.linspace(data.Population.<span class="built_in">min</span>(), data.Population.<span class="built_in">max</span>(), <span class="number">100</span>)</span><br><span class="line">f = g[<span class="number">0</span>, <span class="number">0</span>] + (g[<span class="number">0</span>, <span class="number">1</span>] * x)<span class="comment">#参数为最优值的直线</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">12</span>,<span class="number">8</span>))<span class="comment">#创建一个12*8的图即多维窗口</span></span><br><span class="line">ax.plot(x, f, <span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;Prediction&#x27;</span>) <span class="comment">#定义x, y, 颜色，图例上显示的东西</span></span><br><span class="line">ax.scatter(data.Population, data.Profit, label=<span class="string">&#x27;Traning Data&#x27;</span>)</span><br><span class="line">ax.legend(loc=<span class="number">2</span>)<span class="comment">#指定图例的位置</span></span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;Population&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;Profit&#x27;</span>)</span><br><span class="line">ax.set_title(<span class="string">&#x27;Predicted Profit vs. Population Size&#x27;</span>)</span><br><span class="line"><span class="comment">#plt.show()</span></span><br><span class="line"><span class="comment">#===========================================================================</span></span><br><span class="line">path = <span class="string">&#x27;machine-learning-ex1\machine-learning-ex1\ex1\ex1data2.txt&#x27;</span></span><br><span class="line">data2 = pd.read_csv(path,header = <span class="literal">None</span>,names=[<span class="string">&#x27;Size&#x27;</span>, <span class="string">&#x27;Bedrooms&#x27;</span>, <span class="string">&#x27;Price&#x27;</span>])</span><br><span class="line">data2 = (data2 - data2.mean()) / data2.std()</span><br><span class="line"></span><br><span class="line">data2.insert(<span class="number">0</span>, <span class="string">&#x27;Ones&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">cols = data2.shape[<span class="number">1</span>]</span><br><span class="line">X2 = data2.iloc[:,<span class="number">0</span>:cols-<span class="number">1</span>]</span><br><span class="line">y2 = data2.iloc[:,cols-<span class="number">1</span>:cols]</span><br><span class="line"></span><br><span class="line">X2 = np.matrix(X2.values)</span><br><span class="line">y2 = np.matrix(y2.values)</span><br><span class="line">theta2 = np.matrix(np.array([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">g2, cost2 = gradientDescent(X2, y2, theta2, alpha, iters)</span><br><span class="line"><span class="built_in">print</span>(g2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">normalEqn</span>(<span class="params">X, y</span>):</span><br><span class="line">    theta = ((np.linalg.inv(X.T.dot(X))).dot(X.T)).dot(y)</span><br><span class="line">    <span class="comment"># theta = np.linalg.inv(X.T@X)@X.T@y</span></span><br><span class="line">    <span class="keyword">return</span> theta</span><br><span class="line">theta2=normalEqn(X2, y2)</span><br><span class="line"><span class="built_in">print</span>(theta2)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;原任务是在Octave&amp;#x2F;MATLAB实现，本次编程作业全部以python完成。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;01-简单的练习&quot;&gt;&lt;a href=&quot;#01-简单的练习&quot; class=&quot;headerlink&quot; title=&quot;01 简单的练习&quot;&gt;&lt;/a&gt;01 简单</summary>
      
    
    
    
    
    <category term="机器学习" scheme="http://example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>神经网络和深度学习第四周检测</title>
    <link href="http://example.com/2021/08/03/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E5%9B%9B%E5%91%A8%E6%A3%80%E6%B5%8B/"/>
    <id>http://example.com/2021/08/03/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E5%9B%9B%E5%91%A8%E6%A3%80%E6%B5%8B/</id>
    <published>2021-08-03T14:45:19.000Z</published>
    <updated>2022-04-13T11:58:37.777Z</updated>
    
    <content type="html"><![CDATA[<h1 id="答案见下方"><a href="#答案见下方" class="headerlink" title="答案见下方"></a>答案见下方</h1><hr><h2 id="1-在实现前向传播和反向传播中使用的“cache”是什么？"><a href="#1-在实现前向传播和反向传播中使用的“cache”是什么？" class="headerlink" title="1.在实现前向传播和反向传播中使用的“cache”是什么？"></a>1.在实现前向传播和反向传播中使用的“cache”是什么？</h2><p>A. 用于在训练期间缓存成本函数的中间值。<br>B. 我们用它传递前向传播中计算的变量到相应的反向传播步骤，它包含用于计算导数的反向传播的有用值。<br>C. 它用于跟踪我们正在搜索的超参数，以加速计算。<br>D. 我们使用它将向后传播计算的变量传递给相应的正向传播步骤，它包含用于计算计算激活的正向传播的有用值。</p><h2 id="2-以下哪些是“超参数”？"><a href="#2-以下哪些是“超参数”？" class="headerlink" title="2.以下哪些是“超参数”？"></a>2.以下哪些是“超参数”？</h2><p>A. 隐藏层的大小n^ [l]<br>B. 学习率α<br>C. 迭代次数<br>D. 神经网络中的层数L</p><h2 id="3-下列哪个说法是正确的？"><a href="#3-下列哪个说法是正确的？" class="headerlink" title="3.下列哪个说法是正确的？"></a>3.下列哪个说法是正确的？</h2><p>A. 神经网络的更深层通常比前面的层计算更复杂的输入特征。<br>B. 神经网络的前面的层通常比更深层计算输入的更复杂的特性。</p><h2 id="4-向量化允许您在L层神经网络中计算前向传播，而不需要在层-l-x3D-1-2，…，L-上显式的使用for-loop（或任何其他显式迭代循环），正确吗？"><a href="#4-向量化允许您在L层神经网络中计算前向传播，而不需要在层-l-x3D-1-2，…，L-上显式的使用for-loop（或任何其他显式迭代循环），正确吗？" class="headerlink" title="4.向量化允许您在L层神经网络中计算前向传播，而不需要在层(l &#x3D; 1,2，…，L)上显式的使用for-loop（或任何其他显式迭代循环），正确吗？"></a>4.向量化允许您在L层神经网络中计算前向传播，而不需要在层(l &#x3D; 1,2，…，L)上显式的使用for-loop（或任何其他显式迭代循环），正确吗？</h2><p>A. 正确<br>B.  错误</p><h2 id="5-假设我们将n-l-的值存储在名为layers的数组中，如下所示：layer-dims-x3D-n-x-4-3-2-1-。-因此，第1层有四个隐藏单元，第2层有三个隐藏单元，依此类推。-您可以使用哪个for循环初始化模型参数？"><a href="#5-假设我们将n-l-的值存储在名为layers的数组中，如下所示：layer-dims-x3D-n-x-4-3-2-1-。-因此，第1层有四个隐藏单元，第2层有三个隐藏单元，依此类推。-您可以使用哪个for循环初始化模型参数？" class="headerlink" title="5. 假设我们将n^ [l]的值存储在名为layers的数组中，如下所示：layer_dims &#x3D; [n_x,4,3,2,1]。 因此，第1层有四个隐藏单元，第2层有三个隐藏单元，依此类推。 您可以使用哪个for循环初始化模型参数？"></a>5. 假设我们将n^ [l]的值存储在名为layers的数组中，如下所示：layer_dims &#x3D; [n_x,4,3,2,1]。 因此，第1层有四个隐藏单元，第2层有三个隐藏单元，依此类推。 您可以使用哪个for循环初始化模型参数？</h2><p>答：</p><h2 id="6-下面关于神经网络的说法正确的是："><a href="#6-下面关于神经网络的说法正确的是：" class="headerlink" title="6.下面关于神经网络的说法正确的是："></a>6.下面关于神经网络的说法正确的是：</h2><p>A. 层数L为4，隐藏层数为3</p><h2 id="7-在前向传播期间，在层l的前向传播函数中，您需要知道层l中的激活函数（Sigmoid，tanh，ReLU等）是什么，-在反向传播期间，相应的反向传播函数也需要知道第l层的激活函数是什么，因为梯度是根据它来计算的，正确吗？"><a href="#7-在前向传播期间，在层l的前向传播函数中，您需要知道层l中的激活函数（Sigmoid，tanh，ReLU等）是什么，-在反向传播期间，相应的反向传播函数也需要知道第l层的激活函数是什么，因为梯度是根据它来计算的，正确吗？" class="headerlink" title="7.在前向传播期间，在层l的前向传播函数中，您需要知道层l中的激活函数（Sigmoid，tanh，ReLU等）是什么， 在反向传播期间，相应的反向传播函数也需要知道第l层的激活函数是什么，因为梯度是根据它来计算的，正确吗？"></a>7.在前向传播期间，在层l的前向传播函数中，您需要知道层l中的激活函数（Sigmoid，tanh，ReLU等）是什么， 在反向传播期间，相应的反向传播函数也需要知道第l层的激活函数是什么，因为梯度是根据它来计算的，正确吗？</h2><p>A. 正确<br>B. 错误</p><h2 id="8-有一些功能具有以下属性：-i-使用浅网络电路计算函数时，需要一个大网络（我们通过网络中的逻辑门数量来度量大小），但是（ii）使用深网络电路来计算它，只需要一个指数较小的网络。真-x2F-假？"><a href="#8-有一些功能具有以下属性：-i-使用浅网络电路计算函数时，需要一个大网络（我们通过网络中的逻辑门数量来度量大小），但是（ii）使用深网络电路来计算它，只需要一个指数较小的网络。真-x2F-假？" class="headerlink" title="8.有一些功能具有以下属性：(i) 使用浅网络电路计算函数时，需要一个大网络（我们通过网络中的逻辑门数量来度量大小），但是（ii）使用深网络电路来计算它，只需要一个指数较小的网络。真&#x2F;假？"></a>8.有一些功能具有以下属性：(i) 使用浅网络电路计算函数时，需要一个大网络（我们通过网络中的逻辑门数量来度量大小），但是（ii）使用深网络电路来计算它，只需要一个指数较小的网络。真&#x2F;假？</h2><p>A. 正确<br>B. 错误</p><h2 id="9-前面的问题使用了一个特定的网络，与层l有关的权重矩阵在一般情况下，W-l-的维数是多少"><a href="#9-前面的问题使用了一个特定的网络，与层l有关的权重矩阵在一般情况下，W-l-的维数是多少" class="headerlink" title="9.前面的问题使用了一个特定的网络，与层l有关的权重矩阵在一般情况下，W^ [l]的维数是多少?"></a>9.前面的问题使用了一个特定的网络，与层l有关的权重矩阵在一般情况下，W^ [l]的维数是多少?</h2><p>答：</p><hr><h2 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h2><ol><li><p>B</p></li><li><p>ABCD</p></li><li><p>A</p></li><li><p>B</p></li><li><pre><code class="PYTHON">for(i in range(1, len(layer_dims))):    parameter[‘W’ + str(i)] = np.random.randn(layers[i], layers[i - 1])) * 0.01    parameter[‘b’ + str(i)] = np.random.randn(layers[i], 1) * 0.01</code></pre></li><li><p>A</p></li><li><p>A(在反向传播期间，您需要知道正向传播中使用哪种激活函数才能计算正确的导数。)</p></li><li><p>A</p></li><li><p>w^ [l]的维度是（n^ [l]，n^ [l-1]）</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;答案见下方&quot;&gt;&lt;a href=&quot;#答案见下方&quot; class=&quot;headerlink&quot; title=&quot;答案见下方&quot;&gt;&lt;/a&gt;答案见下方&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-在实现前向传播和反向传播中使用的“cache”是什么？&quot;&gt;&lt;a href=&quot;#1-在实现前向</summary>
      
    
    
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>深度学习 day05 深层神经网络</title>
    <link href="http://example.com/2021/08/03/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20day05%E6%B7%B1%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>http://example.com/2021/08/03/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20day05%E6%B7%B1%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</id>
    <published>2021-08-03T07:24:30.000Z</published>
    <updated>2022-04-13T12:05:00.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-深度神经网络"><a href="#01-深度神经网络" class="headerlink" title="01 深度神经网络"></a>01 深度神经网络</h1><ul><li>L代表的深度神经网络的层数，n^ [l]代表的是l层有多少个节点，a^ [l]代表l层的激活函数，w^ [l]表示在a^ [l]中计算z^ [l]值的权重。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/Jq4QKjGPAIxbX61.png"                      alt="image-20210803094546100"                ></p><h1 id="02-深层网络中的前向传播"><a href="#02-深层网络中的前向传播" class="headerlink" title="02 深层网络中的前向传播"></a>02 深层网络中的前向传播</h1><ul><li>在深层网络中应用前向传播，图中左侧是针对单个样本的，左侧最后一行a的上标应该是3；右上角就是前向传播的总结公式，右下角是用向量化的方法训练整个训练集。在我们实现前向传播时用for循环，没有比它更好的方法，可以计算1到L层的激活函数。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/HdDz5on8YL2Uf1u.png"                      alt="image-20210803095954094"                ></p><h1 id="03-核对矩阵的维度"><a href="#03-核对矩阵的维度" class="headerlink" title="03 核对矩阵的维度"></a>03 核对矩阵的维度</h1><ul><li>图的右上角的公式可以帮助检查w和b的维度，反向传播时dw和w具有相同的维度，db和b的维度一样。因为a^ [l] &#x3D; g^ [l] (z^ [l])，所以z和a的维度应该相等。（只针对于没有向量化的）</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/MY7rJ8ESXzC3ZNc.png"                      alt="image-20210803102640239"                ></p><ul><li>向量化后的dw和w，db和b的维度同向量化前的一样，但是Z、A、X的维度会发生变化，右侧是发生的变化。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/jtRWuc8MSoBbZds.png"                      alt="image-20210803102824301"                ></p><h1 id="04-为什么使用深层表示"><a href="#04-为什么使用深层表示" class="headerlink" title="04 为什么使用深层表示"></a>04 为什么使用深层表示</h1><ul><li>例如人脸识别，将第一层当成一个特征探测器（边缘探测器），然后将探测到的边缘组合成面部的不同部分（第二层），然后将这些部分组合到一起就可以识别或者探测不同的人脸了。边缘探测器相对来说都是针对照片中非常小块的面积，面部探测器就会针对于大一些的区域，就是从简单到复杂。这种从简单到复杂的金字塔状网络还可以应用于语音识别等领域。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/6zIwjYLVcquCTSm.png"                      alt="image-20210803105142741"                ></p><ul><li>电路理论：在非正式情况下，能够用电路元件计算的函数可以用相对较小但很深的神经网络来计算（小指的是隐藏单元的数量相对比较少），但是如果用浅一些的神经网络计算同样的函数，会需要呈指数增长的单元数量才能到到同样的计算结果。如下图所示右侧就是单层神经网络，而左侧就是相对较小但很深的神经网络。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/9E82gquXkafKQSO.png"                      alt="image-20210803140312617"                ></p><h1 id="05-搭建深层网络块"><a href="#05-搭建深层网络块" class="headerlink" title="05 搭建深层网络块"></a>05 搭建深层网络块</h1><ul><li>用作前向传播的正向函数，输入是a^ [l-1]，输出是a^ [l]以及输出到缓存的z^ [l]，用作反向传播的反向函数，输入da^ [l]及之前缓存的z^ [l]，输出da^ [l-1]和dw^ [l]和db^ [l]。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/bHQ4wY7FniAJTPU.png"                      alt="image-20210803142223476"                ></p><ul><li>下面是前向传播和后向传播的流程图，在编程过程中缓存z、w、b可以将这些参数复制到计算反向传播所需要的地方。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/YpMXJlHDrQvVKPk.png"                      alt="image-20210803142305035"                ></p><h1 id="06-前向和反向传播"><a href="#06-前向和反向传播" class="headerlink" title="06 前向和反向传播"></a>06 前向和反向传播</h1><ul><li>前向传播的步骤：非向量化 | 向量化</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/L4zNkGhQ7YVXpST.png"                      alt="image-20210803143933332"                ></p><ul><li>反向传播的步骤：非向量化 | 向量化，右侧第二个不是l-1是l</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/XhUf58mwCvkG2WR.png"                      alt="image-20210803144059333"                ></p><ul><li>总结：初始一个向量化反向传播的方法（右下角那个）</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/BspLI6kxEh8wCDV.png"                      alt="image-20210803144232250"                ></p><h1 id="07-参数-VS-超参数"><a href="#07-参数-VS-超参数" class="headerlink" title="07 参数 VS 超参数"></a>07 参数 VS 超参数</h1><ul><li>超参数是实际上控制了最后的参数w和b的值，比如说：学习率a、梯度下降法循环的数量、隐层数L、隐藏单元数n^ [l]、以及各种激活函数。这些超参数某种程度上决定了最终得到的w和b。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/sviWglbrD6xZnoj.png"                      alt="image-20210803150054727"                ></p><ul><li>不断地尝试超参数的设置，这样才能找到个好的值来完成学习。随着时间的推移，一些电脑硬件或者其他的改变，之前设置好的超参数的值到现在不一定适用，因此一定要勤快点，多试试。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/5GhR8YJxlIgr4uc.png"                      alt="image-20210803150116289"                ></p><h1 id="08-这和大脑有什么关系"><a href="#08-这和大脑有什么关系" class="headerlink" title="08 这和大脑有什么关系"></a>08 这和大脑有什么关系</h1><ul><li>没啥关系</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/8LtQhk5K74WUAVT.png"                      alt="image-20210803150801959"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-深度神经网络&quot;&gt;&lt;a href=&quot;#01-深度神经网络&quot; class=&quot;headerlink&quot; title=&quot;01 深度神经网络&quot;&gt;&lt;/a&gt;01 深度神经网络&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;L代表的深度神经网络的层数，n^ [l]代表的是l层有多少个节点，a^ </summary>
      
    
    
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>神经网络和深度学习第三周检测</title>
    <link href="http://example.com/2021/08/02/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%89%E5%91%A8%E6%A3%80%E6%B5%8B/"/>
    <id>http://example.com/2021/08/02/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%89%E5%91%A8%E6%A3%80%E6%B5%8B/</id>
    <published>2021-08-02T14:22:29.000Z</published>
    <updated>2022-04-13T11:57:15.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="答案见下方"><a href="#答案见下方" class="headerlink" title="答案见下方"></a>答案见下方</h1><hr><h2 id="1-以下哪一项是正确的？"><a href="#1-以下哪一项是正确的？" class="headerlink" title="1.以下哪一项是正确的？"></a>1.以下哪一项是正确的？</h2><p>A. X是一个矩阵，其中每个列都是一个训练示例。<br>B. a^[2]_4 是第二层第四层神经元的激活的输出。<br>C. a^[2] (12)表示第二层的第12个样本的激活向量。<br>D. a^[2] 表示第二层的激活向量。</p><h2 id="2-tanh激活函数通常比隐藏层单元的sigmoid激活函数效果更好，因为其输出的平均值更接近于零，因此它将数据集中在下一层是更好的选择，请问正确吗？"><a href="#2-tanh激活函数通常比隐藏层单元的sigmoid激活函数效果更好，因为其输出的平均值更接近于零，因此它将数据集中在下一层是更好的选择，请问正确吗？" class="headerlink" title="2.tanh激活函数通常比隐藏层单元的sigmoid激活函数效果更好，因为其输出的平均值更接近于零，因此它将数据集中在下一层是更好的选择，请问正确吗？"></a>2.tanh激活函数通常比隐藏层单元的sigmoid激活函数效果更好，因为其输出的平均值更接近于零，因此它将数据集中在下一层是更好的选择，请问正确吗？</h2><p>A. True<br>B. False</p><h2 id="3-其中哪一个是第l层向前传播的正确向量化实现，其中1≤-l-≤L"><a href="#3-其中哪一个是第l层向前传播的正确向量化实现，其中1≤-l-≤L" class="headerlink" title="3.其中哪一个是第l层向前传播的正确向量化实现，其中1≤ l ≤L"></a>3.其中哪一个是第l层向前传播的正确向量化实现，其中1≤ l ≤L</h2><p>A. Z^ [l]&#x3D;W^ [l]A^ [l−1]+b[l]<br>B. A^ [l]&#x3D;g^ [l] (Z^ [l])</p><h2 id="4-您正在构建一个识别黄瓜（y-x3D-1）与西瓜（y-x3D-0）的二元分类器。-你会推荐哪一种激活函数用于输出层？"><a href="#4-您正在构建一个识别黄瓜（y-x3D-1）与西瓜（y-x3D-0）的二元分类器。-你会推荐哪一种激活函数用于输出层？" class="headerlink" title="4.您正在构建一个识别黄瓜（y &#x3D; 1）与西瓜（y &#x3D; 0）的二元分类器。 你会推荐哪一种激活函数用于输出层？"></a>4.您正在构建一个识别黄瓜（y &#x3D; 1）与西瓜（y &#x3D; 0）的二元分类器。 你会推荐哪一种激活函数用于输出层？</h2><p>A. ReLU<br>B. Leaky ReLU<br>C. sigmoid<br>D. tanh</p><h2 id="5-看一下下面的代码：请问B-shape的值是多少"><a href="#5-看一下下面的代码：请问B-shape的值是多少" class="headerlink" title="5.看一下下面的代码：请问B.shape的值是多少?"></a>5.看一下下面的代码：请问B.shape的值是多少?</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A = np.random.randn(<span class="number">4</span>,<span class="number">3</span>)</span><br><span class="line">B = np.<span class="built_in">sum</span>(A, axis = <span class="number">1</span>, keepdims = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="6-假设你已经建立了一个神经网络。-您决定将权重和偏差初始化为零。-以下哪项陈述是正确的？"><a href="#6-假设你已经建立了一个神经网络。-您决定将权重和偏差初始化为零。-以下哪项陈述是正确的？" class="headerlink" title="6.假设你已经建立了一个神经网络。 您决定将权重和偏差初始化为零。 以下哪项陈述是正确的？"></a>6.假设你已经建立了一个神经网络。 您决定将权重和偏差初始化为零。 以下哪项陈述是正确的？</h2><p>A. 第一个隐藏层中的每个神经元节点将执行相同的计算。 所以即使经过多次梯度下降迭代后，层中的每个神经元节点都会计算出与其他神经元节点相同的东西。<br>B. 第一个隐藏层中的每个神经元将在第一次迭代中执行相同的计算。 但经过一次梯度下降迭代后，他们将学会计算不同的东西，因为我们已经“破坏了对称性”。<br>C. 第一个隐藏层中的每一个神经元都会计算出相同的东西，但是不同层的神经元会计算不同的东西，因此我们已经完成了“对称破坏”。<br>D. 即使在第一次迭代中，第一个隐藏层的神经元也会执行不同的计算， 他们的参数将以自己的方式不断发展。</p><h2 id="7-Logistic回归的权重w应该随机初始化，而不是全零，因为如果初始化为全零，那么逻辑回归将无法学习到有用的决策边界，因为它将无法“破坏对称性”，是正确的吗？"><a href="#7-Logistic回归的权重w应该随机初始化，而不是全零，因为如果初始化为全零，那么逻辑回归将无法学习到有用的决策边界，因为它将无法“破坏对称性”，是正确的吗？" class="headerlink" title="7.Logistic回归的权重w应该随机初始化，而不是全零，因为如果初始化为全零，那么逻辑回归将无法学习到有用的决策边界，因为它将无法“破坏对称性”，是正确的吗？"></a>7.Logistic回归的权重w应该随机初始化，而不是全零，因为如果初始化为全零，那么逻辑回归将无法学习到有用的决策边界，因为它将无法“破坏对称性”，是正确的吗？</h2><p>A. True<br>B. False</p><h2 id="8-您已经为所有隐藏单元使用tanh激活建立了一个网络。-使用np-random-randn（-，-）-1000将权重初始化为相对较大的值。-会发生什么？"><a href="#8-您已经为所有隐藏单元使用tanh激活建立了一个网络。-使用np-random-randn（-，-）-1000将权重初始化为相对较大的值。-会发生什么？" class="headerlink" title="8.您已经为所有隐藏单元使用tanh激活建立了一个网络。 使用np.random.randn（..，..）* 1000将权重初始化为相对较大的值。 会发生什么？"></a>8.您已经为所有隐藏单元使用tanh激活建立了一个网络。 使用np.random.randn（..，..）* 1000将权重初始化为相对较大的值。 会发生什么？</h2><p>A. 这没关系。只要随机初始化权重，梯度下降不受权重大小的影响。<br>B. 这将导致tanh的输入也非常大，因此导致梯度也变大。因此，您必须将α设置得非常小以防止发散; 这会减慢学习速度。<br>C. 这会导致tanh的输入也非常大，导致单位被“高度激活”，从而加快了学习速度，而权重必须从小数值开始。<br>D. 这将导致tanh的输入也很大，因此导致梯度接近于零， 优化算法将因此变得缓慢。</p><h2 id="9-看一下下面的单隐层神经网络："><a href="#9-看一下下面的单隐层神经网络：" class="headerlink" title="9.看一下下面的单隐层神经网络："></a>9.看一下下面的单隐层神经网络：</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\1\AppData\Roaming\Typora\typora-user-images\image-20210802211946697.png"                      alt="image-20210802211946697"                ></p><p>A. b^[1] 的维度是(4, 1)<br>B. W^[1] 的维度是 (4, 2)<br>C. W^[2] 的维度是 (1, 4)<br>D. b^[2] 的维度是 (1, 1)</p><h2 id="10-I在和上一个相同的网络中，Z-1-和-A-1-的维度是多少？"><a href="#10-I在和上一个相同的网络中，Z-1-和-A-1-的维度是多少？" class="headerlink" title="10.I在和上一个相同的网络中，Z^ [1] 和 A^ [1]的维度是多少？"></a>10.I在和上一个相同的网络中，Z^ [1] 和 A^ [1]的维度是多少？</h2><p>答：</p><hr><h2 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h2><ol><li><p>ABCD</p></li><li><p>A</p></li><li><p>AD</p></li><li><p>C</p></li><li><pre><code class="PYTHON">B.shape = (4, 1) #keepdims = True）来确保A.shape是（4,1）</code></pre></li><li><p>A</p></li><li><p>A</p></li><li><p>D</p></li><li><p>ACD（B应该是（4，3））</p></li><li><p>Z^ [1] 和 A^ [1]的维度都是 (4,m)(注意z和Z的区别：z表示单个样本，Z表示所有样本)</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;答案见下方&quot;&gt;&lt;a href=&quot;#答案见下方&quot; class=&quot;headerlink&quot; title=&quot;答案见下方&quot;&gt;&lt;/a&gt;答案见下方&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-以下哪一项是正确的？&quot;&gt;&lt;a href=&quot;#1-以下哪一项是正确的？&quot; class=&quot;hea</summary>
      
    
    
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>深度学习 day04 浅层神经网络</title>
    <link href="http://example.com/2021/08/02/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20day04%E6%B5%85%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>http://example.com/2021/08/02/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20day04%E6%B5%85%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</id>
    <published>2021-08-02T13:00:55.000Z</published>
    <updated>2022-04-13T12:05:06.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-神经网络概览"><a href="#01-神经网络概览" class="headerlink" title="01 神经网络概览"></a>01 神经网络概览</h1><ul><li>在这里用[ l ]来表示神经网络的第l层，用来跟( i )表示的第几个训练样本做区分。神经网络需要反复的计算z和a。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/hQZnDcgTCRfNvKd.png"                      alt="image-20210802094344557"                ></p><h1 id="02-神经网络表示"><a href="#02-神经网络表示" class="headerlink" title="02 神经网络表示"></a>02 神经网络表示</h1><ul><li>只有一个隐藏层的神经网络：分为输入层、隐藏层、输出层。其中输入层和输出层的值都是在训练集中能看到的，隐藏层的值不能看到。在计算神经网络层数时是不算输入层的，同时我们使用a^[ l ]表示符号，a也代表激活的意思，它意味着网络中不同层的值会传递给后面的层，即每一层都会产生激活值，我们将这些激活值用a^[ l ]_i表示（l表示第几层，下标i表示层中的第几个节点）。在本例中w参数是（4，3）维的，其中4代表四个隐藏单元，3代表有三个输入特征</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/XnvdfhPCUKxHTzA.png"                      alt="image-20210802100711582"                ></p><h1 id="03-计算神经网络的输出"><a href="#03-计算神经网络的输出" class="headerlink" title="03 计算神经网络的输出"></a>03 计算神经网络的输出</h1><p>神经网络的输出究竟是如何算出来的</p><hr><ul><li>这里的圆圈代表逻辑回归计算的两个步骤，神经网络只不过是计算这些步骤很多次（隐藏层的每一个节点都计算一次）。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/EZqPbNCKwu7ntQp.png"                      alt="image-20210802104402117"                ></p><ul><li>下面把这四个等式向量化：向量化时的一条经验法则就是当我们在一层中有不同的节点，那就纵向的堆叠起来（例如a^[1]就是a^[1] _1~a^[4] _ 4这些激活值的堆叠）。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/SqoHhxEXn1zYvDI.png"                      alt="image-20210802104426554"                ></p><ul><li>计算出四个隐藏层中的逻辑回归单元使用的是前两个等式，计算出输出层的逻辑回归用的是后两个等式</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/Zlon2AQaY7X3yu4.png"                      alt="image-20210802104449194"                ></p><h1 id="04-多个例子中的向量化"><a href="#04-多个例子中的向量化" class="headerlink" title="04 多个例子中的向量化"></a>04 多个例子中的向量化</h1><ul><li>对于新的符号a^[2] (i)：这个i表示训练样本i。下面是没有向量化的实现并且想要计算所有训练样本的预测：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/mxta4LjFek8sqnd.png"                      alt="image-20210802113830274"                ></p><ul><li>下面将for循环变成向量化实现：将这些向量横向堆叠起来。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/Z8sMWJKAz76xorQ.png"                      alt="image-20210802113849678"                ></p><ul><li>总结一下就是横向堆叠对应的是不同的训练样本，竖向堆叠的是不同的输入特征（也就是一层中不同的节点）。</li></ul><h1 id="05-向量化实现的解释"><a href="#05-向量化实现的解释" class="headerlink" title="05 向量化实现的解释"></a>05 向量化实现的解释</h1><ul><li>为什么z^[1]&#x3D;w^[1]x+b^[1]?</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/dMQTzwDY35x2Z1j.png"                      alt="image-20210802145315344"                ></p><ul><li>如果将输入成列向量堆叠，那么在方程运算之后，也能得到成列对堆叠的输出。右上图是在单个训练样本中实现正向传播算法就是从1循环到m，右下图第一行代码可以对所有m个例子同时向量化，类似的右下图这四行代码都是上面四行代码正确的向量化形式。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/l2zUymPt8Kkr7Bq.png"                      alt="image-20210802145354073"                ></p><h1 id="06-激活函数"><a href="#06-激活函数" class="headerlink" title="06 激活函数"></a>06 激活函数</h1><p>搭建神经网络，你可以选择在隐藏层用哪个激活函数，在输出层用哪个激活函数。</p><hr><ul><li>一些其他的激活函数：【1】tanh函数（双曲正切函数）范围在-1到1之间。如果让函数g(z)&#x3D;tanh(z)，这几乎总比sigma函数效果好，因为现在函数输出介于-1和1之间，激活函数的平均值就更接近0。使用tanh也有类似数据中心化的效果，使得数据的平均值接近0而不是0.5，这使得下一层的学习更方便。几乎tanh函数在所有场合都适用，但是在输出层例外，因为如果输出层y是0或1，那么肯定要介于0和1之间，于此同时在二元分类就可以使用sigma函数作为输出层了。tanh函数和sigma函数都有一个缺点：当z特别大或者特别小时，函数的斜率可能就很小，这样会拖慢梯度下降算法。【2】ReLU函数（修正线性单元），ReLU的好处在于对很多z空间激活函数的斜率和0差很远。在实践中使用ReLU函数，你的神经网络的学习速度通常会比使用tanh或者sigma激活函数快很多，主要是ReLU没有这种斜率接近0时减慢学习速度的效应。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/H1WgSmjUQ2ED6ir.png"                      alt="image-20210802162429956"                ></p><ul><li>选择激活函数的经验：如果在做二元分类，输出值是0和1，那么选择sigma函数作为输出层的激活函数，然后其他所有单元都用ReLU。一般不使用sigma函数，因为tanh函数比他更适用，ReLU是默认的激活函数，不知道选谁就选它。如果实在不知道选择哪个激活函数，就在验证集或者开发集上跑跑，看看哪个效果好就选择哪个。</li><li>下面是四种激活函数（最后一个是ReLU的特殊形式叫做带泄露的ReLU）</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/RnmfUCDVv4cBOt9.png"                      alt="image-20210802162459839"                ></p><h1 id="07-为什么需要非线性激活函数？"><a href="#07-为什么需要非线性激活函数？" class="headerlink" title="07 为什么需要非线性激活函数？"></a>07 为什么需要非线性激活函数？</h1><p>要让你的神经网络能够计算出有趣的函数就必须使用非线性激活函数。</p><hr><ul><li>如果使用线性激活函数或者叫恒等激活函数，那么神经网络只是把输入线性组合再输出。线性隐层一点用都没有，只有一个地方可以使用线性激活函数g(z)&#x3D;z，就是你的机器学习是回归问题的输出层。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/a4PyuzomcjgBM5Y.png"                      alt="image-20210802170616075"                ></p><h1 id="08-激活函数的导数"><a href="#08-激活函数的导数" class="headerlink" title="08 激活函数的导数"></a>08 激活函数的导数</h1><p>当对神经网络使用反向传播的时候，你需要计算激活函数的斜率或者说导数</p><hr><ul><li>sigma激活函数的导数</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/2F476AJwPz5srgt.png"                      alt="image-20210802174103141"                ></p><ul><li>tanh激活函数的导数</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/GKcErp4BiIDNz9H.png"                      alt="image-20210802174116844"                ></p><ul><li>ReLU和带泄露的ReLU激活函数的导数</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/pMTrBVIafq7j1LW.png"                      alt="image-20210802174132642"                ></p><h1 id="09-神经网络的梯度下降法"><a href="#09-神经网络的梯度下降法" class="headerlink" title="09 神经网络的梯度下降法"></a>09 神经网络的梯度下降法</h1><ul><li>输入层有n^[0]个，隐层有n^[1]个，输出层有n^[2]个，还有一个神经网络的成本函数，在二元分类的情况下，成本函数就是1&#x2F;m对损失函数求平均。要训练参数，算法就需要做梯度下降，在训练神经网络时随机初始化参数很重要，而不是全部初始化为0。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/bLSsoME1CfI57Dh.png"                      alt="image-20210802180705723"                ></p><ul><li>针对于所有样本的前向传播和后向传播：keepdims就是防止python直接输出秩为1的数组（(n,)），确保python输出的是矩阵（(n,1)）。*代表逐个元素乘积。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/gCEud5RJw18vAMN.png"                      alt="image-20210802180735707"                ></p><h1 id="10-直观理解反向传播"><a href="#10-直观理解反向传播" class="headerlink" title="10 直观理解反向传播"></a>10 直观理解反向传播</h1><ul><li>单层神经网络：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/YTsozX43KhIPARO.png"                      alt="image-20210802201831405"                ></p><ul><li>双层神经网络：实现后向传播算法有个技巧，你必须确保矩阵的维度互相匹配。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/3WX6l8OQRhuVHFt.png"                      alt="image-20210802201851527"                ></p><ul><li>反向传播公式小总结：单个样本 | 总样本</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/T5Cw69YgQVIqso4.png"                      alt="image-20210802201913358"                ></p><h1 id="11-随机初始化"><a href="#11-随机初始化" class="headerlink" title="11 随机初始化"></a>11 随机初始化</h1><p>对于逻辑回归可以将权重初始化为0，但是如果将神经网络的各参数数组全部初始化为0，再使用梯度下降算法将会完全无效</p><hr><ul><li>如果将w所有值初始化为0，那么因为两个隐藏单元最开始就在做同样的计算，对输出单元的影响也一样大。那么一次迭代之后，同样的对称性依然存在，两个隐藏单元依然是对称的。无论你神经网络训练多久，两个隐藏单元依然在计算完全一样的函数，所以这种情况多个隐藏单元是没有意义的。当然对多个隐藏单元也适用。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/2UPb7tczsa6ITWG.png"                      alt="image-20210802204543096"                ></p><ul><li>因此解决这个问题就要随机初始化，通常喜欢将权重初始化成很小的数，因此乘一个0.01（深层就要乘一个0.01以外的数）。因为当使用tanh和sigma激活函数时，如果权重过大就会落到斜率平缓处，导致学习缓慢。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/Ha2bpDcGBsAqV9o.png"                      alt="image-20210802205246538"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-神经网络概览&quot;&gt;&lt;a href=&quot;#01-神经网络概览&quot; class=&quot;headerlink&quot; title=&quot;01 神经网络概览&quot;&gt;&lt;/a&gt;01 神经网络概览&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在这里用[ l ]来表示神经网络的第l层，用来跟( i )表示的第几个训</summary>
      
    
    
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>神经网络和深度学习第二周检测</title>
    <link href="http://example.com/2021/08/01/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E5%91%A8%E6%A3%80%E6%B5%8B/"/>
    <id>http://example.com/2021/08/01/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E5%91%A8%E6%A3%80%E6%B5%8B/</id>
    <published>2021-08-01T02:13:09.000Z</published>
    <updated>2022-04-13T11:55:59.813Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-神经元节点计算什么？"><a href="#1-神经元节点计算什么？" class="headerlink" title="1.神经元节点计算什么？"></a>1.神经元节点计算什么？</h2><p>A. 神经元节点先计算激活函数，再计算线性函数(z &#x3D; Wx + b)</p><p>B. 神经元节点先计算线性函数（z &#x3D; Wx + b），再计算激活。</p><p>C. 神经元节点计算函数g，函数g计算(Wx + b)。</p><p>D. 在 将输出应用于激活函数之前，神经元节点计算所有特征的平均值</p><h2 id="2-Logistic损失函数表达式的形式？"><a href="#2-Logistic损失函数表达式的形式？" class="headerlink" title="2.Logistic损失函数表达式的形式？"></a>2.Logistic损失函数表达式的形式？</h2><p>答：</p><h2 id="3-假设img是一个（32-32-3）数组，具有3个颜色通道：红色、绿色和蓝色的32x32像素的图像。-如何将其重新转换为列向量？"><a href="#3-假设img是一个（32-32-3）数组，具有3个颜色通道：红色、绿色和蓝色的32x32像素的图像。-如何将其重新转换为列向量？" class="headerlink" title="3.假设img是一个（32,32,3）数组，具有3个颜色通道：红色、绿色和蓝色的32x32像素的图像。 如何将其重新转换为列向量？"></a>3.假设img是一个（32,32,3）数组，具有3个颜色通道：红色、绿色和蓝色的32x32像素的图像。 如何将其重新转换为列向量？</h2><p>代码答：</p><h2 id="4-看一下下面的这两个随机数组“a”和“b”：请问数组c的维度是多少？"><a href="#4-看一下下面的这两个随机数组“a”和“b”：请问数组c的维度是多少？" class="headerlink" title="4.看一下下面的这两个随机数组“a”和“b”：请问数组c的维度是多少？"></a>4.看一下下面的这两个随机数组“a”和“b”：请问数组c的维度是多少？</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = np.random.randn(<span class="number">2</span>, <span class="number">3</span>) <span class="comment"># a.shape = (2, 3)</span></span><br><span class="line">b = np.random.randn(<span class="number">2</span>, <span class="number">1</span>) <span class="comment"># b.shape = (2, 1)</span></span><br><span class="line">c = a + b</span><br></pre></td></tr></table></figure><p>答： </p><h2 id="5-看一下下面的这两个随机数组“a”和“b”：请问数组“c”的维度是多少？"><a href="#5-看一下下面的这两个随机数组“a”和“b”：请问数组“c”的维度是多少？" class="headerlink" title="5.看一下下面的这两个随机数组“a”和“b”：请问数组“c”的维度是多少？"></a>5.看一下下面的这两个随机数组“a”和“b”：请问数组“c”的维度是多少？</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = np.random.randn(<span class="number">4</span>, <span class="number">3</span>) <span class="comment"># a.shape = (4, 3)</span></span><br><span class="line">b = np.random.randn(<span class="number">3</span>, <span class="number">2</span>) <span class="comment"># b.shape = (3, 2)</span></span><br><span class="line">c = a * b</span><br></pre></td></tr></table></figure><p>答： </p><h2 id="6-假设你的每一个实例有n-x个输入特征，想一下在X-x3D-x-1-x-2-…x-m-中，X的维度是多少？"><a href="#6-假设你的每一个实例有n-x个输入特征，想一下在X-x3D-x-1-x-2-…x-m-中，X的维度是多少？" class="headerlink" title="6.假设你的每一个实例有n_x个输入特征，想一下在X&#x3D;[x^(1), x^(2)…x^(m)]中，X的维度是多少？"></a>6.假设你的每一个实例有n_x个输入特征，想一下在X&#x3D;[x^(1), x^(2)…x^(m)]中，X的维度是多少？</h2><p>答：</p><h2 id="7-看一下下面的这两个随机数组“a”和“b”：请问c的维度是多少？"><a href="#7-看一下下面的这两个随机数组“a”和“b”：请问c的维度是多少？" class="headerlink" title="7.看一下下面的这两个随机数组“a”和“b”：请问c的维度是多少？"></a>7.看一下下面的这两个随机数组“a”和“b”：请问c的维度是多少？</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = np.random.randn(<span class="number">12288</span>, <span class="number">150</span>) <span class="comment"># a.shape = (12288, 150)</span></span><br><span class="line">b = np.random.randn(<span class="number">150</span>, <span class="number">45</span>) <span class="comment"># b.shape = (150, 45)</span></span><br><span class="line">c = np.dot(a, b)</span><br></pre></td></tr></table></figure><p>答： </p><h2 id="8-看一下下面的这个代码片段：请问要怎么把它们向量化？"><a href="#8-看一下下面的这个代码片段：请问要怎么把它们向量化？" class="headerlink" title="8.看一下下面的这个代码片段：请问要怎么把它们向量化？"></a>8.看一下下面的这个代码片段：请问要怎么把它们向量化？</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a.shape = (3,4)</span></span><br><span class="line"><span class="comment"># b.shape = (4,1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    c[i][j] = a[i][j] + b[j]</span><br></pre></td></tr></table></figure><p>答：</p><h2 id="9-看一下下面的代码：请问c的维度会是多少？"><a href="#9-看一下下面的代码：请问c的维度会是多少？" class="headerlink" title="9.看一下下面的代码：请问c的维度会是多少？"></a>9.看一下下面的代码：请问c的维度会是多少？</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = np.random.randn(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">b = np.random.randn(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">c = a * b</span><br></pre></td></tr></table></figure><p>答：</p><hr><h2 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h2><ol><li>B（神经元输出的是g(Wx + b)，根据前向传播应该是先计算(Wx + b)，再将其带入到激活函数g中）</li><li>针对于单个训练集的：（误差函数）</li></ol><p>![image-20210730152607594](C:\Users\1\Desktop\深度学习\深度学习 day02神经网络基础\image-20210730152607594.png)</p><p>针对于整个训练集的：（成本函数）</p><p>![image-20210730152655792](C:\Users\1\Desktop\深度学习\深度学习 day02神经网络基础\image-20210730152655792.png)<br>3. &#96;&#96;&#96;python<br>   x &#x3D; img.reshape((32<em>32</em>3,1))#reshape的作用是重塑数组<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">4. ```python</span><br><span class="line">   c.shape = (2, 3)#根据python的广播原理（B的列向量复制三次与A相加）</span><br></pre></td></tr></table></figure></p><ol start="5"><li><p>直接报错，想广播都广播不了，行和列向量都没有办法复制</p></li><li><pre><code class="python">X.shape = (n_x,m)#这个形式的X=[[x_1^(1), x_1^(2)…x_1^(m)]   [x_2^(1), x_2^(2)…x_2^(m)]   ........................   [x_n^(1), x_n^(2)…x_n^(m)]]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">7. ```python</span><br><span class="line">   c.shape = (12288, 45)#就是简单的矩阵乘法，dot(n×m , m×v) = n×v </span><br></pre></td></tr></table></figure></code></pre></li><li><p>&#96;&#96;&#96;python<br>c&#x3D; a+b.T#这个就相当于是a的所有元素加上b转置的广播</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">9. ```python</span><br><span class="line">   c.shape = (3, 3)#这题跟第五题一样，但是这题中b的行数跟a的行数一样，就可以将b的列广播</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-神经元节点计算什么？&quot;&gt;&lt;a href=&quot;#1-神经元节点计算什么？&quot; class=&quot;headerlink&quot; title=&quot;1.神经元节点计算什么？&quot;&gt;&lt;/a&gt;1.神经元节点计算什么？&lt;/h2&gt;&lt;p&gt;A. 神经元节点先计算激活函数，再计算线性函数(z &amp;#x3</summary>
      
    
    
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>神经网络和深度学习第一周检测</title>
    <link href="http://example.com/2021/07/31/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%91%A8%E6%A3%80%E6%B5%8B/"/>
    <id>http://example.com/2021/07/31/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%91%A8%E6%A3%80%E6%B5%8B/</id>
    <published>2021-07-31T15:27:34.000Z</published>
    <updated>2022-04-13T11:55:05.500Z</updated>
    
    <content type="html"><![CDATA[<p>第一周测验 - 深度学习简介</p><h2 id="1-和“AI是新电力”相类似的说法是什么？"><a href="#1-和“AI是新电力”相类似的说法是什么？" class="headerlink" title="1.和“AI是新电力”相类似的说法是什么？"></a>1.和“AI是新电力”相类似的说法是什么？</h2><p>A: AI为我们的家庭和办公室的个人设备供电，类似于电力。<br>B: 通过“智能电网”，AI提供新的电能。<br>C: AI在计算机上运行，并由电力驱动，但是它正在让以前的计算机不能做的事情变为可能。<br>D: 就像100年前产生电能一样，AI正在改变很多的行业。</p><h2 id="2-哪些是深度学习快速发展的原因？-两个选项"><a href="#2-哪些是深度学习快速发展的原因？-两个选项" class="headerlink" title="2.哪些是深度学习快速发展的原因？ (两个选项)"></a>2.哪些是深度学习快速发展的原因？ (两个选项)</h2><p>A:  现在我们有了更好更快的计算能力。<br>B: 神经网络是一个全新的领域。<br>C: 我们现在可以获得更多的数据。<br>D: 深度学习已经取得了重大的进展，比如在在线广告、语音识别和图像识别方面有了很多的应用。</p><h2 id="3-回想一下关于不同的机器学习思想的迭代图。下面哪些陈述是正确的？"><a href="#3-回想一下关于不同的机器学习思想的迭代图。下面哪些陈述是正确的？" class="headerlink" title="3.回想一下关于不同的机器学习思想的迭代图。下面哪些陈述是正确的？"></a>3.回想一下关于不同的机器学习思想的迭代图。下面哪些陈述是正确的？</h2><p>A: 能够让深度学习工程师快速地实现自己的想法。<br>B: 在更好更快的计算机上能够帮助一个团队减少迭代(训练)的时间。<br>C:在数据量很多的数据集上训练上的时间要快于小数据集。<br>D:使用更新的深度学习算法可以使我们能够更快地训练好模型（即使更换CPU &#x2F; GPU硬件）。</p><h2 id="4-当一个经验丰富的深度学习工程师在处理一个新的问题的时候，他们通常可以利用先前的经验来在第一次尝试中训练一个表现很好的模型，而不需要通过不同的模型迭代多次从而选择一个较好的模型，这个说法是正确的吗？"><a href="#4-当一个经验丰富的深度学习工程师在处理一个新的问题的时候，他们通常可以利用先前的经验来在第一次尝试中训练一个表现很好的模型，而不需要通过不同的模型迭代多次从而选择一个较好的模型，这个说法是正确的吗？" class="headerlink" title="4.当一个经验丰富的深度学习工程师在处理一个新的问题的时候，他们通常可以利用先前的经验来在第一次尝试中训练一个表现很好的模型，而不需要通过不同的模型迭代多次从而选择一个较好的模型，这个说法是正确的吗？"></a>4.当一个经验丰富的深度学习工程师在处理一个新的问题的时候，他们通常可以利用先前的经验来在第一次尝试中训练一个表现很好的模型，而不需要通过不同的模型迭代多次从而选择一个较好的模型，这个说法是正确的吗？</h2><p>A. 正确<br>B. 错误</p><h2 id="5-用于识别猫的图像是“结构化”数据的一个例子，因为它在计算机中被表示为结构化矩阵，是真的吗？"><a href="#5-用于识别猫的图像是“结构化”数据的一个例子，因为它在计算机中被表示为结构化矩阵，是真的吗？" class="headerlink" title="5.用于识别猫的图像是“结构化”数据的一个例子，因为它在计算机中被表示为结构化矩阵，是真的吗？"></a>5.用于识别猫的图像是“结构化”数据的一个例子，因为它在计算机中被表示为结构化矩阵，是真的吗？</h2><p>A. 正确<br>B. 错误</p><h2 id="6-统计不同城市人口、人均GDP、经济增长的人口统计数据集是“非结构化”数据的一个例子，因为它包含来自不同来源的数据，是真的吗？"><a href="#6-统计不同城市人口、人均GDP、经济增长的人口统计数据集是“非结构化”数据的一个例子，因为它包含来自不同来源的数据，是真的吗？" class="headerlink" title="6.统计不同城市人口、人均GDP、经济增长的人口统计数据集是“非结构化”数据的一个例子，因为它包含来自不同来源的数据，是真的吗？"></a>6.统计不同城市人口、人均GDP、经济增长的人口统计数据集是“非结构化”数据的一个例子，因为它包含来自不同来源的数据，是真的吗？</h2><p>A. 正确<br>B. 错误</p><h2 id="7-为什么在RNN（循环神经网络）可以应用机器翻译将英语翻译成法语？"><a href="#7-为什么在RNN（循环神经网络）可以应用机器翻译将英语翻译成法语？" class="headerlink" title="7.为什么在RNN（循环神经网络）可以应用机器翻译将英语翻译成法语？"></a>7.为什么在RNN（循环神经网络）可以应用机器翻译将英语翻译成法语？</h2><p>A. 因为它可以被用做监督学习。<br>B. 严格意义上它比卷积神经网络（CNN）效果更好。<br>C. 它比较适合用于当输入&#x2F;输出是一个序列的时候（例如：一个单词序列）<br>D. RNN代表递归过程：想法-&gt;编码-&gt;实验-&gt;想法-&gt;…</p><h2 id="8-在我们手绘的这张图中，横轴（x轴）和纵轴（y轴）代表什么"><a href="#8-在我们手绘的这张图中，横轴（x轴）和纵轴（y轴）代表什么" class="headerlink" title="8.在我们手绘的这张图中，横轴（x轴）和纵轴（y轴）代表什么?"></a>8.在我们手绘的这张图中，横轴（x轴）和纵轴（y轴）代表什么?</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/Uh38VtNWTcJkY9w.png"                      alt="image-20210729152017843"                ></p><p>x轴是:                       y轴是:</p><h2 id="9-假设上一个问题图中描述的是准确的（并且希望您的轴标签正确），以下哪一项是正确的"><a href="#9-假设上一个问题图中描述的是准确的（并且希望您的轴标签正确），以下哪一项是正确的" class="headerlink" title="9.假设上一个问题图中描述的是准确的（并且希望您的轴标签正确），以下哪一项是正确的?"></a>9.假设上一个问题图中描述的是准确的（并且希望您的轴标签正确），以下哪一项是正确的?</h2><p>A. 增加训练集的大小通常不会影响算法的性能，这可能会有很大的帮助。<br>B. 增加神经网络的大小通常不会影响算法的性能，这可能会有很大的帮助。<br>C. 减小训练集的大小通常不会影响算法的性能，这可能会有很大的帮助。<br>D. 减小神经网络的大小通常不会影响算法的性能，这可能会有很大的帮助。</p><p>答案 1. D 2. AC 3. ACD 4. B(不可能每次都很准确呀) 5. B（看过都知道图片、语音、自然语言都是非结构化的数据） 6. B（注意关键词数据集，可以看出是结构化数据） 7.AC 8. 数据量 算法的性能 9.AB(A是针对一个算法来说，B是针对所有算法并且在同一训练集上而言)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第一周测验 - 深度学习简介&lt;/p&gt;
&lt;h2 id=&quot;1-和“AI是新电力”相类似的说法是什么？&quot;&gt;&lt;a href=&quot;#1-和“AI是新电力”相类似的说法是什么？&quot; class=&quot;headerlink&quot; title=&quot;1.和“AI是新电力”相类似的说法是什么？&quot;&gt;&lt;/a&gt;1</summary>
      
    
    
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>深度学习 day02 03 神经网络基础</title>
    <link href="http://example.com/2021/07/30/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20day02%2003%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2021/07/30/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20day02%2003%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</id>
    <published>2021-07-30T15:42:19.000Z</published>
    <updated>2022-04-13T12:05:13.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-二分分类"><a href="#01-二分分类" class="headerlink" title="01 二分分类"></a>01 二分分类</h1><ul><li>逻辑回归是一个用于二分分类的算法</li><li>计算机保存一张图片就需要保存三个独立矩阵，分别对应图片中的红、绿、蓝三个颜色通道，如果照片是64×64像素的就有三个64×64的矩阵。然后需要将这三个矩阵所有元素都存放在特征x向量中（x向量就是64×64×3&#x3D;12288维）。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/RIh6KoGnSNlgj5f.png"                      alt="image-20210730144139789"                ></p><ul><li>输入X用矩阵表示：python中用来输出矩阵的维度代码是X.shape&#x3D;(n,m)，表示X是一个n×m的矩阵。</li></ul><h1 id="02-逻辑回归"><a href="#02-逻辑回归" class="headerlink" title="02 逻辑回归"></a>02 逻辑回归</h1><ul><li>当你实现逻辑回归时，你要做的就是学习参数w和b。因为要求输出y帽是在0到1之间，所以我们将输入x的线性函数w^T+b带入到sigma函数中，得到sigma函数。当z很大时输出接近于1，当z很小时输出接近于0。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/nzvKTeEDwRJxi51.png"                      alt="image-20210730145910350"                ></p><h1 id="03-逻辑回归损失函数"><a href="#03-逻辑回归损失函数" class="headerlink" title="03 逻辑回归损失函数"></a>03 逻辑回归损失函数</h1><ul><li>损失函数又叫误差函数可以用来衡量算法在单个训练样本运行情况，在这里我们不用第一个式子，我们用第二个损失函数，因为在逻辑回归中如果使用第一个式子，最终会得到很多个局部最优解，梯度下降法可能找不到局部最优值（非凸），而使用第二个就会给我们一个凸的优化问题。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/ltQL4PrIKf57YNm.png"                      alt="image-20210730152607594"                ></p><ul><li>成本函数基于参数的总成本，衡量的是w和b在全体训练样本上的表现</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/NS2TlBz86WCjPaO.png"                      alt="image-20210730152655792"                ></p><h1 id="04-梯度下降法"><a href="#04-梯度下降法" class="headerlink" title="04 梯度下降法"></a>04 梯度下降法</h1><ul><li>我们想要找到参数w和b来使成本函数最小，我们可以随机初始化参数，梯度下降法就是从初始点开始沿着最陡的下坡方向走一步，不断地进行迭代最终达到全局最小点。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/2VBLtvmQnIoR61S.png"                      alt="image-20210730154521464"                ></p><ul><li>下面是参数更新的过程，无论参数w在哪一边，他都会向成本函数最小值方向前进，并且可以看出随着w的的变化，函数的斜率也是不断地减小，随着斜率的减小，w变化幅度也就随之减小（也就是朝着成本函数最小值方向移动的越慢）。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/ifCEsUQ1VXgzqWh.png"                      alt="image-20210730154846622"                ></p><h1 id="05-计算图"><a href="#05-计算图" class="headerlink" title="05 计算图"></a>05 计算图</h1><ul><li>一个神经网络的计算都是按照前向或者反向传播过程来实现的，首先计算出神将网络的输出，紧接着进行一个反向传输操作（我们用来计算出对应的梯度或者导数）。</li><li>从左到右的过程，可以计算出J的值。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/rQLByTl5AhcdOZx.png"                      alt="image-20210730162812955"                ></p><h1 id="06-计算图的导数计算"><a href="#06-计算图的导数计算" class="headerlink" title="06 计算图的导数计算"></a>06 计算图的导数计算</h1><ul><li>当计算所有这些导数时，最有效率的办法就是从右到左计算，跟着红色的箭头走，我们第一次计算对v的导数在之后计算对a的导数就可以用到，同样的对u的导数的计算在之后计算b的导数时就可以用到。他这个计算导数是，计算哪个导数就对那个值进行一些增加，看看他对J是如何影响的，使用微积分的链式法则就可以算出其导数。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/ZeNuDdfh7mIPtyY.png"                      alt="image-20210730164026926"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/Efo5z3a9lCIvhWm.png"                      alt="image-20210730164043308"                ></p><h1 id="07-逻辑回归中的梯度下降法"><a href="#07-逻辑回归中的梯度下降法" class="headerlink" title="07 逻辑回归中的梯度下降法"></a>07 逻辑回归中的梯度下降法</h1><ul><li>该样本的偏导数流程图：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/yqgiBnlvAMaKhLY.png"                      alt="image-20210730170954124"                ></p><ul><li>单个样本实例的一次梯度更新步骤：想要计算损失函数L的导数，首先我们要向前一步先计算损失函数关于变量a的导数（da），再向后一步计算出损失函数关于z的导数（dz），最后就是计算出dw、db了，就可以进行更新参数更新了。（更新w&#x2F;b为b减去学习率乘以dw&#x2F;db）</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/9w76TWi8CgOPEeI.png"                      alt="image-20210730171009830"                ></p><h1 id="08-m个样本的梯度下降"><a href="#08-m个样本的梯度下降" class="headerlink" title="08 m个样本的梯度下降"></a>08 m个样本的梯度下降</h1><ul><li>全局成本函数是从1到m项损失函数和的平均&#x3D;&#x3D;&gt;根据这个我们可以推导出全局成本函数对w1的导数也同样是各项损失函数对w1导数的平均。所以真正需要做的就是计算这些导数并且求平均，这样会得到全局梯度值，能够直接将其应用到梯度下降算法中。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/fD7kBzyEwsmcOjA.png"                      alt="image-20210730224937045"                ></p><ul><li>首先让我们初始化，接着我们要使用for循环来遍历训练集，并计算相应的每个训练样本的导数，然后将他们加起来。（这里有两个循环：第一个是遍历训练集，第二个是遍历所有特征）</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/xDzw4cGJajqrVZy.png"                      alt="image-20210730224959369"                ></p><h1 id="09-向量化"><a href="#09-向量化" class="headerlink" title="09 向量化"></a>09 向量化</h1><ul><li>向量化技术可以使代码摆脱这些显式的for循环，会帮助处理更大的数据集。</li><li>可扩展深度学习实现是在GPU（图像处理单元）上做的，但是课程是在Jupyter Notebook做的，仅用CPU。CPU和GPU都有并行化的指令有时候也叫做SIMD指令（单指令流多数据流，这个意思是如果你使用了能去掉显式for循环的函数，这样python的numpy能充分利用并行化去更快的计算）</li><li>下图是一个非向量化与向量化实现的对比：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/gEScQBuemlY2zi1.png"                      alt="image-20210730233618090"                ></p><ul><li>下面是通过python来实际进行操作，对比非向量化与向量化实现：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/Fmiodq4P7NfG1K8.png"                      alt="image-20210730233745017"                ></p><h1 id="10-向量化更多的例子"><a href="#10-向量化更多的例子" class="headerlink" title="10 向量化更多的例子"></a>10 向量化更多的例子</h1><ul><li>依旧是非向量化与向量化前后对比：往往python中一个内置函数就搞定</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/gIXEMZzY2pwUAh6.png"                      alt="image-20210731091632337"                ></p><ul><li>式子进行去掉一个for循环的写法：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/aZowHypSLhOVieT.png"                      alt="image-20210731091559616"                ></p><h1 id="11-向量化逻辑回归"><a href="#11-向量化逻辑回归" class="headerlink" title="11 向量化逻辑回归"></a>11 向量化逻辑回归</h1><p>向量化是如何实现在逻辑回归的上面的。这样可以同时处理整个训练集来实现梯度下降法的一步迭代，不需要任何显示的for循环。</p><hr><ul><li>不需要显式的for循环就可以从m个训练样本中一次性计算出z和a，这就是正向传播一步迭代的向量化实现（同时处理所有M个训练样本）。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/QesbqnpjiwHIUFl.png"                      alt="image-20210731094933836"                ></p><h1 id="12-向量化逻辑回归的梯度输出"><a href="#12-向量化逻辑回归的梯度输出" class="headerlink" title="12 向量化逻辑回归的梯度输出"></a>12 向量化逻辑回归的梯度输出</h1><p>用向量化同时计算m个训练数据的梯度</p><hr><ul><li>不使用for循环来计算参数的更新</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/atyND7XQeH2mxZh.png"                      alt="image-20210731100950695"                ></p><ul><li>用高度向量化实现一个逻辑回归</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/CAimwjNUaqG2B4P.png"                      alt="image-20210731101025592"                ></p><h1 id="13-python中的广播"><a href="#13-python中的广播" class="headerlink" title="13 python中的广播"></a>13 python中的广播</h1><p>广播技术是一种能使python和Numpy部分代码更高效的技术</p><hr><ul><li>用两行代码求出每个元素所占列的百分比：第一行代码求出列的总和，第二行代码求出百分比。其实reshape有些多余，因为已经知道了cal是一行四列的向量了，但是为了确保正确还是用了。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/oQbKdYTpvCmyHxS.png"                      alt="image-20210731105929036"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/PQTfSqO4nBaM6oE.png"                      alt="image-20210731104518977"                ></p><ul><li>在实现神经网络算法时主要用到的广播形式</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/Rfj3trNKSlIYLbw.png"                      alt="image-20210731110057481"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/BnGO7Tl5p6uWgLm.png"                      alt="image-20210731110128433"                ></p><h1 id="14-关于python-x2F-numpy向量的说明"><a href="#14-关于python-x2F-numpy向量的说明" class="headerlink" title="14 关于python&#x2F;numpy向量的说明"></a>14 关于python&#x2F;numpy向量的说明</h1><ul><li>当你实现神经网络的逻辑回归时就不要用这些秩为1的数组</li><li>每次创建数组时，要将其定义为列向量或者行向量</li><li>如果不确定一个向量的具体维度是多少，就用assert()进行声明，确保这是一个向量</li><li>如果由于某种原因得到了一个秩为1的数组就用reshape转换成一个列向量和行向量行为的数组</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/sYTWvPUd6AagEN9.png"                      alt="image-20210731113700939"                ></p><h1 id="15-逻辑回归损失函数的解释"><a href="#15-逻辑回归损失函数的解释" class="headerlink" title="15 逻辑回归损失函数的解释"></a>15 逻辑回归损失函数的解释</h1><ul><li>损失函数的表达式：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/PNbSc7GlKhn2ptV.png"                      alt="image-20210731120639413"                ></p><ul><li>总体成本函数表达式：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/MJcOvAqUtk5LZTX.png"                      alt="image-20210731121019860"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-二分分类&quot;&gt;&lt;a href=&quot;#01-二分分类&quot; class=&quot;headerlink&quot; title=&quot;01 二分分类&quot;&gt;&lt;/a&gt;01 二分分类&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;逻辑回归是一个用于二分分类的算法&lt;/li&gt;
&lt;li&gt;计算机保存一张图片就需要保存三个独立</summary>
      
    
    
    
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
