<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-02T11:34:00.825Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MyBatis第一个程序</title>
    <link href="http://example.com/2022/05/02/MyBatis%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/"/>
    <id>http://example.com/2022/05/02/MyBatis%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/</id>
    <published>2022-05-02T09:07:37.000Z</published>
    <updated>2022-05-02T11:34:00.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一个Mybatis程序"><a href="#第一个Mybatis程序" class="headerlink" title="第一个Mybatis程序"></a>第一个Mybatis程序</h2><p><strong>思路流程：搭建环境–&gt;导入Mybatis—&gt;编写代码—&gt;测试</strong></p><p>1.我们先搭建实验数据库，我是直接在IDEA中先连接上数据库，然后输入以下代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database `mybatis`;</span><br><span class="line">use `mybatis`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `<span class="keyword">user</span>`(</span><br><span class="line">    `id` <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> ,</span><br><span class="line">    `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="keyword">null</span> ,</span><br><span class="line">    `pwd` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="keyword">null</span> ,</span><br><span class="line">    <span class="keyword">primary</span> key (`id`)</span><br><span class="line">)engine<span class="operator">=</span>InnoDB <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (id, name, pwd) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;abcdef&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;987654&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>导入MyBatis相关 jar 包</li></ol> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.编写MyBatis核心配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;你自己的密码&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>编写MyBatis工具类，创建utils软件包</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fang.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  SqlSessionFactory sqlSessionFactory;</span><br><span class="line">   <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">             sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取SqlSession连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.在pojo软件包下创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fang.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, String name, String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPwd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPwd</span><span class="params">(String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;User&#123;&quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;id=&quot;</span>).append(id);</span><br><span class="line">        sb.append(<span class="string">&quot;, name=&#x27;&quot;</span>).append(name).append(<span class="string">&#x27;\&#x27;&#x27;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;, pwd=&#x27;&quot;</span>).append(pwd).append(<span class="string">&#x27;\&#x27;&#x27;</span>);</span><br><span class="line">        sb.append(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.在mapper软件包下编写Mapper接口类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fang.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fang.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>在mapper下编写Mapper.xml配置文件<ul><li>namespace 十分重要，不能写错</li></ul></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.fang.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.fang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>8.编写测试类</p><ul><li>Junit 包测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fang.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fang.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.fang.utils.MybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> MybatisUtils.getSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = mapper.selectUser();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><ul><li><p>遇到的第一个问题：<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/05/02/dUx6nVLMN41RHoK.png"                      alt="image-20220502191609790"                ></p></li><li><p>解决方法：<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/05/02/gfdaLZIW6MAy5CR.png"                      alt="image-20220502191645261"                ></p></li><li><p>遇到的第二个问题</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.ibatis.binding.BindingException: Type <span class="keyword">interface</span> <span class="title class_">com</span>.fang.mapper.UserMapper is not known to the MapperRegistry.</span><br></pre></td></tr></table></figure><ul><li>解决方法在mybatis-config.xml增加</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper resource=<span class="string">&quot;com/fang/mapper/UserMapper.xml&quot;</span>/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure><ul><li>遇到的第三个问题：就是Maven静态资源过滤问题</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Could not find resource com/fang/mapper/UserMapper.xml</span><br></pre></td></tr></table></figure><ul><li><p>解决方法，在pom.xml增加</p></li><li><pre><code class="xml">&lt;build&gt;    &lt;resources&gt;        &lt;resource&gt;            &lt;directory&gt;src/main/java&lt;/directory&gt;            &lt;includes&gt;                &lt;include&gt;**/*.properties&lt;/include&gt;                &lt;include&gt;**/*.xml&lt;/include&gt;            &lt;/includes&gt;            &lt;filtering&gt;false&lt;/filtering&gt;        &lt;/resource&gt;        &lt;resource&gt;            &lt;directory&gt;src/main/resources&lt;/directory&gt;            &lt;includes&gt;                &lt;include&gt;**/*.properties&lt;/include&gt;                &lt;include&gt;**/*.xml&lt;/include&gt;            &lt;/includes&gt;            &lt;filtering&gt;false&lt;/filtering&gt;        &lt;/resource&gt;    &lt;/resources&gt;&lt;/build&gt;</code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一个Mybatis程序&quot;&gt;&lt;a href=&quot;#第一个Mybatis程序&quot; class=&quot;headerlink&quot; title=&quot;第一个Mybatis程序&quot;&gt;&lt;/a&gt;第一个Mybatis程序&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;思路流程：搭建环境–&amp;gt;导入Mybati</summary>
      
    
    
    
    
    <category term="Mybatis" scheme="http://example.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis简介</title>
    <link href="http://example.com/2022/05/02/%E4%BB%80%E4%B9%88%E6%98%AFMybatis/"/>
    <id>http://example.com/2022/05/02/%E4%BB%80%E4%B9%88%E6%98%AFMybatis/</id>
    <published>2022-05-02T07:35:55.000Z</published>
    <updated>2022-05-02T08:01:15.788Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是MyBatis"><a href="#1-什么是MyBatis" class="headerlink" title="1.什么是MyBatis"></a>1.什么是MyBatis</h2><ul><li>MyBatis 是一款优秀的持久层框架 </li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程 </li><li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。 </li><li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并 且改名为MyBatis 。</li><li>2013年11月迁移到Github .</li><li>Mybatis官方文档 : <a class="link"   href="http://www.mybatis.org/mybatis-3/zh/index.html" >http://www.mybatis.org/mybatis-3/zh/index.html<i class="fas fa-external-link-alt"></i></a> </li><li>GitHub : <a class="link"   href="https://github.com/mybatis/mybatis-3" >https://github.com/mybatis/mybatis-3<i class="fas fa-external-link-alt"></i></a></li></ul><h2 id="2-持久化"><a href="#2-持久化" class="headerlink" title="2.持久化"></a>2.持久化</h2><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong> </p><ul><li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。 </li><li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li><li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li></ul><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong> </p><ul><li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。 </li><li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li></ul><h2 id="3-持久层"><a href="#3-持久层" class="headerlink" title="3.持久层"></a>3.持久层</h2><p><strong>什么是持久层？</strong> </p><ul><li>完成持久化工作的代码块 . —-&gt; dao层 【DAO (Data Access Object) 数据访问对象】 </li><li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种关系数据库来完成。 </li><li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许 是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专著于数据持久化逻辑的实现. 与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 【说白了就是用来操作数据库存在的！】</li></ul><h2 id="4-为什么需要Mybatis"><a href="#4-为什么需要Mybatis" class="headerlink" title="4.为什么需要Mybatis"></a>4.为什么需要Mybatis</h2><ul><li>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 . </li><li>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等… , 通过框架可以减少重复代码,提高开发效率 .</li><li>MyBatis 是一个半自动化的ORM框架 (Object Relationship Mapping) –&gt;对象关系映射 </li><li>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！技术没有高低之分，只有使用这个技术的人有高低之别 </li><li>MyBatis的优点 <ul><li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个 sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。 </li><li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。 </li><li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。 </li><li>提供xml标签，支持编写动态sql。 …….</li></ul></li><li>最重要的一点，使用的人多！公司需要！</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-什么是MyBatis&quot;&gt;&lt;a href=&quot;#1-什么是MyBatis&quot; class=&quot;headerlink&quot; title=&quot;1.什么是MyBatis&quot;&gt;&lt;/a&gt;1.什么是MyBatis&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;MyBatis 是一款优秀的持久层框架 &lt;/li</summary>
      
    
    
    
    
    <category term="Mybatis" scheme="http://example.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Java反射</title>
    <link href="http://example.com/2022/05/01/Java%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2022/05/01/Java%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/</id>
    <published>2022-05-01T09:57:17.000Z</published>
    <updated>2022-05-02T09:07:00.318Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/05/01/aRCBUovuzd3bQGD.png"                      alt="image-20220501175845630"                ></p><h2 id="1-类的加载过程"><a href="#1-类的加载过程" class="headerlink" title="1. 类的加载过程"></a>1. 类的加载过程</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/05/01/kxTrGIObSDmE2jU.png"                      alt="image-20220501180018470"                ></p><h2 id="2-类的加载与ClassLoader的理解"><a href="#2-类的加载与ClassLoader的理解" class="headerlink" title="2.类的加载与ClassLoader的理解"></a>2.类的加载与ClassLoader的理解</h2><p><strong>加载：</strong> </p><ul><li>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构， 然后生成一个代表这个类的java.lang.Class对象.</li></ul><p><strong>链接：将Java类的二进制代码合并到JVM的运行状态之中的过程。</strong> </p><ul><li>验证：确保加载的类信息符合JVM规范，没有安全方面的问题 </li><li>准备：正式为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配。</li><li>解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。</li></ul><p><strong>初始化：</strong> </p><ul><li>执行类构造器<clint>()方法的过程。类构造器<clint>()方法是由编译期自动收集类中所有类变量的赋值动作 和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的构造 器）。 </li><li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li><li>虚拟机会保证一个类的()方法在多线程环境中被正确加锁和同步。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/05/01/yzWuldjRg1s82Jk.png"                      alt="image-20220501181307995"                ></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        System.out.println(A.m);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.加载到内存，会产生一个类对应的class对象</span></span><br><span class="line"><span class="comment">        2.链接，链接结束后m=0</span></span><br><span class="line"><span class="comment">        3.初始化</span></span><br><span class="line"><span class="comment">            &lt;clint&gt;()&#123;</span></span><br><span class="line"><span class="comment">             System.out.println(&quot;A类静态代码块&quot;);</span></span><br><span class="line"><span class="comment">            m = 300;</span></span><br><span class="line"><span class="comment">            m =100;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A类静态代码块&quot;</span>);</span><br><span class="line">        m = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span><span class="number">100</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A类的无参构造初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-分析类初始化"><a href="#3-分析类初始化" class="headerlink" title="3. 分析类初始化"></a>3. 分析类初始化</h2><p><strong>什么时候会发生类初始化？</strong></p><ul><li><p>类的主动引用（一定会发生类的初始化） </p></li><li><p>当虚拟机启动，先初始化main方法所在的类 </p></li><li><p>new一个类的对象 </p></li><li><p>调用类的静态成员（除了final常量）和静态方法 </p></li><li><p>使用java.lang.reflect包的方法对类进行反射调用 </p></li><li><p>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类 </p></li><li><p>类的被动引用（不会发生类的初始化） </p><ul><li><p>当访问一个静态域时，只有真正声明这个域的类才会被初始化。如：当通过子类引用父类的静态变量，不会导致子类初始化 </p></li><li><p>通过数组定义类引用，不会触发此类的初始化 </p></li><li><p>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）</p></li><li><p>&#96;&#96;&#96;java<br>public class demo1 {<br>public static void main(String[] args) throws ClassNotFoundException {<br>    System.out.println(“main方法”);<br>    &#x2F;&#x2F;1.主动引用<br>    Son son &#x3D; new Son();<br>    &#x2F;&#x2F;2.反射也会产生引用<br>    Class.forName(“Son”);<br>    &#x2F;&#x2F;3.当通过子类引用父类的静态变量，不会导致子类初始化<br>    System.out.println(Son.b);<br>    &#x2F;&#x2F;4.通过数组定义类引用，不会触发此类的初始化<br>    Son[] array &#x3D; new Son[5];<br>    &#x2F;&#x2F;引用常量不会触发此类的初始化<br>    System.out.println(Son.M);<br><br>}<br>}<br>class Father{<br>static int b &#x3D; 2;<br>static {<br>    System.out.println(“父类被加载”);<br>}<br>   }<br>class Son extends Father{<br>static {<br>    System.out.println(“子类被加载”);<br>    m &#x3D; 300;<br>}<br>static int m &#x3D;100;<br>static final int M &#x3D; 1;<br>}<br>&#x2F;&#x2F;输出<br>1.main方法<br>父类被加载<br>子类被加载<br>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;<br>2.main方法<br>父类被加载<br>子类被加载<br>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;<br>3.main方法<br>父类被加载<br>2<br>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;<br>4.main方法<br>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;<br>5.main方法<br>1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 4.类加载器</span><br><span class="line"></span><br><span class="line">**类加载器的作用** </span><br><span class="line"></span><br><span class="line">- 类加载的作用：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数 据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入 口。 </span><br><span class="line">- 类缓存：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象![image-20220502084248456](https://s2.loli.net/2022/05/02/NwkOl8EMJFiBgjZ.png)</span><br><span class="line"></span><br><span class="line">- 类加载器作用是用来把类(class)装载进内存的。JVM 规范定义了如下类型的类的加载器![image-20220502084324842](https://s2.loli.net/2022/05/02/CcgbE8KFzaQRehG.png)</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public class demo1 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        //获取系统类的加载器</span><br><span class="line">        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);</span><br><span class="line">        //获取系统类加载器的父类加载器-&gt;扩展类加载器</span><br><span class="line">        ClassLoader parent = systemClassLoader.getParent();</span><br><span class="line">        System.out.println(parent);</span><br><span class="line">        //获取扩展类加载器的父类加载器-&gt;根加载器</span><br><span class="line">        ClassLoader parent1 = parent.getParent();</span><br><span class="line">        System.out.println(parent1);</span><br><span class="line">        //测试当前类是哪个加载器加载的</span><br><span class="line">        ClassLoader classLoader = Class.forName(&quot;demo1&quot;).getClassLoader();</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line">        //测试JDK内置的类是哪个加载器加载的</span><br><span class="line">        classLoader = Class.forName(&quot;java.lang.Object&quot;).getClassLoader();</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line">        //如何获取系统类加载器可以加载的路径</span><br><span class="line">        System.out.println(System.getProperty(&quot;java.class.path&quot;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//输出</span><br><span class="line">sun.misc.Launcher$AppClassLoader@14dad5dc</span><br><span class="line">sun.misc.Launcher$ExtClassLoader@2503dbd3</span><br><span class="line">null</span><br><span class="line">sun.misc.Launcher$AppClassLoader@14dad5dc</span><br><span class="line">null</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\charsets.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\deploy.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\ext\access-bridge-64.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\ext\cldrdata.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\ext\dnsns.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\ext\jaccess.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\ext\jfxrt.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\ext\localedata.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\ext\nashorn.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\ext\sunec.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\ext\sunjce_provider.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\ext\sunmscapi.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\ext\sunpkcs11.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\ext\zipfs.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\javaws.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\jce.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\jfr.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\jfxswt.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\jsse.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\management-agent.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\plugin.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\resources.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\rt.jar;</span><br><span class="line">C:\Users\1\Desktop\fang\java\cookie-session\cookie-session\target\classes;</span><br><span class="line">C:\Environment\maven\maven-repo\javax\servlet\jsp\jstl\jstl-api\1.2\jstl-api-1.2.jar;</span><br><span class="line">C:\Environment\maven\maven-repo\javax\servlet\servlet-api\2.5\servlet-api-2.5.jar;</span><br><span class="line">C:\Environment\maven\maven-repo\taglibs\standard\1.1.2\standard-1.1.2.jar;</span><br><span class="line">C:\Environment\maven\maven-repo\mysql\mysql-connector-java\5.1.47\mysql-connector-java-5.1.47.jar;</span><br><span class="line">C:\Environment\maven\maven-repo\org\json\json\20160810\json-20160810.jar;</span><br><span class="line">C:\Environment\maven\maven-repo\commons-io\commons-io\2.4\commons-io-2.4.jar;</span><br><span class="line">C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.3\lib\idea_rt.jar</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="5-获取类的运行时结构"><a href="#5-获取类的运行时结构" class="headerlink" title="5.获取类的运行时结构"></a>5.获取类的运行时结构</h2><p>通过反射获取运行时类的完整结构： Field、Method、Constructor、Superclass、Interface、Annotation 实现的全部接口 所继承的父类 全部的构造器 全部的方法 全部的Field 注解 …….</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;User&quot;</span>);</span><br><span class="line">        <span class="comment">//获取类的名字</span></span><br><span class="line">        System.out.println(c1.getName());<span class="comment">//获取包名+类名</span></span><br><span class="line">        System.out.println(c1.getSimpleName());<span class="comment">//获取类名</span></span><br><span class="line">        <span class="comment">//获取类的属性</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line">        Field[] fields = c1.getFields();<span class="comment">//只能找到public属性</span></span><br><span class="line">        fields = c1.getDeclaredFields();<span class="comment">//找到全部的属性</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取指定属性的值</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="comment">//获得类的方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line">        Method[] methods = c1.getMethods();<span class="comment">//获取本类及其父类所有的public方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;正常的&quot;</span>+method);</span><br><span class="line">        &#125;</span><br><span class="line">        methods = c1.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;getDeclaredMethods&quot;</span>+method);<span class="comment">//获取本类所有的方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取指定的方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">getName</span> <span class="operator">=</span> c1.getMethod(<span class="string">&quot;getName&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">setName</span> <span class="operator">=</span> c1.getMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        System.out.println(getName);</span><br><span class="line">        System.out.println(setName);</span><br><span class="line">        <span class="comment">//获取指定的构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line">        Constructor[] constructors = c1.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        constructors = c1.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;#&quot;</span>+constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得指定得构造器</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">declaredConstructor</span> <span class="operator">=</span> c1.getDeclaredConstructor( <span class="type">int</span>.class, <span class="type">int</span>.class,String.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;指定&quot;</span>+declaredConstructor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1. 创建一个实体类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&quot;</span> + name +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="type">User</span></span><br><span class="line"><span class="variable">User</span></span><br><span class="line"><span class="operator">=</span>=================</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> User.id</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> User.age</span><br><span class="line"><span class="keyword">private</span> java.lang.String User.name</span><br><span class="line"><span class="keyword">private</span> java.lang.String User.name</span><br><span class="line">==================</span><br><span class="line">正常的<span class="keyword">public</span> java.lang.String User.toString()</span><br><span class="line">正常的<span class="keyword">public</span> java.lang.String User.getName()</span><br><span class="line">正常的<span class="keyword">public</span> <span class="type">int</span> User.getId()</span><br><span class="line">正常的<span class="keyword">public</span> <span class="keyword">void</span> User.setName(java.lang.String)</span><br><span class="line">正常的<span class="keyword">public</span> <span class="keyword">void</span> User.setId(<span class="type">int</span>)</span><br><span class="line">正常的<span class="keyword">public</span> <span class="type">int</span> User.getAge()</span><br><span class="line">正常的<span class="keyword">public</span> <span class="keyword">void</span> User.setAge(<span class="type">int</span>)</span><br><span class="line">正常的<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> java.lang.Object.wait() <span class="keyword">throws</span> java.lang.InterruptedException</span><br><span class="line">正常的<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> java.lang.Object.wait(<span class="type">long</span>,<span class="type">int</span>) <span class="keyword">throws</span> java.lang.InterruptedException</span><br><span class="line">正常的<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.wait(<span class="type">long</span>) <span class="keyword">throws</span> java.lang.InterruptedException</span><br><span class="line">正常的<span class="keyword">public</span> <span class="type">boolean</span> java.lang.Object.equals(java.lang.Object)</span><br><span class="line">正常的<span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> java.lang.Object.hashCode()</span><br><span class="line">正常的<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> java.lang.Class java.lang.Object.getClass()</span><br><span class="line">正常的<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.notify()</span><br><span class="line">正常的<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.notifyAll()</span><br><span class="line">getDeclaredMethodspublic java.lang.String User.toString()</span><br><span class="line">getDeclaredMethodspublic java.lang.String User.getName()</span><br><span class="line">getDeclaredMethodspublic <span class="type">int</span> User.getId()</span><br><span class="line">getDeclaredMethodspublic <span class="keyword">void</span> User.setName(java.lang.String)</span><br><span class="line">getDeclaredMethodspublic <span class="keyword">void</span> User.setId(<span class="type">int</span>)</span><br><span class="line">getDeclaredMethodspublic <span class="type">int</span> User.getAge()</span><br><span class="line">getDeclaredMethodspublic <span class="keyword">void</span> User.setAge(<span class="type">int</span>)</span><br><span class="line"><span class="keyword">public</span> java.lang.String User.getName()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> User.setName(java.lang.String)</span><br><span class="line">==================</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>,java.lang.String)</span></span><br><span class="line">#<span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span></span><br><span class="line">#<span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>,java.lang.String)</span></span><br><span class="line">指定<span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>,java.lang.String)</span></span><br></pre></td></tr></table></figure><h2 id="6-动态创建对象执行"><a href="#6-动态创建对象执行" class="headerlink" title="6.动态创建对象执行"></a>6.动态创建对象执行</h2><p><strong>有了Class对象,能做什么?</strong> </p><ul><li><p>创建类的对象：调用Class对象的newInstance()方法 </p><ul><li>类必须有一个无参数的构造器。 </li><li>类的构造器的访问权限需要足够</li></ul></li><li><p>思考？难道没有无参的构造器就不能创建对象了吗？只要在操作的时候明确的调用类中的构造器， 并将参数传递进去之后，才可以实例化操作。</p></li><li><p>步骤如下： </p></li><li><p>通过Class类的getDeclaredConstructor(Class … parameterTypes)取得本类的指定形参类型的构造器 </p></li><li><p>向构造器的形参中传递一个对象数组进去，</p></li><li><p>里面包含了构造器中所需的各个参数。 通过Constructor实例化对象</p></li></ul><p><strong>调用指定的方法</strong> </p><ul><li>通过反射，调用类中的方法，通过Method类完成。 <ul><li>通过Class类的getMethod(String name,Class…parameterTypes)方法取得一个Method对 象，并设置此方法操作时所需要的参数类型。 </li><li>之后使用Object invoke(Object obj, Object[] args)进行调用，并向方法中传递要设置的obj对 象的参数信息。</li><li>Object 对应原方法的返回值，若原方法无返回值，此时返回null </li><li>若原方法若为静态方法，此时形参Object obj可为null </li><li>若原方法形参列表为空，则Object[] args为null </li><li>若原方法声明为private,则需要在调用此invoke()方法前，显式调用方法对象的 setAccessible(true)方法，将可访问private的方法。</li></ul></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/05/02/Psu72VjyK4IiqgM.png"                      alt="image-20220502102928811"                ></p><p><strong>setAccessible</strong> </p><ul><li><p>Method和Field、Constructor对象都有setAccessible()方法。 </p></li><li><p>setAccessible作用是启动和禁用访问安全检查的开关。 </p></li><li><p>参数值为true则指示反射的对象在使用时应该取消Java语言访问检查。 </p></li><li><p>提高反射的效率。如果代码中必须用反射，而该句代码需要频繁的被调用，那么请设置为true。 </p></li><li><p>使得原本无法访问的私有成员也可以访问 </p></li><li><p>参数值为false则指示反射的对象应该实施Java语言访问检查</p></li><li><p>&#96;&#96;&#96;java<br>import java.lang.reflect.Constructor;<br>import java.lang.reflect.Field;<br>import java.lang.reflect.Method;<br>&#x2F;&#x2F;动态创建对象通过反射<br>public class demo1 {<br>public static void main(String[] args) throws Exception {<br>    &#x2F;&#x2F;获取class对象<br>    Class c1 &#x3D; Class.forName(“User”);<br>    &#x2F;&#x2F;构造一个对象<br>   User user &#x3D; (User) c1.newInstance();            System.out.println(user);<br>    &#x2F;&#x2F;通过构造器创建对象<br>    Constructor constructor &#x3D; c1.getDeclaredConstructor(int.class, int.class, String.class);<br>    User user2 &#x3D; (User) constructor.newInstance(001, 18, “xiao”);<br>    System.out.println(user2);<br>    &#x2F;&#x2F;通过反射调用普通方法<br>    User user3 &#x3D; (User) c1.newInstance();<br>    &#x2F;&#x2F;通过反射获取普通方法<br>    Method setName &#x3D; c1.getDeclaredMethod(“setName”, String.class);<br>    setName.invoke(user3,”xiao”);<br>    System.out.println(user3.getName());<br>    &#x2F;&#x2F;通过反射操作属性<br>    System.out.println(“&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;”);<br>    User user4 &#x3D; (User) c1.newInstance();<br>    Field name &#x3D; c1.getDeclaredField(“name”);<br>    &#x2F;&#x2F;不能直接操作私有属性，我们需要关闭程序的安全检测<br>    name.setAccessible(true);<br>    name.set(user4,”xiaoxiao”);<br>    System.out.println(user4.getName());<br><br><br>}<br>}<br>&#x2F;&#x2F;1. 创建一个实体类<br>class User{<br>private int id;<br>private int age;<br>private String name;<br>public User() {<br>}<br>public User(int id, int age, String name) {<br>    this.id &#x3D; id;<br>    this.age &#x3D; age;<br>    this.name &#x3D; name;<br>}<br>public int getId() {<br>    return id;<br>}<br>public void setId(int id) {<br>    this.id &#x3D; id;<br>}<br>public int getAge() {<br>    return age;<br>}<br>public void setAge(int age) {<br>    this.age &#x3D; age;<br>}<br>public String getName() {<br>    return name;<br>}<br>public void setName(String name) {<br>    this.name &#x3D; name;<br>}<br>@Override<br>public String toString() {<br>    return “User{“ +<br>            “id&#x3D;” + id +<br>            “, age&#x3D;” + age +<br>            “, name&#x3D;” + name +<br>            ‘}’;<br>}<br>}<br>&#x2F;&#x2F;输出<br>User{id&#x3D;0, age&#x3D;0, name&#x3D;null}<br>User{id&#x3D;1, age&#x3D;18, name&#x3D;xiao}</p><h1 id="xiao"><a href="#xiao" class="headerlink" title="xiao"></a>xiao</h1><p>xiaoxiao</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 7.性能对比分析</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.lang.reflect.InvocationTargetException;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">//分析性能问题</span><br><span class="line">public class demo1 &#123;</span><br><span class="line">       //普通调用方法</span><br><span class="line">        public static void test01()&#123;</span><br><span class="line">            User user = new User();</span><br><span class="line">            long startTime = System.currentTimeMillis();</span><br><span class="line">            for (int i = 0; i &lt; 1000000000; i++) &#123;</span><br><span class="line">                user.getName();</span><br><span class="line">            &#125;</span><br><span class="line">            long endTime = System.currentTimeMillis();</span><br><span class="line">            System.out.println(&quot;普通方法执行10亿次&quot;+(endTime-startTime)+&quot;ms&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //反射方式调用</span><br><span class="line">        public static void test02() throws InvocationTargetException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">            User user = new User();</span><br><span class="line">            Class c1 = user.getClass();</span><br><span class="line">            Method getName = c1.getDeclaredMethod(&quot;getName&quot;, null);</span><br><span class="line"></span><br><span class="line">            long startTime = System.currentTimeMillis();</span><br><span class="line">            for (int i = 0; i &lt; 1000000000; i++) &#123;</span><br><span class="line">                getName.invoke(user,null);</span><br><span class="line">            &#125;</span><br><span class="line">            long endTime = System.currentTimeMillis();</span><br><span class="line">            System.out.println(&quot;反射方法执行10亿次&quot;+(endTime-startTime)+&quot;ms&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //反射方式调用，关闭检测</span><br><span class="line">        public static void test03() throws InvocationTargetException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">            User user = new User();</span><br><span class="line">            Class c1 = user.getClass();</span><br><span class="line">            Method getName = c1.getDeclaredMethod(&quot;getName&quot;, null);</span><br><span class="line">            getName.setAccessible(true);</span><br><span class="line">            long startTime = System.currentTimeMillis();</span><br><span class="line">            for (int i = 0; i &lt; 1000000000; i++) &#123;</span><br><span class="line">                getName.invoke(user,null);</span><br><span class="line">            &#125;</span><br><span class="line">            long endTime = System.currentTimeMillis();</span><br><span class="line">            System.out.println(&quot;关闭检测方法执行10亿次&quot;+(endTime-startTime)+&quot;ms&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InvocationTargetException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        test01();</span><br><span class="line">        test02();</span><br><span class="line">        test03();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//1. 创建一个实体类</span><br><span class="line">class User&#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private int age;</span><br><span class="line">    private String name;</span><br><span class="line">    public User() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public User(int id, int age, String name) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.age = age;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, age=&quot; + age +</span><br><span class="line">                &quot;, name=&quot; + name +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//输出</span><br><span class="line">普通方法执行10亿次4ms</span><br><span class="line">反射方法执行10亿次4366ms</span><br><span class="line">关闭检测方法执行10亿次1757ms</span><br></pre></td></tr></table></figure></li></ul><h2 id="8-反射操作泛型"><a href="#8-反射操作泛型" class="headerlink" title="8.反射操作泛型"></a>8.反射操作泛型</h2><ul><li><p>Java采用泛型擦除的机制来引入泛型 , Java中的泛型仅仅是给编译器javac使用的,确保数据的安全性 和免去强制类型转换问题 , 但是 , 一旦编译完成 , 所有和泛型有关的类型全部擦除 </p></li><li><p>为了通过反射操作这些类型 , Java新增了 ParameterizedType , GenericArrayType , TypeVariable 和 WildcardType 几种类型来代表不能被归一到Class类中的类型但是又和原始类型齐名的类型. </p></li><li><p>ParameterizedType : 表示一种参数化类型,比如Collection </p></li><li><p>GenericArrayType : 表示一种元素类型是参数化类型或者类型变量的数组类型 </p></li><li><p>TypeVariable : 是各种类型变量的公共父接口 </p></li><li><p>WildcardType : 代表一种通配符类型表达式</p></li><li><p>&#96;&#96;&#96;java<br>import java.lang.reflect.*;<br>import java.util.List;<br>import java.util.Map;</p><p>&#x2F;&#x2F;分析性能问题<br>public class demo1 {<br>   public void test01(Map&lt;String,User&gt; map, List<User> list){<br>       System.out.println(“test01”);<br>   }<br>   public Map&lt;String,User&gt; test02(){<br>       System.out.println(“test02”);<br>       return null;<br>   }<br><br>public static void main(String[] args) throws NoSuchMethodException {<br>    Method method &#x3D; demo1.class.getMethod(“test01”, Map.class, List.class);<br>    Type[] genericParameterTypes &#x3D; method.getGenericParameterTypes();<br>    for (Type genericParameterType : genericParameterTypes) {<br>        System.out.println(“#”+genericParameterTypes);<br>        if (genericParameterType instanceof ParameterizedType) {<br>            Type[] actualTypeArguments &#x3D; ((ParameterizedType) genericParameterType).getActualTypeArguments();<br>            for (Type actualTypeArgument : actualTypeArguments) {<br>                System.out.println(actualTypeArgument);<br>            }<br>        }<br><br>    }<br><br>    method &#x3D; demo1.class.getMethod(“test02”, null);<br>    Type genericReturnType &#x3D; method.getGenericReturnType();<br>        if (genericReturnType instanceof ParameterizedType) {<br>            Type[] actualTypeArguments &#x3D; ((ParameterizedType) genericReturnType).getActualTypeArguments();<br>            for (Type actualTypeArgument : actualTypeArguments) {<br>                System.out.println(actualTypeArgument);<br><br>        }<br><br>    }<br><br>}<br>}<br>&#x2F;&#x2F;1. 创建一个实体类<br>class User{<br>private int id;<br>private int age;<br>private String name;<br>public User() {<br>}<br>public User(int id, int age, String name) {<br>    this.id &#x3D; id;<br>    this.age &#x3D; age;<br>    this.name &#x3D; name;<br>}<br>public int getId() {<br>    return id;<br>}<br>public void setId(int id) {<br>    this.id &#x3D; id;<br>}<br>public int getAge() {<br>    return age;<br>}<br>public void setAge(int age) {<br>    this.age &#x3D; age;<br>}<br>public String getName() {<br>    return name;<br>}<br>public void setName(String name) {<br>    this.name &#x3D; name;<br>}<br>@Override<br>public String toString() {<br>    return “User{“ +<br>            “id&#x3D;” + id +<br>            “, age&#x3D;” + age +<br>            “, name&#x3D;” + name +<br>            ‘}’;<br>}<br>}<br>&#x2F;&#x2F;输出<br>#[Ljava.lang.reflect.Type;@2503dbd3<br>class java.lang.String<br>class User<br>#[Ljava.lang.reflect.Type;@2503dbd3<br>class User<br>class java.lang.String<br>class User</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 9.反射操作注解</span><br><span class="line"></span><br><span class="line">- getAnnotations </span><br><span class="line"></span><br><span class="line">- getAnnotation</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  import java.lang.annotation.*;</span><br><span class="line">  import java.lang.reflect.*;</span><br><span class="line">  import java.util.List;</span><br><span class="line">  import java.util.Map;</span><br><span class="line">  </span><br><span class="line">  //分析性能问题</span><br><span class="line">  public class demo1 &#123;</span><br><span class="line">      public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException &#123;</span><br><span class="line">          Class c1 = Class.forName(&quot;student&quot;);</span><br><span class="line">          //通过反射获得注解</span><br><span class="line">          Annotation[] annotations = c1.getAnnotations();</span><br><span class="line">          for (Annotation annotation : annotations) &#123;</span><br><span class="line">              System.out.println(annotation);</span><br><span class="line">          &#125;</span><br><span class="line">          //获得注解的value的值</span><br><span class="line">          Table table = (Table)c1.getAnnotation(Table.class);</span><br><span class="line">          String value = table.value();</span><br><span class="line">          System.out.println(value);</span><br><span class="line">          //获得类指定的注解</span><br><span class="line">          Field f = c1.getDeclaredField(&quot;name&quot;);</span><br><span class="line">          File annotation = f.getAnnotation(File.class);</span><br><span class="line">          System.out.println(annotation.columnName());</span><br><span class="line">          System.out.println(annotation.type());</span><br><span class="line">          System.out.println(annotation.length());</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @Table(&quot;student&quot;)</span><br><span class="line">  class student&#123;</span><br><span class="line">      @File(columnName = &quot;id&quot;,type = &quot;int&quot;,length = 10)</span><br><span class="line">      private int id;</span><br><span class="line">      @File(columnName = &quot;age&quot;,type = &quot;int&quot;,length = 10)</span><br><span class="line">      private int age;</span><br><span class="line">      @File(columnName = &quot;name&quot;,type = &quot;varchar&quot;,length = 3)</span><br><span class="line">      private String name;</span><br><span class="line">  </span><br><span class="line">      public student() &#123;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public student(int id, int age, String name) &#123;</span><br><span class="line">          this.id = id;</span><br><span class="line">          this.age = age;</span><br><span class="line">          this.name = name;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public int getId() &#123;</span><br><span class="line">          return id;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void setId(int id) &#123;</span><br><span class="line">          this.id = id;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public int getAge() &#123;</span><br><span class="line">          return age;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void setAge(int age) &#123;</span><br><span class="line">          this.age = age;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public String getName() &#123;</span><br><span class="line">          return name;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public void setName(String name) &#123;</span><br><span class="line">          this.name = name;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      public String toString() &#123;</span><br><span class="line">          final StringBuffer sb = new StringBuffer(&quot;student&#123;&quot;);</span><br><span class="line">          sb.append(&quot;id=&quot;).append(id);</span><br><span class="line">          sb.append(&quot;, age=&quot;).append(age);</span><br><span class="line">          sb.append(&quot;, name=&#x27;&quot;).append(name).append(&#x27;\&#x27;&#x27;);</span><br><span class="line">          sb.append(&#x27;&#125;&#x27;);</span><br><span class="line">          return sb.toString();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //类名的注解</span><br><span class="line">  @Target(ElementType.TYPE)</span><br><span class="line">  @Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">  @interface Table&#123;</span><br><span class="line">      String value();</span><br><span class="line">  &#125;</span><br><span class="line">  //属性的注解</span><br><span class="line">  @Target(ElementType.FIELD)</span><br><span class="line">  @Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">  @interface File&#123;</span><br><span class="line">      String columnName();</span><br><span class="line">      String type();</span><br><span class="line">      int length();</span><br><span class="line">  &#125;</span><br><span class="line">  //输出</span><br><span class="line">  @Table(value=student)</span><br><span class="line">  student</span><br><span class="line">  name</span><br><span class="line">  varchar</span><br><span class="line">  3</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;https://s2.loli.net/20</summary>
      
    
    
    
    
    <category term="反射" scheme="http://example.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Java内存分析</title>
    <link href="http://example.com/2022/05/01/Java%E5%8F%8D%E5%B0%84/"/>
    <id>http://example.com/2022/05/01/Java%E5%8F%8D%E5%B0%84/</id>
    <published>2022-05-01T09:57:17.000Z</published>
    <updated>2022-05-02T03:56:55.023Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/05/01/aRCBUovuzd3bQGD.png"                      alt="image-20220501175845630"                ></p><h2 id="1-类的加载过程"><a href="#1-类的加载过程" class="headerlink" title="1. 类的加载过程"></a>1. 类的加载过程</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/05/01/kxTrGIObSDmE2jU.png"                      alt="image-20220501180018470"                ></p><h2 id="2-类的加载与ClassLoader的理解"><a href="#2-类的加载与ClassLoader的理解" class="headerlink" title="2.类的加载与ClassLoader的理解"></a>2.类的加载与ClassLoader的理解</h2><p><strong>加载：</strong> </p><ul><li>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构， 然后生成一个代表这个类的java.lang.Class对象.</li></ul><p><strong>链接：将Java类的二进制代码合并到JVM的运行状态之中的过程。</strong> </p><ul><li>验证：确保加载的类信息符合JVM规范，没有安全方面的问题 </li><li>准备：正式为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配。</li><li>解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。</li></ul><p><strong>初始化：</strong> </p><ul><li>执行类构造器<clint>()方法的过程。类构造器<clint>()方法是由编译期自动收集类中所有类变量的赋值动作 和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的构造 器）。 </li><li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li><li>虚拟机会保证一个类的()方法在多线程环境中被正确加锁和同步。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/05/01/yzWuldjRg1s82Jk.png"                      alt="image-20220501181307995"                ></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        System.out.println(A.m);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.加载到内存，会产生一个类对应的class对象</span></span><br><span class="line"><span class="comment">        2.链接，链接结束后m=0</span></span><br><span class="line"><span class="comment">        3.初始化</span></span><br><span class="line"><span class="comment">            &lt;clint&gt;()&#123;</span></span><br><span class="line"><span class="comment">             System.out.println(&quot;A类静态代码块&quot;);</span></span><br><span class="line"><span class="comment">            m = 300;</span></span><br><span class="line"><span class="comment">            m =100;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A类静态代码块&quot;</span>);</span><br><span class="line">        m = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span><span class="number">100</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A类的无参构造初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-分析类初始化"><a href="#3-分析类初始化" class="headerlink" title="3. 分析类初始化"></a>3. 分析类初始化</h2><p><strong>什么时候会发生类初始化？</strong></p><ul><li><p>类的主动引用（一定会发生类的初始化） </p></li><li><p>当虚拟机启动，先初始化main方法所在的类 </p></li><li><p>new一个类的对象 </p></li><li><p>调用类的静态成员（除了final常量）和静态方法 </p></li><li><p>使用java.lang.reflect包的方法对类进行反射调用 </p></li><li><p>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类 </p></li><li><p>类的被动引用（不会发生类的初始化） </p><ul><li><p>当访问一个静态域时，只有真正声明这个域的类才会被初始化。如：当通过子类引用父类的静态变量，不会导致子类初始化 </p></li><li><p>通过数组定义类引用，不会触发此类的初始化 </p></li><li><p>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）</p></li><li><p>&#96;&#96;&#96;java<br>public class demo1 {<br>public static void main(String[] args) throws ClassNotFoundException {<br>    System.out.println(“main方法”);<br>    &#x2F;&#x2F;1.主动引用<br>    Son son &#x3D; new Son();<br>    &#x2F;&#x2F;2.反射也会产生引用<br>    Class.forName(“Son”);<br>    &#x2F;&#x2F;3.当通过子类引用父类的静态变量，不会导致子类初始化<br>    System.out.println(Son.b);<br>    &#x2F;&#x2F;4.通过数组定义类引用，不会触发此类的初始化<br>    Son[] array &#x3D; new Son[5];<br>    &#x2F;&#x2F;引用常量不会触发此类的初始化<br>    System.out.println(Son.M);<br><br>}<br>}<br>class Father{<br>static int b &#x3D; 2;<br>static {<br>    System.out.println(“父类被加载”);<br>}<br>   }<br>class Son extends Father{<br>static {<br>    System.out.println(“子类被加载”);<br>    m &#x3D; 300;<br>}<br>static int m &#x3D;100;<br>static final int M &#x3D; 1;<br>}<br>&#x2F;&#x2F;输出<br>1.main方法<br>父类被加载<br>子类被加载<br>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;<br>2.main方法<br>父类被加载<br>子类被加载<br>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;<br>3.main方法<br>父类被加载<br>2<br>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;<br>4.main方法<br>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;<br>5.main方法<br>1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 4.类加载器</span><br><span class="line"></span><br><span class="line">**类加载器的作用** </span><br><span class="line"></span><br><span class="line">- 类加载的作用：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数 据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入 口。 </span><br><span class="line">- 类缓存：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象![image-20220502084248456](../../../../../../AppData/Roaming/Typora/typora-user-images/image-20220502084248456.png)</span><br><span class="line"></span><br><span class="line">- 类加载器作用是用来把类(class)装载进内存的。JVM 规范定义了如下类型的类的加载器![image-20220502084324842](../../../../../../AppData/Roaming/Typora/typora-user-images/image-20220502084324842.png)</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public class demo1 &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        //获取系统类的加载器</span><br><span class="line">        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);</span><br><span class="line">        //获取系统类加载器的父类加载器-&gt;扩展类加载器</span><br><span class="line">        ClassLoader parent = systemClassLoader.getParent();</span><br><span class="line">        System.out.println(parent);</span><br><span class="line">        //获取扩展类加载器的父类加载器-&gt;根加载器</span><br><span class="line">        ClassLoader parent1 = parent.getParent();</span><br><span class="line">        System.out.println(parent1);</span><br><span class="line">        //测试当前类是哪个加载器加载的</span><br><span class="line">        ClassLoader classLoader = Class.forName(&quot;demo1&quot;).getClassLoader();</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line">        //测试JDK内置的类是哪个加载器加载的</span><br><span class="line">        classLoader = Class.forName(&quot;java.lang.Object&quot;).getClassLoader();</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line">        //如何获取系统类加载器可以加载的路径</span><br><span class="line">        System.out.println(System.getProperty(&quot;java.class.path&quot;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//输出</span><br><span class="line">sun.misc.Launcher$AppClassLoader@14dad5dc</span><br><span class="line">sun.misc.Launcher$ExtClassLoader@2503dbd3</span><br><span class="line">null</span><br><span class="line">sun.misc.Launcher$AppClassLoader@14dad5dc</span><br><span class="line">null</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\charsets.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\deploy.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\ext\access-bridge-64.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\ext\cldrdata.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\ext\dnsns.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\ext\jaccess.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\ext\jfxrt.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\ext\localedata.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\ext\nashorn.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\ext\sunec.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\ext\sunjce_provider.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\ext\sunmscapi.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\ext\sunpkcs11.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\ext\zipfs.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\javaws.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\jce.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\jfr.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\jfxswt.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\jsse.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\management-agent.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\plugin.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\resources.jar;</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_40\jre\lib\rt.jar;</span><br><span class="line">C:\Users\1\Desktop\fang\java\cookie-session\cookie-session\target\classes;</span><br><span class="line">C:\Environment\maven\maven-repo\javax\servlet\jsp\jstl\jstl-api\1.2\jstl-api-1.2.jar;</span><br><span class="line">C:\Environment\maven\maven-repo\javax\servlet\servlet-api\2.5\servlet-api-2.5.jar;</span><br><span class="line">C:\Environment\maven\maven-repo\taglibs\standard\1.1.2\standard-1.1.2.jar;</span><br><span class="line">C:\Environment\maven\maven-repo\mysql\mysql-connector-java\5.1.47\mysql-connector-java-5.1.47.jar;</span><br><span class="line">C:\Environment\maven\maven-repo\org\json\json\20160810\json-20160810.jar;</span><br><span class="line">C:\Environment\maven\maven-repo\commons-io\commons-io\2.4\commons-io-2.4.jar;</span><br><span class="line">C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.3\lib\idea_rt.jar</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="5-获取类的运行时结构"><a href="#5-获取类的运行时结构" class="headerlink" title="5.获取类的运行时结构"></a>5.获取类的运行时结构</h2><p>通过反射获取运行时类的完整结构： Field、Method、Constructor、Superclass、Interface、Annotation 实现的全部接口 所继承的父类 全部的构造器 全部的方法 全部的Field 注解 …….</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;User&quot;</span>);</span><br><span class="line">        <span class="comment">//获取类的名字</span></span><br><span class="line">        System.out.println(c1.getName());<span class="comment">//获取包名+类名</span></span><br><span class="line">        System.out.println(c1.getSimpleName());<span class="comment">//获取类名</span></span><br><span class="line">        <span class="comment">//获取类的属性</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line">        Field[] fields = c1.getFields();<span class="comment">//只能找到public属性</span></span><br><span class="line">        fields = c1.getDeclaredFields();<span class="comment">//找到全部的属性</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取指定属性的值</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="comment">//获得类的方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line">        Method[] methods = c1.getMethods();<span class="comment">//获取本类及其父类所有的public方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;正常的&quot;</span>+method);</span><br><span class="line">        &#125;</span><br><span class="line">        methods = c1.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;getDeclaredMethods&quot;</span>+method);<span class="comment">//获取本类所有的方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取指定的方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">getName</span> <span class="operator">=</span> c1.getMethod(<span class="string">&quot;getName&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">setName</span> <span class="operator">=</span> c1.getMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        System.out.println(getName);</span><br><span class="line">        System.out.println(setName);</span><br><span class="line">        <span class="comment">//获取指定的构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line">        Constructor[] constructors = c1.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        constructors = c1.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;#&quot;</span>+constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得指定得构造器</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">declaredConstructor</span> <span class="operator">=</span> c1.getDeclaredConstructor( <span class="type">int</span>.class, <span class="type">int</span>.class,String.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;指定&quot;</span>+declaredConstructor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1. 创建一个实体类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&quot;</span> + name +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="type">User</span></span><br><span class="line"><span class="variable">User</span></span><br><span class="line"><span class="operator">=</span>=================</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> User.id</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> User.age</span><br><span class="line"><span class="keyword">private</span> java.lang.String User.name</span><br><span class="line"><span class="keyword">private</span> java.lang.String User.name</span><br><span class="line">==================</span><br><span class="line">正常的<span class="keyword">public</span> java.lang.String User.toString()</span><br><span class="line">正常的<span class="keyword">public</span> java.lang.String User.getName()</span><br><span class="line">正常的<span class="keyword">public</span> <span class="type">int</span> User.getId()</span><br><span class="line">正常的<span class="keyword">public</span> <span class="keyword">void</span> User.setName(java.lang.String)</span><br><span class="line">正常的<span class="keyword">public</span> <span class="keyword">void</span> User.setId(<span class="type">int</span>)</span><br><span class="line">正常的<span class="keyword">public</span> <span class="type">int</span> User.getAge()</span><br><span class="line">正常的<span class="keyword">public</span> <span class="keyword">void</span> User.setAge(<span class="type">int</span>)</span><br><span class="line">正常的<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> java.lang.Object.wait() <span class="keyword">throws</span> java.lang.InterruptedException</span><br><span class="line">正常的<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> java.lang.Object.wait(<span class="type">long</span>,<span class="type">int</span>) <span class="keyword">throws</span> java.lang.InterruptedException</span><br><span class="line">正常的<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.wait(<span class="type">long</span>) <span class="keyword">throws</span> java.lang.InterruptedException</span><br><span class="line">正常的<span class="keyword">public</span> <span class="type">boolean</span> java.lang.Object.equals(java.lang.Object)</span><br><span class="line">正常的<span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> java.lang.Object.hashCode()</span><br><span class="line">正常的<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> java.lang.Class java.lang.Object.getClass()</span><br><span class="line">正常的<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.notify()</span><br><span class="line">正常的<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.notifyAll()</span><br><span class="line">getDeclaredMethodspublic java.lang.String User.toString()</span><br><span class="line">getDeclaredMethodspublic java.lang.String User.getName()</span><br><span class="line">getDeclaredMethodspublic <span class="type">int</span> User.getId()</span><br><span class="line">getDeclaredMethodspublic <span class="keyword">void</span> User.setName(java.lang.String)</span><br><span class="line">getDeclaredMethodspublic <span class="keyword">void</span> User.setId(<span class="type">int</span>)</span><br><span class="line">getDeclaredMethodspublic <span class="type">int</span> User.getAge()</span><br><span class="line">getDeclaredMethodspublic <span class="keyword">void</span> User.setAge(<span class="type">int</span>)</span><br><span class="line"><span class="keyword">public</span> java.lang.String User.getName()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> User.setName(java.lang.String)</span><br><span class="line">==================</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>,java.lang.String)</span></span><br><span class="line">#<span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span></span><br><span class="line">#<span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>,java.lang.String)</span></span><br><span class="line">指定<span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>,java.lang.String)</span></span><br></pre></td></tr></table></figure><h2 id="6-动态创建对象执行"><a href="#6-动态创建对象执行" class="headerlink" title="6.动态创建对象执行"></a>6.动态创建对象执行</h2><p><strong>有了Class对象,能做什么?</strong> </p><ul><li><p>创建类的对象：调用Class对象的newInstance()方法 </p><ul><li>类必须有一个无参数的构造器。 </li><li>类的构造器的访问权限需要足够</li></ul></li><li><p>思考？难道没有无参的构造器就不能创建对象了吗？只要在操作的时候明确的调用类中的构造器， 并将参数传递进去之后，才可以实例化操作。</p></li><li><p>步骤如下： </p></li><li><p>通过Class类的getDeclaredConstructor(Class … parameterTypes)取得本类的指定形参类型的构造器 </p></li><li><p>向构造器的形参中传递一个对象数组进去，</p></li><li><p>里面包含了构造器中所需的各个参数。 通过Constructor实例化对象</p></li></ul><p><strong>调用指定的方法</strong> </p><ul><li>通过反射，调用类中的方法，通过Method类完成。 <ul><li>通过Class类的getMethod(String name,Class…parameterTypes)方法取得一个Method对 象，并设置此方法操作时所需要的参数类型。 </li><li>之后使用Object invoke(Object obj, Object[] args)进行调用，并向方法中传递要设置的obj对 象的参数信息。</li><li>Object 对应原方法的返回值，若原方法无返回值，此时返回null </li><li>若原方法若为静态方法，此时形参Object obj可为null </li><li>若原方法形参列表为空，则Object[] args为null </li><li>若原方法声明为private,则需要在调用此invoke()方法前，显式调用方法对象的 setAccessible(true)方法，将可访问private的方法。</li></ul></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../../../../../../AppData/Roaming/Typora/typora-user-images/image-20220502102928811.png"                      alt="image-20220502102928811"                ></p><p><strong>setAccessible</strong> </p><ul><li><p>Method和Field、Constructor对象都有setAccessible()方法。 </p></li><li><p>setAccessible作用是启动和禁用访问安全检查的开关。 </p></li><li><p>参数值为true则指示反射的对象在使用时应该取消Java语言访问检查。 </p></li><li><p>提高反射的效率。如果代码中必须用反射，而该句代码需要频繁的被调用，那么请设置为true。 </p></li><li><p>使得原本无法访问的私有成员也可以访问 </p></li><li><p>参数值为false则指示反射的对象应该实施Java语言访问检查</p></li><li><p>&#96;&#96;&#96;java<br>import java.lang.reflect.Constructor;<br>import java.lang.reflect.Field;<br>import java.lang.reflect.Method;<br>&#x2F;&#x2F;动态创建对象通过反射<br>public class demo1 {<br>public static void main(String[] args) throws Exception {<br>    &#x2F;&#x2F;获取class对象<br>    Class c1 &#x3D; Class.forName(“User”);<br>    &#x2F;&#x2F;构造一个对象<br>   User user &#x3D; (User) c1.newInstance();            System.out.println(user);<br>    &#x2F;&#x2F;通过构造器创建对象<br>    Constructor constructor &#x3D; c1.getDeclaredConstructor(int.class, int.class, String.class);<br>    User user2 &#x3D; (User) constructor.newInstance(001, 18, “xiao”);<br>    System.out.println(user2);<br>    &#x2F;&#x2F;通过反射调用普通方法<br>    User user3 &#x3D; (User) c1.newInstance();<br>    &#x2F;&#x2F;通过反射获取普通方法<br>    Method setName &#x3D; c1.getDeclaredMethod(“setName”, String.class);<br>    setName.invoke(user3,”xiao”);<br>    System.out.println(user3.getName());<br>    &#x2F;&#x2F;通过反射操作属性<br>    System.out.println(“&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;”);<br>    User user4 &#x3D; (User) c1.newInstance();<br>    Field name &#x3D; c1.getDeclaredField(“name”);<br>    &#x2F;&#x2F;不能直接操作私有属性，我们需要关闭程序的安全检测<br>    name.setAccessible(true);<br>    name.set(user4,”xiaoxiao”);<br>    System.out.println(user4.getName());<br><br><br>}<br>}<br>&#x2F;&#x2F;1. 创建一个实体类<br>class User{<br>private int id;<br>private int age;<br>private String name;<br>public User() {<br>}<br>public User(int id, int age, String name) {<br>    this.id &#x3D; id;<br>    this.age &#x3D; age;<br>    this.name &#x3D; name;<br>}<br>public int getId() {<br>    return id;<br>}<br>public void setId(int id) {<br>    this.id &#x3D; id;<br>}<br>public int getAge() {<br>    return age;<br>}<br>public void setAge(int age) {<br>    this.age &#x3D; age;<br>}<br>public String getName() {<br>    return name;<br>}<br>public void setName(String name) {<br>    this.name &#x3D; name;<br>}<br>@Override<br>public String toString() {<br>    return “User{“ +<br>            “id&#x3D;” + id +<br>            “, age&#x3D;” + age +<br>            “, name&#x3D;” + name +<br>            ‘}’;<br>}<br>}<br>&#x2F;&#x2F;输出<br>User{id&#x3D;0, age&#x3D;0, name&#x3D;null}<br>User{id&#x3D;1, age&#x3D;18, name&#x3D;xiao}</p><h1 id="xiao"><a href="#xiao" class="headerlink" title="xiao"></a>xiao</h1><p>xiaoxiao</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 7.性能对比分析</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.lang.reflect.InvocationTargetException;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">//分析性能问题</span><br><span class="line">public class demo1 &#123;</span><br><span class="line">       //普通调用方法</span><br><span class="line">        public static void test01()&#123;</span><br><span class="line">            User user = new User();</span><br><span class="line">            long startTime = System.currentTimeMillis();</span><br><span class="line">            for (int i = 0; i &lt; 1000000000; i++) &#123;</span><br><span class="line">                user.getName();</span><br><span class="line">            &#125;</span><br><span class="line">            long endTime = System.currentTimeMillis();</span><br><span class="line">            System.out.println(&quot;普通方法执行10亿次&quot;+(endTime-startTime)+&quot;ms&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //反射方式调用</span><br><span class="line">        public static void test02() throws InvocationTargetException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">            User user = new User();</span><br><span class="line">            Class c1 = user.getClass();</span><br><span class="line">            Method getName = c1.getDeclaredMethod(&quot;getName&quot;, null);</span><br><span class="line"></span><br><span class="line">            long startTime = System.currentTimeMillis();</span><br><span class="line">            for (int i = 0; i &lt; 1000000000; i++) &#123;</span><br><span class="line">                getName.invoke(user,null);</span><br><span class="line">            &#125;</span><br><span class="line">            long endTime = System.currentTimeMillis();</span><br><span class="line">            System.out.println(&quot;反射方法执行10亿次&quot;+(endTime-startTime)+&quot;ms&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //反射方式调用，关闭检测</span><br><span class="line">        public static void test03() throws InvocationTargetException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">            User user = new User();</span><br><span class="line">            Class c1 = user.getClass();</span><br><span class="line">            Method getName = c1.getDeclaredMethod(&quot;getName&quot;, null);</span><br><span class="line">            getName.setAccessible(true);</span><br><span class="line">            long startTime = System.currentTimeMillis();</span><br><span class="line">            for (int i = 0; i &lt; 1000000000; i++) &#123;</span><br><span class="line">                getName.invoke(user,null);</span><br><span class="line">            &#125;</span><br><span class="line">            long endTime = System.currentTimeMillis();</span><br><span class="line">            System.out.println(&quot;关闭检测方法执行10亿次&quot;+(endTime-startTime)+&quot;ms&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InvocationTargetException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        test01();</span><br><span class="line">        test02();</span><br><span class="line">        test03();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//1. 创建一个实体类</span><br><span class="line">class User&#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private int age;</span><br><span class="line">    private String name;</span><br><span class="line">    public User() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public User(int id, int age, String name) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.age = age;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, age=&quot; + age +</span><br><span class="line">                &quot;, name=&quot; + name +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//输出</span><br><span class="line">普通方法执行10亿次4ms</span><br><span class="line">反射方法执行10亿次4366ms</span><br><span class="line">关闭检测方法执行10亿次1757ms</span><br></pre></td></tr></table></figure></li></ul><h2 id="8-反射操作泛型"><a href="#8-反射操作泛型" class="headerlink" title="8.反射操作泛型"></a>8.反射操作泛型</h2><ul><li>Java采用泛型擦除的机制来引入泛型 , Java中的泛型仅仅是给编译器javac使用的,确保数据的安全性 和免去强制类型转换问题 , 但是 , 一旦编译完成 , 所有和泛型有关的类型全部擦除 </li><li>为了通过反射操作这些类型 , Java新增了 ParameterizedType , GenericArrayType , TypeVariable 和 WildcardType 几种类型来代表不能被归一到Class类中的类型但是又和原始类型齐名的类型. </li><li>ParameterizedType : 表示一种参数化类型,比如Collection </li><li>GenericArrayType : 表示一种元素类型是参数化类型或者类型变量的数组类型 </li><li>TypeVariable : 是各种类型变量的公共父接口 </li><li>WildcardType : 代表一种通配符类型表达式</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;https://s2.loli.net/20</summary>
      
    
    
    
    
    <category term="反射" scheme="http://example.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>反射概述</title>
    <link href="http://example.com/2022/05/01/%E5%8F%8D%E5%B0%84%E6%A6%82%E8%BF%B0/"/>
    <id>http://example.com/2022/05/01/%E5%8F%8D%E5%B0%84%E6%A6%82%E8%BF%B0/</id>
    <published>2022-05-01T01:27:18.000Z</published>
    <updated>2022-05-01T09:50:53.797Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、静态-VS-动态语言"><a href="#1、静态-VS-动态语言" class="headerlink" title="1、静态 VS 动态语言"></a>1、静态 VS 动态语言</h2><p><strong>动态语言</strong></p><ul><li><p>是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的 函数可以被删除或是其他结构上的变化。通俗点说就是在运行时代码可以根据某些条件改变自 身结构。</p></li><li><p>主要动态语言：Object-C、C#、JavaScript、PHP、Python等。 </p></li><li><p>&#96;&#96;&#96;javascript<br>&#x2F;&#x2F;体现动态语言的代码<br>function test() {<br>var x &#x3D; “var a&#x3D;3;var b&#x3D;5;alert(a+b)”;<br>eval(x);<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**静态语言** </span><br><span class="line"></span><br><span class="line">- 与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、C++。</span><br><span class="line">- Java不是动态语言，但Java可以称之为“准动态语言”。即Java有一定的动态性，我们可以利用 反射机制获得类似动态语言的特性。Java的动态性让编程的时候更加灵活！</span><br><span class="line"></span><br><span class="line">## 2、Java Reflection </span><br><span class="line"></span><br><span class="line">Reflection（反射）是Java被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取 得任何类的内部信息，并能直接操作任意对象的内部属性及方法。 </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">Class c = Class.forName(&quot;java.lang.String&quot;)</span><br></pre></td></tr></table></figure></li></ul><p>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子， 透过这个镜子看到类的结构，所以，我们形象的称之为：反射<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/05/01/3AwSa9U1Bkjs6KD.png"                      alt="image-20220501093231900"                ></p><h2 id="3-获得反射对象"><a href="#3-获得反射对象" class="headerlink" title="3. 获得反射对象"></a>3. 获得反射对象</h2><p><strong>Java反射机制提供的功能</strong></p><ul><li>在运行时判断任意一个对象所属的类 </li><li>在运行时构造任意一个类的对象 </li><li>在运行时判断任意一个类所具有的成员变量和方法 </li><li>在运行时获取泛型信息 </li><li>在运行时调用任意一个对象的成员变量和方法 </li><li>在运行时处理注解 生成动态代理 ……</li></ul><p><strong>Java反射优点和缺点</strong> </p><ul><li>优点：可以实现动态创建对象和编译，体现出很大的灵活性 ! </li><li>缺点：对性能有影响。使用反射基本上是一种解释操作，我们可以告诉JVM，我们希望做什么并且它满足我们的要求。这类操作总是慢于直接执行相同的操作。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo1</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; c1 = Class.forName(<span class="string">&quot;User&quot;</span>);</span><br><span class="line">        <span class="comment">//一个类被加载后 , 类的整个结构信息会被放到对应的Class对象中</span></span><br><span class="line">        System.out.println(c1);</span><br><span class="line"><span class="comment">//一个类只对应一个Class对象</span></span><br><span class="line">        Class&lt;?&gt; c2 = Class.forName(<span class="string">&quot;User&quot;</span>);</span><br><span class="line">        System.out.println(c1.hashCode());</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 创建一个实体类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.id = id;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.id = id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                    <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                    <span class="string">&quot;, name=&quot;</span> + name +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-得到Class类的几种方式"><a href="#4-得到Class类的几种方式" class="headerlink" title="4.得到Class类的几种方式"></a>4.得到Class类的几种方式</h2><p>在Object类中定义了以下的方法，此方法将被所有子类继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Class <span class="title function_">getClass</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>以上的方法返回值的类型是一个Class类，此类是Java反射的源头，实际上所谓反射从程序的运行结果来 看也很好理解，即：可以通过对象反射求出类的名称。</p><p>对象照镜子后可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了哪些接口。对于每个 类而言，JRE 都为其保留一个不变的 Class 类型的对象。一个 Class 对象包含了特定某个结构 (class&#x2F;interface&#x2F;enum&#x2F;annotation&#x2F;primitive type&#x2F;void&#x2F;[])的有关信息。</p><ul><li><p>Class 本身也是一个类 </p></li><li><p>Class 对象只能由系统建立对象 </p></li><li><p>一个加载的类在 JVM 中只会有一个Class实例 </p></li><li><p>一个Class对象对应的是一个加载到JVM中的一个.class文件 </p></li><li><p>每个类的实例都会记得自己是由哪个Class 实例所生成 </p></li><li><p>通过Class可以完整地得到一个类中的所有被加载的结构 </p></li><li><p>Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象</p></li><li><p>&#96;&#96;&#96;java<br>import java.lang.annotation.*;</p><p>public class demo1  {<br>public static void main(String[] args) throws ClassNotFoundException {<br>    Person person &#x3D; new Student();<br>    System.out.println(“这个人是：”+person.name);<br>    &#x2F;&#x2F;获得class办法一:通过对象获得<br>    Class class1 &#x3D; person.getClass();<br>    &#x2F;&#x2F;&#x2F;&#x2F;获得class办法二:通过字符串获得(包名+类名)<br>    Class class2 &#x3D; Class.forName(“Student”);<br>    &#x2F;&#x2F;获得class办法三:通过类的静态成员class获得<br>    Class class3 &#x3D; Person.class;<br>    &#x2F;&#x2F;获得class办法四:只针对内置的基本数据类型<br>    Class class4 &#x3D; Integer.TYPE;<br>    &#x2F;&#x2F;获得父类类型<br>    Class class5 &#x3D; class2.getSuperclass();<br>    System.out.println(class1);<br>    System.out.println(class2);<br>    System.out.println(class3);<br>    System.out.println(class4);<br>    System.out.println(class5);<br>}<br>}<br>class Person {<br>public String name;<br>public Person() {<br>}<br>public Person(String name) {<br>    this.name &#x3D; name;<br>}<br>@Override<br>public String toString() {<br>    return “Person{“ +<br>            “name&#x3D;’” + name + ‘&#39;‘ +<br>            ‘}’;<br>}<br>}<br>class Student extends Person{<br>public Student(){<br>    this.name &#x3D; “学生”;<br>}<br>}<br>class Teacher extends Person{<br>public Teacher(){<br>    this.name &#x3D; “老师”;<br>}<br>}<br>&#x2F;&#x2F;输出结果<br>这个人是：学生<br>class Student<br>class Student<br>class Person<br>int<br>class Person</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**Class类的常用方法**</span><br><span class="line"></span><br><span class="line">| 方法名                                  | 功能说明                                                     |</span><br><span class="line">| --------------------------------------- | ------------------------------------------------------------ |</span><br><span class="line">| static ClassforName(String name)        | 返回指定类名name的Class对象                                  |</span><br><span class="line">| Object newInstance()                    | 调用缺省构造函数，返回Class对象的一个实例                    |</span><br><span class="line">| getName()                               | 返回此Class对象所表示的实体（类，接口，数组类或 void）的名称。 |</span><br><span class="line">| Class getSuperClass()                   | 返回当前Class对象的父类的Class对象                           |</span><br><span class="line">| Class[] getinterfaces()                 | 获取当前Class对象的接口                                      |</span><br><span class="line">| ClassLoader getClassLoader()            | 返回该类的类加载器                                           |</span><br><span class="line">| Constructor[] getConstructors()         | 返回一个包含某些Constructor对象的数组                        |</span><br><span class="line">| Method getMothed(String name,Class.. T) | 返回一个Method对象，此对象的形参类型为paramType              |</span><br><span class="line">| Field[] getDeclaredFields()             | 返回Field对象的一个数组                                      |</span><br><span class="line"></span><br><span class="line">**获取Class类的实例**</span><br><span class="line"></span><br><span class="line">a）若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">Class clazz = Person.class;</span><br></pre></td></tr></table></figure></li></ul><p>b）已知某个类的实例，调用该实例的getClass()方法获取Class对象 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> person.getClass();</span><br></pre></td></tr></table></figure><p>c）已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出 ClassNotFoundException </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;demo01.Student&quot;</span>);</span><br></pre></td></tr></table></figure><p>d）内置基本数据类型可以直接用类名.Type </p><p>e）还可以利用ClassLoader我们之后讲解</p><h2 id="5-所有类型的Class对象"><a href="#5-所有类型的Class对象" class="headerlink" title="5.所有类型的Class对象"></a>5.所有类型的Class对象</h2><ul><li><p>class：外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类。 </p></li><li><p>interface：接口 </p></li><li><p>[]：数组 </p></li><li><p>enum：枚举 </p></li><li><p>annotation：注解@interface </p></li><li><p>primitive type：基本数据类型 </p></li><li><p>void</p></li><li><pre><code class="java">import java.lang.annotation.*;public class demo1 &#123;    public static void main(String[] args) &#123;        Class c1 = Object.class;        Class c2 = Comparable.class;        Class c3 = String[].class;        Class c4 = int[][].class;        Class c5 = ElementType.class;        Class c6 = Override.class;        Class c7 = Integer.class;        Class c8 = void.class;        Class c9 = Class.class;        int[] a = new int[10];        int[] b = new int[100];        Class c10 = a.getClass();        Class c11 = b.getClass();        System.out.println(c1);        System.out.println(c2);        System.out.println(c3);        System.out.println(c4);        System.out.println(c5);        System.out.println(c6);        System.out.println(c7);        System.out.println(c8);        System.out.println(c9);        System.out.println(c10);        System.out.println(c11);        //只要元素类型与维度一样,就是同一个Class        System.out.println(c11==c10);    &#125;&#125;//输出class java.lang.Objectinterface java.lang.Comparableclass [Ljava.lang.String;class [[Iclass java.lang.annotation.ElementTypeinterface java.lang.Overrideclass java.lang.Integervoidclass java.lang.Classclass [Iclass [Itrue</code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、静态-VS-动态语言&quot;&gt;&lt;a href=&quot;#1、静态-VS-动态语言&quot; class=&quot;headerlink&quot; title=&quot;1、静态 VS 动态语言&quot;&gt;&lt;/a&gt;1、静态 VS 动态语言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;动态语言&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;</summary>
      
    
    
    
    
    <category term="反射" scheme="http://example.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>自定义注解</title>
    <link href="http://example.com/2022/05/01/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/"/>
    <id>http://example.com/2022/05/01/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/</id>
    <published>2022-04-30T22:42:49.000Z</published>
    <updated>2022-04-30T23:22:12.968Z</updated>
    
    <content type="html"><![CDATA[<ul><li>使用 @interface自定义注解时 , 自动继承了java.lang.annotation.Annotation接口 </li><li>分析 :</li><li>@ interface用来声明一个注解 , 格式 : public @ interface 注解名 { 定义内容 }</li><li>其中的每一个方法实际上是声明了一个配置参数. </li><li>方法的名称就是参数的名称. </li><li>返回值类型就是参数的类型 ( 返回值只能是基本类型,Class , String , enum ).</li><li>可以通过default来声明参数的默认值 </li><li>如果只有一个参数成员 , 一般参数名为value </li><li>注解元素必须要有值 , 我们定义注解元素时 , 经常使用空字符串,0作为默认值 .</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo1</span>  &#123;</span><br><span class="line">    <span class="meta">@MyAnnotation</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//只有一个参数, 默认名字一般是value.使用可省略不写</span></span><br><span class="line">    <span class="meta">@MyAnnotation1(&quot;aaa&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个注解</span></span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.METHOD,ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">age</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">id</span><span class="params">()</span> <span class="keyword">default</span>  -<span class="number">1</span>;</span><br><span class="line">    String[] school() <span class="keyword">default</span> &#123;<span class="string">&quot;xiao&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.METHOD,ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation1&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;使用 @interface自定义注解时 , 自动继承了java.lang.annotation.Annotation接口 &lt;/li&gt;
&lt;li&gt;分析 :&lt;/li&gt;
&lt;li&gt;@ interface用来声明一个注解 , 格式 : public @ interface </summary>
      
    
    
    
    
    <category term="注解" scheme="http://example.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>调用百度智慧云让图片变清晰</title>
    <link href="http://example.com/2022/04/30/%E8%AE%A9%E5%9B%BE%E7%89%87%E5%8F%98%E6%B8%85%E6%99%B0/"/>
    <id>http://example.com/2022/04/30/%E8%AE%A9%E5%9B%BE%E7%89%87%E5%8F%98%E6%B8%85%E6%99%B0/</id>
    <published>2022-04-30T09:18:02.000Z</published>
    <updated>2022-04-30T22:09:55.986Z</updated>
    
    <content type="html"><![CDATA[<ul><li>首先我们建立一个百度智慧云账号登录进去就可以创建应用了</li></ul><blockquote><p><a class="link"   href="https://login.bce.baidu.com/?account=&amp;redirect=http://console.bce.baidu.com/ai/?_=&fromai=1#/ai/imageprocess/app/list" >https://login.bce.baidu.com/?account=&amp;redirect=http%3A%2F%2Fconsole.bce.baidu.com%2Fai%2F%3F_%3D%26fromai%3D1#/ai/imageprocess/app/list<i class="fas fa-external-link-alt"></i></a></p></blockquote><ul><li><p>然后我们拿到API Key和Secret Key获取token</p></li><li><pre><code class="java">import org.json.JSONObject;import java.io.BufferedReader;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;import java.util.List;import java.util.Map;/** * 获取token类 */public class AuthService &#123;    /**     * 获取权限token     * @return 返回示例：     * &#123;     * &quot;access_token&quot;: &quot;24.460da4889caad24cccdb1fea17221975.2592000.1491995545.282335-1234567&quot;,     * &quot;expires_in&quot;: 2592000     * &#125;     */    public static String getAuth() &#123;        // 官网获取的 API Key 更新为你注册的        String clientId = &quot;&quot;;        // 官网获取的 Secret Key 更新为你注册的        String clientSecret = &quot;&quot;;        return getAuth(clientId, clientSecret);    &#125;    /**     * 获取API访问token     * 该token有一定的有效期，需要自行管理，当失效时需重新获取.     * @param ak - 百度云官网获取的 API Key     * @param sk - 百度云官网获取的 Securet Key     * @return assess_token 示例：     * &quot;24.460da4889caad24cccdb1fea17221975.2592000.1491995545.282335-1234567&quot;     * &quot;25.1aa6f421270dd76cd9a44e50e2a43a5e.315360000.1889591154.282335-17812626&quot;     */    public static String getAuth(String ak, String sk) &#123;        // 获取token地址        String authHost = &quot;https://aip.baidubce.com/oauth/2.0/token?&quot;;        String getAccessTokenUrl = authHost                // 1. grant_type为固定参数                + &quot;grant_type=client_credentials&quot;                // 2. 官网获取的 API Key                + &quot;&amp;client_id=&quot; + ak                // 3. 官网获取的 Secret Key                + &quot;&amp;client_secret=&quot; + sk;        try &#123;            URL realUrl = new URL(getAccessTokenUrl);            // 打开和URL之间的连接            HttpURLConnection connection = (HttpURLConnection) realUrl.openConnection();            connection.setRequestMethod(&quot;GET&quot;);            connection.connect();            // 获取所有响应头字段            Map&lt;String, List&lt;String&gt;&gt; map = connection.getHeaderFields();            // 遍历所有的响应头字段            for (String key : map.keySet()) &#123;                System.err.println(key + &quot;---&gt;&quot; + map.get(key));            &#125;            // 定义 BufferedReader输入流来读取URL的响应            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));            String result = &quot;&quot;;            String line;            while ((line = in.readLine()) != null) &#123;                result += line;            &#125;            /**             * 返回结果示例             */            System.err.println(&quot;result:&quot; + result);            JSONObject jsonObject = new JSONObject(result);            String access_token = jsonObject.getString(&quot;access_token&quot;);            return access_token;        &#125; catch (Exception e) &#123;            System.err.printf(&quot;获取token失败！&quot;);            e.printStackTrace(System.err);        &#125;        return null;    &#125;    public static void main(String[] args) &#123;        getAuth();    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 获取token我们就可以进行调用接口啥的了，这里创建一个图片增强</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  package com.inage;</span><br><span class="line">  </span><br><span class="line">  import com.inage.FileUtil;</span><br><span class="line">  import com.inage.Base64Util;</span><br><span class="line">  import com.inage.HttpUtil;</span><br><span class="line">  </span><br><span class="line">  import java.net.URLEncoder;</span><br><span class="line">  </span><br><span class="line">  /**</span><br><span class="line">   * 图像清晰度增强</span><br><span class="line">   */</span><br><span class="line">  public class Image_definition_enhance &#123;</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 重要提示代码中所需工具类</span><br><span class="line">       * com.inage.FileUtil,Base64Util,HttpUtil,GsonUtils请从</span><br><span class="line">       * https://ai.baidu.com/file/658A35ABAB2D404FBF903F64D47C1F72</span><br><span class="line">       * https://ai.baidu.com/file/C8D81F3301E24D2892968F09AE1AD6E2</span><br><span class="line">       * https://ai.baidu.com/file/544D677F5D4E4F17B4122FBD60DB82B3</span><br><span class="line">       * https://ai.baidu.com/file/470B3ACCA3FE43788B5A963BF0B625F3</span><br><span class="line">       * 下载</span><br><span class="line">       */</span><br><span class="line">      public static String image_definition_enhance() &#123;</span><br><span class="line">          // 请求url</span><br><span class="line">          String url = &quot;https://aip.baidubce.com/rest/2.0/image-process/v1/image_definition_enhance&quot;;</span><br><span class="line">          try &#123;</span><br><span class="line">              // 本地文件路径</span><br><span class="line">              String filePath = &quot;C:\\Users\\1\\Desktop\\fang\\java\\cookie-session\\cookie-session\\src\\main\\java\\com\\inage\\1.jpg&quot;;</span><br><span class="line">              byte[] imgData = FileUtil.readFileByBytes(filePath);</span><br><span class="line">              String imgStr = Base64Util.encode(imgData);</span><br><span class="line">              String imgParam = URLEncoder.encode(imgStr, &quot;UTF-8&quot;);</span><br><span class="line">  </span><br><span class="line">              String param = &quot;image=&quot; + imgParam;</span><br><span class="line">  </span><br><span class="line">              // 注意这里仅为了简化编码每一次请求都去获取access_token，线上环境access_token有过期时间， 客户端可自行缓存，过期后重新获取。</span><br><span class="line">              String accessToken = &quot;你自己的&quot;;</span><br><span class="line">  </span><br><span class="line">              String result = HttpUtil.post(url, accessToken, param);</span><br><span class="line">  </span><br><span class="line">              System.out.println(result);</span><br><span class="line">              return result;</span><br><span class="line">          &#125; catch (Exception e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">          return null;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public static void main(String[] args) &#123;</span><br><span class="line">          Image_definition_enhance.image_definition_enhance();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后就可以得到Base64图片数据，然后我们使用这个网站将Base64数据转化为图片</p><blockquote><p><a class="link"   href="https://blog.51cto.com/u_14475876/2834925" >https://blog.51cto.com/u_14475876/2834925<i class="fas fa-external-link-alt"></i></a></p></blockquote></li><li><p>在这中间出现了一个问题，就是Base64数据太长了，IDEA显示的不全，这是因为缓存超过多少M就自动清空前面多余的。解决方法就是打开IDEA的bin目录里的idea.properties文件，修改代码为false</p></li><li><pre><code class="properties">#---------------------------------------------------------------------# This option controls console cyclic buffer: keeps the console output size not higher than the specified buffer size (KiB).# Older lines are deleted. In order to disable cycle buffer use idea.cycle.buffer.size=disabled#---------------------------------------------------------------------idea.cycle.buffer.size=disabled</code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;首先我们建立一个百度智慧云账号登录进去就可以创建应用了&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://login.bce.baidu.com/?account=&amp;amp;redirect=h</summary>
      
    
    
    
    
    <category term="乱七八糟" scheme="http://example.com/tags/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F/"/>
    
  </entry>
  
  <entry>
    <title>元注解</title>
    <link href="http://example.com/2022/04/30/%E5%85%83%E6%B3%A8%E8%A7%A3/"/>
    <id>http://example.com/2022/04/30/%E5%85%83%E6%B3%A8%E8%A7%A3/</id>
    <published>2022-04-30T03:02:34.000Z</published>
    <updated>2022-04-30T22:40:13.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>元注解的作用就是负责注解其他注解 , Java定义了4个标准的meta-annotation类型,他们被用来提供 对其他annotation类型作说明 .</p></li><li><p>这些类型和它们所支持的类在java.lang.annotation包中可以找到 .( @Target , @Retention , @Documented , @Inherited )</p></li><li><p>@Target : 用于描述注解的使用范围(即:被描述的注解可以用在什么地方) </p></li><li><p>@Retention : 表示需要在什么级别保存该注释信息 , 用于描述注解的生命周期 (SOURCE &lt; CLASS &lt; RUNTIME) </p></li><li><p>@Document：说明该注解将被包含在javadoc中</p></li><li><p>@Inherited：说明子类可以继承父类中的该注解</p></li><li><pre><code class="java">import java.lang.annotation.*;public class demo1  &#123;    @MyAnnotation    public void run()&#123;    &#125;&#125;//定义一个注解@Target(value = &#123;ElementType.METHOD,ElementType.TYPE&#125;)@Retention(value = RetentionPolicy.RUNTIME)@Inherited@Documented@interface MyAnnotation&#123;&#125;</code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;元注解的作用就是负责注解其他注解 , Java定义了4个标准的meta-annotation类型,他们被用来提供 对其他annotation类型作说明 .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这些类型和它们所支持的类在java.lang.annotation</summary>
      
    
    
    
    
    <category term="注解" scheme="http://example.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>内置注解</title>
    <link href="http://example.com/2022/04/30/%E5%86%85%E7%BD%AE%E6%B3%A8%E8%A7%A3/"/>
    <id>http://example.com/2022/04/30/%E5%86%85%E7%BD%AE%E6%B3%A8%E8%A7%A3/</id>
    <published>2022-04-30T02:21:35.000Z</published>
    <updated>2022-04-30T02:30:35.206Z</updated>
    
    <content type="html"><![CDATA[<ul><li>@Override<ul><li>定义在 java.lang.Override 中 , 此注释只适用于修辞方法 , 表示一个方法声明打算重写超类中 的另一个方法声明.</li></ul></li><li>@Deprecated <ul><li>定义在java.lang.Deprecated中 , 此注释可以用于修辞方法 , 属性 , 类 , 表示不鼓励程序员使用这样的元素 , 通常是因为它很危险或者存在更好的选择 .</li></ul></li><li>@SuppressWarnings </li><li>定义在java.lang.SuppressWarnings中,用来抑制编译时的警告信息.</li><li>与前两个注释有所不同,你需要添加一个参数才能正确使用,这些参数都是已经定义好了的,我们 选择性的使用就好了 .<br>- @SuppressWarnings(“all”)<br>- @SuppressWarnings(“unchecked”)<br>- @SuppressWarnings(value&#x3D;{“unchecked”,”deprecation”}) 等等 …..</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> <span class="keyword">extends</span> <span class="title class_">Object</span>&#123;</span><br><span class="line">    <span class="comment">//@Override 表示方法重写</span></span><br><span class="line">    <span class="comment">//--&gt; 查看JDK帮助文档</span></span><br><span class="line">    <span class="comment">//--&gt; 测试名字不同产生的效果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法过时了, 不建议使用 , 可能存在问题 , 并不是不能使用!</span></span><br><span class="line">    <span class="comment">//--&gt; 查看JDK帮助文档</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试 @Deprecated&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//@SuppressWarnings 抑制警告 , 可以传参数</span></span><br><span class="line">    <span class="comment">//--&gt; 查看JDK帮助文档</span></span><br><span class="line">    <span class="comment">//查看源码:发现 参数类型 和 参数名称 , 并不是方法!</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sw</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;@Override&lt;ul&gt;
&lt;li&gt;定义在 java.lang.Override 中 , 此注释只适用于修辞方法 , 表示一个方法声明打算重写超类中 的另一个方法声明.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;@Deprecated &lt;ul&gt;
&lt;li&gt;定义在j</summary>
      
    
    
    
    
    <category term="注解" scheme="http://example.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>什么是注解？</title>
    <link href="http://example.com/2022/04/30/%E4%BB%80%E4%B9%88%E6%98%AF%E6%B3%A8%E8%A7%A3%EF%BC%9F/"/>
    <id>http://example.com/2022/04/30/%E4%BB%80%E4%B9%88%E6%98%AF%E6%B3%A8%E8%A7%A3%EF%BC%9F/</id>
    <published>2022-04-30T02:17:37.000Z</published>
    <updated>2022-04-30T02:21:12.542Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>Annotation 是从JDK5.0开始引入的新技术 .</p></li><li><p>Annotation的作用 ：</p></li><li><p>不是程序本身 , 可以对程序作出解释.(这一点和注释(comment)没什么区别) </p></li><li><p>可以被其他程序(比如:编译器等)读取.</p></li><li><p>Annotation的格式 </p><ul><li>注解是以”@注释名”在代码中存在的 </li><li>还可以添加一些参数值 , 例如:@SuppressWarnings(value&#x3D;”unchecked”)</li></ul></li><li><p>Annotation在哪里使用?</p><ul><li><p>可以附加在package , class , method , field 等上面 , 相当于给他们添加了额外的辅助信息</p></li><li><p>我们可以通过反射机制实现对这些元数据的访问</p></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Annotation 是从JDK5.0开始引入的新技术 .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Annotation的作用 ：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不是程序本身 , 可以对程序作出解释.(这一点和注释(comment)没什么区别) &lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="注解" scheme="http://example.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>JDBC复习</title>
    <link href="http://example.com/2022/04/29/JDBC%E5%A4%8D%E4%B9%A0/"/>
    <id>http://example.com/2022/04/29/JDBC%E5%A4%8D%E4%B9%A0/</id>
    <published>2022-04-29T12:17:48.000Z</published>
    <updated>2022-04-30T00:06:05.976Z</updated>
    
    <content type="html"><![CDATA[<p>什么是JDBC ： Java连接数据库！<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/29/xfHih3CwMrPzyaO.png"                      alt="image-20220429201858465"                ></p><ul><li><p>首先在pom.xml引入jar包</p></li><li><p>&#96;&#96;&#96;xml<br>    <!--mysql的驱动--></p><dependency><groupId>mysql</groupId><artifactId>mysql-connector-java</artifactId><version>5.1.47</version></dependency><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**JDBC 固定步骤：**</span><br><span class="line"></span><br><span class="line">1. 加载驱动 </span><br><span class="line">2. 连接数据库,代表数据库 </span><br><span class="line">3. 向数据库发送SQL的对象Statement : CRUD</span><br><span class="line">4. 编写SQL （根据业务，不同的SQL）</span><br><span class="line">5. 执行SQL </span><br><span class="line">6. 关闭连接</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">import java.sql.*;</span><br><span class="line">public class TestJdbc &#123;</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException, SQLException &#123;</span><br><span class="line">        //配置信息</span><br><span class="line">        //useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span><br><span class="line">        String url=&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;;</span><br><span class="line">        String username = &quot;root&quot;;</span><br><span class="line">        String password = &quot;123456&quot;;</span><br><span class="line">        //1.加载驱动</span><br><span class="line">        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">        //2.连接数据库,代表数据库</span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username,</span><br><span class="line">                password);</span><br><span class="line">        //3.向数据库发送SQL的对象Statement,PreparedStatement : CRUD</span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line">        //4.编写SQL</span><br><span class="line">        String sql = &quot;select * from users&quot;;</span><br><span class="line">        //5.执行查询SQL，返回一个 ResultSet ： 结果集</span><br><span class="line">        ResultSet rs = statement.executeQuery(sql);</span><br><span class="line">        while (rs.next())&#123;</span><br><span class="line">            System.out.println(&quot;id=&quot;+rs.getObject(&quot;id&quot;));</span><br><span class="line">            System.out.println(&quot;name=&quot;+rs.getObject(&quot;name&quot;));</span><br><span class="line">            System.out.println(&quot;password=&quot;+rs.getObject(&quot;password&quot;));</span><br><span class="line">            System.out.println(&quot;email=&quot;+rs.getObject(&quot;email&quot;));</span><br><span class="line">            System.out.println(&quot;birthday=&quot;+rs.getObject(&quot;birthday&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">        //6.关闭连接，释放资源（一定要做） 先开后关</span><br><span class="line">        rs.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p><strong>预编译SQL</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJDBC2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//配置信息</span></span><br><span class="line">        <span class="comment">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span></span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql://localhost:3306/jdbc? useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.连接数据库,代表数据库</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">        <span class="comment">//3.编写SQL</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into users(id, name, password, email, birthday) values (?,?,?,?,?);&quot;</span>;</span><br><span class="line">        <span class="comment">//4.预编译</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        preparedStatement.setInt(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//给第一个占位符？ 的值赋值为1；</span></span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>,<span class="string">&quot;Java&quot;</span>);<span class="comment">//给第二个占位符？ 的值赋值为Java</span></span><br><span class="line">        preparedStatement.setString(<span class="number">3</span>,<span class="string">&quot;123456&quot;</span>);<span class="comment">//给第三个占位符？ 的值赋值为123456；</span></span><br><span class="line">        preparedStatement.setString(<span class="number">4</span>,<span class="string">&quot;24736743@qq.com&quot;</span>);<span class="comment">//给第四个占位符？ 的值赋值为1；</span></span><br><span class="line">        preparedStatement.setDate(<span class="number">5</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">java</span>.util.Date().getTime()));<span class="comment">//给第五个占位符？ 的值赋值为new Date(newjava.util.Date().getTime())；</span></span><br><span class="line">        <span class="comment">//5.执行SQL</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line">        <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;插入成功@&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.关闭连接，释放资源（一定要做） 先开后关</span></span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>事务：</strong></p><p>ACID原则：保证数据的安全。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">开启事务</span><br><span class="line">事务提交 <span class="keyword">commit</span>()</span><br><span class="line">事务回滚 <span class="keyword">rollback</span>()</span><br><span class="line">关闭事务</span><br><span class="line">转账：</span><br><span class="line">A:<span class="number">1000</span></span><br><span class="line">B:<span class="number">1000</span></span><br><span class="line">A(<span class="number">900</span>) <span class="comment">--100--&gt; B(1100)</span></span><br></pre></td></tr></table></figure><p>Junit单元测试，需要引入依赖。@Test注解只有在方法上有效，只要加了这个注解的方法，就可以直接运行！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>java实现事务</p></li><li><pre><code class="java">import java.sql.*;public class TestJDBC2 &#123;        @Test        public void test() &#123;            //配置信息            //useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码            String url = &quot;jdbc:mysql://localhost:3306/jdbc? useUnicode=true&amp;characterEncoding=utf-8&quot;;            String username = &quot;root&quot;;            String password = &quot;123456&quot;;            Connection connection = null;            //1.加载驱动            try &#123;                Class.forName(&quot;com.mysql.jdbc.Driver&quot;);                //2.连接数据库,代表数据库                connection = DriverManager.getConnection(url, username,                        password);                //3.通知数据库开启事务,false 开启                connection.setAutoCommit(false);                String sql = &quot;update account set money = money-100 where name = &#39;A&#39;&quot;;                connection.prepareStatement(sql).executeUpdate();                //制造错误                //int i = 1/0;                String sql2 = &quot;update account set money = money+100 where name = &#39;B&#39;&quot;;                connection.prepareStatement(sql2).executeUpdate();                connection.commit();//以上两条SQL都执行成功了，就提交事务！                System.out.println(&quot;success&quot;);            &#125; catch (Exception e) &#123;                try &#123;                    //如果出现异常，就通知数据库回滚事务                    connection.rollback();                &#125; catch (SQLException e1) &#123;                    e1.printStackTrace();                &#125;                e.printStackTrace();            &#125; finally &#123;                try &#123;                    connection.close();                &#125; catch (SQLException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;&#125;</code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;什么是JDBC ： Java连接数据库！&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;ht</summary>
      
    
    
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Filter实现权限拦截</title>
    <link href="http://example.com/2022/04/29/Filter%E5%AE%9E%E7%8E%B0%E6%9D%83%E9%99%90%E6%8B%A6%E6%88%AA/"/>
    <id>http://example.com/2022/04/29/Filter%E5%AE%9E%E7%8E%B0%E6%9D%83%E9%99%90%E6%8B%A6%E6%88%AA/</id>
    <published>2022-04-29T08:09:45.000Z</published>
    <updated>2022-04-29T08:25:31.743Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>用户登录之后才能进入主页！用户注销后就不能进入主页了！</p></blockquote><ol><li>用户登录之后，向Sesison中放入用户的数据 </li><li>进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！</li></ol><ul><li><p>首先我们创建一个登录页面Login.jsp</p></li><li><pre><code class="jsp">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;登录&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h4&gt;登录&lt;/h4&gt;&lt;form action=&quot;/servlet/login&quot; method=&quot;post&quot;&gt;//action必须和web.xml中设置的地址一样    &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;    &lt;input type=&quot;submit&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 然后我们创建一个constant.java设置常量</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  public class constant &#123;</span><br><span class="line">      public static String USER_SESSION = &quot;USER_SESSION&quot;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>增加一个error.jsp登录失败页面</p></li><li><pre><code class="jsp">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;error&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h4&gt;注销吧&lt;/h4&gt;&lt;a href=&quot;/Login.jsp&quot;&gt;返回登录页面&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 增加一个登录成功的页面success.jsp</span><br><span class="line"></span><br><span class="line">- ```jsp</span><br><span class="line">  &lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">      &lt;title&gt;登录成功&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;h4&gt;登录成功&lt;/h4&gt;</span><br><span class="line">  &lt;p&gt;&lt;a href=&quot;/servlet/logout&quot;&gt;注销&lt;/a&gt; &lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>然后我们对登录用户名进行判断，创建login.java</p></li><li><pre><code class="java">import util.Constast;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;public class login extends HttpServlet &#123;    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        String user = req.getParameter(&quot;username&quot;);        if (user.equals(&quot;admin&quot;))&#123;            req.getSession().setAttribute(Constast.USER_SESSION,req.getSession().getId());            resp.sendRedirect(&quot;/sys/success.jsp&quot;);        &#125;else&#123;            resp.sendRedirect(&quot;/error.jsp&quot;);        &#125;    &#125;    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        doGet(req, resp);    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 接下来在web.xml中增加映射</span><br><span class="line"></span><br><span class="line">- ```xml</span><br><span class="line">  &lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;login&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;login&lt;/servlet-class&gt;</span><br><span class="line">  &lt;/servlet&gt;</span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;login&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/servlet/login&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>增加注销的操作logout.java</p></li><li><pre><code class="java">import util.Constast;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;public class logout extends HttpServlet &#123;    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        Object user_session = req.getSession().getAttribute(Constast.USER_SESSION);        if (user_session != null)&#123;            req.getSession().removeAttribute(Constast.USER_SESSION);            resp.sendRedirect(&quot;/Login.jsp&quot;);        &#125;    &#125;    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        doGet(req, resp);    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- web.xml中增加映射</span><br><span class="line"></span><br><span class="line">- ```xml</span><br><span class="line">  &lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;logout&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;logout&lt;/servlet-class&gt;</span><br><span class="line">  &lt;/servlet&gt;</span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;logout&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/servlet/logout&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>增加一个权限拦截，注销过的用户不能直接进入登录成功的界面Fileter.java</p></li><li><p>&#96;&#96;&#96;java<br>import util.Constast;</p><p>import javax.servlet.*;<br>import javax.servlet.http.HttpServlet;<br>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;<br>import java.io.IOException;</p><p>public class Fileter implements Filter {<br>@Override<br>public void init(FilterConfig filterConfig) throws ServletException {<br><br>}<br><br>@Override<br>public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {<br>    HttpServletRequest request &#x3D; (HttpServletRequest) servletRequest;<br>    HttpServletResponse response &#x3D; (HttpServletResponse) servletResponse;<br>    if (request.getSession().getAttribute(Constast.USER_SESSION)&#x3D;&#x3D;null){<br>        response.sendRedirect(“&#x2F;error.jsp”);<br>    }<br>    filterChain.doFilter(request,response);&#x2F;&#x2F;重中之重<br>}<br><br>@Override<br>public void destroy() {<br><br>}<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在web.xml中加入映射</span><br><span class="line"></span><br><span class="line">- ```xml</span><br><span class="line">  &lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;Filter&lt;/filter-name&gt;</span><br><span class="line">    &lt;filter-class&gt;Fileter&lt;/filter-class&gt;</span><br><span class="line">  &lt;/filter&gt;</span><br><span class="line">  &lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;Filter&lt;/filter-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/sys/*&lt;/url-pattern&gt;//这个是对sys下的所有东西都加拦截</span><br><span class="line">  &lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;用户登录之后才能进入主页！用户注销后就不能进入主页了！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;用户登录之后，向Sesison中放入用户的数据 &lt;/li&gt;
&lt;li&gt;进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！&lt;/li&gt;</summary>
      
    
    
    
    
    <category term="JavaWeb" scheme="http://example.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>监听器GUI中的理解</title>
    <link href="http://example.com/2022/04/28/%E7%9B%91%E5%90%AC%E5%99%A8GUI%E4%B8%AD%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://example.com/2022/04/28/%E7%9B%91%E5%90%AC%E5%99%A8GUI%E4%B8%AD%E7%9A%84%E7%90%86%E8%A7%A3/</id>
    <published>2022-04-28T01:21:43.000Z</published>
    <updated>2022-04-28T01:22:55.412Z</updated>
    
    <content type="html"><![CDATA[<p>监听器：GUI编程中经常使用；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPanel</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;你教授&quot;</span>);</span><br><span class="line">        <span class="type">Panel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="literal">null</span>);</span><br><span class="line">        frame.setLayout(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        frame.setBounds(<span class="number">300</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>));</span><br><span class="line"></span><br><span class="line">        panel.setBounds(<span class="number">300</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        panel.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">25</span>));</span><br><span class="line"></span><br><span class="line">        frame.add(panel);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowOpened</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登上了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;关闭ing&quot;</span>);</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosed</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;关闭ed&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowIconified</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowDeiconified</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowActivated</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;激活&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowDeactivated</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;未激活&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;监听器：GUI编程中经常使用；&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2</summary>
      
    
    
    
    
    <category term="JavaWeb" scheme="http://example.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>基于百度地图做热力图</title>
    <link href="http://example.com/2022/04/25/%E5%9F%BA%E4%BA%8E%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E5%81%9A%E7%83%AD%E5%8A%9B%E5%9B%BE/"/>
    <id>http://example.com/2022/04/25/%E5%9F%BA%E4%BA%8E%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E5%81%9A%E7%83%AD%E5%8A%9B%E5%9B%BE/</id>
    <published>2022-04-25T14:51:01.000Z</published>
    <updated>2022-04-25T15:06:22.331Z</updated>
    
    <content type="html"><![CDATA[<p>第一步：我们先把先把准备好的数据转化成固定格式<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/25/ZDyXjiWJLUxaT2O.png"                      alt="image-20220425225404976"                ></p><ul><li><p>通过以下代码进行转化（使用的是pycharm）</p></li><li><p>&#96;&#96;&#96;python<br>import csv<br>import requests<br>import json<br>def gain_location(adress):<br>api_url &#x3D;”<a class="link"   href="http://api.map.baidu.com/geocoding/v3/?address=%7Badress%7D&amp;output=json&amp;ak=%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%AF%86%E9%92%A5&amp;callback=showLocation&quot;.format(adress=adress)" >http://api.map.baidu.com/geocoding/v3/?address={adress}&amp;output=json&amp;ak=你自己的密钥&amp;callback=showLocation&quot;.format(adress=adress)<i class="fas fa-external-link-alt"></i></a><br>r &#x3D; requests.get(api_url)<br>r &#x3D; r.text<br>r &#x3D; r.strip(‘showLocation&amp;&amp;showLocation(‘)<br>r &#x3D; r.strip(‘)’)<br>jsonData &#x3D; json.loads(r)  # 将json字符串转换为字典类型转为字典格式类型<br>return jsonData<br>with open(r’附件2 北京地铁各站点进站客流分时汇总表.csv’,encoding &#x3D; ‘gb18030’) as csvfile: #打开csv<br>reader &#x3D; csv.reader(csvfile)<br>for line in reader: #读取csv里的数据<br>    if reader.line_num &#x3D;&#x3D; 1:<br>        continue<br>    if gain_location(line[0]).get(‘result’, False):<br>        try:<br>            lng &#x3D; gain_location(line[0])[‘result’][‘location’][‘lng’]  # 经度<br>            lat &#x3D; gain_location(line[0])[‘result’][‘location’][‘lat’]  # 纬度<br>            count &#x3D; line[1]  # 地名计数<br>            str_temp &#x3D; ‘{“lat”:’ + str(lat) + ‘,”lng”:’ + str(lng) + ‘,”count”:’ + str(count) + ‘},’  # 将经度，纬度，计数变成格式<br>            print(str_temp)<br>        except:<br>            print(line[0])  # 打印出出问题的地名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 使用上面代码转化csv图片得到的数据是![image-20220425225738432](https://s2.loli.net/2022/04/25/JLZYzxGrkt2bwdQ.png)</span><br><span class="line"></span><br><span class="line">- 然后我们将百度地图的热力图示例复制过来稍作修该</span><br><span class="line"></span><br><span class="line">- ```html</span><br><span class="line">  &lt;!DOCTYPE html&gt;</span><br><span class="line">  &lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">      &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">      &lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1.0, user-scalable=no&quot; /&gt;</span><br><span class="line">      &lt;script type=&quot;text/javascript&quot; src=&quot;//api.map.baidu.com/api?v=2.0&amp;ak=你自己的密钥&quot;&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script type=&quot;text/javascript&quot; src=&quot;//api.map.baidu.com/library/Heatmap/2.0/src/Heatmap_min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">      &lt;title&gt;热力图功能示例&lt;/title&gt;</span><br><span class="line">      &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        ul,li&#123;list-style: none;margin:0;padding:0;float:left;&#125;</span><br><span class="line">        html&#123;height:100%&#125;</span><br><span class="line">        body&#123;height:100%;margin:0px;padding:0px;font-family:&quot;微软雅黑&quot;;&#125;</span><br><span class="line">        #container&#123;height:500px;width:100%;&#125;</span><br><span class="line">        #r-result&#123;width:100%;&#125;</span><br><span class="line">      &lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">     &lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</span><br><span class="line">     &lt;div id=&quot;r-result&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot;  onclick=&quot;openHeatmap();&quot; value=&quot;显示热力图&quot;/&gt;&lt;input type=&quot;button&quot;  onclick=&quot;closeHeatmap();&quot; value=&quot;关闭热力图&quot;/&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">      var map = new BMap.Map(&quot;container&quot;);          // 创建地图实例</span><br><span class="line">  </span><br><span class="line">      var point = new BMap.Point(116.438927, 39.923508);//中心点坐标</span><br><span class="line">      map.centerAndZoom(point, 15);             // 初始化地图，设置中心点坐标和地图级别</span><br><span class="line">      map.enableScrollWheelZoom(); // 允许滚轮缩放</span><br><span class="line">  //这个就是上面我们输出出来的数据</span><br><span class="line">      var points =[</span><br><span class="line">      &#123;&quot;lat&quot;:39.914537522974534,&quot;lng&quot;:116.50836872513715,&quot;count&quot;:37794&#125;,</span><br><span class="line">     &#123;&quot;lat&quot;:39.914537522974534,&quot;lng&quot;:116.50836872513715,&quot;count&quot;:35550&#125;,</span><br><span class="line">     &#123;&quot;lat&quot;:39.91645575947582,&quot;lng&quot;:116.46703499370652,&quot;count&quot;:46435&#125;,</span><br><span class="line">     &#123;&quot;lat&quot;:22.828572041904824,&quot;lng&quot;:120.23700834379214,&quot;count&quot;:33390&#125;,</span><br><span class="line">     &#123;&quot;lat&quot;:39.920195646104496,&quot;lng&quot;:116.4342834036266,&quot;count&quot;:31753&#125;,</span><br><span class="line">     &#123;&quot;lat&quot;:39.92315809391276,&quot;lng&quot;:116.42394965636201,&quot;count&quot;:14195&#125;,</span><br><span class="line">     &#123;&quot;lat&quot;:39.92223158631893,&quot;lng&quot;:116.4186675301328,&quot;count&quot;:33208&#125;,</span><br><span class="line">     &#123;&quot;lat&quot;:31.34224126103566,&quot;lng&quot;:121.2789357477942,&quot;count&quot;:33006&#125;,</span><br><span class="line">     &#123;&quot;lat&quot;:39.08308716818319,&quot;lng&quot;:117.2690831157461,&quot;count&quot;:35867&#125;,</span><br><span class="line">  ];</span><br><span class="line">  </span><br><span class="line">      if(!isSupportCanvas())&#123;</span><br><span class="line">         alert(&#x27;热力图目前只支持有canvas支持的浏览器,您所使用的浏览器不能使用热力图功能~&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">     //详细的参数,可以查看heatmap.js的文档 https://github.com/pa7/heatmap.js/blob/master/README.md</span><br><span class="line">     //参数说明如下:</span><br><span class="line">     /* visible 热力图是否显示,默认为true</span><br><span class="line">       * opacity 热力的透明度,1-100</span><br><span class="line">       * radius 势力图的每个点的半径大小</span><br><span class="line">       * gradient  &#123;JSON&#125; 热力图的渐变区间 . gradient如下所示</span><br><span class="line">       * &#123;</span><br><span class="line">           .2:&#x27;rgb(0, 255, 255)&#x27;,</span><br><span class="line">           .5:&#x27;rgb(0, 110, 255)&#x27;,</span><br><span class="line">           .8:&#x27;rgb(100, 0, 255)&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        其中 key 表示插值的位置, 0~1.</span><br><span class="line">            value 为颜色值.</span><br><span class="line">       */</span><br><span class="line">     heatmapOverlay = new BMapLib.HeatmapOverlay(&#123;&quot;radius&quot;:40&#125;);//热力图半径</span><br><span class="line">     map.addOverlay(heatmapOverlay);</span><br><span class="line">     heatmapOverlay.setDataSet(&#123;data:points,max:40000&#125;);</span><br><span class="line">     //是否显示热力图</span><br><span class="line">      function openHeatmap()&#123;</span><br><span class="line">          heatmapOverlay.show();</span><br><span class="line">      &#125;</span><br><span class="line">     function closeHeatmap()&#123;</span><br><span class="line">          heatmapOverlay.hide();</span><br><span class="line">      &#125;</span><br><span class="line">     closeHeatmap();</span><br><span class="line">      function setGradient()&#123;</span><br><span class="line">         /*格式如下所示:</span><br><span class="line">        &#123;</span><br><span class="line">           0:&#x27;rgb(102, 255, 0)&#x27;,</span><br><span class="line">           .5:&#x27;rgb(255, 170, 0)&#x27;,</span><br><span class="line">           1:&#x27;rgb(255, 0, 0)&#x27;</span><br><span class="line">        &#125;*/</span><br><span class="line">         var gradient = &#123;&#125;;</span><br><span class="line">         var colors = document.querySelectorAll(&quot;input[type=&#x27;color&#x27;]&quot;);</span><br><span class="line">         colors = [].slice.call(colors,0);</span><br><span class="line">         colors.forEach(function(ele)&#123;</span><br><span class="line">           gradient[ele.getAttribute(&quot;data-key&quot;)] = ele.value;</span><br><span class="line">         &#125;);</span><br><span class="line">          heatmapOverlay.setOptions(&#123;&quot;gradient&quot;:gradient&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">     //判断浏览区是否支持canvas</span><br><span class="line">      function isSupportCanvas()&#123;</span><br><span class="line">          var elem = document.createElement(&#x27;canvas&#x27;);</span><br><span class="line">          return !!(elem.getContext &amp;&amp; elem.getContext(&#x27;2d&#x27;));</span><br><span class="line">      &#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第一步：我们先把先把准备好的数据转化成固定格式&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=</summary>
      
    
    
    
    
    <category term="Anylogic" scheme="http://example.com/tags/Anylogic/"/>
    
  </entry>
  
  <entry>
    <title>监听器</title>
    <link href="http://example.com/2022/04/25/%E7%9B%91%E5%90%AC%E5%99%A8/"/>
    <id>http://example.com/2022/04/25/%E7%9B%91%E5%90%AC%E5%99%A8/</id>
    <published>2022-04-25T03:29:27.000Z</published>
    <updated>2022-04-25T03:54:28.299Z</updated>
    
    <content type="html"><![CDATA[<p>实现一个监听器的接口，以统计网站在线人数为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionListener;</span><br><span class="line"><span class="comment">//统计网站在线人数 ： 统计session</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OnlineCountListener</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionListener</span> &#123;</span><br><span class="line">    <span class="comment">//创建session监听： 看你的一举一动</span></span><br><span class="line">    <span class="comment">//一旦创建Session就会触发一次这个事件！</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionCreated</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">ctx</span> <span class="operator">=</span> httpSessionEvent.getSession().getServletContext();</span><br><span class="line">        System.out.println(httpSessionEvent.getSession().getId());</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">onlineCount</span> <span class="operator">=</span> (Integer) ctx.getAttribute(<span class="string">&quot;OnlineCount&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(onlineCount == <span class="literal">null</span>)&#123;</span><br><span class="line">            onlineCount = <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> onlineCount.intValue();</span><br><span class="line">            onlineCount = <span class="keyword">new</span> <span class="title class_">Integer</span>(count+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.setAttribute(<span class="string">&quot;OnlineCount&quot;</span>,onlineCount);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//销毁session监听</span></span><br><span class="line">    <span class="comment">//一旦销毁Session就会触发一次这个事件！</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionDestroyed</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">ctx</span> <span class="operator">=</span> httpSessionEvent.getSession().getServletContext();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">onlineCount</span> <span class="operator">=</span> (Integer) ctx.getAttribute(<span class="string">&quot;OnlineCount&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(onlineCount == <span class="literal">null</span>)&#123;</span><br><span class="line">            onlineCount = <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> onlineCount.intValue();</span><br><span class="line">            onlineCount = <span class="keyword">new</span> <span class="title class_">Integer</span>(count-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.setAttribute(<span class="string">&quot;OnlineCount&quot;</span>,onlineCount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">Session销毁：</span></span><br><span class="line"><span class="comment">1. 手动销毁 getSession().invalidate();</span></span><br><span class="line"><span class="comment">2. 自动销毁</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在web.xml中设置监听</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>OnlineCountListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>在index.jsp中进行测试</p></li><li><pre><code class="jsp">&lt;body&gt;&lt;h4&gt;当前一共&lt;span&gt;&lt;%=this.getServletConfig().getServletContext().getAttribute(&quot;OnlineCount&quot;)%&gt;个人&lt;/span&gt;&lt;/h4&gt;&lt;/body&gt;</code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;实现一个监听器的接口，以统计网站在线人数为例&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    
    <category term="JavaWeb" scheme="http://example.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>Filter：过滤器</title>
    <link href="http://example.com/2022/04/24/Filter%EF%BC%9A%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://example.com/2022/04/24/Filter%EF%BC%9A%E8%BF%87%E6%BB%A4%E5%99%A8/</id>
    <published>2022-04-24T14:22:52.000Z</published>
    <updated>2022-04-24T15:03:58.587Z</updated>
    
    <content type="html"><![CDATA[<p>Filter：过滤器 ，用来过滤网站的数据；</p><ul><li>处理中文乱码</li><li>登录验证….<img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/24/lzjxE1H4QXLiSCT.png"                      alt="image-20220424222417947"                ></li></ul><p>Filter开发步骤：</p><ol><li><p>导包 （import javax.servlet.Filter;）</p></li><li><p>编写过滤器</p></li><li><ul><li><p>实现Filter接口，重写对应的方法即可</p></li><li><p>&#96;&#96;&#96;java<br>import javax.servlet.*;<br>import java.io.IOException;</p><p>public class CharacterEncodingFilter implements Filter {<br>@Override<br>public void init(FilterConfig filterConfig) throws ServletException {<br>    System.out.println(“CharacterEncodingFilter初始化”);<br>}<br>&#x2F;&#x2F;Chain : 链<br>&#x2F;*<br>1. 过滤中的所有代码，在过滤特定请求的时候都会执行<br>2. 必须要让过滤器继续同行<br>chain.doFilter(request,response);<br>*&#x2F;<br>@Override<br>public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {<br>    servletRequest.setCharacterEncoding(“utf-8”);<br>    servletResponse.setCharacterEncoding(“utf-8”);<br>    servletResponse.setContentType(“text&#x2F;html;charset&#x3D;UTF-8”);<br>    System.out.println(“CharacterEncodingFilter执行前….”);<br>    filterChain.doFilter(servletRequest,servletResponse);; &#x2F;&#x2F;让我们的请求继续走，如果不写，程序到这里就被拦截停止！<br>    System.out.println(“CharacterEncodingFilter执行后….”);<br><br>}<br><br>@Override<br>public void destroy() {<br>    System.out.println(“CharacterEncodingFilter销毁”);<br>}<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在web.xml中配置 Filter：</span><br><span class="line"></span><br><span class="line">```xml</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">&lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">&lt;filter-class&gt;com.kuang.filter.CharacterEncodingFilter&lt;/filterclass&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">&lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">&lt;!--只要是 /servlet的任何请求，会经过这个过滤器--&gt;</span><br><span class="line">&lt;url-pattern&gt;/servlet/*&lt;/url-pattern&gt;</span><br><span class="line">&lt;!--&lt;url-pattern&gt;/*&lt;/url-pattern&gt;--&gt;</span><br><span class="line">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Filter：过滤器 ，用来过滤网站的数据；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;处理中文乱码&lt;/li&gt;
&lt;li&gt;登录验证….&lt;img  
                     lazyload
                     src=&quot;/images/loading.</summary>
      
    
    
    
    
    <category term="JavaWeb" scheme="http://example.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>MVC三层架构</title>
    <link href="http://example.com/2022/04/24/MVC%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"/>
    <id>http://example.com/2022/04/24/MVC%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/</id>
    <published>2022-04-24T10:02:24.000Z</published>
    <updated>2022-04-24T10:06:55.708Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/24/I7shF1iYqGVgpcm.png"                      alt="image-20220424180330444"                ></p><p><strong>Model</strong> </p><ul><li>业务处理 ：业务逻辑（Service）</li><li>数据持久层：CRUD （Dao）</li></ul><p><strong>View</strong></p><ul><li>展示数据 </li><li>提供链接发起Servlet请求 （a，form，img…）</li></ul><p><strong>Controller （Servlet）</strong></p><ul><li>接收用户的请求 ：（req：请求参数、Session信息….） </li><li>交给业务层处理对应的代码 </li><li>控制视图的跳转</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">登录---&gt;接收用户的登录请求---&gt;处理用户的请求（获取用户登录的参数，username，password）----&gt;交给业务层处理登录业务（判断用户名密码是否正确：事务）---&gt;Dao层查询用户名和密码是否正确--&gt;数据库</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;https://s2.loli.net/20</summary>
      
    
    
    
    
    <category term="JavaWeb" scheme="http://example.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>JavaBean</title>
    <link href="http://example.com/2022/04/24/JavaBean/"/>
    <id>http://example.com/2022/04/24/JavaBean/</id>
    <published>2022-04-24T07:13:12.000Z</published>
    <updated>2022-04-24T07:43:35.596Z</updated>
    
    <content type="html"><![CDATA[<p>实体类<br>JavaBean有特定的写法：</p><ul><li>必须要有一个无参构造 </li><li>属性必须私有化</li><li>必须有对应的get&#x2F;set方法；<br> 一般用来和数据库的字段做映射 ORM；</li></ul><p>ORM ：对象关系映射 ：</p><ul><li>表—&gt;类 </li><li>字段–&gt;属性 </li><li>行记录—-&gt;对象</li></ul><table><thead><tr><th>id</th><th>name</th><th>age</th><th>address</th></tr></thead><tbody><tr><td>1</td><td>x</td><td>12</td><td>承德</td></tr><tr><td>2</td><td>y</td><td>21</td><td>天津</td></tr><tr><td>3</td><td>z</td><td>32</td><td>邢台</td></tr></tbody></table><ul><li><p>对应的实体类</p></li><li><pre><code class="java">public class Person &#123;    private int id;    private String name ;    private int age;    private String address;    public Person(int id, String name, int age, String address) &#123;        this.id = id;        this.name = name;        this.age = age;        this.address = address;    &#125;    public Person() &#123;    &#125;    public int getId() &#123;        return id;    &#125;    public void setId(int id) &#123;        this.id = id;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    public int getAge() &#123;        return age;    &#125;    public void setAge(int age) &#123;        this.age = age;    &#125;    public String getAddress() &#123;        return address;    &#125;    @Override    public String toString() &#123;        final StringBuffer sb = new StringBuffer(&quot;Person&#123;&quot;);        sb.append(&quot;id=&quot;).append(id);        sb.append(&quot;, name=&#39;&quot;).append(name).append(&#39;\&#39;&#39;);        sb.append(&quot;, age=&quot;).append(age);        sb.append(&quot;, address=&#39;&quot;).append(address).append(&#39;\&#39;&#39;);        sb.append(&#39;&#125;&#39;);        return sb.toString();    &#125;    public void setAddress(String address) &#123;        this.address = address;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 使用的时候就</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  class A&#123;</span><br><span class="line">      new Person(1,&quot;xiao&quot;,5,&quot;天津&quot;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>使用jsp设置参数得到参数</p></li><li><pre><code class="jsp">&lt;%//    Person person = new Person();//    person.setAge();//    person.setName();//    person.setId();//    person.setAddress();%&gt;&lt;jsp:useBean id=&quot;person&quot; class=&quot;Person&quot; scope=&quot;page&quot;/&gt;&lt;jsp:setProperty name=&quot;person&quot; property=&quot;id&quot; value=&quot;1&quot;/&gt;&lt;jsp:setProperty name=&quot;person&quot; property=&quot;name&quot; value=&quot;小&quot;/&gt;&lt;jsp:setProperty name=&quot;person&quot; property=&quot;age&quot; value=&quot;5&quot;/&gt;&lt;jsp:setProperty name=&quot;person&quot; property=&quot;address&quot; value=&quot;天津&quot;/&gt;&lt;%--&lt;%=person.getAddress()%&gt;--%&gt;id：&lt;jsp:getProperty name=&quot;person&quot; property=&quot;id&quot;/&gt;姓名：&lt;jsp:getProperty name=&quot;person&quot; property=&quot;name&quot;/&gt;年龄：&lt;jsp:getProperty name=&quot;person&quot; property=&quot;age&quot;/&gt;地址：&lt;jsp:getProperty name=&quot;person&quot; property=&quot;address&quot;/&gt;</code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;实体类&lt;br&gt;JavaBean有特定的写法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须要有一个无参构造 &lt;/li&gt;
&lt;li&gt;属性必须私有化&lt;/li&gt;
&lt;li&gt;必须有对应的get&amp;#x2F;set方法；&lt;br&gt; 一般用来和数据库的字段做映射 ORM；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ORM</summary>
      
    
    
    
    
    <category term="JavaWeb" scheme="http://example.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>JSP标签、JSTL标签、EL表达式</title>
    <link href="http://example.com/2022/04/24/JSP%E6%A0%87%E7%AD%BE%E3%80%81JSTL%E6%A0%87%E7%AD%BE%E3%80%81EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://example.com/2022/04/24/JSP%E6%A0%87%E7%AD%BE%E3%80%81JSTL%E6%A0%87%E7%AD%BE%E3%80%81EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2022-04-24T02:32:45.000Z</published>
    <updated>2022-04-24T03:51:47.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><ul><li>获取数据</li><li>执行运算 </li><li>获取web开发的常用对象</li></ul><h2 id="JSP标签"><a href="#JSP标签" class="headerlink" title="JSP标签"></a>JSP标签</h2><ul><li><p>建立一个设置参数的jsp</p></li><li><p>&#96;&#96;&#96;jsp<br>&lt;jsp:forward page&#x3D;”jsptag1.jsp”&gt;<br>&lt;jsp:param name&#x3D;”name” value&#x3D;”xiao”&#x2F;&gt;<br>&lt;jsp:param name&#x3D;”age” value&#x3D;”12”&#x2F;&gt;<br></jsp:forward></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 建立一个取参数的jsp</span><br><span class="line"></span><br><span class="line">- ```jsp</span><br><span class="line">  名字：&lt;%=request.getParameter(&quot;name&quot;)%&gt;</span><br><span class="line">  年龄：&lt;%=request.getParameter(&quot;age&quot;)%&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="JSTL表达式"><a href="#JSTL表达式" class="headerlink" title="JSTL表达式"></a>JSTL表达式</h2><ul><li>JSTL标签库的使用就是为了弥补HTML标签的不足；它自定义许多标签，可以供我们使用，标签的功能和 Java代码一样！</li><li>在使用JSTL之前我们要引入jar包</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JSTL表达式的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- standard标签库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>我们主要掌握的就是<strong>核心标签</strong><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/24/2vhortDAZjGEXIP.png"                      alt="image-20220424112756085"                ></li></ul><p><strong>JSTL标签库使用步骤：</strong></p><ul><li><p>引入对应的 taglib （&lt;%@ taglib prefix&#x3D;”c” uri&#x3D;”<a class="link"   href="http://java.sun.com/jsp/jstl/core&quot;" >http://java.sun.com/jsp/jstl/core&quot;<i class="fas fa-external-link-alt"></i></a> %&gt;）</p></li><li><p>使用其中的方法 </p></li><li><p>在Tomcat 也需要引入 jstl的包，否则会报错：JSTL解析错误</p></li><li><p>c:if的使用</p></li><li><pre><code class="jsp">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; isELIgnored=&quot;false&quot; %&gt;&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h4&gt;if测试&lt;/h4&gt;&lt;hr&gt;&lt;form action=&quot;jsptag1.jsp&quot; method=&quot;get&quot;&gt;    &lt;%--    EL表达式获取表单中的数据    $&#123;param.参数名&#125;    --%&gt;    &lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;$&#123;param.username&#125;&quot;&gt;    &lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;&lt;/form&gt;&lt;%--判断如果提交的用户名是管理员，则登录成功--%&gt;&lt;c:if test=&quot;$&#123;param.username==&#39;admin&#39;&#125;&quot; var=&quot;isAdmin&quot;&gt;    &lt;c:out value=&quot;欢迎&quot;/&gt;&lt;/c:if&gt;&lt;c:out value=&quot;$&#123;isAdmin&#125;&quot;/&gt;&lt;/body&gt;&lt;/html&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- c:choose c:when的使用</span><br><span class="line"></span><br><span class="line">- ```jsp</span><br><span class="line">  &lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; isELIgnored=&quot;false&quot; %&gt;</span><br><span class="line">  &lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">  &lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">      &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;c:set var=&quot;score&quot; value=&quot;55&quot;/&gt;</span><br><span class="line">  &lt;c:choose&gt;</span><br><span class="line">      &lt;c:when test=&quot;$&#123;score&gt;=90&#125;&quot;&gt;</span><br><span class="line">          你的成绩为优秀</span><br><span class="line">      &lt;/c:when&gt;</span><br><span class="line">      &lt;c:when test=&quot;$&#123;score&gt;=80&#125;&quot;&gt;</span><br><span class="line">          你的成绩为一般</span><br><span class="line">      &lt;/c:when&gt;</span><br><span class="line">      &lt;c:when test=&quot;$&#123;score&gt;=70&#125;&quot;&gt;</span><br><span class="line">          你的成绩为良好</span><br><span class="line">      &lt;/c:when&gt;</span><br><span class="line">      &lt;c:when test=&quot;$&#123;score&lt;=60&#125;&quot;&gt;</span><br><span class="line">          你的成绩为不及格</span><br><span class="line">      &lt;/c:when&gt;</span><br><span class="line">  &lt;/c:choose&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>c:forEach使用</p></li><li><pre><code class="jsp">&lt;%@ page import=&quot;java.util.ArrayList&quot; %&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; isELIgnored=&quot;false&quot; %&gt;&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;%    ArrayList&lt;String&gt; people = new ArrayList&lt;&gt;();    people.add(0,&quot;0&quot;);    people.add(1,&quot;1&quot;);    people.add(2,&quot;2&quot;);    people.add(3,&quot;3&quot;);    people.add(4,&quot;4&quot;);    request.setAttribute(&quot;list&quot;,people);%&gt;&lt;c:forEach var=&quot;people&quot; items=&quot;$&#123;list&#125;&quot;&gt;    &lt;c:out value=&quot;$&#123;people&#125;&quot;/&gt;&lt;br&gt;&lt;/c:forEach&gt;&lt;hr&gt;&lt;c:forEach var=&quot;people&quot; items=&quot;$&#123;list&#125;&quot; begin=&quot;1&quot; end=&quot;3&quot; step=&quot;2&quot;&gt;    &lt;c:out value=&quot;$&#123;people&#125;&quot;/&gt;&lt;br&gt;&lt;/c:forEach&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;EL表达式&quot;&gt;&lt;a href=&quot;#EL表达式&quot; class=&quot;headerlink&quot; title=&quot;EL表达式&quot;&gt;&lt;/a&gt;EL表达式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;获取数据&lt;/li&gt;
&lt;li&gt;执行运算 &lt;/li&gt;
&lt;li&gt;获取web开发的常用对象&lt;/li&gt;
&lt;/ul&gt;</summary>
      
    
    
    
    
    <category term="JavaWeb" scheme="http://example.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>JSP内置对象和作用域</title>
    <link href="http://example.com/2022/04/24/JSP%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://example.com/2022/04/24/JSP%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F/</id>
    <published>2022-04-24T01:15:10.000Z</published>
    <updated>2022-04-24T01:40:09.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSP内置对象和作用域"><a href="#JSP内置对象和作用域" class="headerlink" title="JSP内置对象和作用域"></a>JSP内置对象和作用域</h1><ul><li>PageContext 存东西 </li><li>Request 存东西</li><li>Response</li><li>Session 存东西 </li><li>Application 【SerlvetContext】 存东西</li><li>config 【SerlvetConfig】 </li><li>out </li><li>page ，不用了解</li><li>exception</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pageContext.setAttribute(<span class="string">&quot;name1&quot;</span>,<span class="string">&quot;1&quot;</span>); <span class="comment">//保存的数据只在一个页面中有效</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;name2&quot;</span>,<span class="string">&quot;2&quot;</span>); <span class="comment">//保存的数据只在一次请求中有效，请求转发会携带这个数据</span></span><br><span class="line">session.setAttribute(<span class="string">&quot;name3&quot;</span>,<span class="string">&quot;3&quot;</span>); <span class="comment">//保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器</span></span><br><span class="line">application.setAttribute(<span class="string">&quot;name4&quot;</span>,<span class="string">&quot;4&quot;</span>); <span class="comment">//保存的数据只在服务器中有效，从打开服务器到关闭服务器</span></span><br></pre></td></tr></table></figure><ul><li><p>request：客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的！</p></li><li><p>session：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车；</p></li><li><p>application：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如： 聊天数据；</p></li></ul><p>接下来我们将其取出并输出，输出结果是1234</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//从pageContext取出，通过寻找的方式来</span></span><br><span class="line">    <span class="comment">//从底层到高层（作用域）page-&gt;request-&gt;session-&gt;application</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name1</span> <span class="operator">=</span> (String) pageContext.findAttribute(<span class="string">&quot;name1&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name2</span> <span class="operator">=</span> (String) pageContext.findAttribute(<span class="string">&quot;name2&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name3</span> <span class="operator">=</span> (String) pageContext.findAttribute(<span class="string">&quot;name3&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name4</span> <span class="operator">=</span> (String) pageContext.findAttribute(<span class="string">&quot;name4&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--使用EL表达式输出 $&#123;&#125;--%&gt;</span><br><span class="line">&lt;h1&gt; $&#123;name1&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt; $&#123;name2&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt; $&#123;name3&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt; $&#123;name4&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><ul><li><p>我们再新建一个jsp文件将存进去的值取出，就输出3和4</p></li><li><p>我们再加一个转发，输出就是1234，请求转发保存数据有效</p></li><li><pre><code class="jsp">&lt;%    pageContext.forward(&quot;/demo1.jsp&quot;);//    request.getRequestDispatcher(&quot;/demo1.jsp&quot;).forward(request,response);%&gt;</code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JSP内置对象和作用域&quot;&gt;&lt;a href=&quot;#JSP内置对象和作用域&quot; class=&quot;headerlink&quot; title=&quot;JSP内置对象和作用域&quot;&gt;&lt;/a&gt;JSP内置对象和作用域&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;PageContext 存东西 &lt;/li&gt;
&lt;li&gt;Re</summary>
      
    
    
    
    
    <category term="JavaWeb" scheme="http://example.com/tags/JavaWeb/"/>
    
  </entry>
  
</feed>
