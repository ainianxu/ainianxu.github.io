<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-13T07:09:39.941Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java day15 异常</title>
    <link href="http://example.com/2021/07/30/java%20day15%E5%BC%82%E5%B8%B8/"/>
    <id>http://example.com/2021/07/30/java%20day15%E5%BC%82%E5%B8%B8/</id>
    <published>2021-07-30T02:52:56.000Z</published>
    <updated>2022-04-13T07:09:39.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-Error和Exception"><a href="#01-Error和Exception" class="headerlink" title="01 Error和Exception"></a>01 Error和Exception</h1><ul><li>异常是指程序运行时出现的不期而至的各种状况，如：文件找不到、网络连接失败、非法参数。</li><li>三种类型的异常：<ol><li>检查性异常：是用户错误或问题引起的异常，这时程序员无法遇见的。比如打开一个不存在的文件。</li><li>运行时异常：是可能被程序员避免的异常。</li><li>错误：错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如堆栈溢出，在编译时也检测不到。</li></ol></li><li>Java把异常当作对象来处理，并定义一个基类java.lang.Throwable作为所有异常的超类。</li><li>这些异常通常分为两大类：错误Error和异常Exception</li><li>在Exception分支中有一个重要的子类RuntimeException（运行时异常）：<ol><li>ArrayIndexOutOfBoundsException（数组下标越界）</li><li>NullPointerException（空指针异常）</li><li>ArithmeticException（算数异常）</li><li>MissingResourceException（丢失资源）</li><li>ClassNotFoundException（找不到类）</li></ol></li></ul><h1 id="02-捕获和抛出异常"><a href="#02-捕获和抛出异常" class="headerlink" title="02 捕获和抛出异常"></a>02 捕获和抛出异常</h1><ul><li>异常处理五个关键字：try、catch、finally、throw、throws</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//假设要捕获多个异常：从小到大</span></span><br><span class="line">        <span class="keyword">try</span>&#123;<span class="comment">//try监控区域</span></span><br><span class="line">            System.out.println(a/b);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Error e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Exception&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable t)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Throwable&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;<span class="comment">//处理善后工作</span></span><br><span class="line">            System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//打印出Exception和finally</span></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//通过Ctrl+Alt+t快捷键来完成</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(a/b);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();<span class="comment">//打印错误的栈信息</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//打印出ava.lang.ArithmeticException: / by zero</span></span><br><span class="line"><span class="comment">//方法三</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Application</span>().test(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>();<span class="comment">//主动抛出异常</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//打印出Exception in thread &quot;main&quot; java.lang.ArithmeticException</span></span><br><span class="line"><span class="comment">//方法四</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Application</span>().test(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//假设方法处理不了这个异常。那么就将其向上抛出，在方法上抛出。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span><span class="keyword">throws</span> ArithmeticException&#123;</span><br><span class="line">        <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>();<span class="comment">//主动抛出异常</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//输出java.lang.ArithmeticException</span></span><br></pre></td></tr></table></figure><h1 id="03-自定义异常"><a href="#03-自定义异常" class="headerlink" title="03 自定义异常"></a>03 自定义异常</h1><ul><li>自定义异常类，大体可以分为以下几个步骤：<ol><li>创建自定义异常类</li><li>在方法中通过throw关键字抛出异常对象</li><li>如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步操作</li><li>在出现异常方法的调用者中捕获并处理异常</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">    <span class="comment">//传递数字&gt;10</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> detail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.detail = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//toString:异常的打印信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyException&#123;&quot;</span> + <span class="string">&quot;detail=&quot;</span> + detail + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Application</span>().test(<span class="number">11</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MyException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;MyException=&gt;&quot;</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//假设方法处理不了这个异常。那么就将其向上抛出，在方法上抛出。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span><span class="keyword">throws</span> MyException&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;传递的参数为：&quot;</span>+a);</span><br><span class="line">        <span class="keyword">if</span>(a&gt;<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(a);<span class="comment">//主动抛出异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在实际应用中的经验：<ol><li>处理运行时异常时，采用逻辑去合理规避同时辅助try-catch处理</li><li>在多重catch块后面，可以加一个catch(Exception)来处理可能会被遗漏的异常</li><li>对于不确定的代码，也可以加上try-catch，处理潜在的异常（当在IDEA中出现红色波浪线可以Alt+Enter）</li><li>尽量去处理异常，不要只是简单的调用printStackTrace()去打印输出</li><li>尽量添加finally语句块去释放占用资源</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-Error和Exception&quot;&gt;&lt;a href=&quot;#01-Error和Exception&quot; class=&quot;headerlink&quot; title=&quot;01 Error和Exception&quot;&gt;&lt;/a&gt;01 Error和Exception&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    
    <category term="java基础" scheme="http://example.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java day14 面向对象</title>
    <link href="http://example.com/2021/07/29/java%20day14%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://example.com/2021/07/29/java%20day14%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2021-07-29T09:09:35.000Z</published>
    <updated>2022-04-13T07:09:06.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-instanceof和类型转换"><a href="#01-instanceof和类型转换" class="headerlink" title="01 instanceof和类型转换"></a>01 instanceof和类型转换</h1><ul><li>instanceof的格式是System.out.println(x instanceof y);如果x和y是同一类型或者能类型转换（兄弟之间不能类型转换，父子之间可以类型转换）则编译通过，否则不通过。编译通过后会把x和y比较，如果x是y本类或者子类的对象，结果就是true，反之就是flase。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//Object &gt; String</span></span><br><span class="line">        <span class="comment">//Object &gt; Person &gt; Teacher</span></span><br><span class="line">        <span class="comment">//Object &gt; Person &gt; Student</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Object);<span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Teacher);<span class="comment">//false</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Student);<span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> String);<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=========================&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Object);<span class="comment">//true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Teacher);<span class="comment">//false</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Student);<span class="comment">//true</span></span><br><span class="line">        <span class="comment">//System.out.println(person instanceof String);编译不通过</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=========================&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Object);<span class="comment">//true</span></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">        <span class="comment">//System.out.println(student instanceof Teacher);编译不通过</span></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Student);<span class="comment">//true</span></span><br><span class="line">        <span class="comment">//System.out.println(student instanceof String);编译不通过</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=========================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类型转换：<ol><li>把子类转换成父类，向上转型</li><li>把父类转换成子类，向下转型：强制转换</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//高转低</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">//方法一</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) obj;</span><br><span class="line">        student.go();<span class="comment">//Student</span></span><br><span class="line">        <span class="comment">//方法二</span></span><br><span class="line">        ((Student) obj).go();<span class="comment">//Student</span></span><br><span class="line">        <span class="comment">//低转高可能丢失一些自己本来的方法</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> student;</span><br><span class="line">       <span class="comment">//person.go();报错！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="02-static关键字详解"><a href="#02-static关键字详解" class="headerlink" title="02 static关键字详解"></a>02 static关键字详解</h1><ul><li>对于代码块来说：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;匿名代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);<span class="comment">//只执行一次</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">                                <span class="comment">/*静态代码块</span></span><br><span class="line"><span class="comment">                                匿名代码块</span></span><br><span class="line"><span class="comment">                                构造方法</span></span><br><span class="line"><span class="comment">                                ==========</span></span><br><span class="line"><span class="comment">                                匿名代码块</span></span><br><span class="line"><span class="comment">                                构造方法*/</span></span><br></pre></td></tr></table></figure><ul><li>非静态方法和静态方法可以调用静态方法，而静态方法不能调用非静态方法。</li><li>静态导入包：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态导入包</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(random());<span class="comment">//这就可以直接使用random()，而不用Math.random()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用非静态方法必须new一个对象进行调用，而调用静态方法可以直接用类调用，比如Student.run()。</li><li>在方法中调用变量：调用非静态变量不能直接用类调用，要创建一个对象进行调用，而调用静态变量既可以用类进行调用，也可以用对象进行调用。</li></ul><h1 id="03-抽象类"><a href="#03-抽象类" class="headerlink" title="03 抽象类"></a>03 抽象类</h1><ul><li>abstract修饰符，如果修饰方法就是抽象方法，如果修饰类就是抽象类。</li><li>抽象类中可以没有抽象方法，但是只要有抽象方法，必须声明抽象类。</li><li>抽象类不能用new实例化。</li><li>抽象方法只有方法的声明而没有具体实现，实现是让子类来完成的。</li><li>子类继承抽象类，就必须实现抽象类中没有实现的抽象方法，否则子类也要声明为抽象类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;有普通方法也是可以的&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="04-接口"><a href="#04-接口" class="headerlink" title="04 接口"></a>04 接口</h1><ul><li>接口的本质是契约，是对对象的抽象</li><li>用interface定义接口</li><li>接口的作用：<ol><li>约束</li><li>定义一些方法，让不同的人实现（10个人可以实现一个接口）</li><li>接口中的所有定义的方法其实都是抽象的 public abstract</li><li>接口中的所有定义的变量其实都是静态常量 public static final</li><li>接口也不能被实例化（没有构造方法）</li><li>implements可以实现多个接口，就是相当于多继承</li><li>实现接口，必须要做重写接口中方法</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">query</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Teacher</span>  &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Ait+insert直接生成的重写方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Person</span>,Teacher &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">(String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-instanceof和类型转换&quot;&gt;&lt;a href=&quot;#01-instanceof和类型转换&quot; class=&quot;headerlink&quot; title=&quot;01 instanceof和类型转换&quot;&gt;&lt;/a&gt;01 instanceof和类型转换&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    
    <category term="java基础" scheme="http://example.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java day13 面向对象三大特征2</title>
    <link href="http://example.com/2021/07/28/java%20day13%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A72/"/>
    <id>http://example.com/2021/07/28/java%20day13%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A72/</id>
    <published>2021-07-28T15:06:48.000Z</published>
    <updated>2022-04-13T07:08:31.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-方法重写"><a href="#01-方法重写" class="headerlink" title="01 方法重写"></a>01 方法重写</h1><ul><li><p>重写：需要有继承关系，子类重写父类的方法！</p><ol><li>方法名必须相同</li><li>参数列表必须相同</li><li>修饰符：范围可以扩大但是不能缩小（public&gt;Protected&gt;Default&gt;private）</li><li>抛出的异常：范围可以缩小但是不能扩大</li><li>快捷键：Alt+Insert(override)</li></ol></li><li><p>为什么需要重写：因为父类的功能，子类不一定需要，或者不一定满足</p></li><li><p>静态的方法和非静态方法差别很大：</p><ol><li>静态方法：方法的调用只和左边定义的数据类型有关</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.print();<span class="comment">//Student</span></span><br><span class="line">        <span class="comment">//父类的引用指向了子类</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        person.print();<span class="comment">//Person</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>非静态方法：重写</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.print();<span class="comment">//Student</span></span><br><span class="line">        <span class="comment">//父类的引用指向了子类</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        person.print();<span class="comment">//Student</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="02-多态"><a href="#02-多态" class="headerlink" title="02 多态"></a>02 多态</h1><p>多态就是同一方法可以根据发送对象的不同而采用多种不同的行为方式。</p><hr><ul><li><p>多态注意事项：</p><ol><li>多态时方法的多态，属性没有多态</li><li>存在条件：继承关系，方法需要重写，父亲引用指向子类对象</li></ol></li><li><p>不能重写的方法：</p><ol><li>static方法属于类不属于实例</li><li>final常量</li><li>private方法</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//一个对象的实际类型是确定的--&gt;new Student(); new Person()</span></span><br><span class="line">        <span class="comment">//可以指向的引用类型就不确定了：父类的引用指向子类</span></span><br><span class="line">        <span class="comment">//Student能调用的方法都是自己的或者继承父类的</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.print();<span class="comment">//Student</span></span><br><span class="line">        <span class="comment">//Person父类型可以指向子类，但是不能调用子类独有的方法</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        person.print();<span class="comment">//Student</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-方法重写&quot;&gt;&lt;a href=&quot;#01-方法重写&quot; class=&quot;headerlink&quot; title=&quot;01 方法重写&quot;&gt;&lt;/a&gt;01 方法重写&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;重写：需要有继承关系，子类重写父类的方法！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方法名必须相</summary>
      
    
    
    
    
    <category term="java基础" scheme="http://example.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java day13 面向对象三大特征1</title>
    <link href="http://example.com/2021/07/21/java%20day13%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A71/"/>
    <id>http://example.com/2021/07/21/java%20day13%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A71/</id>
    <published>2021-07-21T14:31:46.000Z</published>
    <updated>2022-04-13T07:07:32.840Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-封装"><a href="#01-封装" class="headerlink" title="01 封装"></a>01 封装</h1><ul><li>我们程序设计追求高内聚低耦合。<ol><li>高内聚：类的内部数据操作细节自己完成，不允许外部干涉。</li><li>低耦合：仅暴露少量的方法给外部使用。</li></ol></li><li>封装的意义：<ol><li>提高程序的安全性，保护数据</li><li>隐藏代码的实现细节</li><li>统一接口</li><li>系统可维护增加了</li></ol></li><li>属性私有，get&#x2F;set</li><li>信息隐藏：禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//属性私有</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;<span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> sex;<span class="comment">//性别</span></span><br><span class="line">    <span class="comment">//get 获得这个数据</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//set 给这个数据设置值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setName(<span class="string">&quot;小方&quot;</span>);</span><br><span class="line">        System.out.println(student.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="02-继承"><a href="#02-继承" class="headerlink" title="02 继承"></a>02 继承</h1><ul><li>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。</li><li>extends的意思是”扩展”。子类是父类的扩展。</li><li>JAVA只有单继承，没有多继承。一个爸爸可以有多个儿子，一个儿子只能有一个爸爸。</li><li>继承是类与类之间的一种关系</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.say();<span class="comment">//hello</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>私有的东西无法被继承。</li><li>在Java中，所有的类，都默认直接或者间接继承object</li></ul><h1 id="03-Super"><a href="#03-Super" class="headerlink" title="03 Super"></a>03 Super</h1><ul><li><p>super注意点：</p><ol><li>super调用父类的构造方法，必须在构造方法的第一个</li><li>super必须只能出现在子类的方法或者构造方法中。</li><li>super和this不能同时调用构造方法。</li></ol></li><li><p>super VS this</p><ol><li>代表的对象不同：this（本身调用这个对象），super（代表父类对象的引用）。</li><li>前提：this（没有继承也可以使用），super（只有在继承条件下才可以使用）。</li><li>构造方法：this():本类的构造，super():父类的构造</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;xiaofang&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//隐藏代码：调用父类的无参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;Student无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;xiaoxu&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(name);<span class="comment">//方</span></span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name);<span class="comment">//xiaoxu</span></span><br><span class="line">        System.out.println(<span class="built_in">super</span>.name);<span class="comment">//xiaofang</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        print();<span class="comment">//student</span></span><br><span class="line">        <span class="built_in">this</span>.print();<span class="comment">//student</span></span><br><span class="line">        <span class="built_in">super</span>.print();<span class="comment">//Person</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Application</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();<span class="comment">//先调用父类Person无参，在调用子类Student无参</span></span><br><span class="line">        student.test(<span class="string">&quot;方&quot;</span>);</span><br><span class="line">        student.test1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-封装&quot;&gt;&lt;a href=&quot;#01-封装&quot; class=&quot;headerlink&quot; title=&quot;01 封装&quot;&gt;&lt;/a&gt;01 封装&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;我们程序设计追求高内聚低耦合。&lt;ol&gt;
&lt;li&gt;高内聚：类的内部数据操作细节自己完成，不允许外部干涉。&lt;</summary>
      
    
    
    
    
    <category term="java基础" scheme="http://example.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java day12 面向对象</title>
    <link href="http://example.com/2021/07/20/java%20day12%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://example.com/2021/07/20/java%20day12%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2021-07-20T13:54:18.000Z</published>
    <updated>2022-04-13T07:06:00.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-什么是面向对象"><a href="#01-什么是面向对象" class="headerlink" title="01 什么是面向对象"></a>01 什么是面向对象</h1><ul><li>属性+方法&#x3D;类 </li><li>面向过程思想<ol><li>步骤清晰简单，第一步做什么，第二部做什么….</li><li>面向过程适合处理一些较为简单的问题</li></ol></li><li>面向对象思想<ol><li>物以类聚，分类的思维模式</li><li>面向对象适合处理复杂的问题</li></ol></li><li>对于描述复杂的事务，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思想来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思想。</li><li>面向对象编程的本质：以类的方式组织代码，以对象的组织（封装）数据。</li><li>三大特性：封装、继承、多态</li></ul><h1 id="02-回顾方法"><a href="#02-回顾方法" class="headerlink" title="02 回顾方法"></a>02 回顾方法</h1><ul><li>当一个类调用静态方法时，调用形式：类名+方法名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Student.say();</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>当调用非静态方法时，调用形式：将这个类实例化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.say();</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>static是和类一起加载的，而不含static的是在类实例化之后才存在，所以下面代码是错误的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>&#123;</span><br><span class="line">        b();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一个类中只有一个public class,但是有很多class。</li></ul><h1 id="03-类和对象的关系"><a href="#03-类和对象的关系" class="headerlink" title="03 类和对象的关系"></a>03 类和对象的关系</h1><ul><li>使用new关键字创建对象，除了分配内存空间，还会初始化，以及对类中构造器的使用。</li><li>一个项目应该只存在一个main方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//属性:字段</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//类：抽象的，实例化</span></span><br><span class="line">        <span class="comment">//类实例化后会返回一个自己的对象</span></span><br><span class="line">        <span class="comment">//student对象就是一个Student类的具体实例。</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">xm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">xh</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        xm.name = <span class="string">&quot;xiaoming&quot;</span>;</span><br><span class="line">        xm.age = <span class="number">3</span>;</span><br><span class="line">        System.out.println(xm.name);<span class="comment">//xiaoming</span></span><br><span class="line">        System.out.println(xm.age);<span class="comment">//3</span></span><br><span class="line">        System.out.println(xh.name);<span class="comment">//默认值null</span></span><br><span class="line">        System.out.println(xh.age);<span class="comment">//默认值0</span></span><br><span class="line">        xh.study();<span class="comment">//hello</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="04-构造器详解"><a href="#04-构造器详解" class="headerlink" title="04 构造器详解"></a>04 构造器详解</h1><ul><li><p>一个类即使什么都不写，也会构造一个方法。</p></li><li><p>构造器：</p><ol><li>特点：必须和类的名字相同；必须没有返回类型，也不能写void。</li><li>作用：new本质就是调用构造方法；初始化对象的值。</li><li>注意点：定义有参构造之后，如果想使用无参构造，必须显示的定义一个无参构造。</li></ol><ul><li>调用无参构造函数</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;xiaofang&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;<span class="comment">//this.name代表对象本身的name,name是传递下来的name。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(student.name);<span class="comment">//xiaofang</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用有参构造函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;xiaofang&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;<span class="comment">//this.name代表对象本身的name,name是传递下来的name。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;xiaoxu&quot;</span>);</span><br><span class="line">        System.out.println(student.name);<span class="comment">//xiaoxu</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-什么是面向对象&quot;&gt;&lt;a href=&quot;#01-什么是面向对象&quot; class=&quot;headerlink&quot; title=&quot;01 什么是面向对象&quot;&gt;&lt;/a&gt;01 什么是面向对象&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;属性+方法&amp;#x3D;类 &lt;/li&gt;
&lt;li&gt;面向过程思想&lt;ol</summary>
      
    
    
    
    
    <category term="java基础" scheme="http://example.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java day11 稀疏数组</title>
    <link href="http://example.com/2021/07/18/java%20day11%20%E6%95%B0%E7%BB%84/"/>
    <id>http://example.com/2021/07/18/java%20day11%20%E6%95%B0%E7%BB%84/</id>
    <published>2021-07-18T15:39:09.000Z</published>
    <updated>2022-04-13T07:05:09.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建一个二维数组11*11</span></span><br><span class="line">        <span class="type">int</span>[][] array1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        array1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        array1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//2.输出原始数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;输出原始数组&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : array1) &#123;<span class="comment">//ints 相当于array1的每一行</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) &#123;<span class="comment">//anInt相当于每一个元素</span></span><br><span class="line">                System.out.print(anInt+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.获取有效数值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(array1[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;有效个数&quot;</span>+sum);</span><br><span class="line">        <span class="comment">//4.创建一个稀疏矩阵数组</span></span><br><span class="line">        <span class="type">int</span>[][] array2 = <span class="keyword">new</span> <span class="title class_">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//5.遍历二位数组，有非零值，存放在稀疏矩阵中</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">cout</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;array1.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span><span class="number">0</span>;j&lt;array1[i].length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(array1[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    cout++;</span><br><span class="line">                    array2[cout][<span class="number">0</span>] = i;</span><br><span class="line">                    array2[cout][<span class="number">1</span>] = j;</span><br><span class="line">                    array2[cout][<span class="number">2</span>] = array1[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.输出稀疏数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;稀疏数组：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt; array2.length;i++)&#123;</span><br><span class="line">            System.out.println(array2[i][<span class="number">0</span>]+<span class="string">&quot;\t&quot;</span></span><br><span class="line">                    +array2[i][<span class="number">1</span>]+<span class="string">&quot;\t&quot;</span></span><br><span class="line">                    +array2[i][<span class="number">2</span>]+<span class="string">&quot;\t&quot;</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//7.读取稀疏矩阵</span></span><br><span class="line">        <span class="type">int</span>[][] array3 = <span class="keyword">new</span> <span class="title class_">int</span>[array2[<span class="number">0</span>][<span class="number">0</span>]][array2[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line">        <span class="comment">//8.给其他元素还原</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt; array2.length;i++)&#123;</span><br><span class="line">            array3[array2[i][<span class="number">0</span>]][array2[i][<span class="number">1</span>]] = array2[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//9.打印</span></span><br><span class="line">        System.out.println(<span class="string">&quot;还原数组：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : array3) &#123;<span class="comment">//ints 相当于array1的每一行</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) &#123;<span class="comment">//anInt相当于每一个元素</span></span><br><span class="line">                System.out.print(anInt+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">输出原始数组</span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">2</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line">有效个数<span class="number">2</span></span><br><span class="line">稀疏数组：</span><br><span class="line"><span class="number">11</span><span class="number">11</span><span class="number">2</span></span><br><span class="line"><span class="number">1</span><span class="number">2</span><span class="number">1</span></span><br><span class="line"><span class="number">2</span><span class="number">3</span><span class="number">2</span></span><br><span class="line">还原数组：</span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">2</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;稀疏数组&quot;&gt;&lt;a href=&quot;#稀疏数组&quot; class=&quot;headerlink&quot; title=&quot;稀疏数组&quot;&gt;&lt;/a&gt;稀疏数组&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    
    <category term="java基础" scheme="http://example.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java day10 冒泡排序</title>
    <link href="http://example.com/2021/07/17/java%20day10%20%E6%95%B0%E7%BB%84/"/>
    <id>http://example.com/2021/07/17/java%20day10%20%E6%95%B0%E7%BB%84/</id>
    <published>2021-07-17T15:00:12.000Z</published>
    <updated>2022-04-13T07:05:24.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-冒泡排序"><a href="#01-冒泡排序" class="headerlink" title="01 冒泡排序"></a>01 冒泡排序</h1><p>冒泡排序：两层循环，外层冒泡轮数，里层依次比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">55</span>, <span class="number">12</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] array = sort(a);</span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] array) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[j + <span class="number">1</span>] &lt; array[j]) &#123;</span><br><span class="line">                    temp = array[j + <span class="number">1</span>];</span><br><span class="line">                    array[j + <span class="number">1</span>] = array[j];</span><br><span class="line">                    array[j] = temp;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">                <span class="keyword">if</span> (flag == <span class="literal">false</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-冒泡排序&quot;&gt;&lt;a href=&quot;#01-冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;01 冒泡排序&quot;&gt;&lt;/a&gt;01 冒泡排序&lt;/h1&gt;&lt;p&gt;冒泡排序：两层循环，外层冒泡轮数，里层依次比较。&lt;/p&gt;
&lt;figure class=&quot;highli</summary>
      
    
    
    
    
    <category term="java基础" scheme="http://example.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java day09 数组</title>
    <link href="http://example.com/2021/07/16/java%20day09%20%E6%95%B0%E7%BB%84/"/>
    <id>http://example.com/2021/07/16/java%20day09%20%E6%95%B0%E7%BB%84/</id>
    <published>2021-07-16T14:32:13.000Z</published>
    <updated>2022-04-13T07:03:56.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-数组的使用"><a href="#01-数组的使用" class="headerlink" title="01 数组的使用"></a>01 数组的使用</h1><ul><li>配合for循环使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">      <span class="comment">//打印全部的数组元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">            System.out.println(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">        <span class="comment">//计算所有数组的和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">            sum+=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;总和&quot;</span>+sum);</span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">        <span class="comment">//查找最大的数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> a[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(a[i]&gt;max)&#123;</span><br><span class="line">               max = a[i];</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;最大数&quot;</span>+max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>For-Each循环</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : a) &#123;<span class="comment">//i就是数组元素，a就代表数组</span></span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数组作方法入参</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////打印全部的数组元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">      printArray(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] a)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">            System.out.println(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数组作返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//反转数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">      <span class="type">int</span>[] reverse = reverse(a);</span><br><span class="line">      printArray(reverse);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="type">int</span>[] reverse(<span class="type">int</span>[] a)&#123;</span><br><span class="line">        <span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[a.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>,j = b.length-<span class="number">1</span>;i&lt;b.length;i++,j--)&#123;</span><br><span class="line">            b[j] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] a)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">            System.out.println(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="02-二维数组"><a href="#02-二维数组" class="headerlink" title="02 二维数组"></a>02 二维数组</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span>[][] b = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><h1 id="03-Arrays类"><a href="#03-Arrays类" class="headerlink" title="03 Arrays类"></a>03 Arrays类</h1><ul><li>数组的工具类java.util.Arrays</li><li>Arrays类中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名进行调用，而不用适用对象来调用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a =&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">55645</span>,<span class="number">121</span>,<span class="number">11</span>&#125;;</span><br><span class="line"><span class="comment">//数组进行排序</span></span><br><span class="line">   Arrays.sort(a);</span><br><span class="line"><span class="comment">//数组进行填充</span></span><br><span class="line">   Arrays.fill(a,<span class="number">2</span>,<span class="number">4</span>,<span class="number">0</span>);<span class="comment">//从2到4之间进行填充</span></span><br><span class="line"><span class="comment">//打印数组元素</span></span><br><span class="line">   System.out.println(Arrays.toString(a));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-数组的使用&quot;&gt;&lt;a href=&quot;#01-数组的使用&quot; class=&quot;headerlink&quot; title=&quot;01 数组的使用&quot;&gt;&lt;/a&gt;01 数组的使用&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;配合for循环使用&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;high</summary>
      
    
    
    
    
    <category term="java基础" scheme="http://example.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java day08 数组</title>
    <link href="http://example.com/2021/07/15/java%20day08%20%E6%95%B0%E7%BB%84/"/>
    <id>http://example.com/2021/07/15/java%20day08%20%E6%95%B0%E7%BB%84/</id>
    <published>2021-07-15T14:18:20.000Z</published>
    <updated>2022-04-13T07:03:13.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-三种初始化及内存分析"><a href="#01-三种初始化及内存分析" class="headerlink" title="01 三种初始化及内存分析"></a>01 三种初始化及内存分析</h1><ul><li>内存分析<ol><li>堆是用来存放new的对象和数组；可以被所有线程共享，不会存放别的对象引用</li><li>栈是用来存放基本变量类型（包含具体数值）；或者存放引用对象变量</li><li>方法区包括了所有的class和static变量</li></ol></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/OANVyde3ifcoTn2.png"                      alt="image-20210715160137507"                ></p><ul><li><p>三种初始化</p><ol><li>静态初始化</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arrays = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">Man[] man = &#123;<span class="keyword">new</span> <span class="title class_">Man</span>(),<span class="keyword">new</span> <span class="title class_">Man</span>()&#125;;<span class="comment">//在此之前先创建个Man类，进行引用</span></span><br></pre></td></tr></table></figure><ol start="2"><li>动态初始化</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>默认初始化：数组分配空间后，int类型默认为0</li></ol></li></ul><h1 id="02-下标越界"><a href="#02-下标越界" class="headerlink" title="02 下标越界"></a>02 下标越界</h1><ul><li><p>数组的四个基本特点</p><ol><li>其长度是确定的，数组一旦被创建，它的大小就是不可以改变的。</li><li>其元素必须是相同类型的。</li><li>数组中的元素可以是任何数据类型，包括基本类型和引用类型。</li><li>数组对象本身是在堆中的,数组元素相当于对象的成员变量。</li></ol></li><li><p>下标的合法区间：[0,length-1]</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-三种初始化及内存分析&quot;&gt;&lt;a href=&quot;#01-三种初始化及内存分析&quot; class=&quot;headerlink&quot; title=&quot;01 三种初始化及内存分析&quot;&gt;&lt;/a&gt;01 三种初始化及内存分析&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;内存分析&lt;ol&gt;
&lt;li&gt;堆是用来存放n</summary>
      
    
    
    
    
    <category term="java基础" scheme="http://example.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java day07 数组</title>
    <link href="http://example.com/2021/07/13/java%20day07%20%E6%95%B0%E7%BB%84/"/>
    <id>http://example.com/2021/07/13/java%20day07%20%E6%95%B0%E7%BB%84/</id>
    <published>2021-07-13T13:56:18.000Z</published>
    <updated>2022-04-13T07:02:38.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-数组的定义"><a href="#01-数组的定义" class="headerlink" title="01 数组的定义"></a>01 数组的定义</h1><ul><li>数组是相同数据类型的有序集合</li><li>按照一定的先后次序排列组合而成</li><li>每一个数据称作一个数组元素，每个数组元素都可以通过一个下标来进行访问</li></ul><h1 id="02-数组的声明及创建"><a href="#02-数组的声明及创建" class="headerlink" title="02 数组的声明及创建"></a>02 数组的声明及创建</h1><ul><li>数组的元素是通过索引访问的，数组索引从0开始</li><li>获得数组的长度：arrays.length</li><li>声明数组：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arrays;<span class="comment">//首选</span></span><br><span class="line"><span class="type">int</span> arrays[];<span class="comment">//不是首选</span></span><br></pre></td></tr></table></figure><ul><li>创建一个数组：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrays = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><ul><li>声明+创建数组：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arrays = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-数组的定义&quot;&gt;&lt;a href=&quot;#01-数组的定义&quot; class=&quot;headerlink&quot; title=&quot;01 数组的定义&quot;&gt;&lt;/a&gt;01 数组的定义&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;数组是相同数据类型的有序集合&lt;/li&gt;
&lt;li&gt;按照一定的先后次序排列组合而成&lt;</summary>
      
    
    
    
    
    <category term="java基础" scheme="http://example.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java day07 方法</title>
    <link href="http://example.com/2021/07/13/java%20day07%20%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2021/07/13/java%20day07%20%E6%96%B9%E6%B3%95/</id>
    <published>2021-07-13T09:25:44.000Z</published>
    <updated>2022-04-13T07:01:46.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-可变参数"><a href="#01-可变参数" class="headerlink" title="01 可变参数"></a>01 可变参数</h1><ul><li>在方法声明时，在（ ）中指定参数类型后加…</li><li>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       max(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">       max(<span class="number">0.45</span>, <span class="number">0.55</span>, <span class="number">0.12</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> ...i)</span>&#123;<span class="comment">//i为可变参数</span></span><br><span class="line">        <span class="keyword">if</span>(i.length == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;No Print&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> i[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;number&lt;i.length;number++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(result&lt;i[number])&#123;</span><br><span class="line">                result = i[number];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;The Max is&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="02-递归"><a href="#02-递归" class="headerlink" title="02 递归"></a>02 递归</h1><ul><li>递归就是：自己调用自己</li><li>递归结构包括：<ol><li>递归头：什么时候不调用自身方法。</li><li>递归体：什么时候需要调用自身方法。</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(f(<span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> i*f(i-<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>递归的形式：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/04/13/AzjZTkVl5Wgwioy.png"                      alt="image-20210713172351917"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-可变参数&quot;&gt;&lt;a href=&quot;#01-可变参数&quot; class=&quot;headerlink&quot; title=&quot;01 可变参数&quot;&gt;&lt;/a&gt;01 可变参数&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在方法声明时，在（ ）中指定参数类型后加…&lt;/li&gt;
&lt;li&gt;一个方法中只能指定一个可变</summary>
      
    
    
    
    
    <category term="java基础" scheme="http://example.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java day06 方法</title>
    <link href="http://example.com/2021/07/12/java%20day06%20%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2021/07/12/java%20day06%20%E6%96%B9%E6%B3%95/</id>
    <published>2021-07-12T13:19:52.000Z</published>
    <updated>2022-04-13T07:00:58.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-方法定义和调用"><a href="#01-方法定义和调用" class="headerlink" title="01 方法定义和调用"></a>01 方法定义和调用</h1><h2 id="1-1-方法定义"><a href="#1-1-方法定义" class="headerlink" title="1.1 方法定义"></a>1.1 方法定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类.对象.方法</span></span><br><span class="line">System.out.println();</span><br></pre></td></tr></table></figure><ul><li>Java一定是值传递</li><li>Java方法是语句的集合，他们在一起执行一个功能。</li><li>方法包括在类或对象中。</li><li>方法在程序中被创建，在其他地方被引用。</li><li>一个方法只完成一个功能。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修饰符+返回值类型+方法名（参数类型+参数名）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比较大小</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span>max(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(num1 == num2)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;等价&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num1&gt;num2)&#123;</span><br><span class="line">            result = num1;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result = num2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-方法调用"><a href="#1-2-方法调用" class="headerlink" title="1.2 方法调用"></a>1.2 方法调用</h2><ul><li>调用方法：对象名.方法名（实参列表）</li><li>当方法返回一个值时，方法调用通常被当作一个值。例如</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int max =max(3,2);</span><br></pre></td></tr></table></figure><ul><li>当方法返回值是void，方法调用一定是一条语句。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="02-方法的重载"><a href="#02-方法的重载" class="headerlink" title="02 方法的重载"></a>02 方法的重载</h1><ul><li>重载就是在一个类中，有相同的函数名称，但形式参数不同的函数。</li><li>方法重载的规则：<ol><li>方法名称必须相同。</li><li>参数列表必须不同（个数不同、类型不同、参数排列顺序不同）。</li><li>返回类型可以相同也可以不同。</li><li>仅仅返回类型不同，不是方法的重载。</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> num1,<span class="type">double</span> num2)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-方法定义和调用&quot;&gt;&lt;a href=&quot;#01-方法定义和调用&quot; class=&quot;headerlink&quot; title=&quot;01 方法定义和调用&quot;&gt;&lt;/a&gt;01 方法定义和调用&lt;/h1&gt;&lt;h2 id=&quot;1-1-方法定义&quot;&gt;&lt;a href=&quot;#1-1-方法定义&quot; cla</summary>
      
    
    
    
    
    <category term="java基础" scheme="http://example.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java day05 流程控制</title>
    <link href="http://example.com/2021/07/11/java%20day05%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>http://example.com/2021/07/11/java%20day05%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</id>
    <published>2021-07-11T10:15:41.000Z</published>
    <updated>2022-04-13T07:00:13.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-while循环"><a href="#01-while循环" class="headerlink" title="01 while循环"></a>01 while循环</h1><ul><li>只要布尔表达式为true，循环就会一直执行下去。</li><li>我们大多数的情况需要让循环停止下来，需要一个让表达式失效的方式来结束循环。</li><li>先判断在执行</li><li>正常业务应该尽量避免死循环。</li><li>如果不满足条件，则不能进入循环。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1+2.....+100</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">    i++;</span><br><span class="line">    sum+=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="02-do…-while循环"><a href="#02-do…-while循环" class="headerlink" title="02 do…..while循环"></a>02 do…..while循环</h1><ul><li>do…..while循环至少执行一次</li><li>先执行后判断</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1+2.....+100</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    i++;</span><br><span class="line">    sum+=i;</span><br><span class="line">&#125;<span class="keyword">while</span> (i&lt;<span class="number">100</span>);</span><br></pre></td></tr></table></figure><ul><li>while与do while区别</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(i);<span class="comment">//不输出</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;..........................&quot;</span>);</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    System.out.println(i);<span class="comment">//输出0</span></span><br><span class="line">&#125;<span class="keyword">while</span> (i&lt;<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h1 id="03-For循环"><a href="#03-For循环" class="headerlink" title="03 For循环"></a>03 For循环</h1><ul><li>for循环语句时支持迭代的一种通用结构，最有效、最灵活的循环结构。</li><li>for循环执行的次数是在执行前就确定的。</li><li>for循环也有死循环，格式如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( ; ; )&#123; &#125;</span><br></pre></td></tr></table></figure><ol><li>计算0到100之间的奇数和偶数的和</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">oddSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">evenSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                evenSum+=i;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                oddSum+=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;偶数和&quot;</span>+evenSum);</span><br><span class="line">        System.out.println(<span class="string">&quot;奇数和&quot;</span>+oddSum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>循环输出1-1000之间能被5整除的数，并且每行输出3个</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">5</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.print(i+<span class="string">&quot;\t&quot;</span>);<span class="comment">//\t加空格</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i%(<span class="number">5</span>*<span class="number">3</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println();<span class="comment">//输出完自动换行</span></span><br><span class="line">                <span class="comment">//System.out.print(&quot;\n&quot;);输出完不会换行</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>打印九九乘法表</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j&lt;=i;j++)&#123;</span><br><span class="line">                System.out.print(i+<span class="string">&quot;*&quot;</span>+j+<span class="string">&quot;=&quot;</span>+(i*j)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="04-增强for循环"><a href="#04-增强for循环" class="headerlink" title="04 增强for循环"></a>04 增强for循环</h1><ul><li>主要用来遍历数组与集合</li><li>格式：for(声明语句 ：表达式){ }<ol><li>声明语句：是声明局部变量，该变量类型必须和数组元素的类型匹配。</li><li>表达式：是要访问的数组名，或者是返回值是数组的方法。</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] number = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : number)&#123;</span><br><span class="line">            System.out.println(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="05-break与continue"><a href="#05-break与continue" class="headerlink" title="05 break与continue"></a>05 break与continue</h1><ul><li>break用于强制退出循环，不再执行循环中剩余语句。</li><li>continue用于终止某次循环结构，进行下次循环</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">while</span> (i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">           i++;</span><br><span class="line">           <span class="keyword">if</span>(i%<span class="number">10</span>==<span class="number">0</span>)&#123;</span><br><span class="line">               System.out.println();</span><br><span class="line">               <span class="keyword">continue</span>;<span class="comment">//1</span></span><br><span class="line">               <span class="comment">//break;2</span></span><br><span class="line">           &#125;</span><br><span class="line">           System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1.</span><span class="comment">/*1 2 3 4 5 6 7 8 9               2.   1 2 3 4 5 6 7 8 9 </span></span><br><span class="line"><span class="comment">11 12 13 14 15 16 17 18 19 </span></span><br><span class="line"><span class="comment">21 22 23 24 25 26 27 28 29 </span></span><br><span class="line"><span class="comment">31 32 33 34 35 36 37 38 39 </span></span><br><span class="line"><span class="comment">41 42 43 44 45 46 47 48 49 </span></span><br><span class="line"><span class="comment">51 52 53 54 55 56 57 58 59 </span></span><br><span class="line"><span class="comment">61 62 63 64 65 66 67 68 69 </span></span><br><span class="line"><span class="comment">71 72 73 74 75 76 77 78 79 </span></span><br><span class="line"><span class="comment">81 82 83 84 85 86 87 88 89 </span></span><br><span class="line"><span class="comment">91 92 93 94 95 96 97 98 99 */</span></span><br></pre></td></tr></table></figure><ul><li>打印三角形</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">5</span>; j &gt;= i; j--) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; i; j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-while循环&quot;&gt;&lt;a href=&quot;#01-while循环&quot; class=&quot;headerlink&quot; title=&quot;01 while循环&quot;&gt;&lt;/a&gt;01 while循环&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;只要布尔表达式为true，循环就会一直执行下去。&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    
    <category term="java基础" scheme="http://example.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java day04 流程控制</title>
    <link href="http://example.com/2021/07/10/java%20day04%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>http://example.com/2021/07/10/java%20day04%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</id>
    <published>2021-07-10T13:54:30.000Z</published>
    <updated>2022-04-13T06:59:33.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-顺序结构"><a href="#01-顺序结构" class="headerlink" title="01 顺序结构"></a>01 顺序结构</h1><ul><li>Java的最基本的结构就是顺序结构</li><li>它是任何一个算法都离不开的一种基本算法结构</li></ul><h1 id="02-if选择结构"><a href="#02-if选择结构" class="headerlink" title="02 if选择结构"></a>02 if选择结构</h1><h2 id="2-1-if单选择结构"><a href="#2-1-if单选择结构" class="headerlink" title="2.1 if单选择结构"></a>2.1 if单选择结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="comment">//判断字符串是否相等</span></span><br><span class="line">        <span class="keyword">if</span>(str.equals(<span class="string">&quot;hello&quot;</span>))&#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-if双选择结构"><a href="#2-2-if双选择结构" class="headerlink" title="2.2 if双选择结构"></a>2.2 if双选择结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//考试分数大于60就是及格，小于60就是不及格</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="keyword">if</span>(num&gt;<span class="number">60</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-多选择结构"><a href="#2-3-多选择结构" class="headerlink" title="2.3 多选择结构"></a>2.3 多选择结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="keyword">if</span>(num&lt;=<span class="number">100</span> &amp;&amp; num&gt;=<span class="number">90</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num&lt;<span class="number">90</span> &amp;&amp; num&gt;=<span class="number">80</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num&lt;<span class="number">80</span> &amp;&amp; num&gt;=<span class="number">70</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num&lt;<span class="number">70</span> &amp;&amp; num&gt;=<span class="number">60</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成绩不对&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="03-switch多选择结构"><a href="#03-switch多选择结构" class="headerlink" title="03 switch多选择结构"></a>03 switch多选择结构</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="keyword">switch</span> (str)&#123;<span class="comment">//JDK7之后就可以用字符串</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;fang&quot;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;fang&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;xiao&quot;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;xiao&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;wu&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>case穿透：如果没有break，则会按顺序执行，直到遇到break或者程序结束</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-顺序结构&quot;&gt;&lt;a href=&quot;#01-顺序结构&quot; class=&quot;headerlink&quot; title=&quot;01 顺序结构&quot;&gt;&lt;/a&gt;01 顺序结构&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Java的最基本的结构就是顺序结构&lt;/li&gt;
&lt;li&gt;它是任何一个算法都离不开的一种基本</summary>
      
    
    
    
    
    <category term="java基础" scheme="http://example.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java day03 流程控制</title>
    <link href="http://example.com/2021/07/09/java%20day03%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>http://example.com/2021/07/09/java%20day03%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</id>
    <published>2021-07-09T13:59:09.000Z</published>
    <updated>2022-04-13T06:59:06.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-Scanner对象"><a href="#01-Scanner对象" class="headerlink" title="01 Scanner对象"></a>01 Scanner对象</h1><ul><li>基本语法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br></pre></td></tr></table></figure><ul><li>通过Scanner类的next()和nextLine()方法获取输入字符串，在读取之前一般采用hasNext()与hasNextLine()判断是否还有输入数据。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个扫描对象，用于接收数据</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入数据&quot;</span>);</span><br><span class="line"><span class="comment">//判断用户有没有输入字符</span></span><br><span class="line"><span class="keyword">if</span>(scanner.hasNext())&#123;</span><br><span class="line"><span class="comment">//使用next接收</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.next();<span class="comment">//输入xiao fang</span></span><br><span class="line">System.out.println(<span class="string">&quot;输出内容为&quot;</span>+str);<span class="comment">//输出 输出内容为xiao</span></span><br><span class="line">&#125;</span><br><span class="line">scanner.close();<span class="comment">//使用完一定要给关闭掉，节省资源</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个扫描对象，用于接收数据</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入数据&quot;</span>);</span><br><span class="line"><span class="comment">//判断用户有没有输入字符</span></span><br><span class="line"><span class="keyword">if</span>(scanner.hasNextLine())&#123;</span><br><span class="line"><span class="comment">//使用nextLine接收</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.nextLine();<span class="comment">//输入xiao fang</span></span><br><span class="line">System.out.println(<span class="string">&quot;输出内容为&quot;</span>+str);<span class="comment">//输出 输出内容为xiao fang</span></span><br><span class="line">&#125;</span><br><span class="line">scanner.close();<span class="comment">//使用完一定要给关闭掉，节省资源</span></span><br></pre></td></tr></table></figure><ul><li>next()与nextLine()的区别<ol><li>next()以有效字符之后的空格作为分隔符胡总和结束符，对于之前遇到的空格，next()会将其去掉；nextLine()以Enter作为结束符。</li><li>next()不能获得带有空格的字符；nextLine()能获得带有空格的字符。</li></ol></li></ul><h1 id="02-Scanner进阶使用"><a href="#02-Scanner进阶使用" class="headerlink" title="02 Scanner进阶使用"></a>02 Scanner进阶使用</h1><p>我们可以输入多个数字，并求其总数及平均值，每输入一个数字用回车确认，通过输入非数字结束输入并输出结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextDouble())&#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> scanner.nextDouble();</span><br><span class="line">            count++;</span><br><span class="line">            sum +=x;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入第&quot;</span>+count+<span class="string">&quot;个数据,总和为&quot;</span>+sum);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;总和为&quot;</span>+sum);</span><br><span class="line">        System.out.println(<span class="string">&quot;平均数为&quot;</span>+sum/count);</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-Scanner对象&quot;&gt;&lt;a href=&quot;#01-Scanner对象&quot; class=&quot;headerlink&quot; title=&quot;01 Scanner对象&quot;&gt;&lt;/a&gt;01 Scanner对象&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;基本语法：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure</summary>
      
    
    
    
    
    <category term="java基础" scheme="http://example.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java day03 基础</title>
    <link href="http://example.com/2021/07/09/java%20day03%20%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2021/07/09/java%20day03%20%E5%9F%BA%E7%A1%80/</id>
    <published>2021-07-09T08:23:23.000Z</published>
    <updated>2022-04-13T06:57:31.619Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-包机制"><a href="#01-包机制" class="headerlink" title="01 包机制"></a>01 包机制</h1><ul><li>包就是相当于一个文件夹</li><li>包语句的语法格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package pkg1.pkg2；</span></span><br><span class="line"><span class="keyword">package</span> com.fang;</span><br></pre></td></tr></table></figure><ul><li>一般利用公司域名倒置作为包名</li><li>使用某一个包的成员，需要用”import”导入，格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//import package1.package1.classname；</span></span><br><span class="line"><span class="keyword">import</span> com.fang.demo；</span><br></pre></td></tr></table></figure><h1 id="02-JavaDoc生成文档"><a href="#02-JavaDoc生成文档" class="headerlink" title="02 JavaDoc生成文档"></a>02 JavaDoc生成文档</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fang //<span class="doctag">@author</span> 用于标记作者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0 //<span class="doctag">@version</span> 用于标记当前版本，默认为1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8 //<span class="doctag">@since</span> 一般用于标记文件创建时项目当时对应的版本，跟版本号，也可以跟是一个时间，表示文件当前创建的时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name //<span class="doctag">@param</span>用于标记参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> //<span class="doctag">@return</span> 用于返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception //<span class="doctag">@throws</span> 用于抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(String name)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>使用cmd生成文档</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javadoc -encoding UTF-<span class="number">8</span> -charset UTF-<span class="number">8</span> Hello.java</span><br></pre></td></tr></table></figure><ol start="2"><li>使用IDEA生成文档</li></ol><p>在IDEA找到工具里的生成JavaDoc文档，配置其他命令行参数-encoding UTF-8 -charset UTF-8防止乱码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-包机制&quot;&gt;&lt;a href=&quot;#01-包机制&quot; class=&quot;headerlink&quot; title=&quot;01 包机制&quot;&gt;&lt;/a&gt;01 包机制&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;包就是相当于一个文件夹&lt;/li&gt;
&lt;li&gt;包语句的语法格式：&lt;/li&gt;
&lt;/ul&gt;
&lt;figur</summary>
      
    
    
    
    
    <category term="java基础" scheme="http://example.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java day02 基础</title>
    <link href="http://example.com/2021/07/08/java%20day02%20%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2021/07/08/java%20day02%20%E5%9F%BA%E7%A1%80/</id>
    <published>2021-07-08T12:36:44.000Z</published>
    <updated>2022-04-13T06:56:48.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-变量、作用域、常量"><a href="#01-变量、作用域、常量" class="headerlink" title="01 变量、作用域、常量"></a>01 变量、作用域、常量</h1><h2 id="1-1-变量"><a href="#1-1-变量" class="headerlink" title="1.1 变量"></a>1.1 变量</h2><ol><li>变量的格式： 数据类型  变量名 &#x3D; 值</li><li>注意事项：<ul><li>数据类型可以是基本类型，还可以是引用类型</li><li>变量名必须是合法的标识符</li><li>变量声明必须以;结尾</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">x</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;<span class="comment">//基本数据类型</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//基本数据类型</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;xiaofang&quot;</span>;<span class="comment">//引用类型</span></span><br></pre></td></tr></table></figure><h2 id="1-2-变量作用域"><a href="#1-2-变量作用域" class="headerlink" title="1.2 变量作用域"></a>1.2 变量作用域</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">double</span> <span class="variable">salary</span> <span class="operator">=</span> <span class="number">1000</span>;<span class="comment">//类变量在类中不在方法中，由static修饰符修饰</span></span><br><span class="line">    String name;<span class="comment">//实例变量从属于对象，整型变量默认值为0；布尔变量默认值为false;基本数据类型外默认值都为null。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//定义在方法中为局部变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">        System.out.println(i);<span class="comment">//输出10</span></span><br><span class="line">        <span class="comment">//使用实例变量如下所示：</span></span><br><span class="line">        <span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hello</span>();<span class="comment">//变量类型 变量名 = new 变量类型</span></span><br><span class="line">        System.out.println(hello.name);<span class="comment">//输出null</span></span><br><span class="line">        <span class="comment">//类变量</span></span><br><span class="line">        System.out.println(salary);<span class="comment">//输出1000.0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-常量"><a href="#1-3-常量" class="headerlink" title="1.3 常量"></a>1.3 常量</h2><ol><li>常量初始化后，值不能再改变</li><li>初始化格式：final 常量名 &#x3D; 值；</li><li>常量名都用大写字母</li></ol><hr><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><ul><li>类成员变量：首字母小写+驼峰原则：除了第一个单词外，后面单词首字母大写。xiaoFang</li><li>局部变量：首字母小写+驼峰原则</li><li>常量：大写字母+下划线：XIAO_FANG</li><li>类名：首字母大写+驼峰原则</li><li>方法名：小写+驼峰原则</li></ul><h1 id="02-运算符"><a href="#02-运算符" class="headerlink" title="02 运算符"></a>02 运算符</h1><h2 id="2-1-二元运算符"><a href="#2-1-二元运算符" class="headerlink" title="2.1 二元运算符"></a>2.1 二元运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">21</span>;</span><br><span class="line">System.out.println(a+b);<span class="comment">//输出30</span></span><br><span class="line">System.out.println(a-b);<span class="comment">//输出-10</span></span><br><span class="line">System.out.println(a*b);<span class="comment">//输出200</span></span><br><span class="line">System.out.println(a/b);<span class="comment">//由于int类型，需要舍弃小数点，所以输出0</span></span><br><span class="line">System.out.println(a/(<span class="type">double</span>)b);<span class="comment">//输出0.5</span></span><br><span class="line">System.out.println(c%a);<span class="comment">//输出1(取余)</span></span><br></pre></td></tr></table></figure><h2 id="2-2-类型转换"><a href="#2-2-类型转换" class="headerlink" title="2.2 类型转换"></a>2.2 类型转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">101010120121L</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="comment">//如果有一个数是long类型，那么最后输出也是long类型</span></span><br><span class="line">System.out.println(a+b+c+d);<span class="comment">//输出101010120159</span></span><br><span class="line"><span class="comment">//下面自动转为int类型</span></span><br><span class="line">System.out.println(b+c+d);<span class="comment">//输出38</span></span><br><span class="line">System.out.println(c+d);<span class="comment">//输出18</span></span><br></pre></td></tr></table></figure><h2 id="2-3-关系运算符"><a href="#2-3-关系运算符" class="headerlink" title="2.3 关系运算符"></a>2.3 关系运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关系运算符输出结果是布尔类型</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">System.out.println(a&gt;b);<span class="comment">//输出false</span></span><br><span class="line">System.out.println(a&lt;b);<span class="comment">//输出true</span></span><br><span class="line">System.out.println(a==b);<span class="comment">//输出false</span></span><br><span class="line">System.out.println(a!=b);<span class="comment">//输出true</span></span><br></pre></td></tr></table></figure><h2 id="2-4-一元运算符"><a href="#2-4-一元运算符" class="headerlink" title="2.4 一元运算符"></a>2.4 一元运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a++;<span class="comment">//先赋值再自增</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ++a;<span class="comment">//先自增再赋值</span></span><br><span class="line">System.out.println(a);<span class="comment">//输出12</span></span><br><span class="line">System.out.println(b);<span class="comment">//输出10</span></span><br><span class="line">System.out.println(c);<span class="comment">//输出12</span></span><br></pre></td></tr></table></figure><h2 id="2-5-Math类"><a href="#2-5-Math类" class="headerlink" title="2.5 Math类"></a>2.5 Math类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">pow</span> <span class="operator">=</span>Math.pow(<span class="number">3</span>,<span class="number">2</span>);<span class="comment">//幂运算</span></span><br><span class="line">System.out.println(pow);<span class="comment">//输出9.0</span></span><br></pre></td></tr></table></figure><h2 id="2-6-逻辑运算符"><a href="#2-6-逻辑运算符" class="headerlink" title="2.6 逻辑运算符"></a>2.6 逻辑运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//逻辑与，两个变量都为真，结果才为真，否则为假</span></span><br><span class="line">System.out.println(<span class="string">&quot;a &amp;&amp; b:&quot;</span>+(a &amp;&amp; b));<span class="comment">//输出a &amp;&amp; b:false</span></span><br><span class="line"><span class="comment">//逻辑或，两个变量只要有一个为真，结果就为真</span></span><br><span class="line">System.out.println(<span class="string">&quot;a || b:&quot;</span>+(a || b));<span class="comment">//输出a || b:true</span></span><br><span class="line"><span class="comment">//逻辑否，真变假，假变真</span></span><br><span class="line">System.out.println(<span class="string">&quot;!(a &amp;&amp; b):&quot;</span>+!(a &amp;&amp; b));<span class="comment">//输出!(a &amp;&amp; b):true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//短路原则</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">d</span> <span class="operator">=</span> (c&lt;<span class="number">4</span>)&amp;&amp;(c++&lt;<span class="number">4</span>);<span class="comment">//与运算，当第一个为假时，结果就以确定，不再进行下面操作。</span></span><br><span class="line">System.out.println(d);<span class="comment">//输出false</span></span><br><span class="line">System.out.println(c);<span class="comment">//输出5</span></span><br></pre></td></tr></table></figure><h2 id="2-7-位运算符"><a href="#2-7-位运算符" class="headerlink" title="2.7 位运算符"></a>2.7 位运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A = <span class="number">0011</span> <span class="number">1100</span>;</span><br><span class="line">B = <span class="number">0000</span> <span class="number">1101</span>;</span><br><span class="line">A&amp;B = <span class="number">0000</span> <span class="number">1100</span>;<span class="comment">//位与运算，同1才为1，否则为0</span></span><br><span class="line">A|B = <span class="number">0011</span> <span class="number">1101</span>;<span class="comment">//位或运算，有一就为1，否则为0</span></span><br><span class="line">A^B = <span class="number">0011</span> <span class="number">0001</span>;<span class="comment">//位异或运算，相同为0，不同为1</span></span><br><span class="line">~A = <span class="number">1100</span> <span class="number">0011</span>;<span class="comment">//0变1，1变0</span></span><br><span class="line"><span class="number">2</span>&gt;&gt;<span class="number">1</span><span class="comment">// 右移/2输出1</span></span><br><span class="line"><span class="number">2</span>&lt;&lt;<span class="number">1</span><span class="comment">//左移*2输出4</span></span><br></pre></td></tr></table></figure><h1 id="2-8-字符串连接符"><a href="#2-8-字符串连接符" class="headerlink" title="2.8 字符串连接符"></a>2.8 字符串连接符</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>+a+b);<span class="comment">//输出1020，String类型在前面+用于连接</span></span><br><span class="line">System.out.println(a+b+<span class="string">&quot;&quot;</span>);<span class="comment">//输出30，String类型在后面正常输出</span></span><br></pre></td></tr></table></figure><h1 id="2-9-三元运算符"><a href="#2-9-三元运算符" class="headerlink" title="2.9 三元运算符"></a>2.9 三元运算符</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//x ? y : z</span></span><br><span class="line"><span class="comment">//如果x==true,则结果为y，否则为z</span></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span><span class="number">62</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> x&gt;<span class="number">60</span> ? <span class="string">&quot;及格&quot;</span> : <span class="string">&quot;不及格&quot;</span>;</span><br><span class="line">System.out.println(type);<span class="comment">//输出及格</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-变量、作用域、常量&quot;&gt;&lt;a href=&quot;#01-变量、作用域、常量&quot; class=&quot;headerlink&quot; title=&quot;01 变量、作用域、常量&quot;&gt;&lt;/a&gt;01 变量、作用域、常量&lt;/h1&gt;&lt;h2 id=&quot;1-1-变量&quot;&gt;&lt;a href=&quot;#1-1-变量&quot;</summary>
      
    
    
    
    
    <category term="java基础" scheme="http://example.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java day01 基础</title>
    <link href="http://example.com/2021/07/07/java%20day01%20%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2021/07/07/java%20day01%20%E5%9F%BA%E7%A1%80/</id>
    <published>2021-07-07T10:59:20.000Z</published>
    <updated>2022-04-13T06:56:04.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-注释"><a href="#01-注释" class="headerlink" title="01 注释"></a>01 注释</h1><p><strong>单行注释：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释可以注释一行文字</span></span><br></pre></td></tr></table></figure><p><strong>多行注释：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释可以注释一段文字</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>文档注释：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*配合JavaDoc使用</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="02-标识符与关键字"><a href="#02-标识符与关键字" class="headerlink" title="02 标识符与关键字"></a>02 标识符与关键字</h1><p><strong>关键字：</strong>class,public等Java硬性要求的代码。</p><p><strong>标识符：</strong>类名，变量名，方法名都是标识符。</p><p><strong>标识符的注意事项：</strong></p><ul><li><p>所有标识符都应该以字母，$，或者下划线(_)开始</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;xiaofang&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">$name</span> <span class="operator">=</span> <span class="string">&quot;xiaofang&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">_name</span> <span class="operator">=</span> <span class="string">&quot;xiaofang&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>首字母之后可以是字母，$，或者下划线(_)或者数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">A$</span> <span class="operator">=</span> <span class="string">&quot;xiaofang&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">A_</span> <span class="operator">=</span> <span class="string">&quot;xiaofang&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">A1</span> <span class="operator">=</span> <span class="string">&quot;xiaofang&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>不能使用关键字作为变量名或方法名</p></li><li><p>标识符不建议使用中文</p></li><li><p>标识符是大小写敏感的</p></li></ul><h1 id="03-数据类型"><a href="#03-数据类型" class="headerlink" title="03 数据类型"></a>03 数据类型</h1><p>Java是强类型语言，要求所有变量都必须定义后才能使用。</p><hr><p>基本数据类型如下表所示：</p><table><thead><tr><th align="center">整数类型</th><th align="center">浮点类型</th><th align="center">字符类型</th><th align="center">布尔类型</th></tr></thead><tbody><tr><td align="center">byte占1字节</td><td align="center">float占4字节</td><td align="center">char占2字节</td><td align="center">true占1位</td></tr><tr><td align="center">short占2字节</td><td align="center">double占8字节</td><td align="center"></td><td align="center">false占1位</td></tr><tr><td align="center">int占4字节</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">long占8字节</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//整数</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">15</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">num3</span> <span class="operator">=</span> <span class="number">30L</span>;<span class="comment">//long类型要在数字后加上L</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//浮点数</span></span><br><span class="line"><span class="type">float</span> <span class="variable">num5</span> <span class="operator">=</span> <span class="number">10.1f</span>;<span class="comment">//float类型要在数字后加上f</span></span><br><span class="line"><span class="type">double</span> <span class="variable">num6</span> <span class="operator">=</span> <span class="number">10.33333</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符</span></span><br><span class="line"><span class="type">char</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&#x27;f&#x27;</span>;<span class="comment">//注意String不是关键字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//布尔</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag1</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p><strong>字节与位的关系</strong>：1 Byte&#x3D;8 bit</p><hr><p><strong>数据类型面试拓展</strong></p><ul><li>整型拓展：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//输出10</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">010</span>;<span class="comment">//八进制0开头 输出8</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">0x10</span>;<span class="comment">//十六进制0x开头（范围：0~9 A~F） 输出16</span></span><br></pre></td></tr></table></figure><ul><li><p>浮点数拓展：</p><p>由于浮点数有舍入误差，接近但不等于的特点，最好不适用浮点数进行比较，可以使用BigDecimal提供的方法进行比较。</p></li><li><p>字符拓展：</p><p>所有字符的本质还是数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&#x27;小&#x27;</span>;</span><br><span class="line">System.out.println(s1);<span class="comment">//输出 a</span></span><br><span class="line">System.out.println((<span class="type">int</span>)s1);<span class="comment">//强制转换 输出 97</span></span><br><span class="line">System.out.println(s2);<span class="comment">//输出 小</span></span><br><span class="line">System.out.println((<span class="type">int</span>)s2);<span class="comment">//强制转换 输出 23567</span></span><br></pre></td></tr></table></figure></li><li><p>布尔拓展：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span><span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;&#125; == <span class="keyword">if</span>(flag==<span class="literal">true</span>)&#123;&#125;<span class="comment">//二者是等价的</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="04-类型转换"><a href="#04-类型转换" class="headerlink" title="04 类型转换"></a>04 类型转换</h1><ul><li>强制类型转换：一般是高容量转换到低容量的转换。格式：**(类型)变量名**</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)i;</span><br><span class="line">System.out.println(i);<span class="comment">//输出12</span></span><br><span class="line">System.out.println(b);<span class="comment">//输出12</span></span><br></pre></td></tr></table></figure><ul><li><p>自动类型转化：低容量到高容量直接转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">低 -------------------------------------&gt;高</span><br><span class="line"> <span class="type">byte</span>,<span class="type">short</span>,<span class="type">char</span>-&gt;<span class="type">int</span>-&gt;<span class="type">long</span>-&gt;<span class="type">float</span>-&gt;<span class="type">double</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> i;</span><br><span class="line">System.out.println(i);<span class="comment">//输出12</span></span><br><span class="line">System.out.println(b);<span class="comment">//输出12.0</span></span><br></pre></td></tr></table></figure></li><li><p>注意点</p><ol><li>布尔类型不能进行转换</li><li>转换的时候可能出现内存溢出，或者精度问题</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//溢出问题</span></span><br><span class="line"><span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">10_0000_0000</span>;<span class="comment">//数字之间可以用下划线分割</span></span><br><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> money*year;<span class="comment">//计算时溢出 输出为-1474836480</span></span><br><span class="line"><span class="type">long</span> <span class="variable">total1</span> <span class="operator">=</span> money*year;<span class="comment">//默认为int类型，转换之前就出了问题。所以输出依旧是-1474836480</span></span><br><span class="line"><span class="type">long</span> <span class="variable">total2</span> <span class="operator">=</span> money*((<span class="type">long</span>)year);<span class="comment">//输出20000000000</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//精度问题</span></span><br><span class="line">System.out.println((<span class="type">int</span>)<span class="number">23.7</span>);<span class="comment">//输出23</span></span><br><span class="line">System.out.println((<span class="type">int</span>)-<span class="number">20.4f</span>);<span class="comment">//输出-20</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-注释&quot;&gt;&lt;a href=&quot;#01-注释&quot; class=&quot;headerlink&quot; title=&quot;01 注释&quot;&gt;&lt;/a&gt;01 注释&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;单行注释：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;</summary>
      
    
    
    
    
    <category term="java基础" scheme="http://example.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java day01 Typora</title>
    <link href="http://example.com/2021/07/06/java%20day01%20Typora/"/>
    <id>http://example.com/2021/07/06/java%20day01%20Typora/</id>
    <published>2021-07-06T09:04:35.000Z</published>
    <updated>2022-04-13T06:54:58.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Typora的使用"><a href="#Typora的使用" class="headerlink" title="Typora的使用"></a>Typora的使用</h1><p>熟练使用Markdown语法</p><h2 id="标题的使用"><a href="#标题的使用" class="headerlink" title="标题的使用"></a>标题的使用</h2><p>一级标题为**#**</p><p>二级标题为**##**</p><p>三级标题为**###**</p><h2 id="字体的使用"><a href="#字体的使用" class="headerlink" title="字体的使用"></a>字体的使用</h2><p>粗体 <strong>hello</strong>-&gt;<strong>左右两个</strong>*</p><p>斜体<em>hello</em>-&gt;<strong>左右一个</strong>*</p><p>斜体加粗<em><strong>hello</strong></em>-&gt;<strong>左右三个</strong>*</p><p>删除线<del>hello</del>-&gt;<strong>左右两个~</strong></p><h2 id="引用的使用"><a href="#引用的使用" class="headerlink" title="引用的使用"></a>引用的使用</h2><blockquote><p>引用别人文章时使用，<strong>左侧一个&gt;</strong></p></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr><ol><li><strong>左侧三个-</strong></li><li><strong>左侧三个</strong>*</li></ol><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><ol><li>本地图片</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\1\Desktop\2428\DSC_0283.JPG"                      alt="nature"                ></p><ol start="2"><li>网络图片</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-home.csdnimg.cn/images/20210706093802.jpg"                      alt="网络"                ></p><p>通用方法：**!+[名字]+()**</p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><a class="link"   href="https://www.csdn.net/?spm=1000.2115.3001.5359" >CSDN<i class="fas fa-external-link-alt"></i></a></p><p>方法：**[名称]+(链接)**</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol><li><p>前面使用的都是有序列表</p><p>方法：<strong>数字+.+空格</strong></p></li><li><p>无须列表方法：**-+空格**</p><ul><li>A</li><li>B</li></ul></li></ol><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>名字</th><th>性别</th><th>年龄</th></tr></thead><tbody><tr><td>小昊</td><td>女</td><td>20</td></tr></tbody></table><p>格式如下所示：</p><p><strong>名字|性别|年龄</strong></p><p><strong>–|–|–</strong></p><p><strong>小昊|女|20</strong></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span></span><br></pre></td></tr></table></figure><p>方法如下：</p><p><strong>英文下的&#96;&#96;&#96;(tab上面的按键)+想要写的语言</strong></p><h2 id="被忽略的windows快捷键"><a href="#被忽略的windows快捷键" class="headerlink" title="被忽略的windows快捷键"></a>被忽略的windows快捷键</h2><ol><li><strong>alt+F4</strong>：关闭所在页面</li><li><strong>shift+delete</strong>：永久删除</li><li><strong>windows+tab</strong>：切换程序</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Typora的使用&quot;&gt;&lt;a href=&quot;#Typora的使用&quot; class=&quot;headerlink&quot; title=&quot;Typora的使用&quot;&gt;&lt;/a&gt;Typora的使用&lt;/h1&gt;&lt;p&gt;熟练使用Markdown语法&lt;/p&gt;
&lt;h2 id=&quot;标题的使用&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
    <category term="java基础" scheme="http://example.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
