<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-27T03:02:03.499Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ElasticSearch之ElasticSearch实战</title>
    <link href="http://example.com/2022/07/26/ElasticSearch%E4%B9%8BElasticSearch%E5%AE%9E%E6%88%98/"/>
    <id>http://example.com/2022/07/26/ElasticSearch%E4%B9%8BElasticSearch%E5%AE%9E%E6%88%98/</id>
    <published>2022-07-26T08:41:53.000Z</published>
    <updated>2022-07-27T03:02:03.499Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、工程创建（springboot）"><a href="#1、工程创建（springboot）" class="headerlink" title="1、工程创建（springboot）"></a>1、工程创建（springboot）</h2><p><strong>目录结构</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/CkcVQLbtvgWyDp5.png"                      alt="img"                ></p><h2 id="2、基本编码"><a href="#2、基本编码" class="headerlink" title="2、基本编码"></a>2、基本编码</h2><h3 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.6.1<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jsoup解析页面 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 解析网页 爬视频可 研究tiko --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- fastjson --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.70<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ElasticSearch --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- thymeleaf --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- web --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- devtools热部署 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- lombok 需要安装插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- test --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-导入前端素材"><a href="#2-导入前端素材" class="headerlink" title="2.导入前端素材"></a>2.导入前端素材</h3><h3 id="3-编写-application-preperties配置文件"><a href="#3-编写-application-preperties配置文件" class="headerlink" title="3.编写 application.preperties配置文件"></a>3.编写 <code>application.preperties</code>配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更改端口，防止冲突</span></span><br><span class="line"><span class="string">server.port=9999</span></span><br><span class="line"><span class="comment"># 关闭thymeleaf缓存</span></span><br><span class="line"><span class="string">spring.thymeleaf.cache=false</span></span><br></pre></td></tr></table></figure><h3 id="4-测试controller和view"><a href="#4-测试controller和view" class="headerlink" title="4.测试controller和view"></a>4.测试controller和view</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&#123;&quot;/&quot;,&quot;index&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 localhost:9999</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/PypelBZAE1VbrF4.png"                      alt="img"                ></p><blockquote><p>到这里可以先去编写爬虫，编写之后，回到这里</p></blockquote><h3 id="5-编写Config"><a href="#5-编写Config" class="headerlink" title="5.编写Config"></a>5.编写Config</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElasticSearchConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestHighLevelClient <span class="title function_">restHighLevelClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9200</span>,<span class="string">&quot;http&quot;</span>)</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-编写service"><a href="#6-编写service" class="headerlink" title="6.编写service"></a>6.编写service</h3><blockquote><p>因为是爬取的数据，那么就不走Dao，以下编写都不会编写接口，开发中必须严格要求编写</p></blockquote><p><strong>ContentService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContentService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient restHighLevelClient;</span><br><span class="line">    <span class="comment">// 1、解析数据放入 es 索引中</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">parseContent</span><span class="params">(String keyword)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 获取内容</span></span><br><span class="line">        List&lt;Content&gt; contents = HtmlParseUtil.parseJD(keyword);</span><br><span class="line">        <span class="comment">// 内容放入 es 中</span></span><br><span class="line">        <span class="type">BulkRequest</span> <span class="variable">bulkRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line">        bulkRequest.timeout(<span class="string">&quot;2m&quot;</span>); <span class="comment">// 可更具实际业务是指</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; contents.size(); i++) &#123;</span><br><span class="line">            bulkRequest.add(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;jd_goods&quot;</span>)</span><br><span class="line">                            .id(<span class="string">&quot;&quot;</span>+(i+<span class="number">1</span>))</span><br><span class="line">                            .source(JSON.toJSONString(contents.get(i)), XContentType.JSON)</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BulkResponse</span> <span class="variable">bulk</span> <span class="operator">=</span> restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">        restHighLevelClient.close();</span><br><span class="line">        <span class="keyword">return</span> !bulk.hasFailures();</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">// 2、根据keyword分页查询结果</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">search</span><span class="params">(String keyword, Integer pageIndex, Integer pageSize)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (pageIndex &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            pageIndex = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">jd_goods</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;jd_goods&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建搜索源建造者对象</span></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">searchSourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">        <span class="comment">// 条件采用：精确查询 通过keyword查字段name</span></span><br><span class="line">        <span class="type">TermQueryBuilder</span> <span class="variable">termQueryBuilder</span> <span class="operator">=</span> QueryBuilders.termQuery(<span class="string">&quot;name&quot;</span>, keyword);</span><br><span class="line">        searchSourceBuilder.query(termQueryBuilder);</span><br><span class="line">        searchSourceBuilder.timeout(<span class="keyword">new</span> <span class="title class_">TimeValue</span>(<span class="number">60</span>, TimeUnit.SECONDS));<span class="comment">// 60s</span></span><br><span class="line">        <span class="comment">// 分页</span></span><br><span class="line">        searchSourceBuilder.from(pageIndex);</span><br><span class="line">        searchSourceBuilder.size(pageSize);</span><br><span class="line">        <span class="comment">// 高亮</span></span><br><span class="line">        <span class="comment">// ....</span></span><br><span class="line">        <span class="comment">// 搜索源放入搜索请求中</span></span><br><span class="line">        jd_goods.source(searchSourceBuilder);</span><br><span class="line">        <span class="comment">// 执行查询，返回结果</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> restHighLevelClient.search(jd_goods, RequestOptions.DEFAULT);</span><br><span class="line">        restHighLevelClient.close();</span><br><span class="line">        <span class="comment">// 解析结果</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> searchResponse.getHits();</span><br><span class="line">        List&lt;Map&lt;String,Object&gt;&gt; results = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit documentFields : hits.getHits()) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; sourceAsMap = documentFields.getSourceAsMap();</span><br><span class="line">            results.add(sourceAsMap);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回查询的结果</span></span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-编写controller"><a href="#7-编写controller" class="headerlink" title="7.编写controller"></a>7.编写controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContentController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ContentService contentService;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/parse/&#123;keyword&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">parse</span><span class="params">(<span class="meta">@PathVariable(&quot;keyword&quot;)</span> String keyword)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> contentService.parseContent(keyword);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/search/&#123;keyword&#125;/&#123;pageIndex&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">parse</span><span class="params">(<span class="meta">@PathVariable(&quot;keyword&quot;)</span> String keyword,</span></span><br><span class="line"><span class="params">                                           <span class="meta">@PathVariable(&quot;pageIndex&quot;)</span> Integer pageIndex,</span></span><br><span class="line"><span class="params">                                           <span class="meta">@PathVariable(&quot;pageSize&quot;)</span> Integer pageSize)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> contentService.search(keyword,pageIndex,pageSize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-测试结果"><a href="#8-测试结果" class="headerlink" title="8.测试结果"></a>8.测试结果</h3><h4 id="8-1解析数据放入-es-索引中"><a href="#8-1解析数据放入-es-索引中" class="headerlink" title="8.1解析数据放入 es 索引中"></a>8.1解析数据放入 es 索引中</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/rNa2skHpcYziq9U.png"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/lu1icHBOw69DyjE.png"                      alt="img"                ></p><h3 id="8-2根据keyword分页查询结果"><a href="#8-2根据keyword分页查询结果" class="headerlink" title="8.2根据keyword分页查询结果"></a>8.2根据keyword分页查询结果</h3><h2 id="3、爬虫（jsoup）"><a href="#3、爬虫（jsoup）" class="headerlink" title="3、爬虫（jsoup）"></a>3、爬虫（jsoup）</h2><blockquote><p>数据获取：数据库、消息队列、爬虫、…</p></blockquote><h3 id="1-搜索京东搜索页面，并分析页面"><a href="#1-搜索京东搜索页面，并分析页面" class="headerlink" title="1.搜索京东搜索页面，并分析页面"></a>1.搜索京东搜索页面，并分析页面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//search.jd.com/search?keyword=java</span></span><br></pre></td></tr></table></figure><h4 id="1-1页面如下"><a href="#1-1页面如下" class="headerlink" title="1.1页面如下"></a>1.1页面如下</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/uzoajYpADRyiXMF.png"                      alt="img"                ></p><h4 id="1-2审查页面元素"><a href="#1-2审查页面元素" class="headerlink" title="1.2审查页面元素"></a>1.2审查页面元素</h4><p><strong>页面列表id：J_goodsList</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/3gz4XFZEJNHjqfv.png"                      alt="img"                ></p><p><strong>目标元素：img、price、name</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/Mfc74asvXuE1WUq.png"                      alt="img"                ></p><h3 id="2-爬取数据（获取请求返回的页面信息，筛选出可用的）"><a href="#2-爬取数据（获取请求返回的页面信息，筛选出可用的）" class="headerlink" title="2.爬取数据（获取请求返回的页面信息，筛选出可用的）"></a>2.爬取数据（获取请求返回的页面信息，筛选出可用的）</h3><h4 id="2-1创建HtmlParseUtil，并简单编写"><a href="#2-1创建HtmlParseUtil，并简单编写" class="headerlink" title="2.1创建HtmlParseUtil，并简单编写"></a>2.1创建HtmlParseUtil，并简单编写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HtmlParseUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/// 使用前需要联网</span></span><br><span class="line">        <span class="comment">// 请求url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://search.jd.com/search?keyword=java&quot;</span>;</span><br><span class="line">        <span class="comment">// 1.解析网页(jsoup 解析返回的对象是浏览器Document对象)</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">URL</span>(url), <span class="number">30000</span>);</span><br><span class="line">        <span class="comment">// 使用document可以使用在js对document的所有操作</span></span><br><span class="line">        <span class="comment">// 2.获取元素（通过id）</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">j_goodsList</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;J_goodsList&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.获取J_goodsList ul 每一个 li</span></span><br><span class="line">        <span class="type">Elements</span> <span class="variable">lis</span> <span class="operator">=</span> j_goodsList.getElementsByTag(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">        <span class="comment">// 4.获取li下的 img、price、name</span></span><br><span class="line">        <span class="keyword">for</span> (Element li : lis) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">img</span> <span class="operator">=</span> li.getElementsByTag(<span class="string">&quot;img&quot;</span>).eq(<span class="number">0</span>).attr(<span class="string">&quot;src&quot;</span>);<span class="comment">// 获取li下 第一张图片</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> li.getElementsByClass(<span class="string">&quot;p-name&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            <span class="type">String</span> <span class="variable">price</span> <span class="operator">=</span> li.getElementsByClass(<span class="string">&quot;p-price&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;img : &quot;</span> + img);</span><br><span class="line">            System.out.println(<span class="string">&quot;name : &quot;</span> + name);</span><br><span class="line">            System.out.println(<span class="string">&quot;price : &quot;</span> + price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/c7WY2iVC1dMxZ4k.png"                      alt="img"                ></p><p><strong>原因是啥？</strong></p><blockquote><p>一般图片特别多的网站，所有的图片都是通过延迟加载的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印标签内容</span></span><br><span class="line"><span class="type">Elements</span> <span class="variable">lis</span> <span class="operator">=</span> j_goodsList.getElementsByTag(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">System.out.println(lis);</span><br></pre></td></tr></table></figure><p>打印所有li标签，发现img标签中并没有属性src的设置，只是data-lazy-ing设置图片加载的地址</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/t4g5oPBe9IjHSEw.png"                      alt="img"                ></p><h4 id="2-2创建HtmlParseUtil、改写"><a href="#2-2创建HtmlParseUtil、改写" class="headerlink" title="2.2创建HtmlParseUtil、改写"></a>2.2创建HtmlParseUtil、改写</h4><ul><li><p>更改图片获取属性为 <code>data-lazy-img</code></p></li><li><p>与实体类结合，实体类如下</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Content</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">8049497962627482693L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String img;</span><br><span class="line">    <span class="keyword">private</span> String price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>封装为方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HtmlParseUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(parseJD(<span class="string">&quot;java&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Content&gt; <span class="title function_">parseJD</span><span class="params">(String keyword)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/// 使用前需要联网</span></span><br><span class="line">        <span class="comment">// 请求url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://search.jd.com/search?keyword=&quot;</span> + keyword;</span><br><span class="line">        <span class="comment">// 1.解析网页(jsoup 解析返回的对象是浏览器Document对象)</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">URL</span>(url), <span class="number">30000</span>);</span><br><span class="line">        <span class="comment">// 使用document可以使用在js对document的所有操作</span></span><br><span class="line">        <span class="comment">// 2.获取元素（通过id）</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">j_goodsList</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;J_goodsList&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.获取J_goodsList ul 每一个 li</span></span><br><span class="line">        <span class="type">Elements</span> <span class="variable">lis</span> <span class="operator">=</span> j_goodsList.getElementsByTag(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(lis);</span></span><br><span class="line">        <span class="comment">// 4.获取li下的 img、price、name</span></span><br><span class="line">        <span class="comment">// list存储所有li下的内容</span></span><br><span class="line">        List&lt;Content&gt; contents = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Content&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Element li : lis) &#123;</span><br><span class="line">            <span class="comment">// 由于网站图片使用懒加载，将src属性替换为data-lazy-img</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">img</span> <span class="operator">=</span> li.getElementsByTag(<span class="string">&quot;img&quot;</span>).eq(<span class="number">0</span>).attr(<span class="string">&quot;data-lazy-img&quot;</span>);<span class="comment">// 获取li下 第一张图片</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> li.getElementsByClass(<span class="string">&quot;p-name&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            <span class="type">String</span> <span class="variable">price</span> <span class="operator">=</span> li.getElementsByClass(<span class="string">&quot;p-price&quot;</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            <span class="comment">// 封装为对象</span></span><br><span class="line">            <span class="type">Content</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Content</span>(name,img,price);</span><br><span class="line">            <span class="comment">// 添加到list中</span></span><br><span class="line">            contents.add(content);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        System.out.println(contents);</span></span><br><span class="line">        <span class="comment">// 5.返回 list</span></span><br><span class="line">        <span class="keyword">return</span> contents;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果展示</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/n6tGhsMVz2RTH9X.png"                      alt="img"                ></p><h2 id="4、搜索高亮"><a href="#4、搜索高亮" class="headerlink" title="4、搜索高亮"></a>4、搜索高亮</h2><blockquote><p>在3、的基础上添加内容</p></blockquote><h3 id="4-1ContentService"><a href="#4-1ContentService" class="headerlink" title="4.1ContentService"></a>4.1ContentService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3、 在2的基础上进行高亮查询</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">highlightSearch</span><span class="params">(String keyword, Integer pageIndex, Integer pageSize)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;jd_goods&quot;</span>);</span><br><span class="line">    <span class="type">SearchSourceBuilder</span> <span class="variable">searchSourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">    <span class="comment">// 精确查询，添加查询条件</span></span><br><span class="line">    <span class="type">TermQueryBuilder</span> <span class="variable">termQueryBuilder</span> <span class="operator">=</span> QueryBuilders.termQuery(<span class="string">&quot;name&quot;</span>, keyword);</span><br><span class="line">    searchSourceBuilder.timeout(<span class="keyword">new</span> <span class="title class_">TimeValue</span>(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">    searchSourceBuilder.query(termQueryBuilder);</span><br><span class="line">    <span class="comment">// 分页</span></span><br><span class="line">    searchSourceBuilder.from(pageIndex);</span><br><span class="line">    searchSourceBuilder.size(pageSize);</span><br><span class="line">    <span class="comment">// 高亮 =========</span></span><br><span class="line">    <span class="type">HighlightBuilder</span> <span class="variable">highlightBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>();</span><br><span class="line">    highlightBuilder.field(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    highlightBuilder.preTags(<span class="string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>);</span><br><span class="line">    highlightBuilder.postTags(<span class="string">&quot;&lt;/span&gt;&quot;</span>);</span><br><span class="line">    searchSourceBuilder.highlighter(highlightBuilder);</span><br><span class="line">    <span class="comment">// 执行查询</span></span><br><span class="line">    searchRequest.source(searchSourceBuilder);</span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 解析结果 ==========</span></span><br><span class="line">    <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> searchResponse.getHits();</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; results = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit documentFields : hits.getHits()) &#123;</span><br><span class="line">        <span class="comment">// 使用新的字段值（高亮），覆盖旧的字段值</span></span><br><span class="line">        Map&lt;String, Object&gt; sourceAsMap = documentFields.getSourceAsMap();</span><br><span class="line">        <span class="comment">// 高亮字段</span></span><br><span class="line">        Map&lt;String, HighlightField&gt; highlightFields = documentFields.getHighlightFields();</span><br><span class="line">        <span class="type">HighlightField</span> <span class="variable">name</span> <span class="operator">=</span> highlightFields.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">// 替换</span></span><br><span class="line">        <span class="keyword">if</span> (name != <span class="literal">null</span>)&#123;</span><br><span class="line">            Text[] fragments = name.fragments();</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">new_name</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span> (Text text : fragments) &#123;</span><br><span class="line">                new_name.append(text);</span><br><span class="line">            &#125;</span><br><span class="line">            sourceAsMap.put(<span class="string">&quot;name&quot;</span>,new_name.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        results.add(sourceAsMap);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2ContentController"><a href="#4-2ContentController" class="headerlink" title="4.2ContentController"></a>4.2ContentController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/h_search/&#123;keyword&#125;/&#123;pageIndex&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">highlightParse</span><span class="params">(<span class="meta">@PathVariable(&quot;keyword&quot;)</span> String keyword,</span></span><br><span class="line"><span class="params">                                       <span class="meta">@PathVariable(&quot;pageIndex&quot;)</span> Integer pageIndex,</span></span><br><span class="line"><span class="params">                                       <span class="meta">@PathVariable(&quot;pageSize&quot;)</span> Integer pageSize)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> contentService.highlightSearch(keyword,pageIndex,pageSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3结果展示"><a href="#4-3结果展示" class="headerlink" title="4.3结果展示"></a>4.3结果展示</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/pTNrncGS43DU8fu.png"                      alt="img"                ></p><h2 id="5、前后端分离（简单使用Vue）"><a href="#5、前后端分离（简单使用Vue）" class="headerlink" title="5、前后端分离（简单使用Vue）"></a>5、前后端分离（简单使用Vue）</h2><blockquote><p>删除Controller 方法上的 <a class="link"   href="https://github.com/ResponseBody" >@ResponseBody<i class="fas fa-external-link-alt"></i></a>注解</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/7YkxcN3ObJSpAqu.png"                      alt="img"                ></p><h3 id="5-1下载并引入Vue-min-js和axios-js"><a href="#5-1下载并引入Vue-min-js和axios-js" class="headerlink" title="5.1下载并引入Vue.min.js和axios.js"></a>5.1下载并引入Vue.min.js和axios.js</h3><blockquote><p>如果安装了nodejs，可以按如下步骤，没有可以到后面素材处下载</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install vue</span><br><span class="line">npm install axios</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/ChdTpvF9WnGrjM5.png"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/oPHI1BgFxGVLsD4.png"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/KTfzU3YLgdnXN56.png"                      alt="img"                ></p><h3 id="5-2修改静态页面"><a href="#5-2修改静态页面" class="headerlink" title="5.2修改静态页面"></a>5.2修改静态页面</h3><h4 id="5-2-1引入js"><a href="#5-2-1引入js" class="headerlink" title="5.2.1引入js"></a>5.2.1引入js</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script th:src=&quot;@&#123;/js/vue.min.js&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script th:src=&quot;@&#123;/js/axios.min.js&#125;&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="5-2-2修改后的index-html"><a href="#5-2-2修改后的index-html" class="headerlink" title="5.2.2修改后的index.html"></a>5.2.2修改后的index.html</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;/&gt;</span><br><span class="line">    &lt;title&gt;狂神说Java-ES仿京东实战&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; th:href=&quot;@&#123;/css/style.css&#125;&quot;/&gt;</span><br><span class="line">    &lt;script th:src=&quot;@&#123;/js/jquery.min.js&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body class=&quot;pg&quot;&gt;</span><br><span class="line">&lt;div class=&quot;page&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot; class=&quot; mallist tmall- page-not-market &quot;&gt;</span><br><span class="line">        &lt;!-- 头部搜索 --&gt;</span><br><span class="line">        &lt;div id=&quot;header&quot; class=&quot; header-list-app&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;headerLayout&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;headerCon &quot;&gt;</span><br><span class="line">                    &lt;!-- Logo--&gt;</span><br><span class="line">                    &lt;h1 id=&quot;mallLogo&quot;&gt;</span><br><span class="line">                        &lt;img th:src=&quot;@&#123;/images/jdlogo.png&#125;&quot; alt=&quot;&quot;&gt;</span><br><span class="line">                    &lt;/h1&gt;</span><br><span class="line">                    &lt;div class=&quot;header-extra&quot;&gt;</span><br><span class="line">                        &lt;!--搜索--&gt;</span><br><span class="line">                        &lt;div id=&quot;mallSearch&quot; class=&quot;mall-search&quot;&gt;</span><br><span class="line">                            &lt;form name=&quot;searchTop&quot; class=&quot;mallSearch-form clearfix&quot;&gt;</span><br><span class="line">                                &lt;fieldset&gt;</span><br><span class="line">                                    &lt;legend&gt;天猫搜索&lt;/legend&gt;</span><br><span class="line">                                    &lt;div class=&quot;mallSearch-input clearfix&quot;&gt;</span><br><span class="line">                                        &lt;div class=&quot;s-combobox&quot; id=&quot;s-combobox-685&quot;&gt;</span><br><span class="line">                                            &lt;div class=&quot;s-combobox-input-wrap&quot;&gt;</span><br><span class="line">                                                &lt;input v-model=&quot;keyword&quot;  type=&quot;text&quot; autocomplete=&quot;off&quot; id=&quot;mq&quot;</span><br><span class="line">                                                       class=&quot;s-combobox-input&quot;  aria-haspopup=&quot;true&quot;&gt;</span><br><span class="line">                                            &lt;/div&gt;</span><br><span class="line">                                        &lt;/div&gt;</span><br><span class="line">                                        &lt;button type=&quot;submit&quot; @click.prevent=&quot;searchKey&quot; id=&quot;searchbtn&quot;&gt;搜索&lt;/button&gt;</span><br><span class="line">                                    &lt;/div&gt;</span><br><span class="line">                                &lt;/fieldset&gt;</span><br><span class="line">                            &lt;/form&gt;</span><br><span class="line">                            &lt;ul class=&quot;relKeyTop&quot;&gt;</span><br><span class="line">                                &lt;li&gt;&lt;a&gt;狂神说Java&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                &lt;li&gt;&lt;a&gt;狂神说前端&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                &lt;li&gt;&lt;a&gt;狂神说Linux&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                &lt;li&gt;&lt;a&gt;狂神说大数据&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                &lt;li&gt;&lt;a&gt;狂神聊理财&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;/ul&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 商品详情页面 --&gt;</span><br><span class="line">        &lt;div id=&quot;content&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">                &lt;!-- 品牌分类 --&gt;</span><br><span class="line">                &lt;form class=&quot;navAttrsForm&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;attrs j_NavAttrs&quot; style=&quot;display:block&quot;&gt;</span><br><span class="line">                        &lt;div class=&quot;brandAttr j_nav_brand&quot;&gt;</span><br><span class="line">                            &lt;div class=&quot;j_Brand attr&quot;&gt;</span><br><span class="line">                                &lt;div class=&quot;attrKey&quot;&gt;</span><br><span class="line">                                    品牌</span><br><span class="line">                                &lt;/div&gt;</span><br><span class="line">                                &lt;div class=&quot;attrValues&quot;&gt;</span><br><span class="line">                                    &lt;ul class=&quot;av-collapse row-2&quot;&gt;</span><br><span class="line">                                        &lt;li&gt;&lt;a href=&quot;#&quot;&gt; 狂神说 &lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                        &lt;li&gt;&lt;a href=&quot;#&quot;&gt; Java &lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                    &lt;/ul&gt;</span><br><span class="line">                                &lt;/div&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/form&gt;</span><br><span class="line">                &lt;!-- 排序规则 --&gt;</span><br><span class="line">                &lt;div class=&quot;filter clearfix&quot;&gt;</span><br><span class="line">                    &lt;a class=&quot;fSort fSort-cur&quot;&gt;综合&lt;i class=&quot;f-ico-arrow-d&quot;&gt;&lt;/i&gt;&lt;/a&gt;</span><br><span class="line">                    &lt;a class=&quot;fSort&quot;&gt;人气&lt;i class=&quot;f-ico-arrow-d&quot;&gt;&lt;/i&gt;&lt;/a&gt;</span><br><span class="line">                    &lt;a class=&quot;fSort&quot;&gt;新品&lt;i class=&quot;f-ico-arrow-d&quot;&gt;&lt;/i&gt;&lt;/a&gt;</span><br><span class="line">                    &lt;a class=&quot;fSort&quot;&gt;销量&lt;i class=&quot;f-ico-arrow-d&quot;&gt;&lt;/i&gt;&lt;/a&gt;</span><br><span class="line">                    &lt;a class=&quot;fSort&quot;&gt;价格&lt;i class=&quot;f-ico-triangle-mt&quot;&gt;&lt;/i&gt;&lt;i class=&quot;f-ico-triangle-mb&quot;&gt;&lt;/i&gt;&lt;/a&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;!-- 商品详情 --&gt;</span><br><span class="line">                &lt;div class=&quot;view grid-nosku&quot; &gt;</span><br><span class="line">                    &lt;div class=&quot;product&quot; v-for=&quot;result in results&quot;&gt;</span><br><span class="line">                        &lt;div class=&quot;product-iWrap&quot;&gt;</span><br><span class="line">                            &lt;!--商品封面--&gt;</span><br><span class="line">                            &lt;div class=&quot;productImg-wrap&quot;&gt;</span><br><span class="line">                                &lt;a class=&quot;productImg&quot;&gt;</span><br><span class="line">                                    &lt;img :src=&quot;result.img&quot;&gt;</span><br><span class="line">                                &lt;/a&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                            &lt;!--价格--&gt;</span><br><span class="line">                            &lt;p class=&quot;productPrice&quot;&gt;</span><br><span class="line">                                &lt;em v-text=&quot;result.price&quot;&gt;&lt;/em&gt;</span><br><span class="line">                            &lt;/p&gt;</span><br><span class="line">                            &lt;!--标题--&gt;</span><br><span class="line">                            &lt;p class=&quot;productTitle&quot;&gt;</span><br><span class="line">                                &lt;a v-html=&quot;result.name&quot;&gt;&lt;/a&gt;</span><br><span class="line">                            &lt;/p&gt;</span><br><span class="line">                            &lt;!-- 店铺名 --&gt;</span><br><span class="line">                            &lt;div class=&quot;productShop&quot;&gt;</span><br><span class="line">                                &lt;span&gt;店铺： 狂神说Java &lt;/span&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                            &lt;!-- 成交信息 --&gt;</span><br><span class="line">                            &lt;p class=&quot;productStatus&quot;&gt;</span><br><span class="line">                                &lt;span&gt;月成交&lt;em&gt;999笔&lt;/em&gt;&lt;/span&gt;</span><br><span class="line">                                &lt;span&gt;评价 &lt;a&gt;3&lt;/a&gt;&lt;/span&gt;</span><br><span class="line">                            &lt;/p&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script th:src=&quot;@&#123;/js/vue.min.js&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script th:src=&quot;@&#123;/js/axios.min.js&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            &quot;keyword&quot;: &#x27;&#x27;, // 搜索的关键字</span><br><span class="line">            &quot;results&quot;:[] // 后端返回的结果</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            searchKey()&#123;</span><br><span class="line">                var keyword = this.keyword;</span><br><span class="line">                console.log(keyword);</span><br><span class="line">                axios.get(&#x27;h_search/&#x27;+keyword+&#x27;/0/20&#x27;).then(response=&gt;&#123;</span><br><span class="line">                    console.log(response.data);</span><br><span class="line">                    this.results=response.data;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="5-2-3测试"><a href="#5-2-3测试" class="headerlink" title="5.2.3测试"></a>5.2.3测试</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/N5UwlpWKZXE9srq.png"                      alt="img"                ></p><h2 id="6、安装包及前端素材"><a href="#6、安装包及前端素材" class="headerlink" title="6、安装包及前端素材"></a>6、安装包及前端素材</h2><p>链接: <a class="link"   href="https://pan.baidu.com/s/14CIHvUmXsK_8KHRrXkH1iA" >https://pan.baidu.com/s/14CIHvUmXsK_8KHRrXkH1iA<i class="fas fa-external-link-alt"></i></a> 提取码: 2n99 复制这段内容后打开百度网盘手机App，操作更方便哦</p><p>使用term（精确查询）时，三个问题，问题如下：</p><ul><li><p>字段值必须是一个词（索引中存在的词），才能匹配</p><ul><li><p>问题：中文字符串，term查询时无法查询到数据（比如，“编程”两字在文档中存在，但是搜索不到）</p></li><li><p>原因：索引为配置中文分词器（默认使用standard，即所有中文字符串都会被切分为单个中文汉字作为单词），所以没有超过1个汉字的词，也就无法匹配，进而查不到数据</p></li><li><p>解决：创建索引时配置中文分词器，如</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT example</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span>  <span class="comment">// ik分词器</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>查询的英文字符只能是小写，大写都无效</p></li><li><p>查询时英文单词必须是完整的</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、工程创建（springboot）&quot;&gt;&lt;a href=&quot;#1、工程创建（springboot）&quot; class=&quot;headerlink&quot; title=&quot;1、工程创建（springboot）&quot;&gt;&lt;/a&gt;1、工程创建（springboot）&lt;/h2&gt;&lt;p&gt;&lt;stron</summary>
      
    
    
    
    
    <category term="ElasticSearch" scheme="http://example.com/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch之SpringBoot整合</title>
    <link href="http://example.com/2022/07/26/ElasticSearch%E4%B9%8BSpringBoot%E6%95%B4%E5%90%88/"/>
    <id>http://example.com/2022/07/26/ElasticSearch%E4%B9%8BSpringBoot%E6%95%B4%E5%90%88/</id>
    <published>2022-07-26T08:40:56.000Z</published>
    <updated>2022-07-27T02:54:04.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、创建工程"><a href="#1、创建工程" class="headerlink" title="1、创建工程"></a>1、创建工程</h2><p><strong>目录结构</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/aerSR36T7xGgOJd.png"                      alt="目录结构"                ></p><h2 id="2、导入依赖"><a href="#2、导入依赖" class="headerlink" title="2、导入依赖"></a>2、导入依赖</h2><blockquote><p>注意依赖版本和安装的版本一致</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 统一版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.6.1<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>导入elasticsearch</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>提前导入fastjson、lombok</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.70<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- lombok需要安装插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、创建并编写配置类"><a href="#3、创建并编写配置类" class="headerlink" title="3、创建并编写配置类"></a>3、创建并编写配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElasticSearchConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 注册 rest高级客户端 </span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestHighLevelClient <span class="title function_">restHighLevelClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9200</span>,<span class="string">&quot;http&quot;</span>)</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、创建并编写实体类"><a href="#4、创建并编写实体类" class="headerlink" title="4、创建并编写实体类"></a>4、创建并编写实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">3843548915035470817L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h2><blockquote><p>所有测试均在 <code>SpringbootElasticsearchApplicationTests</code>中编写</p></blockquote><h3 id="1-注入-RestHighLevelClient"><a href="#1-注入-RestHighLevelClient" class="headerlink" title="1.注入 RestHighLevelClient"></a>1.注入 RestHighLevelClient</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> RestHighLevelClient restHighLevelClient;</span><br></pre></td></tr></table></figure><h3 id="2-索引的操作"><a href="#2-索引的操作" class="headerlink" title="2.索引的操作"></a>2.索引的操作</h3><h4 id="2-1索引的创建"><a href="#2-1索引的创建" class="headerlink" title="2.1索引的创建"></a>2.1索引的创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试索引的创建， Request PUT liuyou_index</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreateIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">CreateIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateIndexRequest</span>(<span class="string">&quot;liuyou_index&quot;</span>);</span><br><span class="line">    <span class="type">CreateIndexResponse</span> <span class="variable">response</span> <span class="operator">=</span> restHighLevelClient.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(response.isAcknowledged());<span class="comment">// 查看是否创建成功</span></span><br><span class="line">    System.out.println(response);<span class="comment">// 查看返回对象</span></span><br><span class="line">    restHighLevelClient.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2索引的获取，并判断其是否存在"><a href="#2-2索引的获取，并判断其是否存在" class="headerlink" title="2.2索引的获取，并判断其是否存在"></a>2.2索引的获取，并判断其是否存在</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试获取索引，并判断其是否存在</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIndexIsExists</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">GetIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetIndexRequest</span>(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> restHighLevelClient.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(exists);<span class="comment">// 索引是否存在</span></span><br><span class="line">    restHighLevelClient.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3索引的删除"><a href="#2-3索引的删除" class="headerlink" title="2.3索引的删除"></a>2.3索引的删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试索引删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">DeleteIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteIndexRequest</span>(<span class="string">&quot;liuyou_index&quot;</span>);</span><br><span class="line">    <span class="type">AcknowledgedResponse</span> <span class="variable">response</span> <span class="operator">=</span> restHighLevelClient.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(response.isAcknowledged());<span class="comment">// 是否删除成功</span></span><br><span class="line">    restHighLevelClient.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-文档的操作"><a href="#3-文档的操作" class="headerlink" title="3.文档的操作"></a>3.文档的操作</h3><h4 id="3-1文档的添加"><a href="#3-1文档的添加" class="headerlink" title="3.1文档的添加"></a>3.1文档的添加</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试添加文档(先创建一个User实体类，添加fastjson依赖)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAddDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建一个User对象</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">liuyou</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;liuyou&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="comment">// 创建请求</span></span><br><span class="line">    <span class="type">IndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;liuyou_index&quot;</span>);</span><br><span class="line">    <span class="comment">// 制定规则 PUT /liuyou_index/_doc/1</span></span><br><span class="line">    request.id(<span class="string">&quot;1&quot;</span>);<span class="comment">// 设置文档ID</span></span><br><span class="line">    request.timeout(TimeValue.timeValueMillis(<span class="number">1000</span>));<span class="comment">// request.timeout(&quot;1s&quot;)</span></span><br><span class="line">    <span class="comment">// 将我们的数据放入请求中</span></span><br><span class="line">    request.source(JSON.toJSONString(liuyou), XContentType.JSON);</span><br><span class="line">    <span class="comment">// 客户端发送请求，获取响应的结果</span></span><br><span class="line">    <span class="type">IndexResponse</span> <span class="variable">response</span> <span class="operator">=</span> restHighLevelClient.index(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(response.status());<span class="comment">// 获取建立索引的状态信息 CREATED</span></span><br><span class="line">    System.out.println(response);<span class="comment">// 查看返回内容 IndexResponse[index=liuyou_index,type=_doc,id=1,version=1,result=created,seqNo=0,primaryTerm=1,shards=&#123;&quot;total&quot;:2,&quot;successful&quot;:1,&quot;failed&quot;:0&#125;]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2文档信息的获取"><a href="#3-2文档信息的获取" class="headerlink" title="3.2文档信息的获取"></a>3.2文档信息的获取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试获得文档信息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">GetRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(<span class="string">&quot;liuyou_index&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="type">GetResponse</span> <span class="variable">response</span> <span class="operator">=</span> restHighLevelClient.get(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(response.getSourceAsString());<span class="comment">// 打印文档内容</span></span><br><span class="line">    System.out.println(request);<span class="comment">// 返回的全部内容和命令是一样的</span></span><br><span class="line">    restHighLevelClient.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3文档的获取，并判断其是否存在"><a href="#3-3文档的获取，并判断其是否存在" class="headerlink" title="3.3文档的获取，并判断其是否存在"></a>3.3文档的获取，并判断其是否存在</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取文档，判断是否存在 get /liuyou_index/_doc/1</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDocumentIsExists</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">GetRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(<span class="string">&quot;liuyou_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="comment">// 不获取返回的 _source的上下文了</span></span><br><span class="line">    request.fetchSourceContext(<span class="keyword">new</span> <span class="title class_">FetchSourceContext</span>(<span class="literal">false</span>));</span><br><span class="line">    request.storedFields(<span class="string">&quot;_none_&quot;</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> restHighLevelClient.exists(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(exists);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4文档的更新"><a href="#3-4文档的更新" class="headerlink" title="3.4文档的更新"></a>3.4文档的更新</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试更新文档内容</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">UpdateRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>(<span class="string">&quot;liuyou_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;lmk&quot;</span>,<span class="number">11</span>);</span><br><span class="line">    request.doc(JSON.toJSONString(user),XContentType.JSON);</span><br><span class="line">    <span class="type">UpdateResponse</span> <span class="variable">response</span> <span class="operator">=</span> restHighLevelClient.update(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(response.status()); <span class="comment">// OK</span></span><br><span class="line">    restHighLevelClient.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5文档的删除"><a href="#3-5文档的删除" class="headerlink" title="3.5文档的删除"></a>3.5文档的删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试删除文档</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">DeleteRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;liuyou_index&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    request.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">    <span class="type">DeleteResponse</span> <span class="variable">response</span> <span class="operator">=</span> restHighLevelClient.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(response.status());<span class="comment">// OK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-6文档的查询"><a href="#3-6文档的查询" class="headerlink" title="3.6文档的查询"></a>3.6文档的查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="comment">// SearchRequest 搜索请求</span></span><br><span class="line"><span class="comment">// SearchSourceBuilder 条件构造</span></span><br><span class="line"><span class="comment">// HighlightBuilder 高亮</span></span><br><span class="line"><span class="comment">// TermQueryBuilder 精确查询</span></span><br><span class="line"><span class="comment">// MatchAllQueryBuilder</span></span><br><span class="line"><span class="comment">// xxxQueryBuilder ...</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSearch</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.创建查询请求对象</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>();</span><br><span class="line">    <span class="comment">// 2.构建搜索条件</span></span><br><span class="line">    <span class="type">SearchSourceBuilder</span> <span class="variable">searchSourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">    <span class="comment">// (1)查询条件 使用QueryBuilders工具类创建</span></span><br><span class="line">    <span class="comment">// 精确查询</span></span><br><span class="line">    <span class="type">TermQueryBuilder</span> <span class="variable">termQueryBuilder</span> <span class="operator">=</span> QueryBuilders.termQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;liuyou&quot;</span>);</span><br><span class="line">    <span class="comment">//        // 匹配查询</span></span><br><span class="line">    <span class="comment">//        MatchAllQueryBuilder matchAllQueryBuilder = QueryBuilders.matchAllQuery();</span></span><br><span class="line">    <span class="comment">// (2)其他&lt;可有可无&gt;：（可以参考 SearchSourceBuilder 的字段部分）</span></span><br><span class="line">    <span class="comment">// 设置高亮</span></span><br><span class="line">    searchSourceBuilder.highlighter(<span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>());</span><br><span class="line">    <span class="comment">//        // 分页</span></span><br><span class="line">    <span class="comment">//        searchSourceBuilder.from();</span></span><br><span class="line">    <span class="comment">//        searchSourceBuilder.size();</span></span><br><span class="line">    searchSourceBuilder.timeout(<span class="keyword">new</span> <span class="title class_">TimeValue</span>(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">    <span class="comment">// (3)条件投入</span></span><br><span class="line">    searchSourceBuilder.query(termQueryBuilder);</span><br><span class="line">    <span class="comment">// 3.添加条件到请求</span></span><br><span class="line">    searchRequest.source(searchSourceBuilder);</span><br><span class="line">    <span class="comment">// 4.客户端查询请求</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">search</span> <span class="operator">=</span> restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 5.查看返回结果</span></span><br><span class="line">    <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> search.getHits();</span><br><span class="line">    System.out.println(JSON.toJSONString(hits));</span><br><span class="line">    System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (SearchHit documentFields : hits.getHits()) &#123;</span><br><span class="line">        System.out.println(documentFields.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-7前面的操作都无法批量添加数据"><a href="#3-7前面的操作都无法批量添加数据" class="headerlink" title="3.7前面的操作都无法批量添加数据"></a>3.7前面的操作都无法批量添加数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上面的这些api无法批量增加数据（只会保留最后一个source）</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">IndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;bulk&quot;</span>);<span class="comment">// 没有id会自动生成一个随机ID</span></span><br><span class="line">    request.source(JSON.toJSONString(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;liu&quot;</span>,<span class="number">1</span>)),XContentType.JSON);</span><br><span class="line">    request.source(JSON.toJSONString(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;min&quot;</span>,<span class="number">2</span>)),XContentType.JSON);</span><br><span class="line">    request.source(JSON.toJSONString(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;kai&quot;</span>,<span class="number">3</span>)),XContentType.JSON);</span><br><span class="line">    <span class="type">IndexResponse</span> <span class="variable">index</span> <span class="operator">=</span> restHighLevelClient.index(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(index.status());<span class="comment">// created</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-8批量添加数据"><a href="#3-8批量添加数据" class="headerlink" title="3.8批量添加数据"></a>3.8批量添加数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 特殊的，真的项目一般会 批量插入数据</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBulk</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">BulkRequest</span> <span class="variable">bulkRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line">    bulkRequest.timeout(<span class="string">&quot;10s&quot;</span>);</span><br><span class="line">    ArrayList&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;liuyou-1&quot;</span>,<span class="number">1</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;liuyou-2&quot;</span>,<span class="number">2</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;liuyou-3&quot;</span>,<span class="number">3</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;liuyou-4&quot;</span>,<span class="number">4</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;liuyou-5&quot;</span>,<span class="number">5</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;liuyou-6&quot;</span>,<span class="number">6</span>));</span><br><span class="line">    <span class="comment">// 批量请求处理</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; users.size(); i++) &#123;</span><br><span class="line">        bulkRequest.add(</span><br><span class="line">                <span class="comment">// 这里是数据信息</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;bulk&quot;</span>)</span><br><span class="line">                        .id(<span class="string">&quot;&quot;</span>+(i + <span class="number">1</span>)) <span class="comment">// 没有设置id 会自定生成一个随机id</span></span><br><span class="line">                        .source(JSON.toJSONString(users.get(i)),XContentType.JSON)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">BulkResponse</span> <span class="variable">bulk</span> <span class="operator">=</span> restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(bulk.status());<span class="comment">// ok</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、创建工程&quot;&gt;&lt;a href=&quot;#1、创建工程&quot; class=&quot;headerlink&quot; title=&quot;1、创建工程&quot;&gt;&lt;/a&gt;1、创建工程&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;目录结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img  
                  </summary>
      
    
    
    
    
    <category term="ElasticSearch" scheme="http://example.com/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch之IK分词器(elasticsearch插件)</title>
    <link href="http://example.com/2022/07/26/ElasticSearch%E4%B9%8BIK%E5%88%86%E8%AF%8D%E5%99%A8-elasticsearch%E6%8F%92%E4%BB%B6/"/>
    <id>http://example.com/2022/07/26/ElasticSearch%E4%B9%8BIK%E5%88%86%E8%AF%8D%E5%99%A8-elasticsearch%E6%8F%92%E4%BB%B6/</id>
    <published>2022-07-26T08:39:26.000Z</published>
    <updated>2022-07-27T01:45:54.090Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>IK分词器：中文分词器</strong></p></blockquote><p>分词：即把一段中文或者别的划分成一个个的关键字，我们在搜索时候会把自己的信息进行分词，会把数据库中或者索引库中的数据进行分词，然后进行一一个匹配操作，<strong>默认的中文分词是将每个字看成一个词</strong>（<mark>不使用用IK分词器的情况下</mark>），比如“我爱狂神”会被分为”我”，”爱”，”狂”，”神” ，这显然是不符合要求的，所以我们需要安装中文分词器ik来解决这个问题。</p><p><strong>IK提供了两个分词算法</strong>: <code>ik_smart</code>和<code>ik_max_word</code> ,其中<code>ik_smart</code>为<strong>最少切分</strong>, <code>ik_max_word</code>为<strong>最细粒度划分</strong>!</p><h2 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h2><blockquote><p>版本要与ElasticSearch版本对应</p></blockquote><p>下载地址：<a class="link"   href="https://github.com/medcl/elasticsearch-analysis-ik/releases" >https://github.com/medcl/elasticsearch-analysis-ik/releases<i class="fas fa-external-link-alt"></i></a></p><h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><blockquote><p>ik文件夹是自己创建的</p></blockquote><p>解压即可（但是我们需要解压到ElasticSearch的plugins目录ik文件夹下）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/UidZDmrx2EJcWah.png"                      alt="img"                ></p><h2 id="3、重启ElasticSearch"><a href="#3、重启ElasticSearch" class="headerlink" title="3、重启ElasticSearch"></a>3、重启ElasticSearch</h2><blockquote><p>加载了IK分词器</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/F5CqbjMBA7NpOwi.png"                      alt="img"                ></p><h2 id="4、使用-ElasticSearch安装补录-bin-elasticsearch-plugin-可以查看插件"><a href="#4、使用-ElasticSearch安装补录-bin-elasticsearch-plugin-可以查看插件" class="headerlink" title="4、使用 ElasticSearch安装补录/bin/elasticsearch-plugin 可以查看插件"></a>4、使用 <code>ElasticSearch安装补录/bin/elasticsearch-plugin</code> 可以查看插件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\ElasticSearch\elasticsearch-7.6.1\bin&gt;elasticsearch-plugin list</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/Vlh72B6SWpcTsYm.png"                      alt="img"                ></p><h2 id="5、使用kibana测试"><a href="#5、使用kibana测试" class="headerlink" title="5、使用kibana测试"></a>5、使用kibana测试</h2><p><code>ik_smart</code>：最少切分</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/BsEmvXapOTu6Kwy.png"                      alt="img"                ></p><p><code>ik_max_word</code>：最细粒度划分（穷尽词库的可能）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/FtX6qnNEQH7OCu9.png"                      alt="img"                ></p><blockquote><p>从上面看，感觉分词都比较正常，但是大多数，分词都满足不了我们的想法，如下例</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/SGif5bEBZrNpxdq.png"                      alt="img"                ></p><blockquote><p>那么，我们需要手动将该词添加到分词器的词典当中</p></blockquote><h2 id="6、添加自定义的词添加到扩展字典中"><a href="#6、添加自定义的词添加到扩展字典中" class="headerlink" title="6、添加自定义的词添加到扩展字典中"></a>6、添加自定义的词添加到扩展字典中</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch目录/plugins/ik/config/IKAnalyzer.cfg.xml</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/3eT2uJWAalDRpOP.png"                      alt="img"                ></p><p>打开 <code>IKAnalyzer.cfg.xml</code> 文件，扩展字典</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/gwKlj57fyuvihRn.png"                      alt="img"                ></p><p>创建字典文件，添加字典内容</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/RLmOFQk2UK7inuP.png"                      alt="img"                ></p><p>重启ElasticSearch，再次使用kibana测试</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/VMNUKRgmI8un9av.png"                      alt="smart"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IK分词器：中文分词器&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;分词：即把一段中文或者别的划分成一个个的关键字，我们在搜索时候会把自己的信息进行分词，会把数据库中或者索引库中的数据进行分词，然后进行一一个匹配操作</summary>
      
    
    
    
    
    <category term="ElasticSearch" scheme="http://example.com/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch之Rest风格说明</title>
    <link href="http://example.com/2022/07/26/ElasticSearch%E4%B9%8BRest%E9%A3%8E%E6%A0%BC%E8%AF%B4%E6%98%8E/"/>
    <id>http://example.com/2022/07/26/ElasticSearch%E4%B9%8BRest%E9%A3%8E%E6%A0%BC%E8%AF%B4%E6%98%8E/</id>
    <published>2022-07-26T08:38:28.000Z</published>
    <updated>2022-07-27T02:53:08.927Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一种软件架构风格</strong>,而不是标准,只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以<strong>更简洁</strong>，<strong>更有层次</strong>，<strong>更易于实现缓存</strong>等机制。</p><h2 id="1、基本Rest命令说明："><a href="#1、基本Rest命令说明：" class="headerlink" title="1、基本Rest命令说明："></a>1、<strong>基本Rest命令说明：</strong></h2><table><thead><tr><th align="center">method</th><th align="center">url地址</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">PUT（创建,修改）</td><td align="center">localhost:9200&#x2F;索引名称&#x2F;类型名称&#x2F;文档id</td><td align="center">创建文档（指定文档id）</td></tr><tr><td align="center">POST（创建）</td><td align="center">localhost:9200&#x2F;索引名称&#x2F;类型名称</td><td align="center">创建文档（随机文档id）</td></tr><tr><td align="center">POST（修改）</td><td align="center">localhost:9200&#x2F;索引名称&#x2F;类型名称&#x2F;文档id&#x2F;_update</td><td align="center">修改文档</td></tr><tr><td align="center">DELETE（删除）</td><td align="center">localhost:9200&#x2F;索引名称&#x2F;类型名称&#x2F;文档id</td><td align="center">删除文档</td></tr><tr><td align="center">GET（查询）</td><td align="center">localhost:9200&#x2F;索引名称&#x2F;类型名称&#x2F;文档id</td><td align="center">查询文档通过文档ID</td></tr><tr><td align="center">POST（查询）</td><td align="center">localhost:9200&#x2F;索引名称&#x2F;类型名称&#x2F;文档id&#x2F;_search</td><td align="center">查询所有数据</td></tr></tbody></table><h2 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h2><h3 id="1-创建一个索引，添加"><a href="#1-创建一个索引，添加" class="headerlink" title="1.创建一个索引，添加"></a>1.创建一个索引，添加</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT /test1/type1/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;流柚&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">18</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/QUJiN93ArBEbco6.png"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/AU4H6QTh8xBaSbD.png"                      alt="img"                ></p><h3 id="2-字段数据类型"><a href="#2-字段数据类型" class="headerlink" title="2.字段数据类型"></a>2.字段数据类型</h3><ul><li><p>字符串类型</p><ul><li><p>text、</p><p>keyword</p><ul><li>text：支持分词，全文检索,支持模糊、精确查询,不支持聚合,排序操作;text类型的最大支持的字符长度无限制,适合大字段存储；</li><li>keyword：不进行分词，直接索引、支持模糊、支持精确匹配，支持聚合、排序操作。keyword类型的最大支持的长度为——32766个UTF-8类型的字符,可以通过设置ignore_above指定自持字符长度，超过给定长度后的数据将不被索引，无法通过term精确匹配检索返回结果。</li></ul></li></ul></li><li><p>数值型</p><ul><li>long、Integer、short、byte、double、float、<strong>half float</strong>、<strong>scaled float</strong></li></ul></li><li><p>日期类型</p><ul><li>date</li></ul></li><li><p>te布尔类型</p><ul><li>boolean</li></ul></li><li><p>二进制类型</p><ul><li>binary</li></ul></li><li><p>等等…</p></li></ul><h3 id="3-指定字段的类型（使用PUT）"><a href="#3-指定字段的类型（使用PUT）" class="headerlink" title="3.指定字段的类型（使用PUT）"></a>3.指定字段的类型（使用PUT）</h3><blockquote><p>类似于建库（建立索引和字段对应类型），也可看做规则的建立</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT /test2</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;long&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;birthday&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;date&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/GufhydTNzQIibXC.png"                      alt="img"                ></p><h3 id="4-获取3建立的规则"><a href="#4-获取3建立的规则" class="headerlink" title="4.获取3建立的规则"></a>4.获取3建立的规则</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET test2</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/3KhOsut5nxE7i8A.png"                      alt="img"                ></p><h3 id="5-获取默认信息"><a href="#5-获取默认信息" class="headerlink" title="5.获取默认信息"></a>5.获取默认信息</h3><blockquote><p><code>_doc</code> 默认类型（default type），type 在未来的版本中会逐渐弃用，因此产生一个默认类型进行代替</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT /test3/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;流柚&quot;,</span><br><span class="line">  &quot;age&quot;: 18,</span><br><span class="line">  &quot;birth&quot;: &quot;1999-10-10&quot;</span><br><span class="line">&#125;</span><br><span class="line">GET test3</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/4SvlhtH6k2B5jxe.png"                      alt="img"                ></p><blockquote><p>如果自己的文档字段没有被指定，那么ElasticSearch就会给我们默认配置字段类型</p></blockquote><p>扩展：通过<code>get _cat/</code> 可以获取ElasticSearch的当前的很多信息！</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET _cat/indices</span><br><span class="line">GET _cat/aliases</span><br><span class="line">GET _cat/allocation</span><br><span class="line">GET _cat/count</span><br><span class="line">GET _cat/fielddata</span><br><span class="line">GET _cat/health</span><br><span class="line">GET _cat/indices</span><br><span class="line">GET _cat/master</span><br><span class="line">GET _cat/nodeattrs</span><br><span class="line">GET _cat/nodes</span><br><span class="line">GET _cat/pending_tasks</span><br><span class="line">GET _cat/plugins</span><br><span class="line">GET _cat/recovery</span><br><span class="line">GET _cat/repositories</span><br><span class="line">GET _cat/segments</span><br><span class="line">GET _cat/shards</span><br><span class="line">GET _cat/snapshots</span><br><span class="line">GET _cat/tasks</span><br><span class="line">GET _cat/templates</span><br><span class="line">GET _cat/thread_pool</span><br></pre></td></tr></table></figure><h3 id="6-修改"><a href="#6-修改" class="headerlink" title="6.修改"></a>6.修改</h3><blockquote><p>两种方案</p></blockquote><p>①旧的（使用put覆盖原来的值）</p><ul><li>版本+1（_version）</li><li>但是如果漏掉某个字段没有写，那么更新是没有写的字段 ，会消失</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT /test3/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;流柚是我的大哥&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;birth&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1999-10-10&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">GET /test3/_doc/<span class="number">1</span></span><br><span class="line"><span class="comment">// 修改会有字段丢失</span></span><br><span class="line">PUT /test3/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;流柚&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">GET /test3/_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/QHlJq7EKCmr3TOF.png"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/49TcUXPety87SN5.png"                      alt="img"                ></p><p>②新的（使用post的update）</p><ul><li>version不会改变</li><li>需要注意doc</li><li>不会丢失字段</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /test3/_doc/<span class="number">1</span>/_update</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;post修改，version不会加一&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">GET /test3/_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/ijxmXrcthu2CaZS.png"                      alt="img"                ></p><h3 id="7-删除"><a href="#7-删除" class="headerlink" title="7.删除"></a>7.删除</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /test1</span><br><span class="line">DELETE /test1</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/qbAlaeFUC6DnvmR.png"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/1VUFqytIfB3KELG.png"                      alt="img"                ></p><h3 id="8-查询（简单条件）"><a href="#8-查询（简单条件）" class="headerlink" title="8.查询（简单条件）"></a>8.查询（简单条件）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /test3/_doc/_search?q=name:流柚</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/snXpLbyHEMj7vVO.png"                      alt="img"                ></p><h3 id="9-复杂查询"><a href="#9-复杂查询" class="headerlink" title="9.复杂查询"></a>9.复杂查询</h3><blockquote><p>test3索引中的内容</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/IySOGVC7LdxQZHU.png"                      alt="img"                ></p><h4 id="①查询匹配"><a href="#①查询匹配" class="headerlink" title="①查询匹配"></a>①查询匹配</h4><ul><li><code>match</code>：匹配（会使用分词器解析（先分析文档，然后进行查询））</li><li><code>_source</code>：过滤字段</li><li><code>sort</code>：排序</li><li><code>form</code>、<code>size</code> 分页</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询匹配</span></span><br><span class="line">GET /blog/user/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;流&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;name&quot;</span><span class="punctuation">,</span><span class="string">&quot;desc&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/Q39cOAPqymrUSnL.png"                      alt="img"                ></p><h4 id="②多条件查询（bool）"><a href="#②多条件查询（bool）" class="headerlink" title="②多条件查询（bool）"></a>②多条件查询（bool）</h4><ul><li><code>must</code> 相当于 <code>and</code></li><li><code>should</code> 相当于 <code>or</code></li><li><code>must_not</code> 相当于 <code>not (... and ...)</code></li><li><code>filter</code> 过滤</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// bool 多条件查询</span></span><br><span class="line"><span class="comment">//// must &lt;==&gt; and</span></span><br><span class="line"><span class="comment">//// should &lt;==&gt; or</span></span><br><span class="line"><span class="comment">//// must_not &lt;==&gt; not (... and ...)</span></span><br><span class="line"><span class="comment">//// filter数据过滤</span></span><br><span class="line"><span class="comment">//// boost</span></span><br><span class="line"><span class="comment">//// minimum_should_match</span></span><br><span class="line">GET /blog/user/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">3</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;流&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/3Q5NrdTS6q2wukv.png"                      alt="img"                ></p><h4 id="③匹配数组"><a href="#③匹配数组" class="headerlink" title="③匹配数组"></a>③匹配数组</h4><ul><li>貌似不能与其它字段一起使用</li><li>可以多关键字查（空格隔开）— 匹配字段也是符合的</li><li><code>match</code> 会使用分词器解析（先分析文档，然后进行查询）</li><li>搜词</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 匹配数组 貌似不能与其它字段一起使用</span><br><span class="line">// 可以多关键字查（空格隔开）</span><br><span class="line">// match 会使用分词器解析（先分析文档，然后进行查询）</span><br><span class="line">GET /blog/user/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;match&quot;:&#123;</span><br><span class="line">      &quot;desc&quot;:&quot;年龄 牛 大&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/e9Y4BpTRbXL5uxk.png"                      alt="img"                ></p><h4 id="④精确查询"><a href="#④精确查询" class="headerlink" title="④精确查询"></a>④精确查询</h4><ul><li><code>term</code> 直接通过 倒排索引 指定<strong>词条</strong>查询</li><li>适合查询 number、date、keyword ，不适合text</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 精确查询（必须全部都有，而且不可分，即按一个完整的词查询）</span></span><br><span class="line"><span class="comment">// term 直接通过 倒排索引 指定的词条 进行精确查找的</span></span><br><span class="line">GET /blog/user/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span><span class="string">&quot;年 &quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/mapFbZNW82CXyD9.png"                      alt="img"                ></p><h4 id="⑤text和keyword"><a href="#⑤text和keyword" class="headerlink" title="⑤text和keyword"></a>⑤text和keyword</h4><ul><li>text：<ul><li><strong>支持分词</strong>，<strong>全文检索</strong>、支持模糊、精确查询,不支持聚合,排序操作;</li><li>text类型的最大支持的字符长度无限制,适合大字段存储；</li></ul></li><li>keyword：<ul><li><strong>不进行分词</strong>，<strong>直接索引</strong>、支持模糊、支持精确匹配，支持聚合、排序操作。</li><li>keyword类型的最大支持的长度为——32766个UTF-8类型的字符,可以通过设置ignore_above指定自持字符长度，超过给定长度后的数据将不被索引，<strong>无法通过term精确匹配检索返回结果</strong>。</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试keyword和text是否支持分词</span></span><br><span class="line"><span class="comment">// 设置索引类型</span></span><br><span class="line">PUT /test</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;text&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// 设置字段数据</span></span><br><span class="line">PUT /test/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span><span class="string">&quot;测试keyword和text是否支持分词&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span><span class="string">&quot;测试keyword和text是否支持分词&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// text 支持分词</span></span><br><span class="line"><span class="comment">// keyword 不支持分词</span></span><br><span class="line">GET /test/_doc/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span><span class="string">&quot;测试&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="comment">// 查的到</span></span><br><span class="line">GET /test/_doc/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span><span class="string">&quot;测试&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="comment">// 查不到，必须是 &quot;测试keyword和text是否支持分词&quot; 才能查到</span></span><br><span class="line">GET _analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;测试liu&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="comment">// 不会分词，即 测试liu</span></span><br><span class="line">GET _analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standard&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;测试liu&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="comment">// 分为 测 试 liu</span></span><br><span class="line">GET _analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span><span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;测试liu&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="comment">// 分为 测试 liu</span></span><br></pre></td></tr></table></figure><h4 id="⑥高亮查询"><a href="#⑥高亮查询" class="headerlink" title="⑥高亮查询"></a>⑥高亮查询</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 高亮查询</span></span><br><span class="line">GET blog/user/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;流&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// 自定义前缀和后缀</span></span><br><span class="line">GET blog/user/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;流&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pre_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;p class=&#x27;key&#x27; style=&#x27;color:red&#x27;&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;post_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;/p&gt;&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/lSm5o9R6fCq2VbL.png"                      alt="img"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;一种软件架构风格&lt;/strong&gt;,而不是标准,只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以&lt;strong&gt;更简洁&lt;/strong&gt;，&lt;strong&gt;更有层次&lt;/strong&gt;，&lt;strong&gt;更易于实现</summary>
      
    
    
    
    
    <category term="ElasticSearch" scheme="http://example.com/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch之Elasticsearch核心概念</title>
    <link href="http://example.com/2022/07/26/ElasticSearch%E4%B9%8BElasticsearch%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    <id>http://example.com/2022/07/26/ElasticSearch%E4%B9%8BElasticsearch%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</id>
    <published>2022-07-26T07:35:51.000Z</published>
    <updated>2022-07-27T01:36:29.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>1、索引（ElasticSearch）</p><ul><li>包多个分片</li></ul><p>2、字段类型（映射）</p><ul><li>字段类型映射（字段是整型，还是字符型…）</li></ul><p>3、文档</p><p>4、分片（Lucene索引，倒排索引）</p><blockquote><p>ElasticSearch是面向文档，关系行数据库和ElasticSearch客观对比！一切都是JSON！</p></blockquote><table><thead><tr><th>Relational DB</th><th>ElasticSearch</th></tr></thead><tbody><tr><td>数据库（database）</td><td>索引（indices）</td></tr><tr><td>表（tables）</td><td>types &lt;慢慢会被弃用!&gt;</td></tr><tr><td>行（rows）</td><td>documents</td></tr><tr><td>字段（columns）</td><td>fields</td></tr></tbody></table><p><strong>elasticsearch（集群）</strong>中可以包含多个<strong>索引（数据库）</strong> ,每个索引中可以包含多个<strong>类型（表）</strong> ,每个类型下又包含多个<strong>文档（行）</strong> ,每个文档中又包含多个<strong>字段（列）</strong>。</p><h2 id="2、物理设计"><a href="#2、物理设计" class="headerlink" title="2、物理设计"></a>2、物理设计</h2><p>elasticsearch在后台把<strong>每个索引划分成多个分片</strong>，每分分片可以在集群中的不同服务器间迁移</p><p>一个人就是一个集群! ，即<strong>启动的ElasticSearch服务，默认就是一个集群，且默认集群名为elasticsearch</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/2WwSvELOtjiouqF.png"                      alt="img"                ></p><h2 id="3、逻辑设计"><a href="#3、逻辑设计" class="headerlink" title="3、逻辑设计"></a>3、逻辑设计</h2><p>一个索引类型中，包含多个文档，比如说文档1，文档2。当我们索引一篇文档时，可以通过这样的顺序找到它：索引 &#x3D;&gt; 类型 &#x3D;&gt; 文档ID ，通过这个组合我们就能索引到某个具体的文档。 注意：ID不必是整数，实际上它是个字符串。</p><blockquote><h4 id="文档（”行“）"><a href="#文档（”行“）" class="headerlink" title="文档（”行“）"></a>文档（”行“）</h4></blockquote><p>之前说elasticsearch是面向文档的，那么就意味着<strong>索引和搜索数据的最小单位是文档</strong>，elasticsearch中，文档有几个重要属性:</p><ul><li>自我包含，一篇文档同时包含字段和对应的值，也就是同时包含key:value !</li><li>可以是层次型的，一个文档中包含自文档，复杂的逻辑实体就是这么来的! {就是一个json对象 ! fastjson进行自动转换 !}</li><li>灵活的结构，文档不依赖预先定义的模式，我们知道关系型数据库中，要提前定义字段才能使用，在elasticsearch中，对于字段是非常灵活的，有时候,我们可以忽略该字段，或者动态的添加一个新的字段。</li></ul><p>尽管我们可以随意的新增或者忽略某个字段，但是，每个字段的类型非常重要，比如一个年龄字段类型，可以是字符串也可以是整形。因为elasticsearch会保存字段和类型之间的映射及其他的设置。这种映射具体到每个映射的每种类型，这也是为什么在elasticsearch中，类型有时候也称为映射类型。</p><blockquote><h4 id="类型（“表”）"><a href="#类型（“表”）" class="headerlink" title="类型（“表”）"></a>类型（“表”）</h4></blockquote><p>类型是文档的逻辑容器，就像关系型数据库一样，表格是行的容器。类型中对于字段的定义称为映射，比如name映射为字符串类型。我们说文档是无模式的，它们不需要拥有映射中所定义的所有字段，比如新增一个字段，那么elasticsearch是怎么做的呢?</p><ul><li>elasticsearch会自动的将新字段加入映射，但是这个字段的不确定它是什么类型，elasticsearch就开始猜，如果这个值是18，那么elasticsearch会认为它是整形。但是elasticsearch也可能猜不对，所以最安全的方式就是提前定义好所需要的映射，这点跟关系型数据库殊途同归了，先定义好字段，然后再使用，别整什么幺蛾子。</li></ul><blockquote><h4 id="索引（“库”）"><a href="#索引（“库”）" class="headerlink" title="索引（“库”）"></a>索引（“库”）</h4></blockquote><p>索引是映射类型的容器， elasticsearch中的索引是一个非常大的文档集合。 索引存储了映射类型的字段和其他设置。然后它们被存储到了各个分片上了。我们来研究下分片是如何工作的。</p><p><strong>物理设计：节点和分片 如何工作</strong></p><p>创建新索引</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/KQu1nTAMNOIz4Jl.png"                      alt="创建新索引"                ></p><p>一个集群至少有一个节点，而一个节点就是一个elasricsearch进程，节点可以有多个索引默认的，如果你创建索引，那么索引将会有个5个分片(primary shard ,又称主分片)构成的，每一个主分片会有一个副本(replica shard，又称复制分片)</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/JX3PTiIUEBFmtgo.png"                      alt="img"                ></p><p>上图是一个有3个节点的集群，可以看到主分片和对应的复制分片都不会在同一个节点内，这样有利于某个节点挂掉了，数据也不至于失。实际上，<strong>一个分片是一个Lucene索引（<mark>一个ElasticSearch索引包含多个Lucene索引</mark>）</strong> ，<strong>一个包含倒排索引的文件目录，倒排索引的结构使得elasticsearch在不扫描全部文档的情况下，就能告诉你哪些文档包含特定的关键字</strong>。不过，等等，倒排索引是什么鬼?</p><blockquote><p><strong>倒排索引（Lucene索引底层）</strong></p></blockquote><blockquote><p>简单说就是 按（文章关键字，对应的文档&lt;0个或多个&gt;）形式建立索引，根据关键字就可直接查询对应的文档（含关键字的），无需查询每一个文档，如下图</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/wxGuQKMcD28bNtA.png"                      alt="img"                ></p><p>elasticsearch使用的是一种称为倒排索引的结构，采用Lucene倒排索作为底层。这种结构适用于快速的 全文搜索， 一个索引由文档中所有不重复的列表构成，对于每一个词，都有一个包含它的文档列表。 例 如，现在有两个文档， 每个文档包含如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Study every day, good good up to forever # 文档1包含的内容</span><br><span class="line">To forever, study every day, good good up # 文档2包含的内容</span><br></pre></td></tr></table></figure><p>为了创建倒排索引,我们首先要将每个文档拆分成独立的词(或称为词条或者tokens),然后创建一个包含所有不重复的词条的排序列表,然后列出每个词条出现在哪个文档:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/54j7hSln8wRvFfk.png"                      alt="1596631181270"                ></p><p>两个文档都匹配,但是第一个文档比第二个匹配程度更高.如果没有别的条件,现在,这两个包含关键字的文档都将返回.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、概述&quot;&gt;&lt;a href=&quot;#1、概述&quot; class=&quot;headerlink&quot; title=&quot;1、概述&quot;&gt;&lt;/a&gt;1、概述&lt;/h2&gt;&lt;p&gt;1、索引（ElasticSearch）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包多个分片&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、字段类型（映射</summary>
      
    
    
    
    
    <category term="ElasticSearch" scheme="http://example.com/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch之Elasticsearch安装</title>
    <link href="http://example.com/2022/07/26/ElasticSearch%E4%B9%8BElasticsearch%E5%AE%89%E8%A3%85/"/>
    <id>http://example.com/2022/07/26/ElasticSearch%E4%B9%8BElasticsearch%E5%AE%89%E8%A3%85/</id>
    <published>2022-07-26T07:21:38.000Z</published>
    <updated>2022-07-27T01:35:46.285Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JDK8，最低要求</span><br></pre></td></tr></table></figure><p>使用Java开发，必须保证<code>ElasticSearch</code>的版本与Java的核心jar包版本对应！（Java环境保证没错）</p><h2 id="1、Windows下安装ElasticSearch"><a href="#1、Windows下安装ElasticSearch" class="headerlink" title="1、Windows下安装ElasticSearch"></a>1、Windows下安装ElasticSearch</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><p>下载地址：<a class="link"   href="https://www.elastic.co/cn/downloads/" >https://www.elastic.co/cn/downloads/<i class="fas fa-external-link-alt"></i></a></p><p>历史版本下载：<a class="link"   href="https://www.elastic.co/cn/downloads/past-releases/" >https://www.elastic.co/cn/downloads/past-releases/<i class="fas fa-external-link-alt"></i></a></p><p>解压即可（尽量将ElasticSearch相关工具放在统一目录下）</p><h3 id="2-熟悉目录"><a href="#2-熟悉目录" class="headerlink" title="2.熟悉目录"></a>2.熟悉目录</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/fkBFQyMGXPjc3T4.png"                      alt="img"                ></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bin 启动文件目录</span><br><span class="line">config 配置文件目录</span><br><span class="line">    1og4j2 日志配置文件</span><br><span class="line">    jvm.options java 虚拟机相关的配置(默认启动占1g内存，内容不够需要自己调整)</span><br><span class="line">    elasticsearch.ym1 elasticsearch 的配置文件! 默认9200端口!跨域!</span><br><span class="line">1ib </span><br><span class="line">    相关jar包</span><br><span class="line">modules 功能模块目录</span><br><span class="line">plugins 插件目录</span><br><span class="line">    ik分词器</span><br></pre></td></tr></table></figure><h3 id="3-启动"><a href="#3-启动" class="headerlink" title="3.启动"></a>3.启动</h3><blockquote><p>一定要检查自己的java环境是否配置好</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/N9VpgiAS1t5CDOG.png"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/zu5HyvMsa6Umfbp.png"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/8xIm1kcJyqbK5dF.png"                      alt="img"                ></p><h2 id="2、安装可视化界面"><a href="#2、安装可视化界面" class="headerlink" title="2、安装可视化界面"></a>2、安装可视化界面</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch-head</span><br></pre></td></tr></table></figure><p><strong>使用前提</strong>：需要安装nodejs</p><h3 id="1-下载地址"><a href="#1-下载地址" class="headerlink" title="1.下载地址"></a>1.下载地址</h3><p><a class="link"   href="https://github.com/mobz/elasticsearch-head" >https://github.com/mobz/elasticsearch-head<i class="fas fa-external-link-alt"></i></a></p><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><p>解压即可（尽量将ElasticSearch相关工具放在统一目录下）</p><h3 id="3-启动-1"><a href="#3-启动-1" class="headerlink" title="3.启动"></a>3.启动</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd elasticsearch-head# 安装依赖npm install# 启动npm run start# 访问http://localhost:9100/</span><br></pre></td></tr></table></figure><h3 id="4-安装依赖"><a href="#4-安装依赖" class="headerlink" title="4.安装依赖"></a>4.<strong>安装依赖</strong></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/laxw9EjPuSV8fJ6.png"                      alt="安装"                ></p><h3 id="5-运行"><a href="#5-运行" class="headerlink" title="5.运行"></a>5.<strong>运行</strong></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/m6zw32RoCkKDHJY.png"                      alt="运行"                ></p><h3 id="6-访问"><a href="#6-访问" class="headerlink" title="6.访问"></a>6.<strong>访问</strong></h3><blockquote><p>存在跨域问题（只有当两个页面同源，才能交互）</p><p>同源（端口，主机，协议三者都相同）</p><p><a class="link"   href="https://blog.csdn.net/qq_38128179/article/details/84956552" >https://blog.csdn.net/qq_38128179/article/details/84956552<i class="fas fa-external-link-alt"></i></a></p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/FU4bKEBeC1yVDng.png"                      alt="存在跨域问题"                ></p><p><strong>开启跨域（在elasticsearch解压目录config下elasticsearch.yml中添加）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 开启跨域http.cors.enabled: true# 所有人访问http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure><blockquote><p>重启elasticsearch</p></blockquote><p><strong>再次连接</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/HWx9f8bXztyu3IM.png"                      alt="img"                ></p><p><strong>如何理解上图：</strong></p><ul><li>如果你是初学者<ul><li>索引 可以看做 “数据库”</li><li>类型 可以看做 “表”</li><li>文档 可以看做 “库中的数据（表中的行）”</li></ul></li><li>这个head，我们只是把它当做可视化数据展示工具，之后所有的查询都在kibana中进行<ul><li>因为不支持json格式化，不方便</li></ul></li></ul><h2 id="3、安装kibana"><a href="#3、安装kibana" class="headerlink" title="3、安装kibana"></a>3、安装kibana</h2><p>Kibana是一个针对ElasticSearch的开源分析及可视化平台,用来搜索、查看交互存储在Elasticsearch索引中的数据。使用Kibana ,可以通过各种图表进行高级数据分析及展示。Kibana让海量数据更容易理解。它操作简单,基于浏览器的用户界面可以快速创建仪表板( dashboard )实时显示Elasticsearch查询动态。设置Kibana非常简单。无需编码或者额外的基础架构,几分钟内就可以完成Kibana安装并启动Elasticsearch索引监测。</p><h3 id="1-下载地址-1"><a href="#1-下载地址-1" class="headerlink" title="1.下载地址:"></a>1.下载地址:</h3><blockquote><p>下载的版本需要与ElasticSearch版本对应</p></blockquote><p><a class="link"   href="https://www.elastic.co/cn/downloads/" >https://www.elastic.co/cn/downloads/<i class="fas fa-external-link-alt"></i></a></p><p>历史版本下载：<a class="link"   href="https://www.elastic.co/cn/downloads/past-releases/" >https://www.elastic.co/cn/downloads/past-releases/<i class="fas fa-external-link-alt"></i></a></p><h3 id="2-安装-1"><a href="#2-安装-1" class="headerlink" title="2.安装"></a>2.安装</h3><p>解压即可（尽量将ElasticSearch相关工具放在统一目录下）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/Ypbslq67Vn2HNeT.png"                      alt="img"                ></p><h3 id="3-启动-2"><a href="#3-启动-2" class="headerlink" title="3.启动"></a>3.启动</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/pkLl6rxKBnWiv98.png"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/mURpJhdbunLTEFS.png"                      alt="img"                ></p><h3 id="4-访问"><a href="#4-访问" class="headerlink" title="4.访问"></a>4.<strong>访问</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:5601</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/V62NhRlgE9MUjtJ.png"                      alt="img"                ></p><h3 id="5-开发工具"><a href="#5-开发工具" class="headerlink" title="5.开发工具"></a>5.开发工具</h3><p>（Postman、curl、head、谷歌浏览器插件）</p><blockquote><p>可以使用 <code>Kibana</code>进行测试</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/jWBPYZS1wHfGCri.png"                      alt="img"                ></p><blockquote><p>如果说，你在英文方面不太擅长，kibana是支持汉化的</p></blockquote><h3 id="6-kibana汉化"><a href="#6-kibana汉化" class="headerlink" title="6.kibana汉化"></a>6.kibana汉化</h3><p>编辑器打开<code>kibana解压目录/config/kibana.yml</code>，添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i18n.locale: &quot;zh-CN&quot;</span><br></pre></td></tr></table></figure><blockquote><p>重启kibana</p></blockquote><p><strong>汉化成功</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/EZ5SmsNt4gxaUqw.png"                      alt="汉化成功"                ></p><h3 id="7-了解ELK"><a href="#7-了解ELK" class="headerlink" title="7.了解ELK"></a>7.了解ELK</h3><ul><li><p>ELK是</p><p>Elasticsearch、Logstash、 Kibana三大开源框架首字母大写简称</p><p>。市面上也被成为Elastic Stack。</p><ul><li>其中Elasticsearch是一个基于Lucene、分布式、通过Restful方式进行交互的近实时搜索平台框架。<ul><li>像类似百度、谷歌这种大数据全文搜索引擎的场景都可以使用Elasticsearch作为底层支持框架，可见Elasticsearch提供的搜索能力确实强大,市面上很多时候我们简称Elasticsearch为es。</li></ul></li><li>Logstash是ELK的中央数据流引擎,用于从不同目标(文件&#x2F;数据存储&#x2F;MQ )收集的不同格式数据,经过过滤后支持输出到不同目的地(文件&#x2F;MQ&#x2F;redis&#x2F;elasticsearch&#x2F;kafka等)。</li><li>Kibana可以将elasticsearch的数据通过友好的页面展示出来 ,提供实时分析的功能。</li></ul></li><li><p>市面上很多开发只要提到ELK能够一致说出它是一个日志分析架构技术栈总称 ,但实际上ELK不仅仅适用于日志分析,它还可以支持其它任何数据分析和收集的场景,日志分析和收集只是更具有代表性。并非唯一性。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">收集清洗数据(Logstash) ==&gt; 搜索、存储(ElasticSearch) ==&gt; 展示(Kibana)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/eGicEYlAWwMOkyV.png"                      alt="img"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ElasticSearch之ElasticSearch概述</title>
    <link href="http://example.com/2022/07/26/ElasticSearch%E4%B9%8BElasticSearch%E6%A6%82%E8%BF%B0/"/>
    <id>http://example.com/2022/07/26/ElasticSearch%E4%B9%8BElasticSearch%E6%A6%82%E8%BF%B0/</id>
    <published>2022-07-26T06:59:42.000Z</published>
    <updated>2022-07-27T01:28:13.030Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Elaticsearch</strong>，简称为es，es是一个开源的<strong>高扩展</strong>的<strong>分布式全文检索引擎</strong>，它可以近乎<strong>实时的存储</strong>、<strong>检索数据;<strong>本身扩展性很好，可以扩展到上百台服务器，处理PB级别(大数据时代）的数据。es也使用java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的</strong>目的</strong>是<mark>通过简单的<strong>RESTful API</strong>来隐藏Lucene的复杂性，从而让全文搜索变得简单</mark>。</p><p>据国际权威的数据库产品评测机构DB Engines的统计，在2016年1月，ElasticSearch已超过Solr等，成为<strong>排名第一的搜索引擎类应用</strong>。</p><h2 id="1、历史"><a href="#1、历史" class="headerlink" title="1、历史"></a>1、历史</h2><p>多年前，一个叫做Shay Banon的刚结婚不久的失业开发者，由于妻子要去伦敦学习厨师，他便跟着也去了。在他找工作的过程中，为了给妻子构建一个食谱的搜索引擎，他开始构建一个早期版本的Lucene。</p><p>直接基于Lucene工作会比较困难，所以Shay开始抽象Lucene代码以便lava程序员可以在应用中添加搜索功能。他发布了他的第一个开源项目，叫做“Compass”。</p><p>后来Shay找到一份工作，这份工作处在高性能和内存数据网格的分布式环境中，因此高性能的、实时的、分布式的搜索引擎也是理所当然需要的。然后他决定重写Compass库使其成为一个独立的服务叫做Elasticsearch。</p><p>第一个公开版本出现在2010年2月，在那之后Elasticsearch已经成为Github上最受欢迎的项目之一，代码贡献者超过300人。一家主营Elasticsearch的公司就此成立，他们一边提供商业支持一边开发新功能，不过Elasticsearch将永远开源且对所有人可用。</p><p>Shay的妻子依旧等待着她的食谱搜索…..</p><p><strong>谁在使用：</strong></p><p>1、维基百科,类似百度百科，全文检索,高亮,搜索推荐&#x2F;2<br>2、The Guardian (国外新闻网站) ,类似搜狐新闻,用户行为日志(点击,浏览,收藏,评论) +社交网络数据(对某某新闻的相关看法) ,数据分析,给到每篇新闻文章的作者,让他知道他的文章的公众反馈(好,坏,热门，垃圾,鄙视，崇拜)<br>3、Stack Overflow (国外的程序异常讨论论坛) , IT问题,程序的报错,提交上去,有人会跟你讨论和回答,全文检索,搜索相关问题和答案,程序报错了,就会将报错信息粘贴到里面去,搜索有没有对应的答案<br>4、GitHub (开源代码管理),搜索 上千亿行代码<br>5、电商网站,检索商品<br>6、日志数据分析, logstash采集日志, ES进行复杂的数据分析, <strong>ELK技术, elasticsearch+logstash+kibana</strong><br>7、商品价格监控网站,用户设定某商品的价格阈值,当低于该阈值的时候,发送通知消息给用户,比如说订阅牙膏的监控,如果高露洁牙膏的家庭套装低于50块钱,就通知我,我就去买<br>8、BI系统,商业智能, Business Intelligence。比如说有个大型商场集团，BI ,分析一下某某区域最近3年的用户消费 金额的趋势以及用户群体的组成构成,产出相关的数张报表, **区,最近3年,每年消费金额呈现100%的增长,而且用户群体85%是高级白领，开-个新商场。ES执行数据分析和挖掘, Kibana进行数据可视化<br>9、国内:站内搜索(电商,招聘,门户,等等),IT系统搜索(OA,CRM,ERP,等等),数据分析(ES热门<br>的一一个使用场景)</p><h2 id="2、ES和Solr"><a href="#2、ES和Solr" class="headerlink" title="2、ES和Solr"></a>2、ES和Solr</h2><h3 id="1-ElasticSearch简介"><a href="#1-ElasticSearch简介" class="headerlink" title="1.ElasticSearch简介"></a>1.ElasticSearch简介</h3><ul><li>Elasticsearch是一个<strong>实时分布式搜索和分析引擎</strong>。 它让你以前所未有的速度处理大数据成为可能。</li><li>它用于<mark><strong>全文搜索、结构化搜索、分析</strong></mark>以及将这三者混合使用:</li><li><code>维基百科</code>使用Elasticsearch提供<strong>全文搜索</strong>并<strong>高亮关键字</strong>,以及输入<strong>实时搜索</strong>(search-asyou-type)和<strong>搜索纠错</strong>(did-you-mean)等搜索建议功能。</li><li><code>英国卫报</code>使用Elasticsearch结合用户日志和社交网络数据提供给他们的编辑以实时的反馈,以便及时了解公众对新发表的文章的回应。</li><li><code>StackOverflow</code>结合全文搜索与地理位置查询,以及more-like-this功能来找到相关的问题和答案。</li><li><code>Github</code>使用Elasticsearch检索1300亿行的代码。</li><li>但是Elasticsearch不仅用于大型企业，它还让像<code>DataDog</code>以及<code>Klout</code>这样的创业公司将最初的想法变成可扩展的解决方案。</li><li>Elasticsearch可以在你的笔记本上运行,也可以在数以百计的服务器上处理PB级别的数据。</li><li>Elasticsearch是一个基于Apache Lucene(TM)的开源搜索引擎。无论在开源还是专有领域, Lucene可被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。<ul><li>但是, <strong>Lucene只是一个库</strong>。 想要使用它,你必须使用Java来作为开发语言并将其直接集成到你的应用中,更糟糕的是, Lucene非常复杂,你需要深入了解检索的相关知识来理解它是如何工作的。</li></ul></li><li>Elasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能,但是它的<strong>目的</strong>是<mark>通过简单的<strong>RESTful API</strong>来隐藏Lucene的复杂性,从而让全文搜索变得简单。</mark></li></ul><h3 id="2-Solr简介"><a href="#2-Solr简介" class="headerlink" title="2.Solr简介"></a>2.Solr简介</h3><ul><li>Solr是Apache下的一个顶级开源项目,采用Java开发,它是<strong>基于Lucene的全文搜索服务器</strong>。Solr提供了比Lucene更为<strong>丰富的查询语言</strong>,同时实现了<strong>可配置</strong>、<strong>可扩展</strong>，并<strong>对索引、搜索性能进行了优化</strong></li><li>Solr可以<strong>独立运行</strong>,运行在letty. Tomcat等这些Selrvlet容器中 , Solr 索引的实现方法很简单,<mark>用POST方法向Solr服务器发送一个描述Field及其内容的XML文档, Solr根据xml文档<strong>添加、删除、更新</strong>索引</mark>。Solr 搜索只需要发送HTTP GET请求,然后对Solr返回xml、json等格式的查询结果进行解析,组织页面布局。</li><li>Solr不提供构建UI的功能, <strong>Solr提供了一个管理界面,通过管理界面可以查询Solr的配置和运行情况。</strong></li><li>Solr是基于lucene开发企业级搜索服务器,实际上就是封装了lucene.</li><li>Solr是一个独立的企业级搜索应用服务器,它<strong>对外提供类似于Web-service的API接口</strong>。用户可以通过http请求,向搜索引擎服务器提交-定格式的文件,生成索引;也可以通过提出查找请求,并得到返回结果。</li></ul><h3 id="3-ElasticSearch与Solr比较"><a href="#3-ElasticSearch与Solr比较" class="headerlink" title="3.ElasticSearch与Solr比较"></a>3.ElasticSearch与Solr比较</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当单纯的对已有数据进行搜索时，Solr更快</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/dax3epHjOuiJrm6.png"                      alt="image-20220726151635541"                ></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当实时建立索引时，Solr会产生io阻塞，查询性能较差，ElasticSearch具有明显的优势</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/OsupdY4G3eL6AVE.png"                      alt="image-20220726151724421"                ></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">随着数据量的增加，Solr的搜索效率会变得更低，而ElasticSearch却没有明显的变化</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/nUPi4IFZLxYgOGW.png"                      alt="image-20220726151755439"                ></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">转变我们的搜索基础设施后从Solr ElasticSearch，我们看见一个即时~ 50x提高搜索性能！</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/27/QcSOJkBViTFH6oG.png"                      alt="image-20220726151828244"                ></p><h3 id="4-ElasticSearch-vs-Solr-总结"><a href="#4-ElasticSearch-vs-Solr-总结" class="headerlink" title="4.ElasticSearch vs Solr 总结"></a>4.ElasticSearch vs Solr 总结</h3><ol><li>es基本是&#x3D;&#x3D;开箱即用&#x3D;&#x3D;(解压就可以用了!),非常简单.solr安装略微复杂一丢丢!</li><li>Solr利用Zookeeper进行分布式管理,而&#x3D;&#x3D;Elasticsearch自身带有分布式协调管理功能&#x3D;&#x3D;.</li><li>solr支持更多格式的数据,比如JSON,XML,CSV, 而elasticsearch仅仅支持json文件格式</li><li>Solr官网提供的功能很多,而elasticsearch本身更注重核心功能,高级功能多有第三方插件提供,例如图形化界面需要kibana友好质层支撑</li><li>Solr查询块,但更新索引时慢(即插入删除慢),用于电商等查询多的应用;<ul><li>ES建立索引块(即查询慢),即&#x3D;&#x3D;实时性查询快&#x3D;&#x3D;,用于facebook新浪等搜索.</li><li>Solr是传统搜索应用的有力解决方案,但Elasticsearch更适用于新兴的实时搜索应用.</li></ul></li><li>Solr比较成熟,有一个更大,更成熟的用户,开发好贡献者社区,而Elasticsearch相对开发维护者较少,更新太快,&#x3D;&#x3D;学习使用成本较高&#x3D;&#x3D;.</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Elaticsearch&lt;/strong&gt;，简称为es，es是一个开源的&lt;strong&gt;高扩展&lt;/strong&gt;的&lt;strong&gt;分布式全文检索引擎&lt;/strong&gt;，它可以近乎&lt;strong&gt;实时的存储&lt;/strong&gt;、&lt;strong&gt;检索数据;&lt;str</summary>
      
    
    
    
    
    <category term="ElasticSearch" scheme="http://example.com/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Linux入门之三种软件安装方式及服务器基本环境搭建</title>
    <link href="http://example.com/2022/07/24/Linux%E5%85%A5%E9%97%A8%E4%B9%8B%E4%B8%89%E7%A7%8D%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F%E5%8F%8A%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2022/07/24/Linux%E5%85%A5%E9%97%A8%E4%B9%8B%E4%B8%89%E7%A7%8D%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F%E5%8F%8A%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2022-07-24T08:12:46.000Z</published>
    <updated>2022-07-24T08:36:19.202Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、jdk安装（rpm安装）"><a href="#1、jdk安装（rpm安装）" class="headerlink" title="1、jdk安装（rpm安装）"></a>1、jdk安装（rpm安装）</h2><p>1、rpm下载地址<a class="link"   href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" >http://www.oracle.com/technetwork/java/javase/downloads/index.html<i class="fas fa-external-link-alt"></i></a></p><p>2、如果有安装openjdk 则卸载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@fang ~]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">&quot;1.8.0_121&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_121-b13)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)</span><br><span class="line"><span class="comment"># 检查</span></span><br><span class="line">[root@fang ~]<span class="comment"># rpm -qa|grep jdk</span></span><br><span class="line">jdk1.8.0_121-1.8.0_121-fcs.x86_64</span><br><span class="line"><span class="comment"># 卸载 -e --nodeps 强制删除</span></span><br><span class="line">[root@fang ~]<span class="comment"># rpm -e --nodeps jdk1.8.0_121-1.8.0_121-fcs.x86_64</span></span><br><span class="line">[root@fang ~]<span class="comment"># java -version</span></span><br><span class="line">-bash: /usr/bin/java: No such file or directory  <span class="comment"># OK</span></span><br></pre></td></tr></table></figure><p>3、安装JDK</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装java rpm</span></span><br><span class="line">[root@fang fang]<span class="comment"># rpm -ivh jdk-8u221-linux-x64.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完成后配置环境变量 文件：/etc/profile</span></span><br><span class="line">JAVA_HOME=/usr/java/jdk-14.0.1</span><br><span class="line">JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin</span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME PATH CLASSPATH</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存退出</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 让新增的环境变量生效！</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试 java -version</span></span><br><span class="line">[root@fang java]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">&quot;1.8.0_221&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_221-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)</span><br></pre></td></tr></table></figure><h2 id="2、Tomcat安装（解压缩安装）"><a href="#2、Tomcat安装（解压缩安装）" class="headerlink" title="2、Tomcat安装（解压缩安装）"></a>2、Tomcat安装（解压缩安装）</h2><p>1、安装好了Java环境后我们可以测试下Tomcat！准备好Tomcat的安装包！</p><p>2、将文件移动到&#x2F;usr&#x2F;tomcat&#x2F;下，并解压！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@fang fang]<span class="comment"># mv apache-tomcat-9.0.22.tar.gz /usr</span></span><br><span class="line">[root@fang fang]<span class="comment"># cd /usr</span></span><br><span class="line">[root@fang usr]<span class="comment"># ls</span></span><br><span class="line">apache-tomcat-9.0.22.tar.gz</span><br><span class="line">[root@fang usr]<span class="comment"># tar -zxvf apache-tomcat-9.0.22.tar.gz   # 解压</span></span><br></pre></td></tr></table></figure><p>3、运行Tomcat，进入bin目录，和我们以前在Windows下看的都是一样的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行：startup.sh --&gt;启动tomcat</span></span><br><span class="line"><span class="comment"># 执行：shutdown.sh --&gt;关闭tomcat</span></span><br><span class="line">./startup.sh</span><br><span class="line">./shutdown.sh</span><br></pre></td></tr></table></figure><p>4、确保Linux的防火墙端口是开启的，如果是阿里云，需要保证阿里云的安全组策略是开放的！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看firewall服务状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启、重启、关闭、firewalld.service服务</span></span><br><span class="line"><span class="comment"># 开启</span></span><br><span class="line">service firewalld start</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">service firewalld restart</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">service firewalld stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看防火墙规则</span></span><br><span class="line">firewall-cmd --list-all    <span class="comment"># 查看全部信息</span></span><br><span class="line">firewall-cmd --list-ports  <span class="comment"># 只看端口信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启端口</span></span><br><span class="line">开端口命令：firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">重启防火墙：systemctl restart firewalld.service</span><br><span class="line"></span><br><span class="line">命令含义：</span><br><span class="line">--zone <span class="comment">#作用域</span></span><br><span class="line">--add-port=80/tcp  <span class="comment">#添加端口，格式为：端口/通讯协议</span></span><br><span class="line">--permanent   <span class="comment">#永久生效，没有此参数重启后失效</span></span><br></pre></td></tr></table></figure><p> 如果是阿里云 上传完毕的项目直接购买自己的域名,备案解析过去即可!<br> 域名解析后,如果端口是80 - http或者443-https 可以直接访问,如果是9000 8080 ,就需要通过Apcahe或者Nginx做一下反向代理即可（配置文件）</p><h2 id="3、安装Docker（yum安装）"><a href="#3、安装Docker（yum安装）" class="headerlink" title="3、安装Docker（yum安装）"></a>3、安装Docker（yum安装）</h2><blockquote><p>基于 CentOS 7 安装</p></blockquote><ol><li><p>官网安装参考手册：<a class="link"   href="https://docs.docker.com/install/linux/docker-ce/centos/" >https://docs.docker.com/install/linux/docker-ce/centos/<i class="fas fa-external-link-alt"></i></a></p></li><li><p>确定你是CentOS7及以上版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@192 Desktop]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.2.1511 (Core)</span><br></pre></td></tr></table></figure></li><li><p>yum安装gcc相关（需要确保 虚拟机可以上外网 ）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure></li><li><p>卸载旧版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove docker docker-common docker-selinux docker-engine</span><br><span class="line"><span class="comment"># 官网版本</span></span><br><span class="line">yum remove docker \</span><br><span class="line">          docker-client \</span><br><span class="line">          docker-client-latest \</span><br><span class="line">          docker-common \</span><br><span class="line">          docker-latest \</span><br><span class="line">          docker-latest-logrotate \</span><br><span class="line">          docker-logrotate \</span><br><span class="line">          docker-engine</span><br></pre></td></tr></table></figure></li><li><p>安装需要的软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure></li><li><p>设置stable镜像仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 错误</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment">## 报错</span></span><br><span class="line">[Errno 14] curl<span class="comment">#35 - TCP connection reset by peer</span></span><br><span class="line">[Errno 12] curl<span class="comment">#35 - Timeout</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确推荐使用国内的</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>更新yum软件包索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure></li><li><p>安装Docker CE</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>启动docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line"></span><br><span class="line">docker run hello-world</span><br><span class="line"></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、jdk安装（rpm安装）&quot;&gt;&lt;a href=&quot;#1、jdk安装（rpm安装）&quot; class=&quot;headerlink&quot; title=&quot;1、jdk安装（rpm安装）&quot;&gt;&lt;/a&gt;1、jdk安装（rpm安装）&lt;/h2&gt;&lt;p&gt;1、rpm下载地址&lt;a class=&quot;lin</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux入门之Vim使用及账号用户管理</title>
    <link href="http://example.com/2022/07/24/Linux%E5%85%A5%E9%97%A8%E4%B9%8BVim%E4%BD%BF%E7%94%A8%E5%8F%8A%E8%B4%A6%E5%8F%B7%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2022/07/24/Linux%E5%85%A5%E9%97%A8%E4%B9%8BVim%E4%BD%BF%E7%94%A8%E5%8F%8A%E8%B4%A6%E5%8F%B7%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</id>
    <published>2022-07-24T07:27:22.000Z</published>
    <updated>2022-07-24T08:30:22.702Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、Vim使用"><a href="#1、Vim使用" class="headerlink" title="1、Vim使用"></a>1、Vim使用</h2><blockquote><p>什么是Vim编辑器</p></blockquote><p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。</p><p>vim 则可以说是程序开发者的一项很好用的工具。</p><p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p><p>连 vim 的官方网站 (<a class="link"   href="http://www.vim.org/" >http://www.vim.org<i class="fas fa-external-link-alt"></i></a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p><p>vim 键盘图：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/24/XK76kaoQytvYinB.png"                      alt="image-20220724153224774"                ></p><blockquote><p>三种使用模式</p></blockquote><p>基本上 vi&#x2F;vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。这三种模式的作用分别是：</p><p><strong>命令模式：</strong></p><p>用户刚刚启动 vi&#x2F;vim，便进入了命令模式。</p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><p>以下是常用的几个命令：</p><ul><li><strong>i</strong> 切换到输入模式，以输入字符。</li><li><strong>x</strong> 删除当前光标所在处的字符。</li><li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。</li></ul><p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p><p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p><p><strong>输入模式：</strong></p><p>在命令模式下按下i就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li><strong>字符按键以及Shift组合</strong>，输入字符</li><li><strong>ENTER</strong>，回车键，换行</li><li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li><li><strong>DEL</strong>，删除键，删除光标后一个字符</li><li><strong>方向键</strong>，在文本中移动光标</li><li><strong>HOME</strong>&#x2F;<strong>END</strong>，移动光标到行首&#x2F;行尾</li><li><strong>Page Up</strong>&#x2F;<strong>Page Down</strong>，上&#x2F;下翻页</li><li><strong>Insert</strong>，切换光标为输入&#x2F;替换模式，光标将变成竖线&#x2F;下划线</li><li><strong>ESC</strong>，退出输入模式，切换到命令模式</li></ul><p><strong>底线命令模式</strong></p><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li>q 退出程序</li><li>w 保存文件</li></ul><p>按ESC键可随时退出底线命令模式。</p><p>简单的说，我们可以将这三个模式想成底下的图标来表示：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/24/cfLrKd4p7vNMCZE.png"                      alt="image-20220724153528859"                ></p><blockquote><p>上手体验一下，在home目录下测试</p></blockquote><p>如果你想要使用 vi 来建立一个名为 fang.txt 的文件时，你可以这样做：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@fang home]# vim fang.txt</span><br></pre></td></tr></table></figure><p>然后就会进入文件</p><p><strong>按下 i 进入输入模式(也称为编辑模式)，开始编辑文字</strong></p><p>在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！</p><p>在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。</p><p>这个时候，键盘上除了 <strong>Esc</strong> 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。</p><p><strong>按下 ESC 按钮回到一般模式</strong></p><p>好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 <strong>Esc</strong> 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！</p><p>在一般模式中按下 <strong>:wq</strong> 储存后离开 vim！</p><blockquote><p>Vim 按键说明</p></blockquote><p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p><p><strong>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</strong></p><table><thead><tr><th align="left">移动光标的方法</th><th></th></tr></thead><tbody><tr><td align="left">h 或 向左箭头键(←)</td><td>光标向左移动一个字符</td></tr><tr><td align="left">j 或 向下箭头键(↓)</td><td>光标向下移动一个字符</td></tr><tr><td align="left">k 或 向上箭头键(↑)</td><td>光标向上移动一个字符</td></tr><tr><td align="left">l 或 向右箭头键(→)</td><td>光标向右移动一个字符</td></tr><tr><td align="left">[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [d]</td><td>屏幕『向下』移动半页</td></tr><tr><td align="left">[Ctrl] + [u]</td><td>屏幕『向上』移动半页</td></tr><tr><td align="left">+</td><td>光标移动到非空格符的下一行</td></tr><tr><td align="left">-</td><td>光标移动到非空格符的上一行</td></tr><tr><td align="left">n&lt; space&gt;</td><td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。</td></tr><tr><td align="left">0 或功能键[Home]</td><td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td></tr><tr><td align="left">$ 或功能键[End]</td><td>移动到这一行的最后面字符处(常用)</td></tr><tr><td align="left">H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td align="left">M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td align="left">L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td align="left">G</td><td>移动到这个档案的最后一行(常用)</td></tr><tr><td align="left">nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td></tr><tr><td align="left">gg</td><td>移动到这个档案的第一行，相当于 1G 啊！(常用)</td></tr><tr><td align="left">n&lt; Enter&gt;</td><td>n 为数字。光标向下移动 n 行(常用)</td></tr></tbody></table><table><thead><tr><th align="left">搜索替换</th><th></th></tr></thead><tbody><tr><td align="left">&#x2F;word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 &#x2F;vbird 即可！(常用)</td></tr><tr><td align="left">?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td align="left">n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 &#x2F;vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td></tr><tr><td align="left">N</td><td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。例如 &#x2F;vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td></tr></tbody></table><table><thead><tr><th align="left">删除、复制与粘贴</th><th></th></tr></thead><tbody><tr><td align="left">x, X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td align="left">nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td></tr><tr><td align="left">dd</td><td>删除游标所在的那一整行(常用)</td></tr><tr><td align="left">ndd</td><td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td></tr><tr><td align="left">d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td align="left">dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td align="left">d$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td align="left">d0</td><td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td align="left">yy</td><td>复制游标所在的那一行(常用)</td></tr><tr><td align="left">nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td align="left">y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td align="left">yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td align="left">y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td align="left">y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td align="left">p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？那么原本的第 20 行会被推到变成 30 行。(常用)</td></tr><tr><td align="left">J</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td align="left">c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td align="left">u</td><td>复原前一个动作。(常用)</td></tr><tr><td align="left">[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr></tbody></table><p><strong>第二部分：一般模式切换到编辑模式的可用的按钮说明</strong></p><table><thead><tr><th align="left">进入输入或取代的编辑模式</th><th></th></tr></thead><tbody><tr><td align="left">i, I</td><td>进入输入模式(Insert mode)：i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。(常用)</td></tr><tr><td align="left">a, A</td><td>进入输入模式(Insert mode)：a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td align="left">o, O</td><td>进入输入模式(Insert mode)：这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』；O 为在目前光标所在处的上一行输入新的一行！(常用)</td></tr><tr><td align="left">r, R</td><td>进入取代模式(Replace mode)：r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td align="left">[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><p><strong>第三部分：一般模式切换到指令行模式的可用的按钮说明</strong></p><table><thead><tr><th align="left">指令行的储存、离开等指令</th><th></th></tr></thead><tbody><tr><td align="left">:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td align="left">:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td align="left">:q</td><td>离开 vi (常用)</td></tr><tr><td align="left">:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td align="left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td align="left">:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td align="left">ZZ</td><td>这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td></tr><tr><td align="left">:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td align="left">:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td align="left">:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td align="left">:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls &#x2F;home』即可在 vi 当中看 &#x2F;home 底下以 ls 输出的档案信息！</td></tr><tr><td align="left">:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td align="left">:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table><h2 id="2、账号管理"><a href="#2、账号管理" class="headerlink" title="2、账号管理"></a>2、账号管理</h2><blockquote><p>简介</p></blockquote><p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p><p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p><p>每个用户账号都拥有一个唯一的用户名和各自的口令。</p><p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p><p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p><ul><li>用户账号的添加、删除与修改。</li><li>用户口令的管理。</li><li>用户组的管理。</li></ul><blockquote><p>用户账号的管理</p></blockquote><p>用户账号的管理工作主要涉及到用户账号的添加、修改和删除。</p><p>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录Shell等资源。</p><blockquote><p>添加账号 useradd</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd 选项 用户名</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><p>选项 :</p></li><li><ul><li>-c comment 指定一段注释性描述。</li><li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li><li>-g 用户组 指定用户所属的用户组。</li><li>-G 用户组，用户组 指定用户所属的附加组。</li><li>-m　使用者目录如不存在则自动建立。</li><li>-s Shell文件 指定用户的登录Shell。</li><li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li></ul></li><li><p>用户名 :</p></li><li><ul><li>指定新账号的登录名。</li></ul></li></ul><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此命令创建了一个用户fang，其中-m选项用来为登录名fang产生一个主目录 /home/fang</span></span><br><span class="line">[root@fang home]<span class="comment"># useradd -m fang</span></span><br></pre></td></tr></table></figure><p>增加用户账号就是在&#x2F;etc&#x2F;passwd文件中为新用户增加一条记录，同时更新其他系统文件如&#x2F;etc&#x2F;shadow, &#x2F;etc&#x2F;group等。</p><blockquote><p>删除帐号</p></blockquote><p>如果一个用户的账号不再使用，可以从系统中删除。</p><p>删除用户账号就是要将&#x2F;etc&#x2F;passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p><p>删除一个已有的用户账号使用userdel命令，其格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel 选项 用户名</span><br></pre></td></tr></table></figure><p>常用的选项是 <strong>-r</strong>，它的作用是把用户的主目录一起删除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@fang home]<span class="comment"># userdel -r fang</span></span><br></pre></td></tr></table></figure><p>此命令删除用户fang在系统文件中（主要是&#x2F;etc&#x2F;passwd, &#x2F;etc&#x2F;shadow, &#x2F;etc&#x2F;group等）的记录，同时删除用户的主目录。</p><blockquote><p>Linux下如何切换用户</p></blockquote><p>1.切换用户的命令为：su username 【username是你的用户名哦】</p><p>2.从普通用户切换到root用户，还可以使用命令：sudo su</p><p>3.在终端输入exit或logout或使用快捷方式ctrl+d，可以退回到原来用户，其实ctrl+d也是执行的exit命令</p><p>4.在切换用户时，如果想在切换用户之后使用新用户的工作环境，可以在su和username之间加-，例如：【su - root】</p><p>$表示普通用户</p><p>#表示超级用户，也就是root用户</p><blockquote><p>修改帐号</p></blockquote><p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。</p><p>修改已有用户的信息使用usermod命令，其格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod 选项 用户名</span><br></pre></td></tr></table></figure><p>常用的选项包括-c, -d, -m, -g, -G, -s, -u以及-o等，这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># usermod -s /bin/ksh -d /home/z –g developer fang</span></span><br></pre></td></tr></table></figure><p>此命令将用户fang的登录Shell修改为ksh，主目录改为&#x2F;home&#x2F;z，用户组改为developer。</p><blockquote><p>用户口令的管理</p></blockquote><p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。</p><p>指定和修改用户口令的Shell命令是passwd。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。</p><p>命令的格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd 选项 用户名</span><br></pre></td></tr></table></figure><p>可使用的选项：</p><ul><li>-l 锁定口令，即禁用账号。</li><li>-u 口令解锁。</li><li>-d 使账号无口令。</li><li>-f 强迫用户下次登录时修改口令。</li></ul><p>如果默认用户名，则修改当前用户的口令。</p><p>例如，假设当前用户是fang，则下面的命令修改该用户自己的口令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ passwd</span><br><span class="line">Old password:******</span><br><span class="line">New password:*******</span><br><span class="line">Re-enter new password:*******</span><br></pre></td></tr></table></figure><p>如果是超级用户，可以用下列形式指定任何用户的口令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># passwd fang</span></span><br><span class="line">New password:*******</span><br><span class="line">Re-enter new password:*******</span><br></pre></td></tr></table></figure><p>普通用户修改自己的口令时，passwd命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。</p><p>为了系统安全起见，用户应该选择比较复杂的口令，例如最好使用8位长的口令，口令中包含有大写、小写字母和数字，并且应该与姓名、生日等不相同。</p><p>为用户指定空口令时，执行下列形式的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># passwd -d fang</span></span><br></pre></td></tr></table></figure><p>此命令将用户 fang的口令删除，这样用户 fang下一次登录时，系统就不再允许该用户登录了。</p><p>passwd 命令还可以用 -l(lock) 选项锁定某一用户，使其不能登录，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># passwd -l fang</span></span><br></pre></td></tr></table></figure><h2 id="3、用户组管理"><a href="#3、用户组管理" class="headerlink" title="3、用户组管理"></a>3、用户组管理</h2><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p><p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对&#x2F;etc&#x2F;group文件的更新。</p><blockquote><p>增加一个新的用户组使用groupadd命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd 选项 用户组</span><br></pre></td></tr></table></figure><p>可以使用的选项有：</p><ul><li>-g GID 指定新用户组的组标识号（GID）。</li><li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li></ul><p>实例1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># groupadd group1</span></span><br></pre></td></tr></table></figure><p>此命令向系统中增加了一个新组group1，新组的组标识号是在当前已有的最大组标识号的基础上加1。</p><p>实例2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># groupadd -g 101 group2</span></span><br></pre></td></tr></table></figure><p>此命令向系统中增加了一个新组group2，同时指定新组的组标识号是101。</p><blockquote><p>如果要删除一个已有的用户组，使用groupdel命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel 用户组</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># groupdel group1</span></span><br></pre></td></tr></table></figure><p>此命令从系统中删除组group1。</p><blockquote><p>修改用户组的属性使用groupmod命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod 选项 用户组</span><br></pre></td></tr></table></figure><p>常用的选项有：</p><ul><li>-g GID 为用户组指定新的组标识号。</li><li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li><li>-n新用户组 将用户组的名字改为新名字</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此命令将组group2的组标识号修改为102。</span></span><br><span class="line">groupmod -g 102 group2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将组group2的标识号改为10000，组名修改为group3。</span></span><br><span class="line">groupmod –g 10000 -n group3 group2</span><br></pre></td></tr></table></figure><blockquote><p>切换组</p></blockquote><p>如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</p><p>用户可以在登录后，使用命令newgrp切换到其他用户组，这个命令的参数就是目的用户组。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ newgrp root</span><br></pre></td></tr></table></figure><p>这条命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或附加组。</p><blockquote><p>&#x2F;etc&#x2F;passwd</p></blockquote><p>完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。</p><p>与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括&#x2F;etc&#x2F;passwd, &#x2F;etc&#x2F;shadow, &#x2F;etc&#x2F;group等。</p><p>下面分别介绍这些文件的内容。</p><p><strong>&#x2F;etc&#x2F;passwd文件是用户管理工作涉及的最重要的一个文件。</strong></p><p>Linux系统中的每个用户都在&#x2F;etc&#x2F;passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。</p><p>这个文件对所有用户都是可读的。它的内容类似下面的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">＃ <span class="built_in">cat</span> /etc/passwd</span><br><span class="line"></span><br><span class="line">root:x:0:0:Superuser:/:</span><br><span class="line">daemon:x:1:1:System daemons:/etc:</span><br><span class="line">bin:x:2:2:Owner of system commands:/bin:</span><br><span class="line">sys:x:3:3:Owner of system files:/usr/sys:</span><br><span class="line">adm:x:4:4:System accounting:/usr/adm:</span><br><span class="line">uucp:x:5:5:UUCP administrator:/usr/lib/uucp:</span><br><span class="line">auth:x:7:21:Authentication administrator:/tcb/files/auth:</span><br><span class="line">cron:x:9:16:Cron daemon:/usr/spool/cron:</span><br><span class="line">listen:x:37:4:Network daemon:/usr/net/nls:</span><br><span class="line">lp:x:71:18:Printer administrator:/usr/spool/lp:</span><br></pre></td></tr></table></figure><p>从上面的例子我们可以看到，&#x2F;etc&#x2F;passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</span><br></pre></td></tr></table></figure><p>1）”用户名”是代表用户账号的字符串。</p><p>通常长度不超过8个字符，并且由大小写字母和&#x2F;或数字组成。登录名中不能有冒号(:)，因为冒号在这里是分隔符。</p><p>为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。</p><p>2）“口令”一些系统中，存放着加密后的用户口令字。</p><p>虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于&#x2F;etc&#x2F;passwd文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux 系统（如SVR4）都使用了shadow技术，把真正的加密后的用户口令字存放到&#x2F;etc&#x2F;shadow文件中，而在&#x2F;etc&#x2F;passwd文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。</p><p>3）“用户标识号”是一个整数，系统内部用它来标识用户。</p><p>一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录Shell等。</p><p>通常用户标识号的取值范围是0～65 535。0是超级用户root的标识号，1～99由系统保留，作为管理账号，普通用户的标识号从100开始。在Linux系统中，这个界限是500。</p><p>4）“组标识号”字段记录的是用户所属的用户组。</p><p>它对应着&#x2F;etc&#x2F;group文件中的一条记录。</p><p>5)“注释性描述”字段记录着用户的一些个人情况。</p><p>例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的Linux 系统中，这个字段的格式并没有统一。在许多Linux系统中，这个字段存放的是一段任意的注释性描述文字，用作finger命令的输出。</p><p>6)“主目录”，也就是用户的起始工作目录。</p><p>它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。</p><p>7)用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。</p><p>Shell是用户与Linux系统之间的接口。Linux的Shell有许多种，每种都有不同的特点。常用的有sh(Bourne Shell), csh(C Shell), ksh(Korn Shell), tcsh(TENEX&#x2F;TOPS-20 type C Shell), bash(Bourne Again Shell)等。</p><p>系统管理员可以根据系统情况和用户习惯为用户指定某个Shell。如果不指定Shell，那么系统使用sh为默认的登录Shell，即这个字段的值为&#x2F;bin&#x2F;sh。</p><p>用户的登录Shell也可以指定为某个特定的程序（此程序不是一个命令解释器）。</p><p>利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些Linux 系统要求只有那些在系统中登记了的程序才能出现在这个字段中。</p><p>8)系统中有一类用户称为伪用户（pseudo users）。</p><p>这些用户在&#x2F;etc&#x2F;passwd文件中也占有一条记录，但是不能登录，因为它们的登录Shell为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。</p><p>常见的伪用户如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">伪 用 户 含 义</span><br><span class="line">bin 拥有可执行的用户命令文件</span><br><span class="line">sys 拥有系统文件</span><br><span class="line">adm 拥有帐户文件</span><br><span class="line">uucp UUCP使用</span><br><span class="line">lp lp或lpd子系统使用</span><br><span class="line">nobody NFS使用</span><br></pre></td></tr></table></figure><blockquote><p>&#x2F;etc&#x2F;shadow</p></blockquote><p><strong>1、除了上面列出的伪用户外，还有许多标准的伪用户，例如：audit, cron, mail, usenet等，它们也都各自为相关的进程和文件所需要。</strong></p><p>由于&#x2F;etc&#x2F;passwd文件是所有用户都可读的，如果用户的密码太简单或规律比较明显的话，一台普通的计算机就能够很容易地将它破解，因此对安全性要求较高的Linux系统都把加密后的口令字分离出来，单独存放在一个文件中，这个文件是&#x2F;etc&#x2F;shadow文件。有超级用户才拥有该文件读权限，这就保证了用户密码的安全性。</p><p><strong>2、&#x2F;etc&#x2F;shadow中的记录行与&#x2F;etc&#x2F;passwd中的一一对应，它由pwconv命令根据&#x2F;etc&#x2F;passwd中的数据自动产生</strong></p><p>它的文件格式与&#x2F;etc&#x2F;passwd类似，由若干个字段组成，字段之间用”:”隔开。这些字段是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</span><br></pre></td></tr></table></figure><ol><li>“登录名”是与&#x2F;etc&#x2F;passwd文件中的登录名相一致的用户账号</li><li>“口令”字段存放的是加密后的用户口令字，长度为13个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合 { .&#x2F;0-9A-Za-z }中的字符，则对应的用户不能登录。</li><li>“最后一次修改时间”表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在SCO Linux 中，这个时间起点是1970年1月1日。</li><li>“最小时间间隔”指的是两次修改口令之间所需的最小天数。</li><li>“最大时间间隔”指的是口令保持有效的最大天数。</li><li>“警告时间”字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。</li><li>“不活动时间”表示的是用户没有登录活动但账号仍能保持有效的最大天数。</li><li>“失效时间”字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。</li></ol><blockquote><p>&#x2F;etc&#x2F;group</p></blockquote><p>用户组的所有信息都存放在&#x2F;etc&#x2F;group文件中。</p><p>将用户分组是Linux 系统中对用户进行管理及控制访问权限的一种手段。</p><p>每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不同的组。</p><p>当一个用户同时是多个组中的成员时，在&#x2F;etc&#x2F;passwd文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。</p><p>用户要访问属于附加组的文件时，必须首先使用newgrp命令使自己成为所要访问的组中的成员。</p><p>用户组的所有信息都存放在&#x2F;etc&#x2F;group文件中。此文件的格式也类似于&#x2F;etc&#x2F;passwd文件，由冒号(:)隔开若干个字段，这些字段有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">组名:口令:组标识号:组内用户列表</span><br></pre></td></tr></table></figure><ol><li>“组名”是用户组的名称，由字母或数字构成。与&#x2F;etc&#x2F;passwd中的登录名一样，组名不应重复。</li><li>“口令”字段存放的是用户组加密后的口令字。一般Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。</li><li>“组标识号”与用户标识号类似，也是一个整数，被系统内部用来标识组。</li><li>“组内用户列表”是属于这个组的所有用户的列表&#x2F;b]，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。</li></ol><h2 id="4、磁盘管理"><a href="#4、磁盘管理" class="headerlink" title="4、磁盘管理"></a>4、磁盘管理</h2><blockquote><p>概述</p></blockquote><p>Linux磁盘管理好坏直接关系到整个系统的性能问题。</p><p>Linux磁盘管理常用命令为 df、du。</p><ul><li>df ：列出文件系统的整体磁盘使用量</li><li>du：检查磁盘空间使用量</li></ul><blockquote><p>df</p></blockquote><p>df命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> [-ahikHTm] [目录或文件名]</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-a ：列出所有的文件系统，包括系统特有的 &#x2F;proc 等文件系统；</li><li>-k ：以 KBytes 的容量显示各文件系统；</li><li>-m ：以 MBytes 的容量显示各文件系统；</li><li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li><li>-H ：以 M&#x3D;1000K 取代 M&#x3D;1024K 的进位方式；</li><li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li><li>-i ：不用硬盘容量，而以 inode 的数量来显示</li></ul><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将系统内所有的文件系统列出来！</span></span><br><span class="line"><span class="comment"># 在 Linux 底下如果 df 没有加任何选项</span></span><br><span class="line"><span class="comment"># 那么默认会将系统内所有的 (不含特殊内存内的文件系统与 swap) 都以 1 Kbytes 的容量来列出来！</span></span><br><span class="line">[root@fang /]<span class="comment"># df</span></span><br><span class="line">Filesystem     1K-blocks   Used Available Use% Mounted on</span><br><span class="line">devtmpfs          889100       0    889100   0% /dev</span><br><span class="line">tmpfs             899460     704    898756   1% /dev/shm</span><br><span class="line">tmpfs             899460     496    898964   1% /run</span><br><span class="line">tmpfs             899460       0    899460   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1       41152812 6586736  32662368  17% /</span><br><span class="line">tmpfs             179896       0    179896   0% /run/user/0</span><br><span class="line"><span class="comment"># 将容量结果以易读的容量格式显示出来</span></span><br><span class="line">[root@fang /]<span class="comment"># df -h</span></span><br><span class="line">Filesystem     Size Used Avail Use% Mounted on</span><br><span class="line">devtmpfs       869M     0 869M   0% /dev</span><br><span class="line">tmpfs           879M 708K 878M   1% /dev/shm</span><br><span class="line">tmpfs           879M 496K 878M   1% /run</span><br><span class="line">tmpfs           879M     0 879M   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1       40G  6.3G   32G  17% /</span><br><span class="line">tmpfs           176M     0 176M   0% /run/user/0</span><br><span class="line"><span class="comment"># 将系统内的所有特殊文件格式及名称都列出来</span></span><br><span class="line">[root@fang /]<span class="comment"># df -aT</span></span><br><span class="line">Filesystem     Type       1K-blocks   Used Available Use% Mounted on</span><br><span class="line">sysfs         sysfs               0       0         0    - /sys</span><br><span class="line">proc           proc                0       0         0    - /proc</span><br><span class="line">devtmpfs       devtmpfs       889100       0    889100   0% /dev</span><br><span class="line">securityfs     securityfs          0       0         0    - /sys/kernel/security</span><br><span class="line">tmpfs         tmpfs          899460     708    898752   1% /dev/shm</span><br><span class="line">devpts         devpts              0       0         0    - /dev/pts</span><br><span class="line">tmpfs         tmpfs          899460     496    898964   1% /run</span><br><span class="line">tmpfs         tmpfs          899460       0    899460   0% /sys/fs/cgroup</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/systemd</span><br><span class="line">pstore         pstore              0       0         0    - /sys/fs/pstore</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/freezer</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/cpuset</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/hugetlb</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/blkio</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/net_cls,net_prio</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/memory</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/pids</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/cpu,cpuacct</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/devices</span><br><span class="line">cgroup         cgroup              0       0         0    - /sys/fs/cgroup/perf_event</span><br><span class="line">configfs       configfs            0       0         0    - /sys/kernel/config</span><br><span class="line">/dev/vda1     ext4         41152812 6586748  32662356  17% /</span><br><span class="line">systemd-1      -                   -       -         -    - /proc/sys/fs/binfmt_misc</span><br><span class="line">mqueue         mqueue              0       0         0    - /dev/mqueue</span><br><span class="line">debugfs       debugfs             0       0         0    - /sys/kernel/debug</span><br><span class="line">hugetlbfs     hugetlbfs           0       0         0    - /dev/hugepages</span><br><span class="line">tmpfs         tmpfs          179896       0    179896   0% /run/user/0</span><br><span class="line">binfmt_misc   binfmt_misc         0       0         0    - /proc/sys/fs/binfmt_misc</span><br><span class="line"><span class="comment"># 将 /etc 底下的可用的磁盘容量以易读的容量格式显示</span></span><br><span class="line"></span><br><span class="line">[root@fang /]<span class="comment"># df -h /etc</span></span><br><span class="line">Filesystem     Size Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1       40G  6.3G   32G  17% /</span><br></pre></td></tr></table></figure><blockquote><p>du</p></blockquote><p>Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的，这里介绍Linux du命令。</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> [-ahskm] 文件或目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li><li>-h ：以人们较易读的容量格式 (G&#x2F;M) 显示；</li><li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li><li>-S ：不包括子目录下的总计，与 -s 有点差别。</li><li>-k ：以 KBytes 列出容量显示；</li><li>-m ：以 MBytes 列出容量显示；</li></ul><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只列出当前目录下的所有文件夹容量（包括隐藏文件夹）:</span></span><br><span class="line"><span class="comment"># 直接输入 du 没有加任何选项时，则 du 会分析当前所在目录的文件与目录所占用的硬盘空间。</span></span><br><span class="line">[root@fang home]<span class="comment"># du</span></span><br><span class="line">16./redis</span><br><span class="line">8./www/.oracle_jre_usage  <span class="comment"># 包括隐藏文件的目录</span></span><br><span class="line">24./www</span><br><span class="line">48.                        <span class="comment"># 这个目录(.)所占用的总量</span></span><br><span class="line"><span class="comment"># 将文件的容量也列出来</span></span><br><span class="line">[root@fang home]<span class="comment"># du -a</span></span><br><span class="line">4./redis/.bash_profile</span><br><span class="line">4./redis/.bash_logout    </span><br><span class="line">....中间省略....</span><br><span class="line">4./kuangstudy.txt <span class="comment"># 有文件的列表了</span></span><br><span class="line">48.</span><br><span class="line"><span class="comment"># 检查根目录底下每个目录所占用的容量</span></span><br><span class="line">[root@fang home]<span class="comment"># du -sm /*</span></span><br><span class="line">0/bin</span><br><span class="line">146/boot</span><br><span class="line">.....中间省略....</span><br><span class="line">0/proc</span><br><span class="line">.....中间省略....</span><br><span class="line">1/tmp</span><br><span class="line">3026/usr  <span class="comment"># 系统初期最大就是他了啦！</span></span><br><span class="line">513/var</span><br><span class="line">2666/www</span><br></pre></td></tr></table></figure><p>通配符 * 来代表每个目录。</p><p>与 df 不一样的是，du 这个命令其实会直接到文件系统内去搜寻所有的文件数据。</p><blockquote><p>磁盘挂载与卸除</p></blockquote><p>根文件系统之外的其他文件要想能够被访问，都必须通过“关联”至根文件系统上的某个目录来实现，此关联操作即为“挂载”，此目录即为“挂载点”,解除此关联关系的过程称之为“卸载”</p><p>Linux 的磁盘挂载使用mount命令，卸载使用umount命令。</p><p>磁盘挂载语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n] 装置文件名 挂载点</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 将 /dev/hdc6 挂载到 /mnt/hdc6 上面！</span><br><span class="line">[root@www ~]# mkdir /mnt/hdc6</span><br><span class="line">[root@www ~]# mount /dev/hdc6 /mnt/hdc6</span><br><span class="line">[root@www ~]# df</span><br><span class="line">Filesystem           1K-blocks     Used Available Use% Mounted on</span><br><span class="line">/dev/hdc6              1976312     42072   1833836   3% /mnt/hdc6</span><br></pre></td></tr></table></figure><p>磁盘卸载命令 umount 语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount [-fn] 装置文件名或挂载点</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；</li><li>-n ：不升级 &#x2F;etc&#x2F;mtab 情况下卸除。</li></ul><p>卸载&#x2F;dev&#x2F;hdc6</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># umount /dev/hdc6</span></span><br></pre></td></tr></table></figure><h2 id="5、进程管理"><a href="#5、进程管理" class="headerlink" title="5、进程管理"></a>5、进程管理</h2><blockquote><p>简介</p></blockquote><p>1、在LINUX中，每个执行的程序（代码）都称为一个进程。每一个进程都分配一个ID号。 </p><p>2、每一个进程，都会对应一个父进程，而这个父进程可以复制多个子进程。 </p><p>3、 每个进程都可能以两种方式存在的。前台与后台，所谓前台进程就是用户目前的屏幕上可以进行操作的。后台进程则是实际在操作，但由于屏幕上无法看到的进程，通常使用后台方式执行。 </p><p>4、一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中。直到关机才才结束。</p><blockquote><p>ps指令</p></blockquote><p>使用ps指令即可查看当前系统中正在执行的进程的各种进程信息 </p><p><strong>基本语法</strong> </p><p>ps –选项 </p><p><strong>选项说明：</strong> </p><ul><li>-a：显示当前终端的所有进程信息 </li><li>-u：以用户的形式显示进程信息 </li><li>-x：显示后台进程运行的参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux|grep xxx ，查看某个服务的进程 如，ps -aux|grep mysql</span><br></pre></td></tr></table></figure><p>说明： </p><p>1、grep 命令用于查找文件里符合条件的字符串。 </p><p>2、命令格式：命令A|命令B，即命令A的正确输出作为命令B的操作对象</p><p><strong>使用 ps -ef可查看父进程</strong> </p><p>ps -ef是以全格式显示当前所有的进程</p><p>-e 显示所有进程。-f 全格式。 </p><ul><li>UID：用户ID </li><li>PID：进程ID</li></ul><blockquote><p>终止进程kill或killall</p></blockquote><p>kill指令就像是Windows系统中的任务管理-&gt;结束任务一样 </p><p><strong>基本语法：</strong> </p><ul><li>kill [选项] <strong>进程号</strong>（功能描述：通过进程号杀死进程） </li><li>killall <strong>进程名称</strong> （功能描述：通过进程名称杀死进程，也支持通配符，这在系统因负 载过大而变得很慢 时很有用） </li><li>常用选项： -9 :表示强迫进程立即停止</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 PID</span><br></pre></td></tr></table></figure><blockquote><p>查看进程树pstree</p></blockquote><p><strong>基本语法：</strong> </p><p>pstree [选项] ,可以更加直观的来看进程信息 </p><p><strong>常用选项：</strong> </p><ul><li>-p :显示进程的PID </li><li>-u :显示进程的所属用户</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/24/jQm15lXzapEce2o.png"                      alt="image-20220724162904402"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、Vim使用&quot;&gt;&lt;a href=&quot;#1、Vim使用&quot; class=&quot;headerlink&quot; title=&quot;1、Vim使用&quot;&gt;&lt;/a&gt;1、Vim使用&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;什么是Vim编辑器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Vim是从 </summary>
      
    
    
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux入门之常用的基本命令（必掌握）</title>
    <link href="http://example.com/2022/07/24/Linux%E5%85%A5%E9%97%A8%E4%B9%8B%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%EF%BC%88%E5%BF%85%E6%8E%8C%E6%8F%A1%EF%BC%89/"/>
    <id>http://example.com/2022/07/24/Linux%E5%85%A5%E9%97%A8%E4%B9%8B%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%EF%BC%88%E5%BF%85%E6%8E%8C%E6%8F%A1%EF%BC%89/</id>
    <published>2022-07-24T03:37:10.000Z</published>
    <updated>2022-07-24T07:26:57.852Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、目录管理"><a href="#1、目录管理" class="headerlink" title="1、目录管理"></a>1、目录管理</h3><blockquote><p>绝对路径和相对路径</p></blockquote><p>我们知道Linux的目录结构为树状结构，最顶级的目录为根目录 &#x2F;。</p><p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。</p><p><strong>绝对路径：</strong></p><p>路径的写法，由根目录 &#x2F; 写起，例如：&#x2F;usr&#x2F;share&#x2F;doc 这个目录。</p><p><strong>相对路径：</strong></p><p>路径的写法，不是由 &#x2F; 写起，例如由 &#x2F;usr&#x2F;share&#x2F;doc 要到 &#x2F;usr&#x2F;share&#x2F;man 底下时，可以写成：cd ..&#x2F;man 这就是相对路径的写法啦！</p><blockquote><p>处理目录的常用命令</p></blockquote><p>接下来我们就来看几个常见的处理目录的命令吧：</p><ul><li>ls: 列出目录</li><li>cd：切换目录</li><li>pwd：显示目前的目录</li><li>mkdir：创建一个新的目录</li><li>rmdir：删除一个空的目录</li><li>cp: 复制文件或目录</li><li>rm: 移除文件或目录</li><li>mv: 移动文件与目录，或修改文件与目录的名称</li></ul><p>你可以使用 <em>man [命令]</em> 来查看各个命令的使用文档，如 ：man cp。</p><blockquote><p>ls （列出目录）</p></blockquote><p>在Linux系统当中， ls 命令可能是最常被运行的。</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># ls [-aAdfFhilnrRSt] 目录名称</span></span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</li><li>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li></ul><p>将目录下的所有文件列出来(含属性与隐藏档)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># ls -al ~</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/24/K9Lx2CgIHt3vdQr.png"                      alt="image-20220724152531307"                ></p><blockquote><p>cd （切换目录）</p></blockquote><p>cd是Change Directory的缩写，这是用来变换工作目录的命令。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd [相对路径或绝对路径]</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到用户目录下</span></span><br><span class="line">[root@fang /]<span class="comment"># cd home  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 mkdir 命令创建 fang 目录</span></span><br><span class="line">[root@fang home]<span class="comment"># mkdir fang</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 fang 目录</span></span><br><span class="line">[root@fang home]<span class="comment"># cd fang</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回到上一级</span></span><br><span class="line">[root@fang fang]<span class="comment"># cd ..</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回到根目录</span></span><br><span class="line">[root@fang fang]<span class="comment"># cd /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 表示回到自己的家目录，亦即是 /root 这个目录</span></span><br><span class="line">[root@fang fang]<span class="comment"># cd ~</span></span><br></pre></td></tr></table></figure><blockquote><p>pwd ( 显示目前所在的目录 )</p></blockquote><p>pwd 是 <strong>Print Working Directory</strong> 的缩写，也就是显示目前所在目录的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@fang fang]<span class="comment">#pwd [-P]</span></span><br></pre></td></tr></table></figure><p>选项与参数：**-P** ：显示出确实的路径，而非使用连接(link) 路径。</p><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单纯显示出目前的工作目录</span></span><br><span class="line">[root@fang ~]<span class="comment"># pwd</span></span><br><span class="line">/root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是链接，要显示真实地址，可以使用 -P参数</span></span><br><span class="line">[root@fang /]<span class="comment"># cd bin</span></span><br><span class="line">[root@fang bin]<span class="comment"># pwd -P</span></span><br><span class="line">/usr/bin</span><br></pre></td></tr></table></figure><blockquote><p>mkdir （创建新目录）</p></blockquote><p>如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> [-mp] 目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li><li>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</li></ul><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入我们用户目录下</span></span><br><span class="line">[root@fang /]<span class="comment"># cd /home</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 test 文件夹</span></span><br><span class="line">[root@fang home]<span class="comment"># mkdir test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建多层级目录</span></span><br><span class="line">[root@fang home]<span class="comment"># mkdir test1/test2/test3/test4</span></span><br><span class="line"><span class="built_in">mkdir</span>: cannot create directory ‘test1/test2/test3/test4’:</span><br><span class="line">No such file or directory  <span class="comment"># &lt;== 没办法直接创建此目录啊！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加了这个 -p 的选项，可以自行帮你创建多层目录！</span></span><br><span class="line">[root@fang home]<span class="comment"># mkdir -p test1/test2/test3/test4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建权限为 rwx--x--x 的目录。</span></span><br><span class="line">[root@fang home]<span class="comment"># mkdir -m 711 test2</span></span><br><span class="line">[root@fang home]<span class="comment"># ls -l</span></span><br><span class="line">drwxr-xr-x 2 root root  4096 Mar 12 21:55 <span class="built_in">test</span></span><br><span class="line">drwxr-xr-x 3 root root  4096 Mar 12 21:56 test1</span><br><span class="line">drwx--x--x 2 root root  4096 Mar 12 21:58 test2</span><br></pre></td></tr></table></figure><blockquote><p>rmdir ( 删除空的目录 )</p></blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> [-p] 目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：**-p ：**连同上一级『空的』目录也一起删除</p><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 看看有多少目录存在？</span></span><br><span class="line">[root@fang home]<span class="comment"># ls -l</span></span><br><span class="line">drwxr-xr-x 2 root root  4096 Mar 12 21:55 <span class="built_in">test</span></span><br><span class="line">drwxr-xr-x 3 root root  4096 Mar 12 21:56 test1</span><br><span class="line">drwx--x--x 2 root root  4096 Mar 12 21:58 test2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可直接删除掉，没问题</span></span><br><span class="line">[root@fang home]<span class="comment"># rmdir test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为尚有内容，所以无法删除！</span></span><br><span class="line">[root@fang home]<span class="comment"># rmdir test1</span></span><br><span class="line"><span class="built_in">rmdir</span>: failed to remove ‘test1’: Directory not empty</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 -p 这个选项，立刻就可以将 test1/test2/test3/test4 依次删除。</span></span><br><span class="line">[root@fang home]<span class="comment"># rmdir -p test1/test2/test3/test4</span></span><br></pre></td></tr></table></figure><p>注意：这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录，后面我们会将！</p><blockquote><p>cp ( 复制文件或目录 )</p></blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># cp [-adfilprsu] 来源档(source) 目标档(destination)</span></span><br><span class="line">[root@www ~]<span class="comment"># cp [options] source1 source2 source3 .... directory</span></span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li><strong>-a：</strong>相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li><li><strong>-p：</strong>连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li><li><strong>-d：</strong>若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</li><li><strong>-r：</strong>递归持续复制，用於目录的复制行为；(常用)</li><li><strong>-f：</strong>为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li><li><strong>-i：</strong>若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li><li><strong>-l：</strong>进行硬式连结(hard link)的连结档创建，而非复制文件本身。</li><li><strong>-s：</strong>复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</li><li><strong>-u：</strong>若 destination 比 source 旧才升级 destination ！</li></ul><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找一个有文件的目录，我这里找到 root目录</span></span><br><span class="line">[root@fang home]<span class="comment"># cd /root</span></span><br><span class="line">[root@fang ~]<span class="comment"># ls</span></span><br><span class="line">install.sh</span><br><span class="line">[root@fang ~]<span class="comment"># cd /home</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制 root目录下的install.sh 到 home目录下</span></span><br><span class="line">[root@fang home]<span class="comment"># cp /root/install.sh /home</span></span><br><span class="line">[root@fang home]<span class="comment"># ls</span></span><br><span class="line">install.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次复制，加上-i参数，增加覆盖询问？</span></span><br><span class="line">[root@fang home]<span class="comment"># cp -i /root/install.sh /home</span></span><br><span class="line"><span class="built_in">cp</span>: overwrite ‘/home/install.sh’? y <span class="comment"># n不覆盖，y为覆盖</span></span><br></pre></td></tr></table></figure><blockquote><p>rm ( 移除文件或目录 )</p></blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> [-fir] 文件或目录</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li><li>-i ：互动模式，在删除前会询问使用者是否动作</li><li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li></ul><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将刚刚在 cp 的实例中创建的 install.sh删除掉！</span></span><br><span class="line">[root@fang home]<span class="comment"># rm -i install.sh</span></span><br><span class="line"><span class="built_in">rm</span>: remove regular file ‘install.sh’? y</span><br><span class="line"><span class="comment"># 如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 尽量不要在服务器上使用 rm -rf /</span></span><br></pre></td></tr></table></figure><blockquote><p>mv  ( 移动文件与目录，或修改名称 )</p></blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># mv [-fiu] source destination</span></span><br><span class="line">[root@www ~]<span class="comment"># mv [options] source1 source2 source3 .... directory</span></span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li><li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li><li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li></ul><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制一个文件到当前目录</span></span><br><span class="line">[root@fang home]<span class="comment"># cp /root/install.sh /home</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个文件夹 test</span></span><br><span class="line">[root@fang home]<span class="comment"># mkdir test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将复制过来的文件移动到我们创建的目录，并查看</span></span><br><span class="line">[root@fang home]<span class="comment"># mv install.sh test</span></span><br><span class="line">[root@fang home]<span class="comment"># ls</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">[root@fang home]<span class="comment"># cd test</span></span><br><span class="line">[root@fang <span class="built_in">test</span>]<span class="comment"># ls</span></span><br><span class="line">install.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件夹重命名，然后再次查看！</span></span><br><span class="line">[root@fang <span class="built_in">test</span>]<span class="comment"># cd ..</span></span><br><span class="line">[root@fang home]<span class="comment"># mv test mvtest</span></span><br><span class="line">[root@fang home]<span class="comment"># ls</span></span><br><span class="line">mvtest</span><br></pre></td></tr></table></figure><h3 id="2、基本属性"><a href="#2、基本属性" class="headerlink" title="2、基本属性"></a>2、基本属性</h3><blockquote><p>看懂文件属性</p></blockquote><p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p><p>在Linux中我们可以使用<code>ll</code>或者<code>ls –l</code>命令来显示一个文件的属性以及文件所属的用户和组，如：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/24/p9yALhiUB7aVDuZ.png"                      alt="image-20220724114632110"                ></p><p>实例中，boot文件的第一个属性用”d”表示。”d”在Linux中代表该文件是一个目录文件。</p><p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等：</p><ul><li>当为[ <strong>d</strong> ]则是目录</li><li>当为[ <strong>-</strong> ]则是文件；</li><li>若是[ <strong>l</strong> ]则表示为链接文档 ( link file )；</li><li>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )；</li><li>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )。</li></ul><p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。</p><p>其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。</p><p>要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</p><p>每个文件的属性由左边第一部分的10个字符来确定（如下图）：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/24/dhUvMtguHKy6TZS.png"                      alt="image-20220724114712270"                ></p><p>从左至右用0-9这些数字来表示。</p><p>第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p><p>其中：</p><p>第1、4、7位表示读权限，如果用”r”字符表示，则有读权限，如果用”-“字符表示，则没有读权限；</p><p>第2、5、8位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限；</p><p>第3、6、9位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权限。</p><p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p><p>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。</p><p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p><p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p><p>在以上实例中，boot 文件是一个目录文件，属主和属组都为 root。</p><blockquote><p>修改文件属性</p></blockquote><p><strong>1、chgrp：更改文件属组</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chgrp</span> [-R] 属组名 文件名</span><br></pre></td></tr></table></figure><p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</p><p><strong>2、chown：更改文件属主，也可以同时更改文件属组</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> [–R] 属主名 文件名</span><br><span class="line"><span class="built_in">chown</span> [-R] 属主名：属组名 文件名</span><br></pre></td></tr></table></figure><p><strong>3、chmod：更改文件9个属性</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> [-R] xyz 文件或目录</span><br></pre></td></tr></table></figure><p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p><p>Linux文件的基本权限就有九个，分别是owner&#x2F;group&#x2F;others三种身份各有自己的read&#x2F;write&#x2F;execute权限。</p><p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r:4     w:2         x:1</span><br></pre></td></tr></table></figure><p>每种身份(owner&#x2F;group&#x2F;others)各自的三个权限(r&#x2F;w&#x2F;x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是：</p><ul><li>owner &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</li><li>group &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</li><li>others&#x3D; — &#x3D; 0+0+0 &#x3D; 0</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 770 filename</span><br></pre></td></tr></table></figure><h3 id="3、文件内容查看"><a href="#3、文件内容查看" class="headerlink" title="3、文件内容查看"></a>3、文件内容查看</h3><blockquote><p>概述</p></blockquote><p>Linux系统中使用以下命令来查看文件的内容：</p><ul><li>cat 由第一行开始显示文件内容</li><li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li><li>nl  显示的时候，顺道输出行号！</li><li>more 一页一页的显示文件内容</li><li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li><li>head 只看头几行</li><li>tail 只看尾巴几行</li></ul><p>你可以使用 *man [命令]*来查看各个命令的使用文档，如 ：man cp。</p><blockquote><p>cat 由第一行开始显示文件内容</p></blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> [-AbEnTv]</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li><li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li><li>-E ：将结尾的断行字节 $ 显示出来；</li><li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li><li>-T ：将 [tab] 按键以 ^I 显示出来；</li><li>-v ：列出一些看不出来的特殊字符</li></ul><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看网络配置: 文件地址 /etc/sysconfig/network-scripts/</span></span><br><span class="line">[root@fang ~]<span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-eth0</span></span><br><span class="line">DEVICE=eth0</span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br></pre></td></tr></table></figure><blockquote><p>tac</p></blockquote><p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@fang ~]<span class="comment"># tac /etc/sysconfig/network-scripts/ifcfg-eth0</span></span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">DEVICE=eth0</span><br></pre></td></tr></table></figure><blockquote><p>nl  显示行号</p></blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nl</span> [-bnw] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-b ：指定行号指定的方式，主要有两种：-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li><li>-n ：列出行号表示的方法，主要有三种：-n ln ：行号在荧幕的最左方显示；-n rn ：行号在自己栏位的最右方显示，且不加 0 ；-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li><li>-w ：行号栏位的占用的位数。</li></ul><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@fang ~]<span class="comment"># nl /etc/sysconfig/network-scripts/ifcfg-eth0</span></span><br><span class="line">1DEVICE=eth0</span><br><span class="line">2BOOTPROTO=dhcp</span><br><span class="line">3ONBOOT=<span class="built_in">yes</span></span><br></pre></td></tr></table></figure><blockquote><p>more  一页一页翻动</p></blockquote><p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p><ul><li>空白键 (space)：代表向下翻一页；</li><li>Enter   ：代表向下翻『一行』；</li><li>&#x2F;字串   ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li><li>:f    ：立刻显示出档名以及目前显示的行数；</li><li>q    ：代表立刻离开 more ，不再显示该文件内容。</li><li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@fang etc]<span class="comment"># more /etc/csh.login</span></span><br><span class="line">....(中间省略)....</span><br><span class="line">--More--(28%) <span class="comment"># 重点在这一行喔！你的光标也会在这里等待你的命令</span></span><br></pre></td></tr></table></figure><blockquote><p>less  一页一页翻动，以下实例输出&#x2F;etc&#x2F;man.config文件的内容：</p></blockquote><p>less运行时可以输入的命令有：</p><ul><li>空白键  ：向下翻动一页；</li><li>[pagedown]：向下翻动一页；</li><li>[pageup] ：向上翻动一页；</li><li>&#x2F;字串  ：向下搜寻『字串』的功能；</li><li>?字串  ：向上搜寻『字串』的功能；</li><li>n   ：重复前一个搜寻 (与 &#x2F; 或 ? 有关！)</li><li>N   ：反向的重复前一个搜寻 (与 &#x2F; 或 ? 有关！)</li><li>q   ：离开 less 这个程序；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@fang etc]<span class="comment"># more /etc/csh.login</span></span><br><span class="line">....(中间省略)....</span><br><span class="line">:   <span class="comment"># 这里可以等待你输入命令！</span></span><br></pre></td></tr></table></figure><blockquote><p>head  取出文件前面几行</p></blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">head</span> [-n number] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：**-n** 后面接数字，代表显示几行的意思！</p><p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@fang etc]<span class="comment"># head -n 20 /etc/csh.login</span></span><br></pre></td></tr></table></figure><blockquote><p>tail  取出文件后面几行</p></blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> [-n number] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-n ：后面接数字，代表显示几行的意思</li></ul><p>默认的情况中，显示最后 10 行！若要显示最后 20 行，就得要这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@fang etc]<span class="comment"># tail -n 20 /etc/csh.login</span></span><br></pre></td></tr></table></figure><blockquote><p>拓展：Linux 链接概念</p></blockquote><p>Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。</p><p>情况下，<strong>ln</strong> 命令产生硬链接。</p><p><strong>硬连接</strong></p><p>硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个的访问。</p><p>硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p><p><strong>软连接</strong></p><p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于 Windows 的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</p><p><strong>测试：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@fang /]<span class="comment"># cd /home</span></span><br><span class="line">[root@fang home]<span class="comment"># touch f1 # 创建一个测试文件f1</span></span><br><span class="line">[root@fang home]<span class="comment"># ls</span></span><br><span class="line">f1</span><br><span class="line">[root@fang home]<span class="comment"># ln f1 f2     # 创建f1的一个硬连接文件f2</span></span><br><span class="line">[root@fang home]<span class="comment"># ln -s f1 f3   # 创建f1的一个符号连接文件f3</span></span><br><span class="line">[root@fang home]<span class="comment"># ls -li       # -i参数显示文件的inode节点信息</span></span><br><span class="line">397247 -rw-r--r-- 2 root root     0 Mar 13 00:50 f1</span><br><span class="line">397247 -rw-r--r-- 2 root root     0 Mar 13 00:50 f2</span><br><span class="line">397248 lrwxrwxrwx 1 root root     2 Mar 13 00:50 f3 -&gt; f1</span><br></pre></td></tr></table></figure><p>从上面的结果中可以看出，硬连接文件 f2 与原文件 f1 的 inode 节点相同，均为 397247，然而符号连接文件的 inode 节点不同。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># echo 字符串输出 &gt;&gt; f1 输出到 f1文件</span></span><br><span class="line">[root@fang home]<span class="comment"># echo &quot;I am f1 file&quot; &gt;&gt;f1</span></span><br><span class="line">[root@fang home]<span class="comment"># cat f1</span></span><br><span class="line">I am f1 file</span><br><span class="line">[root@fang home]<span class="comment"># cat f2</span></span><br><span class="line">I am f1 file</span><br><span class="line">[root@fang home]<span class="comment"># cat f3</span></span><br><span class="line">I am f1 file</span><br><span class="line">[root@fang home]<span class="comment"># rm -f f1</span></span><br><span class="line">[root@fang home]<span class="comment"># cat f2</span></span><br><span class="line">I am f1 file</span><br><span class="line">[root@fang home]<span class="comment"># cat f3</span></span><br><span class="line"><span class="built_in">cat</span>: f3: No such file or directory</span><br></pre></td></tr></table></figure><p>通过上面的测试可以看出：当删除原始文件 f1 后，硬连接 f2 不受影响，但是符号连接 f1 文件无效；</p><p>依此您可以做一些相关的测试，可以得到以下全部结论：</p><ul><li>删除符号连接f3,对f1,f2无影响；</li><li>删除硬连接f2，对f1,f3也无影响；</li><li>删除原文件f1，对硬连接f2没有影响，导致符号连接f3失效；</li><li>同时删除原文件f1,硬连接f2，整个文件会真正的被删除。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、目录管理&quot;&gt;&lt;a href=&quot;#1、目录管理&quot; class=&quot;headerlink&quot; title=&quot;1、目录管理&quot;&gt;&lt;/a&gt;1、目录管理&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;绝对路径和相对路径&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们知道Linux的</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux入门之概述及环境搭建</title>
    <link href="http://example.com/2022/07/23/Linux%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2022/07/23/Linux%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2022-07-23T08:33:26.000Z</published>
    <updated>2022-07-24T03:24:55.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、入门概述"><a href="#1、入门概述" class="headerlink" title="1、入门概述"></a>1、入门概述</h2><blockquote><p>我们为什么要学习Linux</p></blockquote><p>linux诞生了这么多年，以前还喊着如何能取代windows系统，现在这个口号已经小多了，任何事物发展都有其局限性都有其天花板。就如同在国内再搞一个社交软件取代腾讯一样，想想而已基本不可能，因为用户已经习惯于使用微信交流，不是说技术上实现不了解而是老百姓已经习惯了，想让他们不用，即使他们自己不用亲戚朋友还是要用，没有办法的事情。</p><p>用习惯了windows操作系统，再让大家切换到别的操作系统基本上是不可能的事情，改变一个人已经养成的习惯太难。没有办法深入到普通老百姓的生活中，并不意味着linux就没有用武之地了。在服务器端，在开发领域linux倒是越来越受欢迎，很多程序员都觉得不懂点linux都觉得不好意思，linux在开源社区的地位依然岿然不动。</p><p>尤其是作为一个后端程序员，是必须要掌握Linux的，因为这都成为了你找工作的基础门槛了，所以不得不学习！</p><blockquote><p>Linux 简介</p></blockquote><p>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p><p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX（可移植操作系统接口） 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。</p><p>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><blockquote><p>Linux 发行版</p></blockquote><p>Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/23/P1rQquxeOa3c58S.png"                      alt="image-20220723163608919"                ></p><blockquote><p>Linux 应用领域</p></blockquote><p>今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL + PHP）组合。</p><p>目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎。</p><ul><li>巴西联邦政府由于支持 Linux 而世界闻名。</li><li>有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果。</li><li>印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux。</li><li>中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。</li><li>在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如 Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。</li><li>葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。</li><li>法国和德国同样开始逐步采用 Linux。</li></ul><blockquote><p>Linux vs Windows</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/23/2xVZPKbqpw7dUhQ.png"                      alt="image-20220723165806000"                ></p><h2 id="2、环境搭建"><a href="#2、环境搭建" class="headerlink" title="2、环境搭建"></a>2、环境搭建</h2><p>Linux 的安装，安装步骤比较繁琐，现在其实云服务器挺普遍的，价格也便宜，如果直接不想搭建，也可以直接买一台学习用用！</p><blockquote><p>安装CentOS（虚拟机安装，耗资源）</p></blockquote><p>1、可以通过镜像进行安装！</p><ol><li>这里是阿里云Centos7的镜像<a class="link"   href="http://mirrors.aliyun.com/centos/7/isos/x86_64/" >http://mirrors.aliyun.com/centos/7/isos/x86_64/<i class="fas fa-external-link-alt"></i></a></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/23/EL9TnhYs8VJuQfq.png"                      alt="image-20220723170604268"                ></p><ol start="2"><li>然后手动安装，按照提示安装即可</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/23/9J4vdOCU5pX6Hwa.png"                      alt="image-20220723170731324"                ></p><ol start="3"><li>这一步一定注意，检查这里是否有网<a class="link"   href="https://blog.csdn.net/qq_40722827/article/details/103219850" >https://blog.csdn.net/qq_40722827/article/details/103219850<i class="fas fa-external-link-alt"></i></a></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/23/N1ljmEgPQCuWtKy.png"                      alt="image-20220723170840661"                ></p><ol start="4"><li>这里就设置好密码和用户，这里的root密码就是root用户的密码，一定记住了</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/23/9vVXRZo2SITt8ub.png"                      alt="image-20220723170912535"                ></p><ol start="5"><li>然后等待安装完毕进入系统，进行登录root用户注意:密码是不回显的，也就是说你输入它不会有*号，永远是空白</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/23/WMjJG8rS9mEC5Tl.png"                      alt="image-20220723170957862"                ></p><ol start="6"><li>这里我们没有可视化界面需要安装可视化界面输入以下命令，按下enter键</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall <span class="string">&quot;X Window System&quot;</span></span><br></pre></td></tr></table></figure><ol start="7"><li>检查已安装的软件以及安装后可以安装的软件。 使用以下命令，然后按“Enter”键</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum grouplist</span><br></pre></td></tr></table></figure><ol start="8"><li>安装所需的图形界面软件GNOME（GNOME Desktop），输入以下命令，并按Enter键，</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“yum groupinstall <span class="string">&quot;GNOME Desktop”</span></span><br></pre></td></tr></table></figure><ol start="9"><li>等待程序安装，然后使用以下命令自查一下，installed那一栏有无GNOME</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum grouplist </span><br></pre></td></tr></table></figure><ol start="10"><li>重新启动系统以进入图形界面，如下图所示。重新安装，然后在此界面</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/23/Uho31k2MySB8NIC.png"                      alt="image-20220723224053361"                ></p><ol start="11"><li>直接安装</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/23/mvxXqPEpn98CbYk.png"                      alt="image-20220723224124466"                ></p><p>2、可以使用狂神配好的centos制作好的镜像！</p><ol><li>首先解压</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/23/sa4Vc5DJNRp2YbI.png"                      alt="image-20220723224615615"                ></p><ol start="2"><li>然后使用vm虚拟机去打开</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/23/oIqhK6Q3By8X2Nm.png"                      alt="image-20220723224902657"                ></p><ol start="3"><li>启动即可</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/23/XrhKPRqvIZ21Eg9.png"                      alt="image-20220723231023911"                ></p><ol start="4"><li>如果登录root用户，选择Not Listed ，用户名：root；密码：123456.</li></ol><p>3、安装 VMware 虚拟机软件，然后打开我们的镜像即可使用！</p><blockquote><p>购买云服务器（推荐）</p></blockquote><p>虚拟机安装后占用空间，也会有些卡顿，我们作为程序员其实可以选择购买一台自己的服务器，这样的话更加接近真实线上工作；</p><p>1、阿里云购买服务器：<a class="link"   href="https://www.aliyun.com/minisite/goods?userCode=0phtycgr" >https://www.aliyun.com/minisite/goods?userCode=0phtycgr<i class="fas fa-external-link-alt"></i></a></p><p>2、购买完毕后，获取服务器的ip地址，重置服务器密码，就可以远程登录了</p><ol><li>获取公网IP地址</li><li>修改登录密码</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/24/FOG5VaWYnlhZHJK.png"                      alt="image-20220724110210362"                ></p><ol start="3"><li>查看或者修改端口</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/24/OA2xcN8SWFiymCo.png"                      alt="image-20220724110331879"                ></p><p>3、下载 xShell 工具，进行远程连接使用！</p><ol><li>新建会话</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/24/mj5FSoWR6Lqu7Dl.png"                      alt="image-20220724110434859"                ></p><ol start="2"><li>登录，用户名是root，密码是你刚刚设置的实例密码</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/24/ACiVdYQ7ht2kIRy.png"                      alt="image-20220724110902961"                ></p><ol start="3"><li>登录成功，这里以后就是我们的linux操作系统了</li><li>之后可以使用xftp去执行文件传输操作</li></ol><p><strong>注意事项：</strong></p><p>如果要打开端口，需要在阿里云的安全组面板中开启对应的出入规则，不然的话会被阿里拦截！</p><blockquote><p>如果前期不好操作，可以推荐安装宝塔面板，傻瓜式管理服务器</p></blockquote><p>安装教程：<a class="link"   href="https://www.bt.cn/bbs/thread-19376-1-1.html" >https://www.bt.cn/bbs/thread-19376-1-1.html<i class="fas fa-external-link-alt"></i></a></p><p>1、开启对应的端口</p><p>2、一键安装</p><p>3、安装完毕后会得到远程面板的地址，账号，密码，就可以登录了</p><p>4、登录之后就可以可视化的安装环境和部署网站！</p><blockquote><p>关于域名</p></blockquote><p>如果自己的网站想要上线，就一定要购买一个域名然后进行备案；</p><p>备案的话需要一些认证和时间，备完完毕后，就可以解析到自己的网站了，这个时候就可以使用域名来进行服务器的访问！</p><h2 id="3、走近Linux系统"><a href="#3、走近Linux系统" class="headerlink" title="3、走近Linux系统"></a>3、走近Linux系统</h2><blockquote><p>开机登录</p></blockquote><p>开机会启动许多程序。它们在Windows叫做”服务”（service），在Linux就叫做”守护进程”（daemon）。</p><p>开机成功后，它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验证用户的身份，密码是不显示的，输完回车即可！</p><p>一般来说，用户的登录方式有三种：</p><ul><li>命令行登录</li><li>ssh登录</li><li>图形界面登录</li></ul><p>最高权限账户为 root，可以操作一切！</p><blockquote><p>关机</p></blockquote><p>在linux领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。</p><p>关机指令为：shutdown ；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sync</span> <span class="comment"># 将数据由内存同步到硬盘中。</span></span><br><span class="line"></span><br><span class="line">shutdown <span class="comment"># 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：</span></span><br><span class="line"></span><br><span class="line">shutdown –h 10 <span class="comment"># 这个命令告诉大家，计算机将在10分钟后关机</span></span><br><span class="line"></span><br><span class="line">shutdown –h now <span class="comment"># 立马关机</span></span><br><span class="line"></span><br><span class="line">shutdown –h 20:25 <span class="comment"># 系统会在今天20:25关机</span></span><br><span class="line"></span><br><span class="line">shutdown –h +10 <span class="comment"># 十分钟后关机</span></span><br><span class="line"></span><br><span class="line">shutdown –r now <span class="comment"># 系统立马重启</span></span><br><span class="line"></span><br><span class="line">shutdown –r +10 <span class="comment"># 系统十分钟后重启</span></span><br><span class="line"></span><br><span class="line">reboot <span class="comment"># 就是重启，等同于 shutdown –r now</span></span><br><span class="line"></span><br><span class="line">halt <span class="comment"># 关闭系统，等同于shutdown –h now 和 poweroff</span></span><br></pre></td></tr></table></figure><p>最后总结一下，不管是重启系统还是关闭系统，首先要运行 <strong>sync</strong> 命令，把内存中的数据写到磁盘中。</p><blockquote><p>系统目录结构</p></blockquote><p>登录系统后，在当前命令窗口下输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /</span><br></pre></td></tr></table></figure><p>你会看到如下图所示：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/24/mPze4gRyFfn278J.png"                      alt="image-20220724112109956"                ></p><p>树状目录结构：（Linux的一切资源都挂载在这个 &#x2F; 根节点下）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/24/KUwGdieTgBvaSE7.png"                      alt="image-20220724112153913"                ></p><p><strong>以下是对这些目录的解释：</strong></p><ul><li><strong>&#x2F;bin</strong>：bin是Binary的缩写, 这个目录<code>存放</code>着最经常使用的<code>命令</code>。</li><li><strong>&#x2F;boot：</strong> 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。（不要动）</li><li><strong>&#x2F;dev ：</strong> dev是Device(设备)的缩写, 存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</li><li>&#x3D;&#x3D;<strong>&#x2F;etc：</strong> 这个目录用来存放所有的系统管理所需要的配置文件和子目录。（以后存放配置文件的地方，比如Redis、Tomcat配置等等）&#x3D;&#x3D;</li><li>&#x3D;&#x3D;<strong>&#x2F;home</strong>：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。&#x3D;&#x3D;</li><li>&#x3D;&#x3D;<strong>&#x2F;opt</strong>：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。&#x3D;&#x3D;</li><li><strong>&#x2F;lib</strong>：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。（不要动）</li><li><strong>&#x2F;lost+found</strong>：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。（存放突然关机的文件）</li><li><strong>&#x2F;media</strong>：linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</li><li><strong>&#x2F;mnt</strong>：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在&#x2F;mnt&#x2F;上，然后进入该目录就可以查看光驱里的内容了。（后面会把一些本地的文件挂载在这个目录下）</li><li><strong>&#x2F;proc</strong>：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。（不用管）</li><li>&#x3D;&#x3D;<strong>&#x2F;root</strong>：该目录为系统管理员，也称作超级权限者的用户主目录。&#x3D;&#x3D;</li><li><strong>&#x2F;sbin</strong>：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</li><li><strong>&#x2F;srv</strong>：该目录存放一些服务启动之后需要提取的数据。</li><li><strong>&#x2F;sys</strong>：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。</li><li>&#x3D;&#x3D;<strong>&#x2F;tmp</strong>：这个目录是用来存放一些临时文件的。（用完即丢的文件可以放到这个目录下，如安装包等等）&#x3D;&#x3D;</li><li>&#x3D;&#x3D;<strong>&#x2F;usr</strong>：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。&#x3D;&#x3D;</li><li><strong>&#x2F;usr&#x2F;bin：</strong> 系统用户使用的应用程序。</li><li><strong>&#x2F;usr&#x2F;sbin：</strong> 超级用户使用的比较高级的管理程序和系统守护程序。</li><li><strong>&#x2F;usr&#x2F;src：</strong> 内核源代码默认的放置目录。</li><li>&#x3D;&#x3D;<strong>&#x2F;var</strong>：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。&#x3D;&#x3D;</li><li><strong>&#x2F;run</strong>：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。</li><li>&#x2F;www：存放服务器网站相关的资源，环境以及项目等等。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、入门概述&quot;&gt;&lt;a href=&quot;#1、入门概述&quot; class=&quot;headerlink&quot; title=&quot;1、入门概述&quot;&gt;&lt;/a&gt;1、入门概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我们为什么要学习Linux&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;linux诞</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Java中间件之阿里服务器购买及宝塔部署环境说明</title>
    <link href="http://example.com/2022/07/20/Java%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B9%8B%E9%98%BF%E9%87%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E5%8F%8A%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83%E8%AF%B4%E6%98%8E/"/>
    <id>http://example.com/2022/07/20/Java%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B9%8B%E9%98%BF%E9%87%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E5%8F%8A%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83%E8%AF%B4%E6%98%8E/</id>
    <published>2022-07-20T02:53:48.000Z</published>
    <updated>2022-07-20T03:18:45.315Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>为什么程序员都需要一个自己的服务器？</p></blockquote><p>1、作为一个程序员，必须要发布自己的网站和项目<br>2、练习Linux操作<br>3、自己的远程仓库、远程数据库、远程tomcat…搭建在服务器上<br>4、练习，Linux进行任意的环境部署操作</p><blockquote><p>服务器如何购买？</p></blockquote><p>尽量打折的时候买<br>香港服务器可以避免备案，但尽量不要自己挂VPN，会被封</p><p>如果是学生，可以购买学生机，</p><p>学生机地址：<a class="link"   href="https://https//developer.aliyun.com/plan/grow-up" >https://https://developer.aliyun.com/plan/grow-up<i class="fas fa-external-link-alt"></i></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/20/cZE8AYoB2whPD91.png"                      alt="image-20220720110036808"                >活动地址<br><a class="link"   href="https://cn.aliyun.com/minisite/goods?from_alibabacloud=&amp;userCode=0phtycgr" >https://cn.aliyun.com/minisite/goods?from_alibabacloud=&amp;userCode=0phtycgr<i class="fas fa-external-link-alt"></i></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/20/NcrbfzvmPWpx3XQ.png"                      alt="image-20220720110135638"                ></p><blockquote><p>买完服务器之后该做什么</p></blockquote><p>服务器就是一个远程Linux<br>1、在阿里云购买的，需要开通安全组设置；端口映射（端口映射都需要在阿里云的面板安装）</p><p>之后的安装访问宝塔需要8888端口是放行的，这里我先放行端口。进入阿里云服务器控制台</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/20/rXIeD2Yw7dCMUOo.png"                      alt="image-20220720110454388"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/20/WVdX6CcTPvbKsQo.png"                      alt="image-20220720110551344"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/20/dxBc1AD5ZULIKl4.png"                      alt="image-20220720110614908"                ></p><p>授权对象是可以指定IP开放的，我这里0.0.0.0&#x2F;0是开放所有ip访问。</p><p>2、获取服务器的公网ip地址； 修改实例名称和密码，再使用xshell 远程连接。进入云服务器控制台可以查看到服务器的公网IP地址，可修改实例名称和密码。Xshell连接到远程服务器，连接到服务器之后，我们需要搭建环境！</p><blockquote><p>连接到服务器之后，我们需要搭建环境！</p></blockquote><p>1、傻瓜式（宝塔面板）<br>宝塔面板安装教学：<a class="link"   href="https://www.bt.cn/bbs/thread-19376-1-1.html" >https://www.bt.cn/bbs/thread-19376-1-1.html<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.<span class="number">0</span>.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/20/B1cTtUwu5syrQEk.png"                      alt="image-20220720111108668"                ></p><p>下载完毕之后，就可以得到一个地址：宝塔的管理面板</p><ul><li>url</li><li>username</li><li>password</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/20/tRPFrL1c2yT4qWx.png"                      alt="image-20220720111145404"                ></p><p>浏览器访问： <a class="link"   href="http://39.99.254.180:8888/3a7a3006" >http://39.99.254.180:8888/3a7a3006<i class="fas fa-external-link-alt"></i></a></p><p>输入正确的用户和密码进去宝塔面板</p><blockquote><p>一键部署应用</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../../../../../../AppData/Roaming/Typora/typora-user-images/image-20220720111336030.png"                      alt="image-20220720111336030"                ></p><blockquote><p>端口开启(宝塔和阿里服务器都要开放)</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/20/TGMZKXS2IBvhYlr.png"                      alt="image-20220720111438808"                ></p><blockquote><p>放入网站进行访问</p></blockquote><p>比如tomcat就直接放到webapps目录下<br>特殊的网站：开源项目，就是按照自己的操作来</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/20/T6NSFZBUGoYH4wE.png"                      alt="image-20220720111621263"                ></p><blockquote><p>上传文件尽量使用XFTP</p></blockquote><blockquote><p>网站如果访问测试失败，一定是防火墙问题（Linux服务器，阿里云安全组面板）</p></blockquote><p>我们去Linux服务器，阿里云安全组面板！开放端口访问。</p><ul><li>war 可以直接丢到 tomcat 即可使用，</li><li>jar 直接用 java -jar 执行即可访问。eg: java -jar school.jar</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;为什么程序员都需要一个自己的服务器？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、作为一个程序员，必须要发布自己的网站和项目&lt;br&gt;2、练习Linux操作&lt;br&gt;3、自己的远程仓库、远程数据库、远程tomcat…搭建在服务器上&lt;br&gt;4、练习，L</summary>
      
    
    
    
    
    <category term="Java中间件" scheme="http://example.com/tags/Java%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>leetcode之最长的回文子串</title>
    <link href="http://example.com/2022/07/19/leetcode%E4%B9%8B%E6%9C%80%E9%95%BF%E7%9A%84%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <id>http://example.com/2022/07/19/leetcode%E4%B9%8B%E6%9C%80%E9%95%BF%E7%9A%84%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</id>
    <published>2022-07-19T15:00:40.000Z</published>
    <updated>2022-07-19T15:13:18.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、问题描述"><a href="#1、问题描述" class="headerlink" title="1、问题描述"></a>1、问题描述</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/19/mwxt5h7keEr9fFG.png"                      alt="image-20220719230157021"                ></p><h1 id="2、思路"><a href="#2、思路" class="headerlink" title="2、思路"></a>2、思路</h1><p>回文的意思是正着念和倒着念一样，如：上海自来水来自海上</p><p> 第一个while从当前字符往右找，如果字符相同则继续往右找，把至少一个连续一样的字符当做中心。 第二个while 就是在不越界的前提下，前后扩展，只要对称位置字符相同则继续往两端找，并把low 和high当做回文的起止索引。最后一步，和已经找到的回文索引比长度，更长则覆盖。到此完成一次for循环，然后继续从下一个字符（可能会跳过若干处理过的字符）继续重复上面的逻辑。直到整个字符数据遍历完毕。</p><h1 id="3、代码"><a href="#3、代码" class="headerlink" title="3、代码"></a>3、代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//         保存起始位置，测试了用数组似乎能比全局变量稍快一点</span></span><br><span class="line">        <span class="type">int</span>[] range = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="type">char</span>[] str = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line"><span class="comment">//             把回文看成中间的部分全是同一字符，左右部分相对称</span></span><br><span class="line"><span class="comment">//             找到下一个与当前字符不同的字符</span></span><br><span class="line">            i = findLongest(str, i, range);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(range[<span class="number">0</span>], range[<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findLongest</span><span class="params">(<span class="type">char</span>[] str, <span class="type">int</span> low, <span class="type">int</span>[] range)</span> &#123;</span><br><span class="line"><span class="comment">//         查找中间部分</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> low;</span><br><span class="line">        <span class="keyword">while</span> (high &lt; str.length - <span class="number">1</span> &amp;&amp; str[high + <span class="number">1</span>] == str[low]) &#123;</span><br><span class="line">            high++;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//         定位中间部分的最后一个字符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> high;</span><br><span class="line"><span class="comment">//         从中间向左右扩散</span></span><br><span class="line">        <span class="keyword">while</span> (low &gt; <span class="number">0</span> &amp;&amp; high &lt; str.length - <span class="number">1</span> &amp;&amp; str[low - <span class="number">1</span>] == str[high + <span class="number">1</span>]) &#123;</span><br><span class="line">            low--;</span><br><span class="line">            high++;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//         记录最大长度</span></span><br><span class="line">        <span class="keyword">if</span> (high - low &gt; range[<span class="number">1</span>] - range[<span class="number">0</span>]) &#123;</span><br><span class="line">            range[<span class="number">0</span>] = low;</span><br><span class="line">            range[<span class="number">1</span>] = high;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、问题描述&quot;&gt;&lt;a href=&quot;#1、问题描述&quot; class=&quot;headerlink&quot; title=&quot;1、问题描述&quot;&gt;&lt;/a&gt;1、问题描述&lt;/h1&gt;&lt;p&gt;&lt;img  
                     lazyload
                 </summary>
      
    
    
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Anylogic之基于百度地图实现多车实时运行</title>
    <link href="http://example.com/2022/07/19/Anylogic%E4%B9%8B%E5%9F%BA%E4%BA%8E%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%BD%A6%E5%AE%9E%E6%97%B6%E8%BF%90%E8%A1%8C/"/>
    <id>http://example.com/2022/07/19/Anylogic%E4%B9%8B%E5%9F%BA%E4%BA%8E%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%BD%A6%E5%AE%9E%E6%97%B6%E8%BF%90%E8%A1%8C/</id>
    <published>2022-07-19T08:18:17.000Z</published>
    <updated>2022-07-19T08:35:12.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、功能分析"><a href="#1、功能分析" class="headerlink" title="1、功能分析"></a>1、功能分析</h2><p>使用数组进行数据存储，根据数组里面的经纬度来实现多车运行，其中Icon的图标从<a class="link"   href="https://www.iconfinder.com/%E8%8E%B7%E5%BE%97%EF%BC%8C%E6%88%91%E4%BB%AC%E8%BF%98%E9%9C%80%E8%A6%81%E5%AE%9E%E7%8E%B0%E8%B7%9F%E9%9A%8F%E5%B0%8F%E8%BD%A6%E7%9A%84%E6%A0%87%E6%B3%A8%EF%BC%8C%E5%B9%B6%E4%B8%94%E9%9C%80%E8%A6%81%E5%A2%9E%E5%8A%A0%E4%B8%A4%E4%B8%AA%E5%8A%9F%E8%83%BD%EF%BC%8C%E5%B0%8F%E8%BD%A6%E9%80%9F%E5%BA%A6%E7%9A%84%E5%A2%9E%E5%8A%A0%E5%92%8C%E5%87%8F%E5%B0%8F%E3%80%82" >https://www.iconfinder.com/获得，我们还需要实现跟随小车的标注，并且需要增加两个功能，小车速度的增加和减小。<i class="fas fa-external-link-alt"></i></a></p><h2 id="2、代码实现"><a href="#2、代码实现" class="headerlink" title="2、代码实现"></a>2、代码实现</h2><ol><li>首先我们进行地图初始化</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;initial-scale=1.0, user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-id">#allmap</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.input-card</span> <span class="selector-class">.btn</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-right</span>: <span class="number">1.2rem</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">9rem</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.input-card</span> <span class="selector-class">.btn</span><span class="selector-pseudo">:last-child</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://api.map.baidu.com/api?v=2.0&amp;ak=GjxdF4HBRYNY0piKp6K7I4U7lOI7Lyor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>单个标注点沿直线的轨迹运动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://a.amap.com/jsapi_demos/static/demo-center/css/demo-center.css&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;allmap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-card&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>速度控制<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-item&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;速度x2&quot;</span> <span class="attr">id</span>=<span class="string">&quot;start&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;startAnimation()&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;速度÷2&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pause&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;pauseAnimation()&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 百度地图API功能</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> map=<span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Map</span>(<span class="string">&quot;allmap&quot;</span>); <span class="comment">// 创建map实例</span></span></span><br><span class="line"><span class="language-javascript">map.<span class="title function_">centerAndZoom</span>(<span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Point</span>(<span class="number">116.36239048877775</span>, <span class="number">39.938322220559</span>), <span class="number">15</span>);<span class="comment">// 初始化地图,设置中心点坐标和地图级别</span></span></span><br><span class="line"><span class="language-javascript">map.<span class="title function_">enableScrollWheelZoom</span>(<span class="literal">true</span>);<span class="comment">//鼠标滚轮缩放</span></span></span><br><span class="line"><span class="language-javascript">map.<span class="title function_">addControl</span>(<span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">MapTypeControl</span>()); <span class="comment">//添加切换地图类型附件</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> time =<span class="number">500</span>;<span class="comment">//定时器的时间</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> <span class="title class_">PointArr</span> = [<span class="comment">//第一个小车存储的数据</span></span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36239048877775</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.938322220559</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36239048877775</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.93793496684673</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36239048877775</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.93760303333522</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36246235321855</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.936883838492925</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36246235321855</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.93627528306042</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36246235321855</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.93577737001302</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36246235321855</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.93527945331416</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36260608210014</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.93472620825511</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36260608210014</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.933785681309004</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36274981098174</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.9334537275117</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36267794654094</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.93295579377289</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36267794654094</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.932402529780596</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36267794654094</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.93184926128044</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36267794654094</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.93063205471247</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36274981098174</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92902752181022</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36282167542254</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92841889596463</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36282167542254</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92781026466464</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36289353986334</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92703563512155</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36289353986334</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.926260996743295</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36282167542254</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.925541681766745</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36289353986334</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92449036155915</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36296540430413</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92410302895963</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36332472650813</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.9228303491527</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36382777759371</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.9228303491527</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36469015088329</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.922775014707135</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36619930414005</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.922719680216495</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36655862634404</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92288568355318</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36627116858085</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.9242690289156</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36670235522564</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.924324362144105</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36742099963362</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.924324362144105</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.3684989662456</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.924324362144105</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.36943320397597</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92437969532753</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.37029557726555</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92437969532753</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.37094235723274</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92437969532753</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.37158913719992</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92449036155915</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.3723796460487</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92443502846588</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.37302642601588</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92449036155915</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.37360134154227</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92460102761046</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.37439185039105</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.924545694607346</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.37496676591743</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.924545694607346</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.37546981700302</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92460102761046</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.37582913920701</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.924656360568505</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.37669151249659</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.924656360568505</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.37719456358218</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92471169348146</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.37776947910857</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.924767026349365</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.37848812351655</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.924822359172175</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.37906303904293</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.924767026349365</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.37963795456932</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.924822359172175</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.38006914121411</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.924767026349365</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.38006914121411</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92443502846588</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.38006914121411</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.923992362096946</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.3801410056549</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92332835713435</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.3801410056549</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.9229410179086</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.3802128700957</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92227700266861</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.3802847345365</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92155764550042</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.3802847345365</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92089361673764</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.3803565989773</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.920229581483945</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.3803565989773</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.91962087679934</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.3803565989773</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.918956829104815</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.3803565989773</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.91829277491945</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.3804284634181</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.91762871424328</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.3804284634181</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.91696464707632</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.3805721922997</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.91524911018613</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.3805003278589</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.914806383957064</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.3805003278589</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.914363654843264</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.3803565989773</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.9136442138807</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.38186575223406</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.91331216163647</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.38315931216843</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.913422845898175</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.3844528721028</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.913422845898175</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.38553083871477</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.91331216163647</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.38739931417552</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.913422845898175</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.3885491452283</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.913367503789864</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.38977084072187</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.91358887195269</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.39092067177464</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.91353352997958</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;404&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.39199863838661</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.9136442138807</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;404&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car1&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.39415457161057</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.9136442138807</span>&#125;,]</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> <span class="title class_">PointArr1</span> = [<span class="comment">//第二个小车存储的数据</span></span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.39997559131523</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92958081330031</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40148474457199</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92974679986831</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40292203338795</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92980212863415</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40443118664471</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92980212863415</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40579661101988</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92980212863415</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40716203539505</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92991278603061</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40852745977021</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92985745735493</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.4088867819742</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92991278603061</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.4090305108558</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.929470155362914</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.4091023752966</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.928861533484174</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.4091023752966</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92786559500822</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.4092461041782</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92637165990969</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40946169750059</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92388169505393</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40953356194139</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92244300708714</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40938983305979</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92161298093767</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40938983305979</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.92039559090589</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40938983305979</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.919178179057525</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40960542638219</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.91685396858412</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40960542638219</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.91574717374566</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40960542638219</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.914751042975595</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40974915526378</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.91419763068185</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40802440868462</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.91414228920457</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40665898430946</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.91419763068185</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40594033990148</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.91408694768221</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40594033990148</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.91309079257217</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40579661101988</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.9118179064571</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40608406878307</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.91087706226448</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40615593322387</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.91010223961911</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40629966210547</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.909272062695706</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40608406878307</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.90871860577934</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40615593322387</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.90766702522079</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40601220434228</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.90689216597646</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.4050061021711</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.90667077599834</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40320949115115</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.90667077599834</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;200&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.40134101569039</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.90661542839114</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;404&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.39904135358485</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.90683681854954</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;staus&quot;</span>:<span class="string">&quot;404&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;car2&quot;</span>,<span class="string">&quot;lng&quot;</span>:<span class="number">116.39746033588729</span>,<span class="string">&quot;lat&quot;</span>:<span class="number">39.90667077599834</span>&#125;]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> myIcon=<span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Icon</span>(<span class="string">&quot;./car.png&quot;</span>, <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Size</span>(<span class="number">50</span>, <span class="number">70</span>), &#123;<span class="comment">//小车覆盖物</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="attr">offset</span>: <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Size</span>(<span class="number">20</span>,<span class="number">20</span>),</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//相当于CSS精灵</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">imageOffset</span>: <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Size</span>(<span class="number">0</span>, <span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//图片的偏移量。为了是图片底部中心对准坐标点。</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> carMk;<span class="comment">//第一个小车</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> carMk1;<span class="comment">//第二个小车</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//小车行驶图标</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> drivingPoint = myIcon;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//终点图标</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> terminalPoint = myIcon;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> i = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> j = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//下面是控制小车素的的两个按钮函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">startAnimation</span> () &#123;</span></span><br><span class="line"><span class="language-javascript">time = time/<span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">pauseAnimation</span> () &#123;</span></span><br><span class="line"><span class="language-javascript">time = time*<span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//动态改变setInterval时间</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> interval = <span class="built_in">setInterval</span>(fn, time);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="built_in">clearInterval</span>(interval);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">drawLine</span>(map,<span class="title class_">PointArr</span>[i],<span class="title class_">PointArr</span>[i+<span class="number">1</span>]);<span class="comment">//画线调用</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">drawLine</span>(map,<span class="title class_">PointArr1</span>[j],<span class="title class_">PointArr1</span>[j+<span class="number">1</span>]);<span class="comment">//画线调用</span></span></span><br><span class="line"><span class="language-javascript">i = i + <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">j = j + <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">interval = <span class="built_in">setInterval</span>(fn, time);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 划线</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">drawLine</span>(<span class="params">map,pointArr,pointArrNext</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (pointArrNext != <span class="literal">undefined</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (pointArr.<span class="property">id</span> == <span class="string">&quot;car1&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> polyline = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Polyline</span>(</span></span><br><span class="line"><span class="language-javascript">[</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Point</span>(pointArr.<span class="property">lng</span>, pointArr.<span class="property">lat</span>),</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Point</span>(pointArrNext.<span class="property">lng</span>, pointArrNext.<span class="property">lat</span>)</span></span><br><span class="line"><span class="language-javascript">],</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">strokeColor</span>: <span class="string">&quot;red&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">strokeWeight</span>: <span class="number">7</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">strokeOpacity</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;);   <span class="comment">//创建折线</span></span></span><br><span class="line"><span class="language-javascript">map.<span class="title function_">addOverlay</span>(polyline);<span class="comment">//将折线添加到地图上</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">addMarkerEnd</span>(<span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Point</span>(pointArrNext.<span class="property">lng</span>, pointArrNext.<span class="property">lat</span>), pointArrNext.<span class="property">staus</span>, map, pointArrNext, <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Point</span>(pointArr.<span class="property">lng</span>, pointArr.<span class="property">lat</span>), polyline);<span class="comment">//添加图标</span></span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (pointArr.<span class="property">id</span> == <span class="string">&quot;car2&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> polyline1 = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Polyline</span>(</span></span><br><span class="line"><span class="language-javascript">[</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Point</span>(pointArr.<span class="property">lng</span>, pointArr.<span class="property">lat</span>),</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Point</span>(pointArrNext.<span class="property">lng</span>, pointArrNext.<span class="property">lat</span>)</span></span><br><span class="line"><span class="language-javascript">],</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">strokeColor</span>: <span class="string">&quot;yellow&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">strokeWeight</span>: <span class="number">7</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">strokeOpacity</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;);   <span class="comment">//创建折线</span></span></span><br><span class="line"><span class="language-javascript">map.<span class="title function_">addOverlay</span>(polyline1);<span class="comment">//将折线添加到地图上</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">addMarkerEnd</span>(<span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Point</span>(pointArrNext.<span class="property">lng</span>, pointArrNext.<span class="property">lat</span>), pointArrNext.<span class="property">staus</span>, map, pointArrNext, <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Point</span>(pointArr.<span class="property">lng</span>, pointArr.<span class="property">lat</span>), polyline1);<span class="comment">//添加图标</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">addMarkerEnd</span>(<span class="params">point, name,mapInit,trackUnit,prePoint,p</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (trackUnit.<span class="property">id</span> == <span class="string">&quot;car1&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (name == <span class="string">&quot;200&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (carMk) &#123;<span class="comment">//先判断第一次进来的时候这个值有没有定义，有的话就清除掉上一次的。然后在进行画图标。第一次进来时候没有定义也就不走这块，直接进行画图标</span></span></span><br><span class="line"><span class="language-javascript">mapInit.<span class="title function_">removeOverlay</span>(carMk);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">carMk = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Marker</span>(point, &#123;<span class="attr">icon</span>: drivingPoint&#125;);  <span class="comment">// 创建小车</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">getCarAngle</span>(point, prePoint);<span class="comment">// js求解两点之间的角度</span></span></span><br><span class="line"><span class="language-javascript">carMk.<span class="title function_">setRotation</span>(<span class="title function_">getCarAngle</span>(point, prePoint) - <span class="number">90</span>);<span class="comment">// 旋转的角度</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> label = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Label</span>(trackUnit.<span class="property">id</span>, &#123;<span class="attr">offset</span>: <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Size</span>(<span class="number">0</span>, -<span class="number">30</span>)&#125;);</span></span><br><span class="line"><span class="language-javascript">label.<span class="title function_">setStyle</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">border</span>: <span class="string">&quot;1px solid rgb(204, 204, 204)&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">color</span>: <span class="string">&quot;rgb(0, 0, 0)&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">borderRadius</span>: <span class="string">&quot;10px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">padding</span>: <span class="string">&quot;5px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">background</span>: <span class="string">&quot;rgb(255, 255, 255)&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">carMk.<span class="title function_">setLabel</span>(label);</span></span><br><span class="line"><span class="language-javascript">mapInit.<span class="title function_">addOverlay</span>(carMk);</span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">mapInit.<span class="title function_">removeOverlay</span>(carMk);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> allOverlay = map.<span class="title function_">getOverlays</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; allOverlay.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(allOverlay[i].<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;Polyline&quot;</span>) &gt; <span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="comment">//删除折线</span></span></span><br><span class="line"><span class="language-javascript">map.<span class="title function_">removeOverlay</span>(allOverlay[i]);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (trackUnit.<span class="property">id</span> == <span class="string">&quot;car2&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (name == <span class="string">&quot;200&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (carMk1) &#123;<span class="comment">//先判断第一次进来的时候这个值有没有定义，有的话就清除掉上一次的。然后在进行画图标。第一次进来时候没有定义也就不走这块，直接进行画图标</span></span></span><br><span class="line"><span class="language-javascript">mapInit.<span class="title function_">removeOverlay</span>(carMk1);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">carMk1 = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Marker</span>(point, &#123;<span class="attr">icon</span>: terminalPoint&#125;);  <span class="comment">// 创建标注</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">getCarAngle</span>(point, prePoint);<span class="comment">// js求解两点之间的角度</span></span></span><br><span class="line"><span class="language-javascript">carMk1.<span class="title function_">setRotation</span>(<span class="title function_">getCarAngle</span>(point, prePoint) - <span class="number">90</span>);<span class="comment">// 旋转的角度</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> label = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Label</span>(trackUnit.<span class="property">id</span>, &#123;<span class="attr">offset</span>: <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Size</span>(<span class="number">0</span>, -<span class="number">30</span>)&#125;);<span class="comment">//给小车添加标签</span></span></span><br><span class="line"><span class="language-javascript">label.<span class="title function_">setStyle</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">border</span>: <span class="string">&quot;1px solid rgb(204, 204, 204)&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">color</span>: <span class="string">&quot;rgb(0, 0, 0)&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">borderRadius</span>: <span class="string">&quot;10px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">padding</span>: <span class="string">&quot;5px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">background</span>: <span class="string">&quot;rgb(255, 255, 255)&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">carMk1.<span class="title function_">setLabel</span>(label);</span></span><br><span class="line"><span class="language-javascript">mapInit.<span class="title function_">addOverlay</span>(carMk1);               <span class="comment">// 将标注添加到地图中</span></span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//移除小车图标</span></span></span><br><span class="line"><span class="language-javascript">mapInit.<span class="title function_">removeOverlay</span>(carMk1);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> allOverlay = map.<span class="title function_">getOverlays</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; allOverlay.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(allOverlay[i].<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;Polyline1&quot;</span>) &gt; <span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="comment">//删除折线</span></span></span><br><span class="line"><span class="language-javascript">map.<span class="title function_">removeOverlay</span>(allOverlay[i]);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获得角度的函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">getCarAngle</span>(<span class="params">n, next</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> ret</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> w1 = n.<span class="property">lat</span> / <span class="number">180</span> * <span class="title class_">Math</span>.<span class="property">PI</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> j1 = n.<span class="property">lng</span> / <span class="number">180</span> * <span class="title class_">Math</span>.<span class="property">PI</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> w2 = next.<span class="property">lat</span> / <span class="number">180</span> * <span class="title class_">Math</span>.<span class="property">PI</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> j2 = next.<span class="property">lng</span> / <span class="number">180</span> * <span class="title class_">Math</span>.<span class="property">PI</span></span></span><br><span class="line"><span class="language-javascript">ret = <span class="number">4</span> * <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="title class_">Math</span>.<span class="title function_">sin</span>((w1 - w2) / <span class="number">2</span>), <span class="number">2</span>) - <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="title class_">Math</span>.<span class="title function_">sin</span>((j1 - j2) / <span class="number">2</span>) * (<span class="title class_">Math</span>.<span class="title function_">cos</span>(w1) - <span class="title class_">Math</span>.<span class="title function_">cos</span>(w2)), <span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">ret = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(ret);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// var temp = Math.sin(Math.abs(j1 - j2) / 2) * (Math.cos(w1) + Math.cos(w2));</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> temp = <span class="title class_">Math</span>.<span class="title function_">sin</span>((j1 - j2) / <span class="number">2</span>) * (<span class="title class_">Math</span>.<span class="title function_">cos</span>(w1) + <span class="title class_">Math</span>.<span class="title function_">cos</span>(w2));</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(temp)</span></span><br><span class="line"><span class="language-javascript">ret = ret / temp;</span></span><br><span class="line"><span class="language-javascript">ret = <span class="title class_">Math</span>.<span class="title function_">atan</span>(ret) / <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">180</span>;</span></span><br><span class="line"><span class="language-javascript">ret += <span class="number">90</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 这里用如此臃肿的if..else是为了判定追踪单个点的具体情况,从而调整ret的值</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (j1 - j2 &lt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (w1 - w2 &lt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">ret;</span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">ret = -ret + <span class="number">180</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (w1 - w2 &lt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">ret = <span class="number">180</span> + ret;</span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">ret = -ret;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> ret;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、功能分析&quot;&gt;&lt;a href=&quot;#1、功能分析&quot; class=&quot;headerlink&quot; title=&quot;1、功能分析&quot;&gt;&lt;/a&gt;1、功能分析&lt;/h2&gt;&lt;p&gt;使用数组进行数据存储，根据数组里面的经纬度来实现多车运行，其中Icon的图标从&lt;a class=&quot;link&quot;</summary>
      
    
    
    
    
    <category term="Anylogic" scheme="http://example.com/tags/Anylogic/"/>
    
  </entry>
  
  <entry>
    <title>Java中间件之Git</title>
    <link href="http://example.com/2022/07/19/Java%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B9%8BGit/"/>
    <id>http://example.com/2022/07/19/Java%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B9%8BGit/</id>
    <published>2022-07-19T06:47:59.000Z</published>
    <updated>2022-07-19T07:43:38.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、版本控制"><a href="#1、版本控制" class="headerlink" title="1、版本控制"></a>1、版本控制</h1><h2 id="1-什么是版本控制"><a href="#1-什么是版本控制" class="headerlink" title="1.什么是版本控制"></a>1.什么是版本控制</h2><p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p><ul><li>实现跨区域多人协同开发</li><li>追踪和记载一个或者多个文件的历史记录</li><li>组织和保护你的源代码和文档</li><li>统计工作量</li><li>并行开发、提高开发效率</li><li>跟踪记录整个软件的开发过程</li><li>减轻开发人员的负担，节省时间，同时降低人为错误</li></ul><p>简单说就是用于管理多人协同开发项目的技术。</p><p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。</p><p>无论是工作还是学习，或者是自己做笔记，都经历过这样一个阶段！我们就迫切需要一个版本控制工具！</p><p>多人开发就必须要使用版本控制！</p><h2 id="2-常见的版本控制工具"><a href="#2-常见的版本控制工具" class="headerlink" title="2.常见的版本控制工具"></a>2.常见的版本控制工具</h2><p>我们学习的东西，一定是当下最流行的！</p><p>主流的版本控制器有如下这些：</p><ul><li><strong>Git</strong></li><li><strong>SVN</strong>（Subversion）</li><li><strong>CVS</strong>（Concurrent Versions System）</li><li><strong>VSS</strong>（Micorosoft Visual SourceSafe）</li><li><strong>TFS</strong>（Team Foundation Server）</li><li>Visual Studio Online</li></ul><p>版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在影响力最大且使用最广泛的是Git与SVN</p><h2 id="3-版本控制分类"><a href="#3-版本控制分类" class="headerlink" title="3.版本控制分类"></a>3.版本控制分类</h2><p><strong>1、本地版本控制</strong></p><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/19/Exv6PQBNLXJudby.png"                      alt="image-20220719151138725"                ></p><p><strong>2、集中版本控制  SVN</strong></p><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/19/6FjUibkE8OxqdMN.png"                      alt="image-20220719151208078"                ></p><p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS</p><p><strong>3、分布式版本控制 Git</strong></p><p>每个人都拥有全部的代码！安全隐患！</p><p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p><p>不会因为服务器损坏或者网络问题，造成不能工作的情况！</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/19/pKy9mGPJo6BLIUC.png"                      alt="image-20220719151243553"                ></p><h2 id="4-Git与SVN的主要区别"><a href="#4-Git与SVN的主要区别" class="headerlink" title="4.Git与SVN的主要区别"></a>4.Git与SVN的主要区别</h2><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p><p>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到更新了哪些代码和文件！</p><p><strong>Git是目前世界上最先进的分布式版本控制系统。</strong></p><h1 id="2、聊聊Git的历史"><a href="#2、聊聊Git的历史" class="headerlink" title="2、聊聊Git的历史"></a>2、聊聊Git的历史</h1><p>同生活中的许多伟大事物一样，Git 诞生于一个极富纷争大举创新的年代。</p><p>Linux 内核开源项目有着为数众广的参与者。绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上(1991－2002年间)。到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。</p><p>Linux社区中存在很多的大佬！破解研究 BitKeeper ！</p><p>到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。这就迫使 Linux 开源社区(特别是 Linux 的缔造者 Linus Torvalds)基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。（2周左右！） 也就是后来的 Git！</p><p><strong>Git是目前世界上最先进的分布式版本控制系统。</strong></p><p>Git是免费、开源的，最初Git是为辅助 Linux 内核开发的，来替代 BitKeeper！</p><h1 id="3、Git环境配置"><a href="#3、Git环境配置" class="headerlink" title="3、Git环境配置"></a>3、Git环境配置</h1><h2 id="1-软件下载"><a href="#1-软件下载" class="headerlink" title="1.软件下载"></a>1.软件下载</h2><p>打开 [git官网] <a class="link"   href="https://git-scm.com/%EF%BC%8C%E4%B8%8B%E8%BD%BDgit%E5%AF%B9%E5%BA%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%88%E6%9C%AC%E3%80%82" >https://git-scm.com/，下载git对应操作系统的版本。<i class="fas fa-external-link-alt"></i></a></p><p>所有东西下载慢的话就可以去找镜像！</p><p>官网下载太慢，我们可以使用淘宝镜像下载：<a class="link"   href="http://npm.taobao.org/mirrors/git-for-windows/" >http://npm.taobao.org/mirrors/git-for-windows/<i class="fas fa-external-link-alt"></i></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/19/PZWvLtJdm6CAjbw.png"                      alt="image-20220719151459059"                ></p><p>下载对应的版本即可安装！</p><p>安装：无脑下一步即可！安装完毕就可以使用了！</p><h2 id="2-启动Git"><a href="#2-启动Git" class="headerlink" title="2.启动Git"></a>2.启动Git</h2><p>安装成功后在开始菜单中会有Git项，菜单下有3个程序：任意文件夹下右键也可以看到对应的程序！</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/19/KxhLcSauiP3Erln.png"                      alt="image-20220719151541332"                ></p><p><strong>Git Bash：</strong>Unix与Linux风格的命令行，使用最多，推荐最多</p><p><strong>Git CMD：</strong>Windows风格的命令行</p><p><strong>Git GUI</strong>：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p><h2 id="3-常用的Linux命令"><a href="#3-常用的Linux命令" class="headerlink" title="3.常用的Linux命令"></a>3.常用的Linux命令</h2><p>平时一定要多使用这些基础的命令！</p><p>1）、cd : 改变目录。</p><p>2）、cd . . 回退到上一个目录，直接cd进入默认目录</p><p>3）、pwd : 显示当前所在的目录路径。</p><p>4）、ls(ll):  都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。</p><p>5）、touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。</p><p>6）、rm:  删除一个文件, rm index.js 就会把index.js文件删除。</p><p>7）、mkdir:  新建一个目录,就是新建一个文件夹。</p><p>8）、rm -r :  删除一个文件夹, rm -r src 删除src目录</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf / 切勿在Linux中尝试！删除电脑中全部文件！</span><br></pre></td></tr></table></figure><p>9）、mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。</p><p>10）、reset 重新初始化终端&#x2F;清屏。</p><p>11）、clear 清屏。</p><p>12）、history 查看命令历史。</p><p>13）、help 帮助。</p><p>14）、exit 退出。</p><p>15）、#表示注释</p><h2 id="4-Git配置"><a href="#4-Git配置" class="headerlink" title="4.Git配置"></a>4.Git配置</h2><p>所有的配置文件，其实都保存在本地！</p><p>查看配置 git config -l</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/19/v95bMzmwy3Hf76F.png"                      alt="image-20220719152200761"                ></p><p>查看不同级别的配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查看系统config</span><br><span class="line">git config --system --list　　</span><br><span class="line">#查看当前用户（global）配置</span><br><span class="line">git config --global  --list</span><br></pre></td></tr></table></figure><p><strong>Git相关的配置文件：</strong></p><p>1）、Git\etc\gitconfig  ：Git 安装目录下的 gitconfig   –system 系统级</p><p>2）、C:\Users\1.ssh.gitconfig   只适用于当前登录用户的配置  –global 全局</p><h2 id="5-设置用户名与邮箱（用户标识，必要）"><a href="#5-设置用户名与邮箱（用户标识，必要）" class="headerlink" title="5.设置用户名与邮箱（用户标识，必要）"></a>5.设置用户名与邮箱（用户标识，必要）</h2><p>当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;fang&quot;  #名称git config --global user.email 3028206521@qq.com   #邮箱</span><br></pre></td></tr></table></figure><p>只需要做一次这个设置，如果你传递了–global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要–global选项。总之–global为全局配置，不加为某个项目的特定配置。</p><h1 id="4、Git基本理论（重要）"><a href="#4、Git基本理论（重要）" class="headerlink" title="4、Git基本理论（重要）"></a>4、Git基本理论（重要）</h1><h2 id="1-三个区域"><a href="#1-三个区域" class="headerlink" title="1.三个区域"></a>1.三个区域</h2><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage&#x2F;Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/19/ymrajGKBhoP2t15.png"                      alt="image-20220719152330906"                ></p><ul><li>Workspace：工作区，就是你平时存放项目代码的地方</li><li>Index &#x2F; Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li><li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li><li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li></ul><p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/19/TAIRpJDBcz7yVmX.png"                      alt="image-20220719152400534"                ></p><ul><li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li><li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li><li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li><li>Index&#x2F;Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li><li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li><li>Stash：隐藏，是一个工作状态保存栈，用于保存&#x2F;恢复WorkSpace中的临时状态。</li></ul><h2 id="2-工作流程"><a href="#2-工作流程" class="headerlink" title="2.工作流程"></a>2.工作流程</h2><p>git的工作流程一般是这样的：</p><p>１、在工作目录中添加、修改文件；</p><p>２、将需要进行版本管理的文件放入暂存区域；</p><p>３、将暂存区域的文件提交到git仓库。</p><p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/19/FNY5GzsdfChOuqj.png"                      alt="image-20220719152517208"                ></p><h1 id="5、Git项目搭建"><a href="#5、Git项目搭建" class="headerlink" title="5、Git项目搭建"></a>5、Git项目搭建</h1><h2 id="1-创建工作目录与常用指令"><a href="#1-创建工作目录与常用指令" class="headerlink" title="1.创建工作目录与常用指令"></a>1.创建工作目录与常用指令</h2><p>工作目录（WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p><p>日常使用只要记住下图6个命令：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/19/VX7ZxbCYGc1lLjK.png"                      alt="image-20220719152605291"                ></p><h2 id="2-本地仓库搭建"><a href="#2-本地仓库搭建" class="headerlink" title="2.本地仓库搭建"></a>2.本地仓库搭建</h2><p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p><p>1、创建全新的仓库，需要用GIT管理的项目的根目录执行：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>2、执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。</p><h2 id="3-克隆远程仓库"><a href="#3-克隆远程仓库" class="headerlink" title="3.克隆远程仓库"></a>3.克隆远程仓库</h2><p>1、另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 克隆一个项目和它的整个代码历史(版本信息)</span><br><span class="line">$ git clone [url]  # https://gitee.com/kuangstudy/openclass.git</span><br></pre></td></tr></table></figure><h1 id="6、Git文件操作"><a href="#6、Git文件操作" class="headerlink" title="6、Git文件操作"></a>6、Git文件操作</h1><h2 id="1-文件的四种状态"><a href="#1-文件的四种状态" class="headerlink" title="1.文件的四种状态"></a>1.文件的四种状态</h2><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><ul><li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</li><li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</li><li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</li><li>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</li></ul><h2 id="2-查看文件状态"><a href="#2-查看文件状态" class="headerlink" title="2.查看文件状态"></a>2.查看文件状态</h2><p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#查看指定文件状态</span><br><span class="line">git status [filename]</span><br><span class="line"></span><br><span class="line">#查看所有文件状态</span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"># git add .                  添加所有文件到暂存区</span><br><span class="line"># git commit -m &quot;消息内容&quot;    提交暂存区中的内容到本地仓库 -m 提交信息</span><br></pre></td></tr></table></figure><h2 id="3-忽略文件"><a href="#3-忽略文件" class="headerlink" title="3.忽略文件"></a>3.忽略文件</h2><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p><p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p><ol><li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li><li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li><li>如果名称的最前面是一个路径分隔符（&#x2F;），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li><li>如果名称的最后面是一个路径分隔符（&#x2F;），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#为注释</span><br><span class="line">*.txt        #忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span><br><span class="line">!lib.txt     #但lib.txt除外</span><br><span class="line">/temp        #仅忽略项目根目录下的TODO文件,不包括其它目录temp</span><br><span class="line">build/       #忽略build/目录下的所有文件</span><br><span class="line">doc/*.txt    #会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br></pre></td></tr></table></figure><h1 id="7、使用码云"><a href="#7、使用码云" class="headerlink" title="7、使用码云"></a>7、使用码云</h1><h2 id="1-github-是有墙的，比较慢，在国内的话，我们一般使用-gitee-，公司中有时候会搭建自己的gitlab服务器"><a href="#1-github-是有墙的，比较慢，在国内的话，我们一般使用-gitee-，公司中有时候会搭建自己的gitlab服务器" class="headerlink" title="1.github 是有墙的，比较慢，在国内的话，我们一般使用 gitee ，公司中有时候会搭建自己的gitlab服务器"></a>1.github 是有墙的，比较慢，在国内的话，我们一般使用 gitee ，公司中有时候会搭建自己的gitlab服务器</h2><p>这个其实可以作为大家未来找工作的一个重要信息！</p><p>1、注册登录码云，完善个人信息</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/19/mTzqnMh37wQOWCP.png"                      alt="image-20220719153143653"                ></p><p>2、设置本机绑定SSH公钥，实现免密码登录！（免密码登录，这一步挺重要的，码云是远程仓库，我们是平时工作在本地仓库！)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 进入 C:\Users\1\.ssh 目录</span><br><span class="line"># 生成公钥</span><br><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/19/hQb3kFiUw4rnHCy.png"                      alt="image-20220719153405139"                ></p><p>3、将公钥信息public key 添加到码云账户中即可！</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/19/hN2zstVQleHg6jE.png"                      alt="image-20220719153548238"                ></p><p>4、使用码云创建一个自己的仓库！</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/19/c8jO3SIY65uFADn.png"                      alt="image-20220719153626677"                ></p><p>许可证：开源是否可以随意转载，开源但是不能商业使用，不能转载，…  限制！</p><h1 id="8、IDEA中集成Git"><a href="#8、IDEA中集成Git" class="headerlink" title="8、IDEA中集成Git"></a>8、IDEA中集成Git</h1><p>1、新建项目，绑定git。将我们远程的git文件目录拷贝到项目中即可</p><p>2、修改文件，使用IDEA操作git。</p><ul><li>添加到暂存区</li><li>commit 提交</li><li>push到远程仓库</li></ul><p>3、提交测试</p><h2 id="1-说明：GIT分支"><a href="#1-说明：GIT分支" class="headerlink" title="1.说明：GIT分支"></a>1.说明：GIT分支</h2><p>分支在GIT中相对较难，分支就是科幻电影里面的平行宇宙，如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，我们就需要处理一些问题了！</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/19/b5ogwqG2ev1CWlD.png"                      alt="image-20220719153957718"                ></p><p>git分支中常用指令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"># 列出所有远程分支</span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><p>如果同一个文件在合并分支时都被修改了则会引起冲突：解决的办法是我们可以修改冲突文件后重新提交！选择要保留他的代码还是你的代码！</p><p>master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的dev分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p><h1 id="9、总结"><a href="#9、总结" class="headerlink" title="9、总结"></a>9、总结</h1><p>Git学习可以从下面进行学习</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/19/mV8MTQ9F5XnNxZj.png"                      alt="image-20220719154234904"                ></p><ul><li>Git大全<a class="link"   href="https://gitee.com/all-about-git" >https://gitee.com/all-about-git<i class="fas fa-external-link-alt"></i></a></li><li>Git命令学习：<a class="link"   href="https://oschina.gitee.io/learn-git-branching/" >https://oschina.gitee.io/learn-git-branching/<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、版本控制&quot;&gt;&lt;a href=&quot;#1、版本控制&quot; class=&quot;headerlink&quot; title=&quot;1、版本控制&quot;&gt;&lt;/a&gt;1、版本控制&lt;/h1&gt;&lt;h2 id=&quot;1-什么是版本控制&quot;&gt;&lt;a href=&quot;#1-什么是版本控制&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="Java中间件" scheme="http://example.com/tags/Java%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot开发实用篇之整合Dubbo和Zookeeper</title>
    <link href="http://example.com/2022/07/17/SpringBoot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87%E4%B9%8B%E6%95%B4%E5%90%88Dubbo%E5%92%8CZookeeper/"/>
    <id>http://example.com/2022/07/17/SpringBoot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87%E4%B9%8B%E6%95%B4%E5%90%88Dubbo%E5%92%8CZookeeper/</id>
    <published>2022-07-17T08:21:31.000Z</published>
    <updated>2022-07-17T08:49:54.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、什么是分布式系统？"><a href="#1、什么是分布式系统？" class="headerlink" title="1、什么是分布式系统？"></a>1、什么是分布式系统？</h1><p>在《分布式系统原理与范型》一书中有如下定义：“分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统”；</p><p>分布式系统是由一组通过网络进行通信、为了完成共同的任务而协调工作的计算机节点组成的系统。分布式系统的出现是为了用廉价的、普通的机器完成单个计算机无法完成的计算、存储任务。其目的是<strong>利用更多的机器，处理更多的数据</strong>。</p><p>分布式系统（distributed system）是建立在网络之上的软件系统。</p><p>首先需要明确的是，只有当单个节点的处理能力无法满足日益增长的计算、存储任务的时候，且硬件的提升（加内存、加磁盘、使用更好的CPU）高昂到得不偿失的时候，应用程序也不能进一步优化的时候，我们<strong>才需要考虑分布式系统</strong>。因为，分布式系统要解决的问题本身就是和单机系统一样的，而由于分布式系统多节点、通过网络通信的拓扑结构，会引入很多单机系统没有的问题，为了解决这些问题又会引入更多的机制、协议，带来更多的问题。。。</p><h2 id="1-Dubbo文档"><a href="#1-Dubbo文档" class="headerlink" title="1.Dubbo文档"></a>1.Dubbo文档</h2><p>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，急需<strong>一个治理系统</strong>确保架构有条不紊的演进。</p><p>在Dubbo的官网文档有这样一张图</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/17/loM2zUYqtJCjpNh.png"                      alt="image-20220717162325327"                ></p><h2 id="2-单一应用架构"><a href="#2-单一应用架构" class="headerlink" title="2.单一应用架构"></a>2.单一应用架构</h2><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/17/xlb81ecgTFCYyO3.png"                      alt="image-20220717162448646"                ></p><p>适用于小型网站，小型管理系统，将所有功能都部署到一个功能里，简单易用。</p><p><strong>缺点：</strong></p><p>1、性能扩展比较难</p><p>2、协同开发问题</p><p>3、不利于升级维护</p><h2 id="3-垂直应用架构"><a href="#3-垂直应用架构" class="headerlink" title="3.垂直应用架构"></a>3.垂直应用架构</h2><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/17/TvU4kl2GrmjN5EK.png"                      alt="image-20220717162558772"                ></p><p>通过切分业务来实现各个模块独立部署，降低了维护和部署的难度，团队各司其职更易管理，性能扩展也更方便，更有针对性。</p><p>缺点：公用模块无法重复利用，开发性的浪费</p><h2 id="4-分布式服务架构"><a href="#4-分布式服务架构" class="headerlink" title="4.分布式服务架构"></a>4.分布式服务架构</h2><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的**分布式服务框架(RPC)**是关键。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/17/ByVgDtAS7LiOxHp.png"                      alt="image-20220717162659245"                ></p><h2 id="5-流动计算架构"><a href="#5-流动计算架构" class="headerlink" title="5.流动计算架构"></a>5.流动计算架构</h2><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于<strong>提高机器利用率的资源调度和治理中心</strong>(SOA)[ Service Oriented Architecture]是关键。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/17/pShksQyfXqunxjE.png"                      alt="image-20220717162826095"                ></p><h1 id="2、什么是RPC"><a href="#2、什么是RPC" class="headerlink" title="2、什么是RPC"></a>2、什么是RPC</h1><p>RPC【Remote Procedure Call】是指远程过程调用，是一种进程间通信方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</p><p>也就是说两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数&#x2F;方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。为什么要用RPC呢？就是无法在一个进程内，甚至一个计算机内通过本地调用的方式完成的需求，比如不同的系统间的通讯，甚至不同的组织间的通讯，由于计算能力需要横向扩展，需要在多台机器组成的集群上部署应用。RPC就是要像调用本地的函数一样去调远程函数；</p><p>推荐阅读文章：<a class="link"   href="https://www.jianshu.com/p/2accc2840a1b" >https://www.jianshu.com/p/2accc2840a1b<i class="fas fa-external-link-alt"></i></a></p><p><strong>RPC基本原理</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/17/yLxmlEHrdgD3b62.png"                      alt="image-20220717162930223"                ></p><p><strong>步骤解析：</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/17/HxA3zpnykeFDS6K.png"                      alt="image-20220717163008888"                ></p><p>RPC两个核心模块：通讯，序列化。</p><h1 id="3、测试环境搭建"><a href="#3、测试环境搭建" class="headerlink" title="3、测试环境搭建"></a>3、测试环境搭建</h1><h2 id="1-Dubbo"><a href="#1-Dubbo" class="headerlink" title="1.Dubbo"></a>1.Dubbo</h2><p>Apache Dubbo |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p><p>dubbo官网 <a class="link"   href="http://dubbo.apache.org/zh-cn/index.html" >http://dubbo.apache.org/zh-cn/index.html<i class="fas fa-external-link-alt"></i></a></p><p>1.了解Dubbo的特性</p><p>2.查看官方文档</p><p><strong>dubbo基本概念</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/17/cD1nIQO8vdwfp2z.png"                      alt="image-20220717163150281"                ></p><p><strong>服务提供者</strong>（Provider）：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</p><p><strong>服务消费者</strong>（Consumer）：调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p><p><strong>注册中心</strong>（Registry）：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</p><p><strong>监控中心</strong>（Monitor）：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</p><p><strong>调用关系说明</strong></p><p>l 服务容器负责启动，加载，运行服务提供者。</p><p>l 服务提供者在启动时，向注册中心注册自己提供的服务。</p><p>l 服务消费者在启动时，向注册中心订阅自己所需的服务。</p><p>l 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</p><p>l 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p><p>l 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</p><h2 id="2-Dubbo环境搭建"><a href="#2-Dubbo环境搭建" class="headerlink" title="2.Dubbo环境搭建"></a>2.Dubbo环境搭建</h2><p>点进dubbo官方文档，推荐我们使用Zookeeper 注册中心</p><p>什么是zookeeper呢？可以查看官方文档</p><h2 id="3-Window下安装zookeeper"><a href="#3-Window下安装zookeeper" class="headerlink" title="3.Window下安装zookeeper"></a>3.Window下安装zookeeper</h2><p><strong>1、下载zookeeper ：</strong>地址， 我们下载3.4.14 ， 最新版！解压zookeeper</p><p><strong>2、运行&#x2F;bin&#x2F;zkServer.cmd</strong>: 初次运行会报错，没有zoo.cfg配置文件；</p><p>可能遇到问题：闪退 !</p><p>解决方案：编辑zkServer.cmd文件末尾添加pause 。这样运行出错就不会退出，会提示错误信息，方便找到原因。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/17/gV2hqm4zYMyQxKR.png"                      alt="image-20220717163601801"                ></p><p><strong>3、修改zoo.cfg配置文件</strong></p><p>将conf文件夹下面的zoo_sample.cfg复制一份改名为zoo.cfg即可。</p><p>注意几个重要位置：</p><p>dataDir&#x3D;.&#x2F;  临时数据存储的目录（可写相对路径）</p><p>clientPort&#x3D;2181  zookeeper的端口号</p><p>修改完成后再次启动zookeeper</p><p><strong>4、使用zkCli.cmd测试</strong></p><p>ls &#x2F;：列出zookeeper根下保存的所有节点</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">2181</span>(CONNECTED) <span class="number">4</span>] ls /</span><br><span class="line">[zookeeper]</span><br></pre></td></tr></table></figure><p>create –e &#x2F;fang123：创建一个fang节点，值为123</p><p>get &#x2F;fang：获取&#x2F;fang节点的值</p><h2 id="4-window下安装dubbo-admin"><a href="#4-window下安装dubbo-admin" class="headerlink" title="4.window下安装dubbo-admin"></a>4.window下安装dubbo-admin</h2><p>dubbo本身并不是一个服务软件。它其实就是一个jar包，能够帮你的java程序连接到zookeeper，并利用zookeeper消费、提供服务。</p><p>但是为了让用户更好的管理监控众多的dubbo服务，官方提供了一个可视化的监控程序dubbo-admin，不过这个监控即使不装也不影响使用。</p><p>我们这里来安装一下：</p><p><strong>1、下载dubbo-admin</strong></p><p>地址 ：<a class="link"   href="https://github.com/apache/dubbo-admin/tree/master" >https://github.com/apache/dubbo-admin/tree/master<i class="fas fa-external-link-alt"></i></a></p><p><strong>2、解压进入目录</strong></p><p>修改 dubbo-admin\src\main\resources \application.properties 指定zookeeper地址</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">7001</span></span><br><span class="line"><span class="attr">spring.velocity.cache</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">spring.velocity.charset</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="attr">spring.velocity.layout-url</span>=<span class="string">/templates/default.vm</span></span><br><span class="line"><span class="attr">spring.messages.fallback-to-system-locale</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">spring.messages.basename</span>=<span class="string">i18n/message</span></span><br><span class="line"><span class="attr">spring.root.password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.guest.password</span>=<span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dubbo.registry.address</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br></pre></td></tr></table></figure><p><strong>3、在项目目录下打包dubbo-admin</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure><p><strong>第一次打包的过程有点慢，需要耐心等待！直到成功！</strong></p><p><strong>4、执行 dubbo-admin\target 下的dubbo-admin-0.0.1-SNAPSHOT.jar</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar dubbo-admin-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>【注意：zookeeper的服务一定要打开！】</p><p>执行完毕，我们去访问一下 <a class="link"   href="http://localhost:7001/" >http://localhost:7001/<i class="fas fa-external-link-alt"></i></a> ， 这时候我们需要输入登录账户和密码，我们都是默认的root-root；</p><p>登录成功后，查看界面</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/17/mPzcTufYbZga3tK.png"                      alt="image-20220717164152189"                ></p><h1 id="4、SpringBoot-Dubbo-zookeeper"><a href="#4、SpringBoot-Dubbo-zookeeper" class="headerlink" title="4、SpringBoot + Dubbo + zookeeper"></a>4、SpringBoot + Dubbo + zookeeper</h1><h2 id="1-框架搭建"><a href="#1-框架搭建" class="headerlink" title="1.框架搭建"></a>1.框架搭建</h2><p><strong>1. 启动zookeeper ！</strong></p><p><strong>2. IDEA创建一个空项目；</strong></p><p><strong>3.创建一个模块，实现服务提供者：provider-server ， 选择web依赖即可</strong></p><p><strong>4.项目创建完毕，我们写一个服务，比如卖票的服务；</strong></p><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fang.provider.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TicketService</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getTicket</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fang.provider.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TicketServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">TicketService</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getTicket</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;《java》&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.创建一个模块，实现服务消费者：consumer-server ， 选择web依赖即可</strong></p><p><strong>6.项目创建完毕，我们写一个服务，比如用户的服务；</strong></p><p>编写service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fang.consumer.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">   <span class="comment">//我们需要去拿去注册中心的服务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>需求：现在我们的用户想使用买票的服务，这要怎么弄呢 ？</strong></p><h2 id="2-服务提供者"><a href="#2-服务提供者" class="headerlink" title="2.服务提供者"></a>2.服务提供者</h2><p><strong>1、将服务提供者注册到注册中心，我们需要整合Dubbo和zookeeper，所以需要导包</strong></p><p><strong>我们从dubbo官网进入github，看下方的帮助文档，找到dubbo-springboot，找到依赖包</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Dubbo Spring Boot Starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    </span><br></pre></td></tr></table></figure><p><strong>zookeeper的包我们去maven仓库下载，zkclient；</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.sgroschupf/zkclient --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>【新版的坑】zookeeper及其依赖包，解决日志冲突，还需要剔除日志依赖；</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入zookeeper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--排除这个slf4j-log4j12--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2、在springboot配置文件中配置dubbo相关属性！</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#当前应用名字</span></span><br><span class="line"><span class="string">dubbo.application.name=provider-server</span></span><br><span class="line"><span class="comment">#注册中心地址</span></span><br><span class="line"><span class="string">dubbo.registry.address=zookeeper://127.0.0.1:2181</span></span><br><span class="line"><span class="comment">#扫描指定包下服务</span></span><br><span class="line"><span class="string">dubbo.scan.base-packages=com.fang.provider.service</span></span><br></pre></td></tr></table></figure><p><strong>3、在service的实现类中配置服务注解，发布服务！注意导包问题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">//将服务发布出去</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//放在容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TicketServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">TicketService</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getTicket</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;《狂神说Java》&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>逻辑理解 ：应用启动起来，dubbo就会扫描指定的包下带有@component注解的服务，将它发布在指定的注册中心中！</strong></p><h2 id="3-服务消费者"><a href="#3-服务消费者" class="headerlink" title="3.服务消费者"></a>3.服务消费者</h2><p><strong>1、导入依赖，和之前的依赖一样；</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--dubbo--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Dubbo Spring Boot Starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--zookeeper--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.sgroschupf/zkclient --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入zookeeper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--排除这个slf4j-log4j12--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2、配置参数</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#当前应用名字</span></span><br><span class="line"><span class="string">dubbo.application.name=consumer-server</span></span><br><span class="line"><span class="comment">#注册中心地址</span></span><br><span class="line"><span class="string">dubbo.registry.address=zookeeper://127.0.0.1:2181</span></span><br></pre></td></tr></table></figure><p><strong>3. 本来正常步骤是需要将服务提供者的接口打包，然后用pom文件导入，我们这里使用简单的方式，直接将服务的接口拿过来，路径必须保证正确，即和服务提供者相同；</strong></p><p><strong>4. 完善消费者的服务类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fang.consumer.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fang.provider.service.TicketService;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">//注入到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Reference</span> <span class="comment">//远程引用指定的服务，他会按照全类名进行匹配，看谁给注册中心注册了这个全类名</span></span><br><span class="line">   TicketService ticketService;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bugTicket</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">ticket</span> <span class="operator">=</span> ticketService.getTicket();</span><br><span class="line">       System.out.println(<span class="string">&quot;在注册中心买到&quot;</span>+ticket);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5. 测试类编写；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerServerApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   UserService userService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">       userService.bugTicket();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-启动测试"><a href="#4-启动测试" class="headerlink" title="4.启动测试"></a>4.启动测试</h2><p><strong>1. 开启zookeeper</strong></p><p><strong>2. 打开dubbo-admin实现监控【可以不用做】</strong></p><p><strong>3. 开启服务者</strong></p><p><strong>4. 消费者消费测试，结果，监控中心：</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/17/aiP82yEGlxnT73j.png"                      alt="image-20220717164848109"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、什么是分布式系统？&quot;&gt;&lt;a href=&quot;#1、什么是分布式系统？&quot; class=&quot;headerlink&quot; title=&quot;1、什么是分布式系统？&quot;&gt;&lt;/a&gt;1、什么是分布式系统？&lt;/h1&gt;&lt;p&gt;在《分布式系统原理与范型》一书中有如下定义：“分布式系统是若干独立计</summary>
      
    
    
    
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot开发实用篇之集成Shiro</title>
    <link href="http://example.com/2022/07/15/SpringBoot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87%E4%B9%8B%E9%9B%86%E6%88%90Shiro/"/>
    <id>http://example.com/2022/07/15/SpringBoot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87%E4%B9%8B%E9%9B%86%E6%88%90Shiro/</id>
    <published>2022-07-15T03:28:53.000Z</published>
    <updated>2022-07-15T08:56:12.866Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、Shiro简介"><a href="#1、Shiro简介" class="headerlink" title="1、Shiro简介"></a>1、Shiro简介</h1><h2 id="1-什么是Shiro？"><a href="#1-什么是Shiro？" class="headerlink" title="1. 什么是Shiro？"></a>1. 什么是Shiro？</h2><ul><li><a class="link"   href="https://so.csdn.net/so/search?q=Apache&spm=1001.2101.3001.7020" >Apache<i class="fas fa-external-link-alt"></i></a> Shiro是一个强大且易用的Java安全框架</li><li>可以完成身份验证、授权、密码和会话管理</li><li>Shiro可以完成，认证，授权，加密，会话管理，Web集成，缓存等。</li><li><a class="link"   href="https://so.csdn.net/so/search?q=Shiro&spm=1001.2101.3001.7020" >Shiro<i class="fas fa-external-link-alt"></i></a> 不仅可以用在 JavaSE 环境中，也可以用在 JavaEE 环境中</li></ul><p>官网： <a class="link"   href="http://shiro.apache.org/" >http://shiro.apache.org/<i class="fas fa-external-link-alt"></i></a></p><h2 id="2-有哪些功能？"><a href="#2-有哪些功能？" class="headerlink" title="2. 有哪些功能？"></a>2. 有哪些功能？</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/15/VaP8qrfcFE7QxKW.png"                      alt="image-20220715113407781"                ></p><p><code>Authentication</code>：身份认证&#x2F;登录，验证用户是不是拥有相应的身份；</p><p><code>Authorization</code>：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</p><p><code>Session Manager</code>：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通<a class="link"   href="https://so.csdn.net/so/search?q=JavaSE&spm=1001.2101.3001.7020" >JavaSE<i class="fas fa-external-link-alt"></i></a>环境的，也可以是如Web环境的；</p><p><code>Cryptography</code>：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</p><p><code>Web Support</code>：Web支持，可以非常容易的集成到Web环境；</p><p><code>Caching</code>：缓存，比如用户登录后，其用户信息、拥有的角色&#x2F;权限不必每次去查，这样可以提高效率；</p><p><code>Concurrency</code>：shiro支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</p><p><code>Testing</code>：提供测试支持；</p><p><code>Run As</code>：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</p><p><code>Remember Me</code>：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。</p><h2 id="3-Shiro架构（外部）"><a href="#3-Shiro架构（外部）" class="headerlink" title="3.Shiro架构（外部）"></a>3.Shiro架构（外部）</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/15/2J7KFMoOydkDZTA.png"                      alt="image-20220715113553689"                ></p><p>应用代码直接交互的对象是Subject，也就是说Shiro的对外API核心就是Subject；其每个API的含义：</p><p><code>Subject</code>：主体，代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫，机器人等；即一个抽象概念；所有Subject都绑定到SecurityManager，与Subject的所有交互都会委托给SecurityManager；可以把Subject认为是一个门面；SecurityManager才是实际的执行者；</p><p><code>SecurityManager</code>：安全管理器；即所有与安全有关的操作都会与SecurityManager交互；且它管理着所有Subject；可以看出它是Shiro的核心，它负责与后边介绍的其他组件进行交互，如果学习过SpringMVC，你可以把它看成DispatcherServlet前端控制器；</p><p><code>Realm</code>：域，Shiro从从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm得到用户相应的角色&#x2F;权限进行验证用户是否能进行操作；可以把Realm看成DataSource，即安全数据源。</p><p>也就是说对于我们而言，最简单的一个Shiro应用：</p><ol><li>应用代码通过Subject来进行认证和授权，而Subject又委托给SecurityManager；</li><li>我们需要给Shiro的SecurityManager注入Realm，从而让SecurityManager能得到合法的用户及其权限进行判断。</li></ol><p>从以上也可以看出，Shiro不提供维护用户&#x2F;权限，而是通过Realm让开发人员自己注入</p><h2 id="4-Shiro架构（内部）"><a href="#4-Shiro架构（内部）" class="headerlink" title="4.Shiro架构（内部）"></a>4.Shiro架构（内部）</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/15/LsbxaQCpADYwIPV.png"                      alt="image-20220715113757852"                ></p><p><code>Subject</code>：主体，可以看到主体可以是任何可以与应用交互的“用户”；</p><p><code>SecurityManager</code>：相当于SpringMVC中的DispatcherServlet或者Struts2中的FilterDispatcher；是Shiro的心脏；所有具体的交互都通过SecurityManager进行控制；它管理着所有Subject、且负责进行认证和授权、及会话、缓存的管理。</p><p><code>Authenticator</code>：认证器，负责主体认证的，这是一个扩展点，如果用户觉得Shiro默认的不好，可以自定义实现；其需要认证策略（Authentication Strategy），即什么情况下算用户认证通过了；</p><p><code>Authrizer</code>：授权器，或者访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；</p><p><code>Realm</code>：可以有1个或多个Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是JDBC实现，也可以是LDAP实现，或者内存实现等等；由用户提供；注意：Shiro不知道你的用户&#x2F;权限存储在哪及以何种格式存储；所以我们一般在应用中都需要实现自己的Realm；</p><p><code>SessionManager</code>：如果写过Servlet就应该知道Session的概念，Session呢需要有人去管理它的生命周期，这个组件就是SessionManager；而Shiro并不仅仅可以用在Web环境，也可以用在如普通的JavaSE环境、EJB等环境；所有呢，Shiro就抽象了一个自己的Session来管理主体与应用之间交互的数据；这样的话，比如我们在Web环境用，刚开始是一台Web服务器；接着又上了台EJB服务器；这时想把两台服务器的会话数据放到一个地方，这个时候就可以实现自己的分布式会话（如把数据放到Memcached服务器）；</p><p><code>SessionDAO</code>：DAO大家都用过，数据访问对象，用于会话的CRUD，比如我们想把Session保存到数据库，那么可以实现自己的SessionDAO，通过如JDBC写到数据库；比如想把Session放到Memcached中，可以实现自己的Memcached SessionDAO；另外SessionDAO中可以使用Cache进行缓存，以提高性能；</p><p><code>CacheManager</code>：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少去改变，放到缓存中后可以提高访问的性能</p><p><code>Cryptography</code>：密码模块，Shiro提高了一些常见的加密组件用于如密码加密&#x2F;解密的</p><h2 id="5-认证流程"><a href="#5-认证流程" class="headerlink" title="5. 认证流程"></a>5. 认证流程</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/15/4JGz5YHrNWl6su3.png"                      alt="image-20220715113943727"                ></p><p><strong>用户</strong> 提交 <strong>身份信息、凭证信息</strong> 封装成 <strong>令牌</strong> 交由 <strong>安全管理器</strong> 认证</p><h1 id="2、快速入门"><a href="#2、快速入门" class="headerlink" title="2、快速入门"></a>2、快速入门</h1><h2 id="1-拷贝案例"><a href="#1-拷贝案例" class="headerlink" title="1. 拷贝案例"></a>1. 拷贝案例</h2><ol><li>按照官网提示找到 快速入门案例</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/15/fnhES86kaVIWlxp.png"                      alt="在这里插入图片描述"                ><br>GitHub地址：<a class="link"   href="https://github.com/apache/shiro/tree/master/samples/quickstart" >shiro&#x2F;samples&#x2F;quickstart&#x2F;<i class="fas fa-external-link-alt"></i></a></p><p>从GitHub 的文件中可以看出这个快速入门案例是一个 Maven 项目</p><ol start="2"><li><p>新建一个 Maven 工程，删除其 src 目录，将其作为父工程</p></li><li><p>在父工程中新建一个 Maven 模块</p></li><li><p>复制快速入门案例 POM.xml 文件中的依赖 （版本号自选）</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- configure logging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>把快速入门案例中的 resource 下的<code>log4j2.xml</code> 复制下来</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">name</span>=<span class="string">&quot;ConfigTest&quot;</span> <span class="attr">status</span>=<span class="string">&quot;ERROR&quot;</span> <span class="attr">monitorInterval</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework&quot;</span> <span class="attr">level</span>=<span class="string">&quot;warn&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache&quot;</span> <span class="attr">level</span>=<span class="string">&quot;warn&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">&quot;net.sf.ehcache&quot;</span> <span class="attr">level</span>=<span class="string">&quot;warn&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.shiro.util.ThreadContext&quot;</span> <span class="attr">level</span>=<span class="string">&quot;warn&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>复制一下 <code>shiro.ini</code> 文件</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Users and their assigned roles</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Each line conforms to the format defined in the</span></span><br><span class="line"><span class="comment"># org.apache.shiro.realm.text.TextConfigurationRealm#setUserDefinitions JavaDoc</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="comment"># user &#x27;root&#x27; with password &#x27;secret&#x27; and the &#x27;admin&#x27; role</span></span><br><span class="line"><span class="attr">root</span> = secret, admin</span><br><span class="line"><span class="comment"># user &#x27;guest&#x27; with the password &#x27;guest&#x27; and the &#x27;guest&#x27; role</span></span><br><span class="line"><span class="attr">guest</span> = guest, guest</span><br><span class="line"><span class="comment"># user &#x27;presidentskroob&#x27; with password &#x27;12345&#x27; (&quot;That&#x27;s the same combination on</span></span><br><span class="line"><span class="comment"># my luggage!!!&quot; ;)), and role &#x27;president&#x27;</span></span><br><span class="line"><span class="attr">presidentskroob</span> = <span class="number">12345</span>, president</span><br><span class="line"><span class="comment"># user &#x27;darkhelmet&#x27; with password &#x27;ludicrousspeed&#x27; and roles &#x27;darklord&#x27; and &#x27;schwartz&#x27;</span></span><br><span class="line"><span class="attr">darkhelmet</span> = ludicrousspeed, darklord, schwartz</span><br><span class="line"><span class="comment"># user &#x27;lonestarr&#x27; with password &#x27;vespa&#x27; and roles &#x27;goodguy&#x27; and &#x27;schwartz&#x27;</span></span><br><span class="line"><span class="attr">lonestarr</span> = vespa, goodguy, schwartz</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Roles with assigned permissions</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Each line conforms to the format defined in the</span></span><br><span class="line"><span class="comment"># org.apache.shiro.realm.text.TextConfigurationRealm#setRoleDefinitions JavaDoc</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="section">[roles]</span></span><br><span class="line"><span class="comment"># &#x27;admin&#x27; role has all permissions, indicated by the wildcard &#x27;*&#x27;</span></span><br><span class="line"><span class="attr">admin</span> = *</span><br><span class="line"><span class="comment"># The &#x27;schwartz&#x27; role can do anything (*) with any lightsaber:</span></span><br><span class="line"><span class="attr">schwartz</span> = lightsaber:*</span><br><span class="line"><span class="comment"># The &#x27;goodguy&#x27; role is allowed to &#x27;drive&#x27; (action) the winnebago (type) with</span></span><br><span class="line"><span class="comment"># license plate &#x27;eagle5&#x27; (instance specific id)</span></span><br><span class="line"><span class="attr">goodguy</span> = winnebago:drive:eagle5</span><br></pre></td></tr></table></figure><ol start="7"><li>复制一下 <code>Quickstart.java</code> 文件,如果有导包的错误，把那两个错误的包删掉，就会自动导对的包了，快速入门案例中用的方法过时了</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.ini.IniSecurityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.Session;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.lang.util.Factory;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple Quickstart application showing how to use Shiro&#x27;s API.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 0.9 RC2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Quickstart</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">transient</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(Quickstart.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The easiest way to create a Shiro SecurityManager with configured</span></span><br><span class="line">        <span class="comment">// realms, users, roles and permissions is to use the simple INI config.</span></span><br><span class="line">        <span class="comment">// We&#x27;ll do that by using a factory that can ingest a .ini file and</span></span><br><span class="line">        <span class="comment">// return a SecurityManager instance:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use the shiro.ini file at the root of the classpath</span></span><br><span class="line">        <span class="comment">// (file: and url: prefixes load from files and urls respectively):</span></span><br><span class="line">        Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> <span class="title class_">IniSecurityManagerFactory</span>(<span class="string">&quot;classpath:shiro.ini&quot;</span>);</span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> factory.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for this simple example quickstart, make the SecurityManager</span></span><br><span class="line">        <span class="comment">// accessible as a JVM singleton.  Most applications wouldn&#x27;t do this</span></span><br><span class="line">        <span class="comment">// and instead rely on their container configuration or web.xml for</span></span><br><span class="line">        <span class="comment">// webapps.  That is outside the scope of this simple quickstart, so</span></span><br><span class="line">        <span class="comment">// we&#x27;ll just do the bare minimum so you can continue to get a feel</span></span><br><span class="line">        <span class="comment">// for things.</span></span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Now that a simple Shiro environment is set up, let&#x27;s see what you can do:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// get the currently executing user:</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">currentUser</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do some stuff with a Session (no need for a web or EJB container!!!)</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> currentUser.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;someKey&quot;</span>, <span class="string">&quot;aValue&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;someKey&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (value.equals(<span class="string">&quot;aValue&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Retrieved the correct value! [&quot;</span> + value + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// let&#x27;s login the current user so we can check against roles and permissions:</span></span><br><span class="line">        <span class="keyword">if</span> (!currentUser.isAuthenticated()) &#123;</span><br><span class="line">            <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(<span class="string">&quot;lonestarr&quot;</span>, <span class="string">&quot;vespa&quot;</span>);</span><br><span class="line">            token.setRememberMe(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                currentUser.login(token);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownAccountException uae) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;There is no user with username of &quot;</span> + token.getPrincipal());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;Password for account &quot;</span> + token.getPrincipal() + <span class="string">&quot; was incorrect!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LockedAccountException lae) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;The account for username &quot;</span> + token.getPrincipal() + <span class="string">&quot; is locked.  &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Please contact your administrator to unlock it.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// ... catch more exceptions here (maybe custom ones specific to your application?</span></span><br><span class="line">            <span class="keyword">catch</span> (AuthenticationException ae) &#123;</span><br><span class="line">                <span class="comment">//unexpected condition?  error?</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//say who they are:</span></span><br><span class="line">        <span class="comment">//print their identifying principal (in this case, a username):</span></span><br><span class="line">        log.info(<span class="string">&quot;User [&quot;</span> + currentUser.getPrincipal() + <span class="string">&quot;] logged in successfully.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//test a role:</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.hasRole(<span class="string">&quot;schwartz&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;May the Schwartz be with you!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Hello, mere mortal.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//test a typed permission (not instance-level)</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;lightsaber:wield&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You may use a lightsaber ring.  Use it wisely.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Sorry, lightsaber rings are for schwartz masters only.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//a (very powerful) Instance Level permission:</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;winnebago:drive:eagle5&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You are permitted to &#x27;drive&#x27; the winnebago with license plate (id) &#x27;eagle5&#x27;.  &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Here are the keys - have fun!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Sorry, you aren&#x27;t allowed to drive the &#x27;eagle5&#x27; winnebago!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//all done - log out!</span></span><br><span class="line">        currentUser.logout();</span><br><span class="line"></span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>测试运行一下</li><li>报错，则导入一下 commons-logging 的依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="9"><li>发现，执行完毕什么都没有，可能是maven依赖中的作用域问题，我们需要将scope作用域删掉， 默认是在test，然后重启，那么我们的quickstart就结束了，默认的日志消息！</li></ol><h2 id="2-分析案例"><a href="#2-分析案例" class="headerlink" title="2. 分析案例"></a>2. 分析案例</h2><ol><li>类的描述</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Simple Quickstart application showing how to use Shiro&#x27;s API.</span></span><br><span class="line"><span class="comment">* 简单的快速启动应用程序，演示如何使用Shiro的API。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol start="2"><li>通过工厂模式创建SecurityManager的实例对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The easiest way to create a Shiro SecurityManager with configured</span></span><br><span class="line">        <span class="comment">// realms, users, roles and permissions is to use the simple INI config.</span></span><br><span class="line">        <span class="comment">// We&#x27;ll do that by using a factory that can ingest a .ini file and</span></span><br><span class="line">        <span class="comment">// return a SecurityManager instance:</span></span><br><span class="line"><span class="comment">// 使用类路径根目录下的shiro.ini文件</span></span><br><span class="line">        <span class="comment">// Use the shiro.ini file at the root of the classpath</span></span><br><span class="line">        <span class="comment">// (file: and url: prefixes load from files and urls respectively):</span></span><br><span class="line">        Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> <span class="title class_">IniSecurityManagerFactory</span>(<span class="string">&quot;classpath:shiro.ini&quot;</span>);</span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> factory.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for this simple example quickstart, make the SecurityManager</span></span><br><span class="line">        <span class="comment">// accessible as a JVM singleton.  Most applications wouldn&#x27;t do this</span></span><br><span class="line">        <span class="comment">// and instead rely on their container configuration or web.xml for</span></span><br><span class="line">        <span class="comment">// webapps.  That is outside the scope of this simple quickstart, so</span></span><br><span class="line">        <span class="comment">// we&#x27;ll just do the bare minimum so you can continue to get a feel</span></span><br><span class="line">        <span class="comment">// for things.</span></span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Now that a simple Shiro environment is set up, let&#x27;s see what you can do:</span></span><br></pre></td></tr></table></figure><ol start="3"><li>通过 SecurityUtils 获取当前执行的用户 Subject</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get the currently executing user: 获取当前正在执行的用户</span></span><br><span class="line"><span class="type">Subject</span> <span class="variable">currentUser</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br></pre></td></tr></table></figure><ol start="4"><li>session的操作</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Do some stuff with a Session (no need for a web or EJB container!!!)</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> currentUser.getSession();<span class="comment">//获得session</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;someKey&quot;</span>, <span class="string">&quot;aValue&quot;</span>);<span class="comment">//设置Session的值！</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;someKey&quot;</span>);<span class="comment">//从session中获取值</span></span><br><span class="line">        <span class="keyword">if</span> (value.equals(<span class="string">&quot;aValue&quot;</span>)) &#123;<span class="comment">//判断session中是否存在这个值！</span></span><br><span class="line">            log.info(<span class="string">&quot;Retrieved the correct value! [&quot;</span> + value + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>用户认证功能</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试当前的用户是否已经被认证，即是否已经登录！ </span></span><br><span class="line"><span class="comment">// let&#x27;s login the current user so we can check against roles and permissions:</span></span><br><span class="line">        <span class="keyword">if</span> (!currentUser.isAuthenticated()) &#123;<span class="comment">// isAuthenticated();是否认证</span></span><br><span class="line">            <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(<span class="string">&quot;lonestarr&quot;</span>, <span class="string">&quot;vespa&quot;</span>);</span><br><span class="line">            token.setRememberMe(<span class="literal">true</span>);<span class="comment">//记住我功能</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                currentUser.login(token);<span class="comment">//执行登录，可以登录成功的！</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownAccountException uae) &#123;<span class="comment">//如果没有指定的用户，则UnknownAccountException异常</span></span><br><span class="line">                log.info(<span class="string">&quot;There is no user with username of &quot;</span> + token.getPrincipal());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;<span class="comment">//密码不对的异常！</span></span><br><span class="line">                log.info(<span class="string">&quot;Password for account &quot;</span> + token.getPrincipal() + <span class="string">&quot; was incorrect!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LockedAccountException lae) &#123;<span class="comment">//用户被锁定的异常</span></span><br><span class="line">                log.info(<span class="string">&quot;The account for username &quot;</span> + token.getPrincipal() + <span class="string">&quot; is locked.  &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Please contact your administrator to unlock it.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// ... catch more exceptions here (maybe custom ones specific to your application?</span></span><br><span class="line">            <span class="keyword">catch</span> (AuthenticationException ae) &#123;&#123; <span class="comment">//认证异常，上面的异常都是它的子类</span></span><br><span class="line">                <span class="comment">//unexpected condition?  error?</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//say who they are:</span></span><br><span class="line">        <span class="comment">//print their identifying principal (in this case, a username):</span></span><br><span class="line">        log.info(<span class="string">&quot;User [&quot;</span> + currentUser.getPrincipal() + <span class="string">&quot;] logged in successfully.&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="6"><li>角色检查</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test a role:</span></span><br><span class="line"><span class="comment">//是否存在某一个角色</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.hasRole(<span class="string">&quot;schwartz&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;May the Schwartz be with you!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Hello, mere mortal.&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>权限检查，粗粒度</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试用户是否具有某一个权限，行为</span></span><br><span class="line"><span class="comment">//test a typed permission (not instance-level)</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;lightsaber:wield&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You may use a lightsaber ring.  Use it wisely.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Sorry, lightsaber rings are for schwartz masters only.&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>权限检查，细粒度</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试用户是否具有某一个权限，行为，比上面更加的具体！</span></span><br><span class="line"><span class="comment">//a (very powerful) Instance Level permission:</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;winnebago:drive:eagle5&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You are permitted to &#x27;drive&#x27; the winnebago with license plate (id) &#x27;eagle5&#x27;.  &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Here are the keys - have fun!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Sorry, you aren&#x27;t allowed to drive the &#x27;eagle5&#x27; winnebago!&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>注销操作</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">currentUser.logout();</span><br></pre></td></tr></table></figure><ol start="10"><li><p>退出系统 System.exit(0);</p></li><li><p>总览</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/15/ojMHKXUuWlxicry.png"                      alt="1"                ></p><h1 id="3、SpringBoot-集成-Shiro"><a href="#3、SpringBoot-集成-Shiro" class="headerlink" title="3、SpringBoot 集成 Shiro"></a>3、SpringBoot 集成 Shiro</h1><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><ol><li>搭建一个SpringBoot项目、选中web模块即可！</li><li>导入Maven依赖 thymeleaf</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--thymeleaf模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>编写一个页面 index.html templates</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span><span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>编写controller进行访问测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">        <span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/index&quot;&#125;)</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toIndex</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">                model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello,Shiro&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-编写配置文件"><a href="#2-编写配置文件" class="headerlink" title="2. 编写配置文件"></a>2. 编写配置文件</h2><ol><li>导入 SpringBoot 和 Shiro 整合包的依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringBoot 和 Shiro 整合包--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-spring-boot-web-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring-boot-web-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>下面是编写配置文件Shiro 三大要素</p><ul><li>subject -&gt; ShiroFilterFactoryBean</li><li>securityManager -&gt; DefaultWebSecurityManager</li><li>realm</li></ul><p>实际操作中对象创建的顺序 ： realm -&gt; securityManager -&gt;subject</p></li></ul><ol start="2"><li>编写Shiro 配置类 config包</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="comment">//声明为配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line">    <span class="comment">//创建 ShiroFilterFactoryBean</span></span><br><span class="line">    <span class="comment">//创建 DefaultWebSecurityManager</span></span><br><span class="line">    <span class="comment">//创建 realm 对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>我们倒着来，先想办法创建一个 realm 对象</li><li>编写自定义的 realm ，需要继承 <code>AuthorizingRealm</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义的 Realm</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        <span class="comment">//打印一个提示</span></span><br><span class="line">        System.out.println(<span class="string">&quot;执行了授权方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="comment">//打印一个提示</span></span><br><span class="line">        System.out.println(<span class="string">&quot;执行了认证方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>将这个类注册到我们的Bean中！ <code>ShiroConfig</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line">    <span class="comment">//创建 ShiroFilterFactoryBean</span></span><br><span class="line">    <span class="comment">//创建 DefaultWebSecurityManager</span></span><br><span class="line">    <span class="comment">//创建 realm 对象</span></span><br><span class="line">   <span class="comment">//让 spring 托管自定义的 realm 类</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserRealm <span class="title function_">userRealm</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserRealm</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>接下来我们该去创建 <code>DefaultWebSecurityManager</code> 了</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2. securityManager -&gt; DefaultWebSecurityManager</span></span><br><span class="line">    <span class="comment">// @Qualifier(&quot;userRealm&quot;) 指定 Bean 的名字为 userRealm</span></span><br><span class="line">    <span class="comment">// spring 默认的 BeanName 就是方法名</span></span><br><span class="line">    <span class="comment">// name 属性 指定 BeanName</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;SecurityManager&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">getDefaultWebSecurity</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span>&#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        <span class="comment">//需要关联自定义的 Realm，通过参数把 Realm 对象传递过来</span></span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="7"><li>接下来我们该去创建 ShiroFilterFactoryBean 了</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. subject -&gt; ShiroFilterFactoryBean</span></span><br><span class="line"><span class="comment">// @Qualifier(&quot;securityManager&quot;) 指定 Bean 的名字为 securityManager</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(name = &quot;shiroFilterFactoryBean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;SecurityManager&quot;)</span> DefaultWebSecurityManager securityManager)</span>&#123;</span><br><span class="line">    <span class="type">ShiroFilterFactoryBean</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">    <span class="comment">//设置安全管理器</span></span><br><span class="line">    <span class="comment">//需要关联 securityManager ，通过参数把 securityManager 对象传递过来</span></span><br><span class="line">    subject.setSecurityManager(securityManager);</span><br><span class="line">    <span class="keyword">return</span> subject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-搭建简单测试环境"><a href="#3-搭建简单测试环境" class="headerlink" title="3. 搭建简单测试环境"></a>3. 搭建简单测试环境</h2><ol><li>编写两个页面、在templates目录下新建一个user目录下创建add.html和update.html</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>add<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>update<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>编写跳转到页面的controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user/add&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;user/add&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/user/update&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;user/update&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在index页面上，增加跳转链接</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/add&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span> | <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag"><span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/update&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>测试页面跳转是否OK</li></ol><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><h3 id="1-登录拦截"><a href="#1-登录拦截" class="headerlink" title="1. 登录拦截"></a>1. 登录拦截</h3><ol><li>在上面的 <code>getShiroFilterFactoryBean</code> 方法中加上需要拦截的登录请求</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Bean(name = &quot;shiroFilterFactoryBean&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;SecurityManager&quot;)</span> DefaultWebSecurityManager securityManager)</span>&#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        subject.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加 Shiro 的内置过滤器=======================</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            anon : 无需认证，就可以访问</span></span><br><span class="line"><span class="comment">            authc : 必须认证，才能访问</span></span><br><span class="line"><span class="comment">            user : 必须拥有 “记住我”功能才能用</span></span><br><span class="line"><span class="comment">            perms : 拥有对某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">            role : 拥有某个角色权限才能访问</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 设置 /user/addUser 这个请求,只有认证过才能访问</span></span><br><span class="line"><span class="comment">//        map.put(&quot;/user/addUser&quot;,&quot;authc&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;/user/deleteUser&quot;,&quot;authc&quot;);</span></span><br><span class="line">        <span class="comment">// 设置 /user/ 下面的所有请求,只有认证过才能访问</span></span><br><span class="line">        map.put(<span class="string">&quot;/user/*&quot;</span>,<span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        subject.setFilterChainDefinitionMap(map);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//============================================</span></span><br><span class="line">        <span class="keyword">return</span> subject;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>再起启动测试，访问链接进行测试！拦截OK！但是发现，点击后会跳转到一个Login.jsp页面，这 个不是我们想要的效果，我们需要自己定义一个Login页面！</p></li><li><p>编写一个自己的Login页面</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>shiro登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: #ff0000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>密  码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>编写跳转的controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toLogin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toLogin</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>在shiro中配置一下！ <code>ShiroFilterFactoryBean()</code> 方法下面</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改到要跳转的login页面；</span></span><br><span class="line">shiroFilterFactoryBean.setLoginUrl(<span class="string">&quot;/toLogin&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-用户认证"><a href="#2-用户认证" class="headerlink" title="2. 用户认证"></a>2. 用户认证</h3><ol><li>在 Controller 中写一个登录的控制器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//登录的方法</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(String username, String password, Model model)</span> &#123;</span><br><span class="line">        <span class="comment">//获取当前用户</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//没有认证过</span></span><br><span class="line">        <span class="comment">//封装用户的登录数据,获得令牌</span></span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//登录 及 异常处理</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//用户登录</span></span><br><span class="line">            subject.login(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException uae) &#123;</span><br><span class="line">            <span class="comment">//如果用户名不存在</span></span><br><span class="line">            System.out.println(<span class="string">&quot;用户名不存在&quot;</span>);</span><br><span class="line">            model.addAttribute(<span class="string">&quot;exception&quot;</span>, <span class="string">&quot;用户名不存在&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;</span><br><span class="line">            <span class="comment">//如果密码错误</span></span><br><span class="line">            System.out.println(<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">            model.addAttribute(<span class="string">&quot;exception&quot;</span>, <span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>是先执行了 自定义的 <code>UserRealm</code> 中的 <code>AuthenticationInfo</code> 方法，再执行了，登录的相关操作</strong></p><p>下面去自定义的 <code>UserRealm</code> 中的 <code>AuthenticationInfo</code> 方法中去获取用户信息</p><ol start="2"><li>修改 <code>UserRealm</code> 中的 <code>AuthenticationInfo</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="comment">//打印一个提示</span></span><br><span class="line">        System.out.println(<span class="string">&quot;执行了认证方法&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用户名密码(暂时先自定义一个做测试)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过参数获取登录的控制器中生成的 令牌</span></span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        <span class="comment">//用户名认证</span></span><br><span class="line">        <span class="keyword">if</span> (!token.getUsername().equals(name))&#123;</span><br><span class="line">            <span class="comment">// return null 就表示控制器中抛出的相关异常</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//密码认证， Shiro 自己做，为了避免和密码的接触</span></span><br><span class="line">        <span class="comment">//最后返回一个 AuthenticationInfo 接口的实现类，这里选择 SimpleAuthenticationInfo</span></span><br><span class="line">        <span class="comment">// 三个参数：获取当前用户的认证 ； 密码 ； 认证名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(<span class="string">&quot;&quot;</span>, password, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-整合数据库"><a href="#3-整合数据库" class="headerlink" title="3.整合数据库"></a>3.整合数据库</h3><ol><li>导入Mybatis相关依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- 引入 myBatis，这是 MyBatis官方提供的适配 Spring Boot 的，而不是Spring Boot自己的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>编写配置文件-连接配置 application.yml</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">Root123</span></span><br><span class="line">    <span class="comment">#?serverTimezone=UTC解决时区的报错</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/shiro?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址： https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure><ol start="3"><li>编写mybatis的配置 application.properties</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis.type-aliases-package</span>=<span class="string">com.fang.pojo</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><ol start="4"><li>编写实体类,引入Lombok</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>编写Mapper接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>编写Mapper配置文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.fang.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserByUsername&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where username=#&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="7"><li>编写UserService 层</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.queryUserByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>改造UserRealm，连接到数据库进行真实的操作！</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义Realm</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    <span class="comment">//执行授权逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了=&gt;授权逻辑PrincipalCollection&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//执行认证逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了=&gt;认证逻辑AuthenticationToken&quot;</span>);</span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">userToken</span> <span class="operator">=</span> (UsernamePasswordToken)token;</span><br><span class="line"><span class="comment">//真实连接数据库</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.queryUserByName(userToken.getUsername());</span><br><span class="line">        <span class="keyword">if</span> (user==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//用户名不存在</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">//shiro底层就会抛出 UnknownAccountException</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(<span class="string">&quot;&quot;</span>, user.getPwd(), <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-思考：密码比对原理探究"><a href="#4-思考：密码比对原理探究" class="headerlink" title="4.思考：密码比对原理探究"></a>4.思考：密码比对原理探究</h3><ul><li>这个Shiro，是怎么帮我们实现密码自动比对的呢？ </li><li>我们可以去 realm的父类 AuthorizingRealm 的父类 AuthenticatingRealm 中找一个方法 </li><li>核心： getCredentialsMatcher() 翻译过来：获取证书匹配器 </li><li>我们去看这个接口 CredentialsMatcher 有很多的实现类，MD5盐值加密</li></ul><p>我们的密码一般都不能使用明文保存？需要加密处理；思路分析 </p><ol><li>如何把一个字符串加密为MD5</li><li>替换当前的Realm 的 CredentialsMatcher 属性，直接使用 Md5CredentialsMatcher 对象， 并设置加密算法</li></ol><h3 id="5-用户授权操作"><a href="#5-用户授权操作" class="headerlink" title="5.用户授权操作"></a>5.用户授权操作</h3><p>使用shiro的过滤器来拦截请求即可！ </p><ol><li>在 ShiroFilterFactoryBean 中添加一个过滤器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//授权过滤器</span></span><br><span class="line">filterMap.put(<span class="string">&quot;/user/add&quot;</span>,<span class="string">&quot;perms[user:add]&quot;</span>); <span class="comment">//大家记得注意顺序！</span></span><br></pre></td></tr></table></figure><ol start="2"><li>我们再次启动测试一下，访问add，未授权错误！</li><li>注意：当我们实现权限拦截后，shiro会自动跳转到未授权的页面，但我们没有这个页面，所有401 了</li><li>配置一个未授权的提示的页面，增加一个controller提示</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/noauth&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">noAuth</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;未经授权不能访问此页面&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>然后再 shiroFilterFactoryBean 中配置一个未授权的请求页面！</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">&quot;/noauth&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="6-Shiro授权"><a href="#6-Shiro授权" class="headerlink" title="6.Shiro授权"></a>6.Shiro授权</h3><ol><li>在UserRealm 中添加授权的逻辑，增加授权的字符串！</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行授权逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了=&gt;授权逻辑PrincipalCollection&quot;</span>);</span><br><span class="line">    <span class="comment">//给资源进行授权</span></span><br><span class="line">    <span class="type">SimpleAuthorizationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">    <span class="comment">//添加资源的授权字符串</span></span><br><span class="line">    info.addStringPermission(<span class="string">&quot;user:add&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们再次登录测试，发现登录的用户是可以进行访问add 页面了！授权成功！ 问题，我们现在完全是硬编码，无论是谁登录上来，都可以实现授权通过，但是真实的业务情况应该 是，每个用户拥有自己的一些权限，从而进行操作，所以说，权限，应该在用户的数据库中，正常的情 况下，应该数据库中是由一个权限表的，我们需要联表查询，但是这里为了大家操作理解方便一些，我 们直接在数据库表中增加一个字段来进行操作！</p><ol start="2"><li>修改实体类，增加一个字段</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">    <span class="keyword">private</span> String perms;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>我们现在需要再自定义的授权认证中，获取登录的用户，从而实现动态认证授权操作！ </p><p>3.1在用户登录授权的时候，将用户放在 Principal 中，改造下之前的代码</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(user, user.getPwd(), <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p>​3.2 然后再授权的地方获得这个用户，从而获得它的权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行授权逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> AuthorizationInfo</span><br><span class="line"><span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了=&gt;授权逻辑PrincipalCollection&quot;</span>);</span><br><span class="line">        <span class="comment">//给资源进行授权</span></span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">        <span class="comment">//添加资源的授权字符串</span></span><br><span class="line">        <span class="comment">//info.addStringPermission(&quot;user:add&quot;);</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject(); <span class="comment">//获得当前对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">currentUser</span> <span class="operator">=</span> (User) subject.getPrincipal(); <span class="comment">//拿到User对象</span></span><br><span class="line">        info.addStringPermission(currentUser.getPerms()); <span class="comment">//设置权限</span></span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-退出登录"><a href="#7-退出登录" class="headerlink" title="7. 退出登录"></a>7. 退出登录</h3><ol><li>在控制器中添加一个退出登录的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//退出登录</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">logout</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">    subject.logout();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-整合Thymeleaf"><a href="#8-整合Thymeleaf" class="headerlink" title="8.整合Thymeleaf"></a>8.整合Thymeleaf</h3><p>根据权限展示不同的前端页面 </p><ol><li>添加Maven的依赖；</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- thymeleaf-shiro整合包 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置一个shiro的Dialect ，在shiro的配置中增加一个Bean</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置ShiroDialect：方言，用于 thymeleaf 和 shiro 标签配合使用</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ShiroDialect <span class="title function_">getShiroDialect</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroDialect</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>.修改前端的配置</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:add&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/add&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:update&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/update&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>我们在用户登录后应该把信息放到Session中，我们完善下！在执行认证逻辑时候，加 入session</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">subject.getSession().setAttribute(<span class="string">&quot;loginUser&quot;</span>,user);</span><br></pre></td></tr></table></figure><ol start="5"><li>前端从session中获取，然后用来判断是否显示登录</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.loginUser==null&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4、总体代码"><a href="#4、总体代码" class="headerlink" title="4、总体代码"></a>4、总体代码</h1><h2 id="1-前端页面"><a href="#1-前端页面" class="headerlink" title="1.前端页面"></a>1.前端页面</h2><p> templates目录创建index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:shiro</span>=<span class="string">&quot;http://www.thymeleaf.org/thymeleaf-extras-shiro&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>shiro<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.loginUser==null&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;ss:mm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/add&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:update&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/update&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.loginUser&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-连接数据库和认证授权"><a href="#2-连接数据库和认证授权" class="headerlink" title="2..连接数据库和认证授权"></a>2..连接数据库和认证授权</h2><p>config包下创建ShiroConfig和UserRealm</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line">    <span class="comment">//ShiroFilterFactoryBean   第三步</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultWebSecurityManager securityManager)</span>&#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">shiroFilterFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        <span class="comment">//设置安全管理器</span></span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            添加shiro的内置过滤器</span></span><br><span class="line"><span class="comment">            anon：无须认证就可以访问</span></span><br><span class="line"><span class="comment">            authc：必须认证了才可以访问</span></span><br><span class="line"><span class="comment">            perms：拥有对某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">            role:拥有某个角色才可以访问</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>();</span><br><span class="line"><span class="comment">//        filterMap.put(&quot;/user/add&quot;,&quot;authc&quot;);</span></span><br><span class="line"><span class="comment">//        filterMap.put(&quot;/user/update&quot;,&quot;authc&quot;);</span></span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/add&quot;</span>,<span class="string">&quot;perms[ss:mm]&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/update&quot;</span>,<span class="string">&quot;perms[m:add]&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/*&quot;</span>,<span class="string">&quot;authc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line">        <span class="comment">//设置跳转到登录页面</span></span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">&quot;/toLogin&quot;</span>);</span><br><span class="line">        <span class="comment">//设置到未授权页面</span></span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">&quot;/noauth&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DefaultWebSecurityManager  第二步</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;securityManager&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager=<span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        <span class="comment">//关联realm</span></span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建realm 域对象，需要自定义   第一步</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;userRealm&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UserRealm <span class="title function_">getUserRealm</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserRealm</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//shiro 整合thymeleaf</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroDialect <span class="title function_">getShiroDialect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroDialect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>filterMap.put(“&#x2F;user&#x2F;update”,“perms[m:add]”); perms[]括号里是字符串，随便字符串都行,数据库perms字段需要加入与perms[]括号里面相同的字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Override</span>   <span class="comment">//授权</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----授权了-----AuthorizationInfo&quot;</span>);</span><br><span class="line">        SimpleAuthorizationInfo info=<span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line"><span class="comment">//        info.addStringPermission(&quot;user:add&quot;);</span></span><br><span class="line">        <span class="comment">//从数据库查权限</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="type">User</span> <span class="variable">currentUser</span> <span class="operator">=</span> (User) subject.getPrincipal();<span class="comment">//其实就是拿认证成功的时候的那个user</span></span><br><span class="line">        info.addStringPermission(currentUser.getPerms());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>   <span class="comment">//认证</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----认证了-----AuthenticationInfo&quot;</span>);</span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">userToken</span> <span class="operator">=</span> (UsernamePasswordToken) token;</span><br><span class="line">        <span class="comment">//用户名，密码去数据库取</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.queryUserByUsername(userToken.getUsername());</span><br><span class="line">        <span class="keyword">if</span> (user==<span class="literal">null</span>)&#123;  <span class="comment">//没有这个人</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;  <span class="comment">//其实就是抛出UnknownAccountException异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//之后密码认证，shiro   它自己会做</span></span><br><span class="line">        SimpleAuthenticationInfo info=<span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(user,user.getPassword(),<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">currentSubject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> currentSubject.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;loginUser&quot;</span>,user);</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建数据库表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> shiro(</span><br><span class="line">id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key ,</span><br><span class="line">username <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">password <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">perms <span class="type">varchar</span>(<span class="number">30</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="3-目录结构代码"><a href="#3-目录结构代码" class="headerlink" title="3.目录结构代码"></a>3.目录结构代码</h2><p>1.controller包下创建MyController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/index&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toIndex</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello shiro!!!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toLogin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toLogin</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(String username,String password,Model model)</span>&#123;</span><br><span class="line">        <span class="comment">//获取当前输入的用户</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//封装用户的数据</span></span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username,password);</span><br><span class="line">        <span class="comment">//登录，没有异常就说明登录成功</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IncorrectCredentialsException e)&#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没授权</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/noauth&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">unauthorized</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;没经授权无法进入&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//退出</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">logout</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">currentUser</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        currentUser.logout();</span><br><span class="line">        System.out.println(<span class="string">&quot;退出了&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、Shiro简介&quot;&gt;&lt;a href=&quot;#1、Shiro简介&quot; class=&quot;headerlink&quot; title=&quot;1、Shiro简介&quot;&gt;&lt;/a&gt;1、Shiro简介&lt;/h1&gt;&lt;h2 id=&quot;1-什么是Shiro？&quot;&gt;&lt;a href=&quot;#1-什么是Shiro？&quot; c</summary>
      
    
    
    
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot开发实用篇之集成SpringSecurity</title>
    <link href="http://example.com/2022/07/13/SpringBoot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87%E4%B9%8B%E9%9B%86%E6%88%90SpringSecurity/"/>
    <id>http://example.com/2022/07/13/SpringBoot%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E7%AF%87%E4%B9%8B%E9%9B%86%E6%88%90SpringSecurity/</id>
    <published>2022-07-13T03:00:51.000Z</published>
    <updated>2022-07-13T03:34:21.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h1><p>在 Web 开发中，安全一直是非常重要的一个方面。安全虽然属于应用的非功能性需求，但是应该在应用开发的初期就考虑进来。如果在应用开发的后期才考虑安全的问题，就可能陷入一个两难的境地：一方面，应用存在严重的安全漏洞，无法满足用户的要求，并可能造成用户的隐私数据被攻击者窃取；另一方面，应用的基本架构已经确定，要修复安全漏洞，可能需要对系统的架构做出比较重大的调整，因而需要更多的开发时间，影响应用的发布进程。因此，从应用开发的第一天就应该把安全相关的因素考虑进来，并在整个应用的开发过程中。</p><p>市面上存在比较有名的：Shiro，Spring Security ！</p><p>这里需要阐述一下的是，每一个框架的出现都是为了解决某一问题而产生了，那么Spring Security框架的出现是为了解决什么问题呢？</p><p>首先我们看下它的官网介绍：<a class="link"   href="https://spring.io/projects/spring-security#overview" >Spring Security<i class="fas fa-external-link-alt"></i></a></p><p>Spring Security is a powerful and highly customizable authentication and access-control framework. It is the de-facto standard for securing Spring-based applications.</p><p>Spring Security is a framework that focuses on providing both authentication and authorization to Java applications. Like all Spring projects, the real power of Spring Security is found in how easily it can be extended to meet custom requirements</p><p>Spring Security是一个功能强大且高度可定制的身份验证和访问控制框架。它实际上是保护基于spring的应用程序的标准。</p><p>Spring Security是一个框架，侧重于为Java应用程序提供身份验证和授权。与所有Spring项目一样，Spring安全性的真正强大之处在于它可以轻松地扩展以满足定制需求</p><p>从官网的介绍中可以知道这是一个权限框架。想我们之前做项目是没有使用框架是怎么控制权限的？对于权限 一般会细分为功能权限，访问权限，和菜单权限。代码会写的非常的繁琐，冗余。</p><p>怎么解决之前写权限代码繁琐，冗余的问题，一些主流框架就应运而生而Spring Scecurity就是其中的一种。</p><p>Spring 是一个非常流行和成功的 Java 应用开发框架。Spring Security 基于 Spring 框架，提供了一套 Web 应用安全性的完整解决方案。一般来说，Web 应用的安全性包括用户认证（Authentication）和用户授权（Authorization）两个部分。用户认证指的是验证某个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认证过程。用户授权指的是验证某个用户是否有权限执行某个操作。在一个系统中，不同用户所具有的权限是不同的。比如对一个文件来说，有的用户只能进行读取，而有的用户可以进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的权限。</p><p>对于上面提到的两种应用情景，Spring Security 框架都有很好的支持。在用户认证方面，Spring Security 框架支持主流的认证方式，包括 HTTP 基本认证、HTTP 表单验证、HTTP 摘要认证、OpenID 和 LDAP 等。在用户授权方面，Spring Security 提供了基于角色的访问控制和访问控制列表（Access Control List，ACL），可以对应用中的领域对象进行细粒度的控制。</p><h1 id="2、实战测试"><a href="#2、实战测试" class="headerlink" title="2、实战测试"></a>2、实战测试</h1><p>1、新建一个初始的springboot项目web模块，thymeleaf模块</p><p>2、导入静态资源</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">welcome.html</span><br><span class="line">|views</span><br><span class="line">|level1</span><br><span class="line">        <span class="number">1</span>.html</span><br><span class="line">        <span class="number">2</span>.html</span><br><span class="line">        <span class="number">3</span>.html</span><br><span class="line">|level2</span><br><span class="line">        <span class="number">1</span>.html</span><br><span class="line">        <span class="number">2</span>.html</span><br><span class="line">        <span class="number">3</span>.html</span><br><span class="line">|level3</span><br><span class="line">        <span class="number">1</span>.html</span><br><span class="line">        <span class="number">2</span>.html</span><br><span class="line">        <span class="number">3</span>.html</span><br><span class="line">Login.html</span><br></pre></td></tr></table></figure><p>3、controller跳转！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package com.kuang.controller;</span><br><span class="line"> </span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"> </span><br><span class="line">@Controller</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouterController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    @<span class="title function_ invoke__">RequestMapping</span>(&#123;<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/index&quot;</span>&#125;)</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_ invoke__">index</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    @<span class="title function_ invoke__">RequestMapping</span>(<span class="string">&quot;/toLogin&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_ invoke__">toLogin</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    @<span class="title function_ invoke__">RequestMapping</span>(<span class="string">&quot;/level1/&#123;id&#125;&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_ invoke__">level1</span>(@<span class="title function_ invoke__">PathVariable</span>(<span class="string">&quot;id&quot;</span>) <span class="keyword">int</span> id)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/level1/&quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    @<span class="title function_ invoke__">RequestMapping</span>(<span class="string">&quot;/level2/&#123;id&#125;&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_ invoke__">level2</span>(@<span class="title function_ invoke__">PathVariable</span>(<span class="string">&quot;id&quot;</span>) <span class="keyword">int</span> id)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/level2/&quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    @<span class="title function_ invoke__">RequestMapping</span>(<span class="string">&quot;/level3/&#123;id&#125;&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_ invoke__">level3</span>(@<span class="title function_ invoke__">PathVariable</span>(<span class="string">&quot;id&quot;</span>) <span class="keyword">int</span> id)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/level3/&quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、测试实验环境是否OK！</p><h1 id="3、认识SpringSecurity"><a href="#3、认识SpringSecurity" class="headerlink" title="3、认识SpringSecurity"></a>3、认识SpringSecurity</h1><p>Spring Security 是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，他可以实现强大的Web安全控制，对于安全控制，我们仅需要引入 spring-boot-starter-security 模块，进行少量的配置，即可实现强大的安全管理！</p><p>记住几个类：</p><ul><li>WebSecurityConfigurerAdapter：自定义Security策略</li><li>AuthenticationManagerBuilder：自定义认证策略</li><li>@EnableWebSecurity：开启WebSecurity模式</li></ul><p>Spring Security的两个主要目标是 “认证” 和 “授权”（访问控制）。</p><p><strong>“认证”（Authentication）</strong></p><p>身份验证是关于验证您的凭据，如用户名&#x2F;用户ID和密码，以验证您的身份。</p><p>身份验证通常通过用户名和密码完成，有时与身份验证因素结合使用。</p><p><strong>“授权” （Authorization）</strong></p><p>授权发生在系统成功验证您的身份后，最终会授予您访问资源（如信息，文件，数据库，资金，位置，几乎任何内容）的完全权限。</p><p>这个概念是通用的，而不是只在Spring Security 中存在。</p><h2 id="认证和授权"><a href="#认证和授权" class="headerlink" title="认证和授权"></a>认证和授权</h2><p>目前，我们的测试环境，是谁都可以访问的，我们使用 Spring Security 增加上认证和授权的功能</p><p>1、引入 Spring Security 模块</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2、编写 Spring Security 配置类</p><p>参考官网：<a class="link"   href="https://spring.io/projects/spring-security" >https://spring.io/projects/spring-security<i class="fas fa-external-link-alt"></i></a></p><p>查看我们自己项目中的版本，找到对应的帮助文档：</p><p><a class="link"   href="https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5" >https://docs.spring.io/spring-security/site/docs/5.3.0.RELEASE/reference/html5<i class="fas fa-external-link-alt"></i></a>  #servlet-applications 8.16.4</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/13/9sqZiOyRYHBm25n.png"                      alt="image-20220713110519344"                ></p><p>3、编写基础配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.config;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@EnableWebSecurity</span> <span class="comment">// 开启WebSecurity模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、定制请求的授权规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 定制请求的授权规则</span></span><br><span class="line">    <span class="comment">// 首页所有人可以访问</span></span><br><span class="line">    http.authorizeRequests().antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">    .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">    .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">    .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、测试一下：发现除了首页都进不去了！因为我们目前没有登录的角色，因为请求需要登录的角色拥有对应的权限才可以！</p><p>6、在configure()方法中加入以下配置，开启自动配置的登录功能！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启自动配置的登录功能</span></span><br><span class="line"><span class="comment">// /login 请求来到登录页</span></span><br><span class="line"><span class="comment">// /login?error 重定向到这里表示登录失败</span></span><br><span class="line">http.formLogin();</span><br></pre></td></tr></table></figure><p>7、测试一下：发现，没有权限的时候，会跳转到登录的页面！</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/13/AUg6k51SMKPyt7X.png"                      alt="image-20220713110702380"                ></p><p>8、查看刚才登录页的注释信息；</p><p>我们可以定义认证规则，重写configure(AuthenticationManagerBuilder auth)方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义认证规则</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在内存中定义，也可以在jdbc中去拿....</span></span><br><span class="line">    auth.inMemoryAuthentication()</span><br><span class="line">            .withUser(<span class="string">&quot;kuangshen&quot;</span>).password(<span class="string">&quot;123456&quot;</span>).roles(<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .withUser(<span class="string">&quot;root&quot;</span>).password(<span class="string">&quot;123456&quot;</span>).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .withUser(<span class="string">&quot;guest&quot;</span>).password(<span class="string">&quot;123456&quot;</span>).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9、测试，我们可以使用这些账号登录进行测试！发现会报错！</p><p>There is no PasswordEncoder mapped for the id “null”</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/13/8RDzxKL3QemkVpo.png"                      alt="image-20220713110810318"                ></p><p>10、原因，我们要将前端传过来的密码进行某种方式加密，否则就无法登录，修改代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义认证规则</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//在内存中定义，也可以在jdbc中去拿....</span></span><br><span class="line">    <span class="comment">//Spring security 5.0中新增了多种加密方式，也改变了密码的格式。</span></span><br><span class="line">    <span class="comment">//要想我们的项目还能够正常登陆，需要修改一下configure中的代码。我们要将前端传过来的密码进行某种方式加密</span></span><br><span class="line">    <span class="comment">//spring security 官方推荐的是使用bcrypt加密方式。</span></span><br><span class="line">    </span><br><span class="line">    auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>())</span><br><span class="line">            .withUser(<span class="string">&quot;kuangshen&quot;</span>).password(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .withUser(<span class="string">&quot;root&quot;</span>).password(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .withUser(<span class="string">&quot;guest&quot;</span>).password(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>11、测试，发现，登录成功，并且每个角色只能访问自己认证下的规则！搞定</p><h2 id="权限控制和注销"><a href="#权限控制和注销" class="headerlink" title="权限控制和注销"></a>权限控制和注销</h2><p>1、开启自动配置的注销的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定制请求的授权规则</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">    <span class="comment">//开启自动配置的注销的功能</span></span><br><span class="line">       <span class="comment">// /logout 注销请求</span></span><br><span class="line">    http.logout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、我们在前端，增加一个注销的按钮，index.html 导航栏中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;address card icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 注销</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、我们可以去测试一下，登录成功后点击注销，发现注销完毕会跳转到登录页面！</p><p>4、但是，我们想让他注销成功后，依旧可以跳转到首页，该怎么处理呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .logoutSuccessUrl(&quot;/&quot;); 注销成功来到首页</span></span><br><span class="line">http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br></pre></td></tr></table></figure><p>5、测试，注销完毕后，发现跳转到首页OK</p><p>6、我们现在又来一个需求：用户没有登录的时候，导航栏上只显示登录按钮，用户登录之后，导航栏可以显示登录的用户信息及注销按钮！还有就是，比如kuangshen这个用户，它只有 vip2，vip3功能，那么登录则只显示这两个功能，而vip1的功能菜单不显示！这个就是真实的网站情况了！该如何做呢？</p><p>我们需要结合thymeleaf中的一些功能</p><p>sec：authorize&#x3D;”isAuthenticated()”:是否认证登录！来显示不同的页面</p><p>Maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf.extras/thymeleaf-extras-springsecurity4 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>7、修改我们的 前端页面</p><ol><li>导入命名空间</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:sec=<span class="string">&quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity5&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>修改导航栏，增加认证判断</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--登录注销--&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">right</span> <span class="title">menu</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;!--如果未登录--&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">div</span> <span class="title">sec</span>:<span class="title">authorize</span>=&quot;!<span class="title">isAuthenticated</span>()&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">a</span> <span class="title">class</span>=&quot;<span class="title">item</span>&quot; <span class="title">th</span>:<span class="title">href</span>=&quot;@</span>&#123;/login&#125;<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;i class=&quot;</span>address card icon<span class="string">&quot;&gt;&lt;/i&gt; 登录</span></span><br><span class="line"><span class="string">        &lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;!--如果已登录--&gt;</span></span><br><span class="line"><span class="string">    &lt;div sec:authorize=&quot;</span><span class="title function_ invoke__">isAuthenticated</span>()<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;a class=&quot;</span>item<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;i class=&quot;</span>address card icon<span class="string">&quot;&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="string">            用户名：&lt;span sec:authentication=&quot;</span>principal.username<span class="string">&quot;&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">            角色：&lt;span sec:authentication=&quot;</span>principal.authorities<span class="string">&quot;&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div sec:authorize=&quot;</span><span class="title function_ invoke__">isAuthenticated</span>()<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;a class=&quot;</span>item<span class="string">&quot; th:href=&quot;</span>@&#123;/logout&#125;<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;i class=&quot;</span>address card icon<span class="string">&quot;&gt;&lt;/i&gt; 注销</span></span><br><span class="line"><span class="string">        &lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>8、重启测试，我们可以登录试试看，登录成功后确实，显示了我们想要的页面；</p><p>9、如果注销404了，就是因为它默认防止csrf跨站请求伪造，因为会产生安全问题，我们可以将请求改为post表单提交，或者在spring security中关闭csrf功能；我们试试：在 配置中增加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.csrf().disable();<span class="comment">//关闭csrf功能:跨站请求伪造,默认只能通过post方式提交logout请求</span></span><br><span class="line">http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br></pre></td></tr></table></figure><p>10、我们继续将下面的角色功能块认证完成！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sec:authorize=&quot;hasRole(&#x27;vip1&#x27;)&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip1&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 1<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip2&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 2<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip3&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 3<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>11、测试一下！</p><p>12、权限控制和注销搞定！</p><h1 id="4、记住我"><a href="#4、记住我" class="headerlink" title="4、记住我"></a>4、记住我</h1><p>现在的情况，我们只要登录之后，关闭浏览器，再登录，就会让我们重新登录，但是很多网站的情况，就是有一个记住密码的功能，这个该如何实现呢？很简单</p><p>1、开启记住我功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定制请求的授权规则</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//。。。。。。。。。。。</span></span><br><span class="line">    <span class="comment">//记住我</span></span><br><span class="line">    http.rememberMe();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、我们再次启动项目测试一下，发现登录页多了一个记住我功能，我们登录之后关闭 浏览器，然后重新打开浏览器访问，发现用户依旧存在！</p><p>思考：如何实现的呢？其实非常简单</p><p>我们可以查看浏览器的cookie</p><p>3、我们点击注销的时候，可以发现，spring security 帮我们自动删除了这个 cookie</p><p>4、结论：登录成功后，将cookie发送给浏览器保存，以后登录带上这个cookie，只要通过检查就可以免登录了。如果点击注销，则会删除这个cookie，具体的原理我们在JavaWeb阶段都讲过了，这里就不在多说了！</p><h1 id="5、定制登录页"><a href="#5、定制登录页" class="headerlink" title="5、定制登录页"></a>5、定制登录页</h1><p>现在这个登录页面都是spring security 默认的，怎么样可以使用我们自己写的Login界面呢？</p><p>1、在刚才的登录页配置后面指定 loginpage</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.formLogin().loginPage(<span class="string">&quot;/toLogin&quot;</span>);</span><br></pre></td></tr></table></figure><p>2、然后前端也需要指向我们自己定义的 login请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;address card icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 登录</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、我们登录，需要将这些信息发送到哪里，我们也需要配置，login.html 配置提交请求及方式，方式必须为post:</p><p>在 loginPage()源码中的注释上有写明：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/13/y7AQTmpe2IW3hNM.png"                      alt="image-20220713112020023"                ></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui left icon input&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;user icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui left icon input&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;lock icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ui blue submit button&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、这个请求提交上来，我们还需要验证处理，怎么做呢？我们可以查看formLogin()方法的源码！我们配置接收登录的用户名和密码的参数！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http.formLogin()</span><br><span class="line">    .usernameParameter(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">    .passwordParameter(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">    .loginPage(<span class="string">&quot;/toLogin&quot;</span>)</span><br><span class="line">    .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>); <span class="comment">// 登陆表单提交请求</span></span><br></pre></td></tr></table></figure><p>5、在登录页增加记住我的多选框</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;remember&quot;</span>&gt; 记住我</span><br></pre></td></tr></table></figure><p>6、后端验证处理！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定制记住我的参数！</span></span><br><span class="line">http.<span class="title function_ invoke__">rememberMe</span>().<span class="title function_ invoke__">rememberMeParameter</span>(<span class="string">&quot;remember&quot;</span>);</span><br></pre></td></tr></table></figure><p>7、测试，OK</p><h1 id="6、完整配置代码"><a href="#6、完整配置代码" class="headerlink" title="6、完整配置代码"></a>6、完整配置代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.config;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//定制请求的授权规则</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"> </span><br><span class="line">        http.authorizeRequests().antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">        .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">        .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">        .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="comment">//开启自动配置的登录功能：如果没有权限，就会跳转到登录页面！</span></span><br><span class="line">            <span class="comment">// /login 请求来到登录页</span></span><br><span class="line">            <span class="comment">// /login?error 重定向到这里表示登录失败</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">            .usernameParameter(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">            .passwordParameter(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">            .loginPage(<span class="string">&quot;/toLogin&quot;</span>)</span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>); <span class="comment">// 登陆表单提交请求</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">//开启自动配置的注销的功能</span></span><br><span class="line">            <span class="comment">// /logout 注销请求</span></span><br><span class="line">            <span class="comment">// .logoutSuccessUrl(&quot;/&quot;); 注销成功来到首页</span></span><br><span class="line"> </span><br><span class="line">        http.csrf().disable();<span class="comment">//关闭csrf功能:跨站请求伪造,默认只能通过post方式提交logout请求</span></span><br><span class="line">        http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//记住我</span></span><br><span class="line">        http.rememberMe().rememberMeParameter(<span class="string">&quot;remember&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//定义认证规则</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//在内存中定义，也可以在jdbc中去拿....</span></span><br><span class="line">        <span class="comment">//Spring security 5.0中新增了多种加密方式，也改变了密码的格式。</span></span><br><span class="line">        <span class="comment">//要想我们的项目还能够正常登陆，需要修改一下configure中的代码。我们要将前端传过来的密码进行某种方式加密</span></span><br><span class="line">        <span class="comment">//spring security 官方推荐的是使用bcrypt加密方式。</span></span><br><span class="line"> </span><br><span class="line">        auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>())</span><br><span class="line">                .withUser(<span class="string">&quot;kuangshen&quot;</span>).password(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;root&quot;</span>).password(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;guest&quot;</span>).password(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、简介&quot;&gt;&lt;a href=&quot;#1、简介&quot; class=&quot;headerlink&quot; title=&quot;1、简介&quot;&gt;&lt;/a&gt;1、简介&lt;/h1&gt;&lt;p&gt;在 Web 开发中，安全一直是非常重要的一个方面。安全虽然属于应用的非功能性需求，但是应该在应用开发的初期就考虑进来。如果在</summary>
      
    
    
    
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>leetcode之无重复字符的最长子串</title>
    <link href="http://example.com/2022/07/12/leetcode%E4%B9%8B%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
    <id>http://example.com/2022/07/12/leetcode%E4%B9%8B%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</id>
    <published>2022-07-12T15:11:16.000Z</published>
    <updated>2022-07-12T15:13:34.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、问题描述"><a href="#1、问题描述" class="headerlink" title="1、问题描述"></a>1、问题描述</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/sFEaUKndRziW71j.png"                      alt="image-20220712231234782"                ></p><h1 id="2、思路"><a href="#2、思路" class="headerlink" title="2、思路"></a>2、思路</h1><p>以这个字符串为例：abcabcbb，当i等于3时，也就是指向了第二个a, 此时我就需要查之前有没有出现过a, 如果出现了是在哪一个位置出现的。然后通过last[index] 查到等于1, 也就是说，如果start 依然等于0的话，那么当前窗口就有两个a了，也就是字符串重复了，所以我们需要移动当前窗口的start指针，移动到什么地方呢？移动到什么地方，窗口内就没有重复元素了呢？ 对了，就是a上一次出现的位置的下一个位置，就是1 + 1 &#x3D; 2。当start &#x3D;&#x3D; 2, 当前窗口就没有了重复元素，那么以当前字符为结尾的最长无重复子串就是bca,然后再和之前的res取最大值。然后i指向后面的位置，按照同样思路计算。</p><h1 id="3、代码"><a href="#3、代码" class="headerlink" title="3、代码"></a>3、代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">// 记录字符上一次出现的位置</span></span><br><span class="line">        <span class="type">int</span>[] last = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">128</span>; i++) &#123;</span><br><span class="line">            last[i] = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 窗口开始位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            start = Math.max(start, last[index] + <span class="number">1</span>);</span><br><span class="line">            res   = Math.max(res, i - start + <span class="number">1</span>);</span><br><span class="line">            last[index] = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、问题描述&quot;&gt;&lt;a href=&quot;#1、问题描述&quot; class=&quot;headerlink&quot; title=&quot;1、问题描述&quot;&gt;&lt;/a&gt;1、问题描述&lt;/h1&gt;&lt;p&gt;&lt;img  
                     lazyload
                 </summary>
      
    
    
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>完整项目之手把手教你如何分析开源项目</title>
    <link href="http://example.com/2022/07/12/%E5%AE%8C%E6%95%B4%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%88%86%E6%9E%90%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2022/07/12/%E5%AE%8C%E6%95%B4%E9%A1%B9%E7%9B%AE%E4%B9%8B%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%88%86%E6%9E%90%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-07-12T03:33:20.000Z</published>
    <updated>2022-07-12T03:49:26.521Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-如何分析开源项目"><a href="#1-如何分析开源项目" class="headerlink" title="1.如何分析开源项目"></a>1.如何分析开源项目</h2><blockquote><p>学习的方式：</p></blockquote><ol><li>不知道这个代码怎么来的；</li><li>这个代码跑不起来；</li><li>这个项目对我们有什么帮助，不会模块化分析；</li></ol><p><strong>任何一个开源项目，都可以让自己得到提升</strong>。</p><ul><li>代码自动生成：我们平时会写很多业务代码，用Mybatis Plus去生成的，第三方的工具包去生成。</li><li>开源项目：eladmin</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/7TKlFPE9wVqXQWO.png"                      alt="img"                ></p><blockquote><p><strong>项目简介</strong></p></blockquote><ul><li>一个基于Spring Boot 2.1.0、Spring Boot Jpa、JWT、Spring Security、Redis、Vue的前后端分离的后台管理系统。</li><li><strong>开发文档：</strong> <a class="link"   href="https://el-admin.vip/" >https://el-admin.vip<i class="fas fa-external-link-alt"></i></a></li><li><strong>体验地址：</strong> <a class="link"   href="https://el-admin.xin/" >https://el-admin.xin<i class="fas fa-external-link-alt"></i></a></li><li><strong>账号密码：</strong> admin &#x2F; 123456</li></ul><blockquote><p><strong>项目源码</strong></p></blockquote><table><thead><tr><th></th><th><strong>后端源码</strong></th><th><strong>前端源码</strong></th></tr></thead><tbody><tr><td>github</td><td><a class="link"   href="https://github.com/elunez/eladmin" >eladmin<i class="fas fa-external-link-alt"></i></a></td><td><a class="link"   href="https://github.com/elunez/eladmin-web" >eladmin-web<i class="fas fa-external-link-alt"></i></a></td></tr><tr><td>码云</td><td><a class="link"   href="https://gitee.com/elunez/eladmin" >eladmin<i class="fas fa-external-link-alt"></i></a></td><td><a class="link"   href="https://gitee.com/elunez/eladmin-web" >eladmin-web<i class="fas fa-external-link-alt"></i></a></td></tr></tbody></table><blockquote><p>观察开源项目</p></blockquote><ul><li>后端：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/s7HfIRh4DzpCTem.png"                      alt="img"                ></p><ul><li>前端：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/GadKhocCiEfHy3U.png"                      alt="img"                ></p><h2 id="2-开源项目下载"><a href="#2-开源项目下载" class="headerlink" title="2.开源项目下载"></a>2.开源项目下载</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/8SLlsrqbNvp7aW5.png"                      alt="img"                ></p><ul><li>在码云下载，因为GitHub下载太慢了，下载完毕进行解压。<ul><li>后端：<a class="link"   href="https://gitee.com/elunez/eladmin" >https://gitee.com/elunez/eladmin<i class="fas fa-external-link-alt"></i></a></li><li>前端：<a class="link"   href="https://gitee.com/elunez/eladmin-web" >https://gitee.com/elunez/eladmin-web<i class="fas fa-external-link-alt"></i></a></li></ul></li><li>解压完不要着急运行，先去观察项目：<ol><li>用了哪些技术（Springboot、Vue、Redis、MQ…）</li><li>是否有数据库</li><li>你的环境是否匹配(Maven、(npm、node.js)、redis…)</li></ol></li></ul><blockquote><p>当需要的环境匹配了，再想办法运行。这里列出项目所需的环境与相关安装教程，方便刚入门的同学：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、JDK：<span class="number">1.8</span>+ </span><br><span class="line">安装教程：https:<span class="comment">//www.runoob.com/java/java-environment-setup.html</span></span><br><span class="line"><span class="number">2</span>、Redis <span class="number">3.0</span>+</span><br><span class="line">安装教程：https:<span class="comment">//www.runoob.com/redis/redis-install.html</span></span><br><span class="line"><span class="number">3</span>、Maven <span class="number">3.0</span>+</span><br><span class="line">安装教程：https:<span class="comment">//www.runoob.com/maven/maven-setup.html</span></span><br><span class="line"><span class="number">4</span>、MYSQL <span class="number">5.5</span><span class="number">.0</span>+</span><br><span class="line">安装教程：https:<span class="comment">//www.runoob.com/mysql/mysql-install.html</span></span><br><span class="line"><span class="number">5</span>、Node v10+ (最好使用 <span class="number">12</span>，高版本可能会有问题)</span><br><span class="line">安装教程：https:<span class="comment">//www.runoob.com/nodejs/nodejs-install-setup.html</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>前端安装完 node 后，最好设置下淘宝的镜像源，不建议使用 cnpm（可能会出现奇怪的问题）。</li></ul></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> config set registry https://registry.npm.taobao.org</span><br><span class="line">配置后可通过下面方式来验证是否成功</span><br><span class="line">npm config get registry</span><br><span class="line"></span><br><span class="line">在 ~/.npmrc 加入下面内容，可以避免安装 node-sass 失败</span><br><span class="line">sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span><br><span class="line"></span><br><span class="line">.npmrc 文件位于</span><br><span class="line">win：C:\Users\[你的账户名称]\.npmrc</span><br><span class="line">linux：直接使用 vi ~/.npmrc</span><br></pre></td></tr></table></figure><hr><blockquote><p>开发准备</p></blockquote><p><strong>提示</strong>：在使用该系统前，还需要做如下准备。</p><ol><li>给 <a class="link"   href="https://blog.csdn.net/wochunyang/article/details/81736354" >idea (opens new window)<i class="fas fa-external-link-alt"></i></a>或者 <a class="link"   href="https://blog.csdn.net/magi1201/article/details/85995987" >eclipse (opens new window)<i class="fas fa-external-link-alt"></i></a>安装 lombok 插件，我们用它可以省略get，set 方法，可以使代码更简洁。</li><li>了解MapStruct，项目用到了他映射实体，如果你不熟悉可以查看：<a class="link"   href="https://www.jianshu.com/p/3f20ca1a93b0" >熟悉MapStruct(opens new window)<i class="fas fa-external-link-alt"></i></a></li><li>你需要有 Spring boot 的基础。</li><li>你还需要有 <a class="link"   href="https://cn.vuejs.org/v2/guide/" >Vue (opens new window)<i class="fas fa-external-link-alt"></i></a>的基础。</li></ol><p>注意：因为本项目是前后端分离的，所以需要前后端都启动好，才能进行访问。</p><h2 id="3-如何跑起来"><a href="#3-如何跑起来" class="headerlink" title="3.如何跑起来"></a>3.如何跑起来</h2><ol><li>安装数据库，执行SQL（先创建数据库，编码默认utf8）</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/1bMupsQBzXP4TSd.png"                      alt="img"                ></p><ol start="2"><li>前端跑起来（在文件上全选文件名然后cmd）</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="attribute">npm</span> install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务 localhost:8013</span></span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建生产环境</span></span><br><span class="line">npm run build:prod</span><br></pre></td></tr></table></figure><ol><li>后端项目导入（打开idea——import）</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/QRSdPq185gyuG3o.png"                      alt="img"                ></p><ol><li>后端项目结构（一般前后端分离项目，前端依赖于后端）</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/XW8VxnO2LqQM4ea.png"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/MeSbZONsuyXLK8l.png"                      alt="img"                ></p><ul><li>只要发现Swagger，就需要先进入Swagger-ui页面，因为前后端分离的接口全部都在这里；</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/obsuymRUnx8W4G6.png"                      alt="img"                ></p><ul><li>打开Redis</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/SqsfvxbuXgIMjGO.png"                      alt="img"                ></p><ul><li>开发环境重点需要去看端口号：server：port：8000（在总文件application.yml里面）前端也是调这个端口。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/bqQLg1s3rHVzAm9.png"                      alt="img"                ></p><ul><li>去看Redis的端口号。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/pHf7gtSQnO2ILWC.png"                      alt="img"                ></p><ul><li>看开发环境dev.yml的JDBC是否有问题。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/J8VChZuKnkywRxp.png"                      alt="img"                ></p><ul><li>启动后端项目：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/oFM2YNeIDTOzWSv.png"                      alt="img"                ></p><ul><li>进入页面：localhost:8000&#x2F;swagger-ui.html</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/HwnyOgK6azQjefc.png"                      alt="img"                ></p><ul><li>前端启动成功！<ul><li>用户名和密码：admin&#x2F;123456</li></ul></li></ul><h2 id="4-前后端分离项目的固定套路"><a href="#4-前后端分离项目的固定套路" class="headerlink" title="4.前后端分离项目的固定套路"></a>4.前后端分离项目的固定套路</h2><ol><li>从前端开始分拆，打开控制台(<code>VS-Code</code>)，点一个接口，分析一波调用关系</li><li>前后端端口调用不一致：前端：8013 后端：8000；研究怎么操作。<ol><li>封装了接口请求 ajax(前后端分离) axios(Vue) request(前端封装)</li><li>找到配置（生产配置、开发环境配置）</li></ol></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/DnOajevwR7MNfW8.png"                      alt="img"                ></p><ol><li>前后端分离项目的重点：找到接口的调用关系。</li><li>Springboot提供服务、前端调用接口数据、Vue负责渲染页面</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/sT3LaoIgwdDiYr9.png"                      alt="img"                ></p><ul><li>前端项目固定模板：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/teCJgqYZkPs3XFA.png"                      alt="img"                ></p><ul><li>每一个接口的后面都在后端有一个一一对应的地址。</li><li>通过抓取前端的请求，找到后端对应的接口。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/4uOC7qJLDfj5REo.png"                      alt="img"                ></p><ul><li>在前端文件中，找对应的接口文件：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/XwJrmhRx5s4gnpv.png"                      alt="img"                ></p><ul><li>在后端文件中，找对应的接口文件：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/P4jbT7CGlJrgZOD.png"                      alt="img"                ></p><ol><li>怎么去跟后端对接？拿到接口的地址：</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/FCrZNcWKH7fxdas.png"                      alt="img"                ></p><ul><li>去后端找：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/wdKtMuSmNlpobv9.png"                      alt="img"                ></p><blockquote><p>后端分析套路：Controller ——&gt; Service ——&gt; Dao</p></blockquote><ul><li>从前到后知道怎么分析了，但是如何渲染到视图上的呢？</li><li>看前端：搜索一个接口，查看其地址在哪里调用了。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/7MjXK8wsgcH3CA2.png"                      alt="img"                ></p><ul><li>Vue标准套路：<ul><li>template：视图层</li><li>script：js操作，接口的调用</li><li>style：页面的样式</li></ul></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/gdhuCVjG57tDJpn.png"                      alt="img"                ></p><ul><li>当我们要学习一个模块，将这个模块独立抽取出来即可，即删除对应的模块，自行修复删除部分。</li><li>例如：学习用户模块，除了了user模块，还需要删除对应的接口文件：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/a9f1QW3EpMuH5Re.png"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/sVtSXBvuF5OELyz.png"                      alt="img"                ></p><ul><li>如果你想测试这个接口成不成功，在<a class="link"   href="http://localhost:8000/swagger-ui.html" >Swagger UI<i class="fas fa-external-link-alt"></i></a>里测一下，是否可以将它查出来。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/pfVAGOUHQh7iRlC.png"                      alt="img"                ></p><h2 id="5-如何找到一个比较好的开源项目"><a href="#5-如何找到一个比较好的开源项目" class="headerlink" title="5.如何找到一个比较好的开源项目"></a>5.如何找到一个比较好的开源项目</h2><blockquote><p>比较有名的开源项目：</p></blockquote><ul><li>layui</li><li>Semantic UI</li><li>Grabient</li><li>Vue Element Admin</li></ul><blockquote><p>查找手段：</p></blockquote><ol><li>找分类（Java、python）</li><li>看收藏（star），大家都觉得不错的，就是比较好的，有学习的价值</li><li>看具有价值</li><li>根据自身的理解情况：Java、SSM、Springboot…阶段性成果。</li><li>如何学习Java：Java进阶路线七个阶段</li></ol><p>后端开发去写前端非常难看，可以使用第三方的：Ant Design Pro 或 Element。</p><blockquote><p>查找步骤：</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/93tSf2DLXmP6V5C.png"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/XxHd1ZQwcLkURz8.png"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s2.loli.net/2022/07/12/aXk3Y21GOtrScB9.png"                      alt="img"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-如何分析开源项目&quot;&gt;&lt;a href=&quot;#1-如何分析开源项目&quot; class=&quot;headerlink&quot; title=&quot;1.如何分析开源项目&quot;&gt;&lt;/a&gt;1.如何分析开源项目&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;学习的方式：&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    
    <category term="完整项目" scheme="http://example.com/tags/%E5%AE%8C%E6%95%B4%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
</feed>
